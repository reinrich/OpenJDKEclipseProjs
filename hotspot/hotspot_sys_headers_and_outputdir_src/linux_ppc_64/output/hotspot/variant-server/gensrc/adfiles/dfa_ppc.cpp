#line 1 "dfa_ppc.cpp"
//
// Copyright (c) 2011, 2023, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2012, 2022 SAP SE. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_ppc.hpp"
#include "oops/compressedOops.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/matcher.hpp"
#include "opto/narrowptrnode.hpp"
#include "opto/opcodes.hpp"
#include "opto/convertnode.hpp"
#include "utilities/powerOfTwo.hpp"

//------------------------- Source -----------------------------------------

//------------------------- Attributes -------------------------------------

// AttributeForm 
static const int op_cost = 1;

// AttributeForm 
static const int ins_cost = DEFAULT_COST;

// AttributeForm 
static const int ins_short_branch = 0;

// AttributeForm 
static const int ins_is_TrapBasedCheckNode = true;

// AttributeForm 
static const int ins_num_consts = 0;

// AttributeForm 
static const int ins_alignment = 1;

// AttributeForm 
static const int ins_cannot_rematerialize = false;

// AttributeForm 
static const int ins_should_rematerialize = false;

// AttributeForm 
static const int ins_variable_size_depending_on_alignment = false;

// AttributeForm 
static const int ins_is_nop = false;

// AttributeForm 
static const int ins_use_mach_if_fast_lock_node = false;

// AttributeForm 
static const int ins_field_const_toc_offset = 0;

// AttributeForm 
static const int ins_field_const_toc_offset_hi_node = 0;

// AttributeForm 
static const int ins_field_cbuf_insts_offset = -1;

// AttributeForm 
static const int ins_field_load_ic_hi_node = 0;

// AttributeForm 
static const int ins_field_load_ic_node = 0;

//------------------------- Macros -----------------------------------------
#define DFA_PRODUCTION(result, rule, cost)\
  assert(rule < (1 << 15), "too many rules"); _cost[ (result) ] = cost; _rule[ (result) ] = (rule << 1) | 0x1;

//------------------------- DFA --------------------------------------------
// DFA is a large switch with case statements for each ideal opcode encountered
// in any match rule in the ad file.  Each case has a series of if's to handle
// the match or fail decisions.  The matches test the cost function of that
// rule, and prune any cases which are higher cost for the same reduction.
// In order to generate the DFA we walk the table of ideal opcode/MatchList
// pairs generated by the ADLC front end to build the contents of the case
// statements (a series of if statements).


void  State::_sub_Op_RegN(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGNDST, iRegNdst_rule, c)
        DFA_PRODUCTION(IREGNSRC, iRegNsrc_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGNSRC, iRegNsrc_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_RegI(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGISRC, iRegIsrc_rule, c)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGIDST, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST)
        DFA_PRODUCTION(RSCRATCH1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RSCRATCH2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG3REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG4REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGIDST, iRegIdst_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(RSCRATCH1REGI, rscratch1RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RSCRATCH2REGI, rscratch2RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG1REGI, rarg1RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG2REGI, rarg2RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG3REGI, rarg3RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG4REGI, rarg4RegI_rule, c+1)	  // overwrites higher cost rule
    }
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegP(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGPSRC, iRegPsrc_rule, c)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c)
        DFA_PRODUCTION(INDIRECT, indirect_rule, c+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+100)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, iRegPdstNoScratch_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGPDST, iRegPdst_rule, c)
        DFA_PRODUCTION(THREADREGP, threadRegP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, rscratch1RegP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, rscratch2RegP_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, rarg1RegP_rule, c+1)
        DFA_PRODUCTION(RARG2REGP, rarg2RegP_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, rarg3RegP_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, rarg4RegP_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, inline_cache_regP_rule, c+1)
    }
}
void  State::_sub_Op_RegF(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(REGF, regF_rule, c)
    }
}
void  State::_sub_Op_RegD(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(REGD, regD_rule, c)
    }
}
void  State::_sub_Op_RegL(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(RSCRATCH2REGL, rscratch2RegL_rule, c)
        DFA_PRODUCTION(IREGLDST, iRegLdst_rule, c+1)
        DFA_PRODUCTION(RARG1REGL, rarg1RegL_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGL, rarg2RegL_rule, c+1+1)
        DFA_PRODUCTION(RARG3REGL, rarg3RegL_rule, c+1+1)
        DFA_PRODUCTION(RARG4REGL, rarg4RegL_rule, c+1+1)
        DFA_PRODUCTION(IREGLSRC, iRegLsrc_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+1+MEMORY_REF_COST)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(RSCRATCH1REGL, rscratch1RegL_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGLSRC, iRegLsrc_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)	  // overwrites higher cost rule
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGLDST, iRegLdst_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG1REGL, rarg1RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG2REGL, rarg2RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG3REGL, rarg3RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG4REGL, rarg4RegL_rule, c+1)	  // overwrites higher cost rule
    }
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_VecX(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(VECX, vecX_rule, c)
    }
}
void  State::_sub_Op_RegFlags(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(REGCTR, regCTR_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREGCR6, flagsRegCR6_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREGCR1, flagsRegCR1_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREGCR0, flagsRegCR0_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, flagsRegSrc_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREGSRC, flagsRegSrc_rule, c)	  // overwrites higher cost rule
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREG, flagsReg_rule, c)
    }
}
void  State::_sub_Op_AbsD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION(_ABSD_REGD_, _AbsD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, absD_reg_rule, c)
    }
}
void  State::_sub_Op_AbsF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION(_ABSF_REGF_, _AbsF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, absF_reg_rule, c)
    }
}
void  State::_sub_Op_AbsI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+DEFAULT_COST*3;
        DFA_PRODUCTION(IREGIDST, absI_reg_Ex_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGISRC, absI_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, absI_reg_Ex_rule, c+1)
    }
}
void  State::_sub_Op_AbsL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+DEFAULT_COST*3;
        DFA_PRODUCTION(IREGLDST, absL_reg_Ex_rule, c)
        DFA_PRODUCTION(RARG1REGL, absL_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, absL_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, absL_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, absL_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, absL_reg_Ex_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_AddD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, addD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, addF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI32) &&
        (
#line 8436 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10
#line 312 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI32]+DEFAULT_COST+1;
        DFA_PRODUCTION(IREGIDST, addI_reg_imm32_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, addI_reg_imm32_rule, c+1)
        DFA_PRODUCTION(IREGISRC, addI_reg_imm32_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, addI_reg_imm32_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, addI_reg_imm32_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, addI_reg_imm32_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, addI_reg_imm32_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, addI_reg_imm32_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIHI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIHI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, addI_reg_immhi16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, addI_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, addI_reg_immhi16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, addI_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, addI_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, addI_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, addI_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, addI_reg_immhi16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, addI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, addI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, addI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI_IREGISRC_IREGISRC];
        DFA_PRODUCTION(_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC, _AddI_iRegIsrc__AddI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC, _AddI__AddI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_ADDI_IREGISRC_IREGISRC, _AddI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC_IREGL2ISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC_IREGL2ISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC_IREGL2ISRC]+_kids[1]->_cost[IREGISRC_IREGL2ISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, addI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, addI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML34) &&
        (
#line 8526 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10
#line 575 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML34]+DEFAULT_COST+1;
        DFA_PRODUCTION(IREGLDST, addL_reg_imm34_rule, c)
        DFA_PRODUCTION(RARG1REGL, addL_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, addL_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, addL_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, addL_reg_imm34_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, addL_reg_imm34_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML32HI16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML32HI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, addL_reg_immhi16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, addL_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, addL_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, addL_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, addL_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, addL_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, addL_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL_IREGLSRC_IREGLSRC];
        DFA_PRODUCTION(_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC, _AddL_iRegLsrc__AddL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC, _AddL__AddL_iRegLsrc_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_ADDL_IREGLSRC_IREGLSRC, _AddL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AddP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMP) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IMMP]+_kids[1]->_cost[IMML];
        DFA_PRODUCTION(_ADDP_IMMP_IMML, _AddP_immP_immL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML34) &&
        (
#line 8580 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10
#line 776 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML34]+DEFAULT_COST+1;
        DFA_PRODUCTION(IREGPDST, addP_reg_imm34_rule, c)
        DFA_PRODUCTION(IREGPSRC, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(INDIRECT, addP_reg_imm34_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, addP_reg_imm34_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, addP_reg_imm34_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_imm34_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML32HI16) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML32HI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, addP_reg_immhi16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, addP_reg_immhi16_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, addP_reg_immhi16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, addP_reg_immhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_immhi16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, addP_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, addP_reg_imm16_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, addP_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, addP_reg_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, addP_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_ADDP_INDIRECTMEMORY_IREGLSRC, _AddP_indirectMemory_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODENKLASS_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) &&
        
#line 4803 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0
#line 957 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODENKLASS_IREGNSRC_]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION(INDOFFSET16NARROWALG4_KLASS, indOffset16NarrowAlg4_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION(MEMORYALG4, indOffset16NarrowAlg4_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) &&
        
#line 4789 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 969 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION(INDOFFSET16NARROWALG4, indOffset16NarrowAlg4_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION(MEMORYALG4, indOffset16NarrowAlg4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODENKLASS_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        
#line 4774 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0
#line 981 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODENKLASS_IREGNSRC_]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION(INDOFFSET16NARROW_KLASS, indOffset16Narrow_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffset16Narrow_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        
#line 4760 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 993 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION(INDOFFSET16NARROW, indOffset16Narrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffset16Narrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION(INDOFFSET16ALG4, indOffset16Alg4_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION(MEMORYALG4, indOffset16Alg4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION(INDOFFSET16, indOffset16_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffset16_rule, c)
      }
    }
}
void  State::_sub_Op_AndI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16];
        DFA_PRODUCTION(_ANDI_IREGISRC_UIMMI16, _AndI_iRegIsrc_uimmI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOWEROF2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOWEROF2];
        DFA_PRODUCTION(_ANDI_IREGISRC_IMMIPOWEROF2, _AndI_iRegIsrc_immIpowerOf2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC_IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC_IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, andcI_reg_reg_0_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION(IREGISRC, andcI_reg_reg_0_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, andcI_reg_reg_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC_IMMI_MINUS1) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC_IMMI_MINUS1]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andcI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andcI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andcI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOWEROF2) &&
        (
#line 9807 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 1075 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOWEROF2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_immIpowerOf2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_immIpowerOf2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_immIpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_immIpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMINEGPOW2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_immInegpow2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_immInegpow2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_immInegpow2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_uimm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_uimm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIHI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIHI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_immIhi16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_immIhi16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_immIhi16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGISRC_IMMI) && STATE__VALID_CHILD(_kids[1], IMMIPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGISRC_IMMI]+_kids[1]->_cost[IMMIPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, andI_urShiftI_regI_immI_immIpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGISRC_UIMMI5) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGISRC_UIMMI5]+_kids[1]->_cost[IMMINEGPOW2];
        DFA_PRODUCTION(_ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2, _AndI__RShiftI_iRegIsrc_uimmI5_immInegpow2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMINEGPOW2];
        DFA_PRODUCTION(_ANDI_IREGISRC_IMMINEGPOW2, _AndI_iRegIsrc_immInegpow2_rule, c)
    }
}
void  State::_sub_Op_AndL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGPSRC_) && STATE__VALID_CHILD(_kids[1], IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGPSRC_]+_kids[1]->_cost[IMMLNEGPOW2];
        DFA_PRODUCTION(_ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2, _AndL__CastP2X_iRegPsrc__immLnegpow2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16];
        DFA_PRODUCTION(_ANDL_IREGLSRC_UIMML16, _AndL_iRegLsrc_uimmL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_ANDL_IREGLSRC_IREGLSRC, _AndL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, zeroExtendL_regL_rule, c)
        DFA_PRODUCTION(RARG1REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, zeroExtendL_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLPOW2MINUS1];
        DFA_PRODUCTION(_ANDL_IREGLSRC_IMMLPOW2MINUS1, _AndL_iRegLsrc_immLpow2minus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, andL_reg_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLNEGPOW2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, andL_reg_immLnegpow2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, andL_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGLSRC_IMMI) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGLSRC_IMMI]+_kids[1]->_cost[IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, andL_urShiftL_regL_immI_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) &&
        (
#line 5381 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_kids[0]->_leaf->as_Load()->is_unordered()
#line 1491 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IMML_32BITS] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AryEq(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12376 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU
#line 1522 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP]+300;
        DFA_PRODUCTION(IREGIDST, array_equalsC_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION(IREGISRC, array_equalsC_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, array_equalsC_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12361 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL
#line 1540 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, array_equalsB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, array_equalsB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, array_equalsB_rule, c+1)
      }
    }
}
void  State::_sub_Op_Binary(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _NEGVD_VECX_) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_NEGVD_VECX_];
        DFA_PRODUCTION(_BINARY_VECX__NEGVD_VECX_, _Binary_vecX__NegVD_vecX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVD_VECX_) && STATE__VALID_CHILD(_kids[1], VECX) ) {
      unsigned int c = _kids[0]->_cost[_NEGVD_VECX_]+_kids[1]->_cost[VECX];
        DFA_PRODUCTION(_BINARY__NEGVD_VECX__VECX, _Binary__NegVD_vecX__vecX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _NEGVF_VECX_) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_NEGVF_VECX_];
        DFA_PRODUCTION(_BINARY_VECX__NEGVF_VECX_, _Binary_vecX__NegVF_vecX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVF_VECX_) && STATE__VALID_CHILD(_kids[1], VECX) ) {
      unsigned int c = _kids[0]->_cost[_NEGVF_VECX_]+_kids[1]->_cost[VECX];
        DFA_PRODUCTION(_BINARY__NEGVF_VECX__VECX, _Binary__NegVF_vecX__vecX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX];
        DFA_PRODUCTION(_BINARY_VECX_VECX, _Binary_vecX_vecX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_BINARY_RARG2REGP_IREGISRC, _Binary_rarg2RegP_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], RSCRATCH2REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[RSCRATCH2REGI];
        DFA_PRODUCTION(_BINARY_IREGPSRC_RSCRATCH2REGI, _Binary_iRegPsrc_rscratch2RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], UIMMI15) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[UIMMI15];
        DFA_PRODUCTION(_BINARY_IREGPSRC_UIMMI15, _Binary_iRegPsrc_uimmI15_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], RSCRATCH1REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[RSCRATCH1REGI];
        DFA_PRODUCTION(_BINARY_IREGPSRC_RSCRATCH1REGI, _Binary_iRegPsrc_rscratch1RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RSCRATCH2REGP) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[RSCRATCH2REGP]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION(_BINARY_RSCRATCH2REGP_IMMI_1, _Binary_rscratch2RegP_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_IMMP_IMML) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_IMMP_IMML]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION(_BINARY__ADDP_IMMP_IMML_IMMI_1, _Binary__AddP_immP_immL_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_BINARY_IREGPSRC_IREGISRC, _Binary_iRegPsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP];
        DFA_PRODUCTION(_BINARY_RARG1REGP_RARG2REGP, _Binary_rarg1RegP_rarg2RegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG4REGI) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[RARG4REGI];
        DFA_PRODUCTION(_BINARY_RARG2REGP_RARG4REGI, _Binary_rarg2RegP_rarg4RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG3REGI];
        DFA_PRODUCTION(_BINARY_RARG1REGP_RARG3REGI, _Binary_rarg1RegP_rarg3RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_NEGD_REGD_];
        DFA_PRODUCTION(_BINARY_REGD__NEGD_REGD_, _Binary_regD__NegD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION(_BINARY__NEGD_REGD__REGD, _Binary__NegD_regD__regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_NEGF_REGF_];
        DFA_PRODUCTION(_BINARY_REGF__NEGF_REGF_, _Binary_regF__NegF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION(_BINARY__NEGF_REGF__REGF, _Binary__NegF_regF__regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION(_BINARY_IREGPSRC_IREGPSRC, _Binary_iRegPsrc_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_BINARY_IREGLSRC_IREGLSRC, _Binary_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION(_BINARY_IREGNSRC_IREGNSRC, _Binary_iRegNsrc_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], RARG4REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[RARG4REGI];
        DFA_PRODUCTION(_BINARY_IREGISRC_RARG4REGI, _Binary_iRegIsrc_rarg4RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_BINARY_IREGISRC_IREGISRC, _Binary_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION(_BINARY_REGD_REGD, _Binary_regD_regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION(_BINARY_REGF_REGF, _Binary_regF_regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IMMP_0];
        DFA_PRODUCTION(_BINARY_IREGPDST_IMMP_0, _Binary_iRegPdst_immP_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGP_N2P];
        DFA_PRODUCTION(_BINARY_IREGPDST_IREGP_N2P, _Binary_iRegPdst_iRegP_N2P_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION(_BINARY_IREGPDST_IREGPSRC, _Binary_iRegPdst_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNDST) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNDST]+_kids[1]->_cost[IMMN_0];
        DFA_PRODUCTION(_BINARY_IREGNDST_IMMN_0, _Binary_iRegNdst_immN_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNDST) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNDST]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION(_BINARY_IREGNDST_IREGNSRC, _Binary_iRegNdst_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST]+_kids[1]->_cost[IMML16];
        DFA_PRODUCTION(_BINARY_IREGLDST_IMML16, _Binary_iRegLdst_immL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_BINARY_IREGLDST_IREGLSRC, _Binary_iRegLdst_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST]+_kids[1]->_cost[IMMI16];
        DFA_PRODUCTION(_BINARY_IREGIDST_IMMI16, _Binary_iRegIdst_immI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_BINARY_IREGIDST_IREGISRC, _Binary_iRegIdst_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC];
        DFA_PRODUCTION(_BINARY_CMPOP_FLAGSREGSRC, _Binary_cmpOp_flagsRegSrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION(_BINARY_IREGLSRC_IREGNSRC, _Binary_iRegLsrc_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION(_BINARY_IREGLSRC_IREGPSRC, _Binary_iRegLsrc_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGPDST];
        DFA_PRODUCTION(_BINARY_IREGLSRC_IREGPDST, _Binary_iRegLsrc_iRegPdst_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[FLAGSREGSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION(_BINARY_FLAGSREGSRC_IREGPSRC, _Binary_flagsRegSrc_iRegPsrc_rule, c)
    }
}
void  State::_sub_Op_Bool(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION(CMPOP, cmpOp_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION(_REVERSEBYTESI_IREGISRC_, _ReverseBytesI_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_INDIRECT_]+2 * MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadI_reversed_acquire_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadI_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadI_reversed_acquire_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadI_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadI_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadI_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadI_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadI_reversed_acquire_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_INDIRECT_) &&
        (
#line 13253 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->in(1)->as_Load()->is_unordered() || followed_by_acquire(n->in(1))
#line 1765 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_INDIRECT_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadI_reversed_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadI_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadI_reversed_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadI_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadI_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadI_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadI_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadI_reversed_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13106 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseByteReverseInstructions
#line 1803 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_int_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_int_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_int_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_int_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_int_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_int_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_int_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_int_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13088 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseVectorByteReverseInstructionsPPC64
#line 1841 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_int_vec_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_int_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_int_vec_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_int_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_int_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_int_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_int_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_int_vec_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13063 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseByteReverseInstructions
#line 1879 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+7*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_int_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_int_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_int_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReverseBytesL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC];
        DFA_PRODUCTION(_REVERSEBYTESL_IREGLSRC_, _ReverseBytesL_iRegLsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_INDIRECT_) &&
        (
#line 13291 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_ldbrx()
#line 1923 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_INDIRECT_]+2 * MEMORY_REF_COST;
        DFA_PRODUCTION(IREGLDST, loadL_reversed_acquire_rule, c)
        DFA_PRODUCTION(RARG1REGL, loadL_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, loadL_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, loadL_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, loadL_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, loadL_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_INDIRECT_) &&
        (
#line 13279 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_ldbrx() && (n->in(1)->as_Load()->is_unordered() || followed_by_acquire(n->in(1)))
#line 1938 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_INDIRECT_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadL_reversed_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadL_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadL_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadL_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadL_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadL_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13178 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseByteReverseInstructions
#line 1967 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, bytes_reverse_long_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, bytes_reverse_long_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, bytes_reverse_long_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, bytes_reverse_long_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, bytes_reverse_long_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, bytes_reverse_long_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13160 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseVectorByteReverseInstructionsPPC64
#line 1996 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, bytes_reverse_long_vec_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, bytes_reverse_long_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, bytes_reverse_long_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, bytes_reverse_long_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, bytes_reverse_long_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, bytes_reverse_long_vec_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13120 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseByteReverseInstructions
#line 2025 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+15*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, bytes_reverse_long_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReverseBytesUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION(_REVERSEBYTESUS_IREGISRC_, _ReverseBytesUS_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_INDIRECT_]+2 * MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadUS_reversed_acquire_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadUS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadUS_reversed_acquire_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadUS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadUS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadUS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadUS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadUS_reversed_acquire_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_INDIRECT_) &&
        (
#line 13306 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->in(1)->as_Load()->is_unordered() || followed_by_acquire(n->in(1))
#line 2073 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_INDIRECT_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadUS_reversed_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadUS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadUS_reversed_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadUS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadUS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadUS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadUS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadUS_reversed_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13206 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseByteReverseInstructions
#line 2111 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_ushort_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_ushort_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_ushort_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_ushort_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_ushort_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_ushort_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_ushort_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_ushort_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13192 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseByteReverseInstructions
#line 2149 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_ushort_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_ushort_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReverseBytesS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION(_REVERSEBYTESS_IREGISRC_, _ReverseBytesS_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_INDIRECT_]+2 * MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, loadS_reversed_acquire_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadS_reversed_acquire_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadS_reversed_acquire_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadS_reversed_acquire_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_INDIRECT_) &&
        (
#line 13332 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->in(1)->as_Load()->is_unordered() || followed_by_acquire(n->in(1))
#line 2206 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_INDIRECT_]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadS_reversed_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadS_reversed_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadS_reversed_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadS_reversed_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13236 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseByteReverseInstructions
#line 2244 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_short_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_short_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_short_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_short_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_short_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_short_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_short_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_short_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13220 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseByteReverseInstructions
#line 2282 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+3*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, bytes_reverse_short_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, bytes_reverse_short_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, bytes_reverse_short_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CacheWB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+100;
        DFA_PRODUCTION(UNIVERSE, cacheWB_rule, c)
    }
}
void  State::_sub_Op_CacheWBPreSync(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, cacheWBPreSync_rule, c)
    }
}
void  State::_sub_Op_CacheWBPostSync(const Node *n){
    {
      unsigned int c = 100;
        DFA_PRODUCTION(UNIVERSE, cacheWBPostSync_rule, c)
    }
}
void  State::_sub_Op_CallDynamicJava(const Node *n){
    if(         (
#line 14447 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseInlineCaches
#line 2339 "dfa_ppc.cpp"
) ) {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallDynamicJavaDirect_rule, c)
    }
    if(         (
#line 14432 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseInlineCaches
#line 2347 "dfa_ppc.cpp"
) ) {
      unsigned int c = CALL_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, CallDynamicJavaDirectSched_Ex_rule, c)
      }
    }
    if(         (
#line 14410 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 2357 "dfa_ppc.cpp"
) ) {
      unsigned int c = DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, CallDynamicJavaDirectSched_rule, c)
      }
    }
}
void  State::_sub_Op_CallLeaf(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafDirect_Ex_rule, c)
    }
    if(         (
#line 14492 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 2373 "dfa_ppc.cpp"
) ) {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafDirect_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_CallLeafNoFP(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafNoFPDirect_Ex_rule, c)
    }
}
void  State::_sub_Op_CallRuntime(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallRuntimeDirect_rule, c)
    }
}
void  State::_sub_Op_CallStaticJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallStaticJavaDirect_rule, c)
    }
}
void  State::_sub_Op_CastDD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, castDD_rule, c)
    }
}
void  State::_sub_Op_CastFF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, castFF_rule, c)
    }
}
void  State::_sub_Op_CastII(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, castII_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, castII_rule, c+1)
        DFA_PRODUCTION(IREGISRC, castII_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, castII_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, castII_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, castII_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, castII_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, castII_rule, c+1)
    }
}
void  State::_sub_Op_CastLL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, castLL_rule, c)
        DFA_PRODUCTION(RARG1REGL, castLL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, castLL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, castLL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, castLL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, castLL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_CastVV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, castVV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, castVV8_rule, c)
        DFA_PRODUCTION(RARG1REGL, castVV8_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, castVV8_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, castVV8_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, castVV8_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, castVV8_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_CastX2P(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, align_addr_rule, c)
        DFA_PRODUCTION(IREGPSRC, align_addr_rule, c+1)
        DFA_PRODUCTION(INDIRECT, align_addr_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, align_addr_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, align_addr_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, align_addr_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, align_addr_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, castX2P_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, castX2P_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, castX2P_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, castX2P_rule, c+1)
      }
    }
}
void  State::_sub_Op_CastP2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC];
        DFA_PRODUCTION(_CASTP2X_IREGPSRC_, _CastP2X_iRegPsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, castP2X_rule, c)
        DFA_PRODUCTION(RARG1REGL, castP2X_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, castP2X_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, castP2X_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, castP2X_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, castP2X_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P];
        DFA_PRODUCTION(_CASTP2X_IREGP_N2P_, _CastP2X_iRegP_N2P__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_];
        DFA_PRODUCTION(_CASTP2X__DECODEN_IREGNSRC__, _CastP2X__DecodeN_iRegNsrc___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADP_MEMORYALG4_) &&
        (
#line 5578 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() && _kids[0]->_leaf->as_Load()->barrier_data() == 0
#line 2551 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADP_MEMORYALG4_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadP2X_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, castPP_rule, c)
        DFA_PRODUCTION(IREGPSRC, castPP_rule, c+1)
        DFA_PRODUCTION(INDIRECT, castPP_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, castPP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, castPP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, castPP_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, castPP_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, castPP_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, castPP_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, castPP_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, castPP_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, castPP_rule, c+1)
    }
}
void  State::_sub_Op_CheckCastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGPSRC, checkCastPP_rule, c+1)
        DFA_PRODUCTION(INDIRECT, checkCastPP_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, checkCastPP_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, checkCastPP_rule, c+1)
    }
}
void  State::_sub_Op_ClearArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGL) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGL]+_kids[1]->_cost[RARG2REGP]+4 * MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, inlineCallClearArray_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[IMML]+_kids[1]->_cost[RARG2REGP]+3 * MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, inlineCallClearArrayLarge_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMLMAX30) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[IMMLMAX30]+_kids[1]->_cost[RARG2REGP]+2 * MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, inlineCallClearArrayShort_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_REGD_REGD]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(REGD, cmovD_reg_rule, c)
    }
}
void  State::_sub_Op_CMoveF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_REGF_REGF]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(REGF, cmovF_reg_rule, c)
    }
}
void  State::_sub_Op_CMoveI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IMMI16]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(IREGIDST, cmovI_imm_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmovI_imm_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmovI_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IREGISRC) &&
        (
#line 7267 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2667 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IREGISRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, cmovI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, cmovI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, cmovI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IREGISRC) &&
        (
#line 7250 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2705 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, cmovI_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, cmovI_reg_isel_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, cmovI_reg_isel_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IMML16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IMML16]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(IREGLDST, cmovL_imm_rule, c)
        DFA_PRODUCTION(RARG1REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, cmovL_imm_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IREGLSRC) &&
        (
#line 7312 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2755 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IREGLSRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, cmovL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IREGLSRC) &&
        (
#line 7295 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2784 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, cmovL_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CMoveP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IMMP_0]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(IREGPDST, cmovP_imm_rule, c)
        DFA_PRODUCTION(IREGPSRC, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(INDIRECT, cmovP_imm_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, cmovP_imm_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IREGP_N2P) &&
        (
#line 7403 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2834 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IREGP_N2P]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, cmovP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, cmovP_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, cmovP_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IREGPSRC) &&
        (
#line 7386 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2890 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, cmovP_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, cmovP_reg_isel_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, cmovP_reg_isel_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_reg_isel_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IMMN_0]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(IREGNDST, cmovN_imm_rule, c)
        DFA_PRODUCTION(IREGNSRC, cmovN_imm_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IREGNSRC) &&
        (
#line 7358 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2954 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IREGNSRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, cmovN_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IREGNSRC) &&
        (
#line 7340 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2971 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, cmovN_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, cmovN_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IMMN_0]+2;
        DFA_PRODUCTION(FLAGSREG, cmpN_reg_imm0_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpN_reg_imm0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IREGNSRC]+2;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpN_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpN_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IMMN_0];
        DFA_PRODUCTION(_CMPN_IREGNSRC_IMMN_0, _CmpN_iRegNsrc_immN_0_rule, c)
    }
}
void  State::_sub_Op_CmpD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(FLAGSREG, cmpD_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpD_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) &&
        (
#line 11789 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 3015 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpDUnordered_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpDUnordered_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpD3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST * 6;
        DFA_PRODUCTION(IREGIDST, cmpD3_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmpD3_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmpD3_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmpD3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmpD3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmpD3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmpD3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmpD3_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION(FLAGSREG, cmpF_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpF_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) &&
        (
#line 11673 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 3051 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpFUnordered_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpFUnordered_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpF3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST * 6;
        DFA_PRODUCTION(IREGIDST, cmpF3_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmpF3_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmpF3_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmpF3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmpF3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmpF3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmpF3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmpF3_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_UIMMI16) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_UIMMI16]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREGCR0, testI_reg_imm_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, testI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpI_reg_imm16_rule, c)
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_UIMML16) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_UIMML16]+_kids[1]->_cost[IMML_0] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREGCR0, testL_reg_imm_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, testL_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IMML_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGCR0) || _cost[FLAGSREGCR0] > c) {
        DFA_PRODUCTION(FLAGSREGCR0, testL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, testL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpL_reg_imm16_rule, c)
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpL_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST * 5;
        DFA_PRODUCTION(IREGIDST, cmpL3_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmpL3_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmpL3_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpLTMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, cmpLTMask_reg_immI0_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmpLTMask_reg_immI0_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmpLTMask_reg_immI0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*4;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, cmpLTMask_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, cmpLTMask_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        (
#line 11657 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 3200 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpP_reg_imm16_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpP_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP_0OR1) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP_0OR1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpP_reg_null_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpP_reg_null_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpP_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP_0];
        DFA_PRODUCTION(_CMPP_IREGP_N2P_IMMP_0, _CmpP_iRegP_N2P_immP_0_rule, c)
    }
}
void  State::_sub_Op_CmpU(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, compU_reg_uimm16_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, compU_reg_uimm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, compU_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, compU_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_CMPU_IREGISRC_IREGISRC, _CmpU_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI15) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI15];
        DFA_PRODUCTION(_CMPU_IREGISRC_UIMMI15, _CmpU_iRegIsrc_uimmI15_rule, c)
    }
}
void  State::_sub_Op_CmpUL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpUL_reg_imm16_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpUL_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpUL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpUL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7497 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 3274 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapB4_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapB4_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7478 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 3292 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7535 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 3332 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapS4_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapS4_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7516 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 3350 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapI_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapI_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapL_regP_regL_regL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapL_regP_regL_regL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 191 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && (((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*) n)->order() == MemNode::seqcst)
#line 3421 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, zCompareAndSwapP_acq_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, zCompareAndSwapP_acq_rule, c+1)
        DFA_PRODUCTION(IREGISRC, zCompareAndSwapP_acq_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, zCompareAndSwapP_acq_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, zCompareAndSwapP_acq_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, zCompareAndSwapP_acq_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, zCompareAndSwapP_acq_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, zCompareAndSwapP_acq_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 173 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && (((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*) n)->order() != MemNode::seqcst)
#line 3440 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, zCompareAndSwapP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, zCompareAndSwapP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, zCompareAndSwapP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, zCompareAndSwapP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, zCompareAndSwapP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, zCompareAndSwapP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, zCompareAndSwapP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 7609 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadStore()->barrier_data() == 0
#line 3478 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapP_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapP_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapN_regP_regN_regN_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapN_regP_regN_regN_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
    }
}
void  State::_sub_Op_WeakCompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7671 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 3533 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7657 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 3551 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapB_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7643 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 3589 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapB4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapB4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7629 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3627 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7727 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 3667 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7713 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 3685 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapS_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7699 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 3723 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapS4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapS4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7685 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3761 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7755 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3801 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapI_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7741 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3819 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapI_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapI_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 7816 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3859 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapL_acq_regP_regL_regL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 7801 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3877 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapL_regP_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapL_regP_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 227 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && (((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*) n)->order() == MemNode::seqcst)
#line 3918 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, zCompareAndSwapPWeak_acq_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, zCompareAndSwapPWeak_acq_rule, c+1)
        DFA_PRODUCTION(IREGISRC, zCompareAndSwapPWeak_acq_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, zCompareAndSwapPWeak_acq_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, zCompareAndSwapPWeak_acq_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, zCompareAndSwapPWeak_acq_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, zCompareAndSwapPWeak_acq_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, zCompareAndSwapPWeak_acq_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 209 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && ((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*) n)->order() != MemNode::seqcst
#line 3937 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, zCompareAndSwapPWeak_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, zCompareAndSwapPWeak_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, zCompareAndSwapPWeak_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, zCompareAndSwapPWeak_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, zCompareAndSwapPWeak_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, zCompareAndSwapPWeak_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, zCompareAndSwapPWeak_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, zCompareAndSwapPWeak_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 7846 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && n->as_LoadStore()->barrier_data() == 0
#line 3975 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapP_acq_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 7832 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst) && n->as_LoadStore()->barrier_data() == 0
#line 4013 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapP_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapP_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 7785 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 4053 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapN_acq_regP_regN_regN_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 7771 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 4071 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, weakCompareAndSwapN_regP_regN_regN_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, weakCompareAndSwapN_regP_regN_regN_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7912 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 4111 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndExchangeB4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7892 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 4129 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeB_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeB_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7878 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 4167 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeB4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeB4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7864 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 4205 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7980 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 4245 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndExchangeS4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7960 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 4263 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeS_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeS_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7946 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 4301 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeS4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeS4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7932 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 4339 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8014 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 4379 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndExchangeI_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndExchangeI_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8000 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 4397 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndExchangeI_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndExchangeI_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8082 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 4437 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, compareAndExchangeL_acq_regP_regL_regL_rule, c)
        DFA_PRODUCTION(RARG1REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8068 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 4452 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, compareAndExchangeL_regP_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 265 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && (
              ((CompareAndSwapNode*)n)->order() == MemNode::acquire
              || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
            )
#line 4487 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, zCompareAndExchangeP_acq_rule, c)
        DFA_PRODUCTION(IREGPSRC, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(INDIRECT, zCompareAndExchangeP_acq_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, zCompareAndExchangeP_acq_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, zCompareAndExchangeP_acq_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zCompareAndExchangeP_acq_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 245 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_LoadStore()->barrier_data() == ZLoadBarrierStrong)
            && (
              ((CompareAndSwapNode*)n)->order() != MemNode::acquire
              && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
            )
#line 4515 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, zCompareAndExchangeP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, zCompareAndExchangeP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, zCompareAndExchangeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, zCompareAndExchangeP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8117 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst)
            && n->as_LoadStore()->barrier_data() == 0
#line 4572 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, compareAndExchangeP_acq_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangeP_acq_regP_regP_regP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, compareAndExchangeP_acq_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8102 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst)
            && n->as_LoadStore()->barrier_data() == 0
#line 4629 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, compareAndExchangeP_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangeP_regP_regP_regP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, compareAndExchangeP_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8048 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 4687 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGNDST, compareAndExchangeN_acq_regP_regN_regN_rule, c)
        DFA_PRODUCTION(IREGNSRC, compareAndExchangeN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8034 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 4698 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, compareAndExchangeN_regP_regN_regN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, compareAndExchangeN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8157 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4717 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndAddB4_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndAddB4_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndAddB4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8140 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4735 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, getAndAddB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, getAndAddB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, getAndAddB_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8191 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4775 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndAddS4_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndAddS4_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndAddS4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8174 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4793 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, getAndAddS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, getAndAddS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, getAndAddS_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndAddI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndAddI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndAddI_rule, c+1)
    }
}
void  State::_sub_Op_GetAndAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, getAndAddL_rule, c)
        DFA_PRODUCTION(RARG1REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, getAndAddL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_GetAndSetB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8257 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4860 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndSetB4_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndSetB4_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndSetB4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8240 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4878 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, getAndSetB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, getAndSetB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, getAndSetB_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndSetS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8291 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4918 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndSetS4_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndSetS4_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndSetS4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8274 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4936 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, getAndSetS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, getAndSetS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, getAndSetS_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndSetI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, getAndSetI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, getAndSetI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, getAndSetI_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, getAndSetL_rule, c)
        DFA_PRODUCTION(RARG1REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, getAndSetL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_GetAndSetP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPSRC) &&
        (
#line 284 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
UseZGC && n->as_LoadStore()->barrier_data() != 0
#line 5003 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, zGetAndSetP_rule, c)
        DFA_PRODUCTION(IREGPSRC, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(INDIRECT, zGetAndSetP_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, zGetAndSetP_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, zGetAndSetP_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zGetAndSetP_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPSRC) &&
        (
#line 8340 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadStore()->barrier_data() == 0
#line 5027 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, getAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, getAndSetP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, getAndSetP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, getAndSetP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, getAndSetP_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndSetN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGNDST, getAndSetN_rule, c)
        DFA_PRODUCTION(IREGNSRC, getAndSetN_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
}
void  State::_sub_Op_ConN(const Node *n){
    if(         
#line 4106 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->get_narrowcon() == 0
#line 5092 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMN_0, immN_0_rule, c)
        DFA_PRODUCTION(IREGNDST, loadConN0_rule, c+DEFAULT_COST)
        DFA_PRODUCTION(IREGNSRC, loadConN0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST+1)
    }
    {
      unsigned int c = 10;
        DFA_PRODUCTION(IMMN, immN_rule, c)
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION(IREGNDST, loadConN_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(IREGNSRC, loadConN_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGNDST KNOWN_VALID || */ _cost[IREGNDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGNDST, loadConN_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* IREGNSRC KNOWN_VALID || */ _cost[IREGNSRC] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGNSRC, loadConN_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGN_P2N KNOWN_VALID || */ _cost[IREGN_P2N] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConNKlass(const Node *n){
    if(         
#line 4127 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 5127 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMNKLASS_NM, immNKlass_NM_rule, c)
        DFA_PRODUCTION(IREGNDST, loadConNKlass_hi_rule, c+DEFAULT_COST)
        DFA_PRODUCTION(IREGNSRC, loadConNKlass_hi_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST+1)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMNKLASS, immNKlass_rule, c)
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION(IREGNDST, loadConNKlass_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(IREGNSRC, loadConNKlass_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGNDST KNOWN_VALID || */ _cost[IREGNDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGNDST, loadConNKlass_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* IREGNSRC KNOWN_VALID || */ _cost[IREGNSRC] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGNSRC, loadConNKlass_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGN_P2N KNOWN_VALID || */ _cost[IREGN_P2N] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConD(const Node *n){
    if(         
#line 4319 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
jlong_cast(n->getd()) == 0
#line 5162 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMD_0, immD_0_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION(IMMD, immD_rule, c)
        DFA_PRODUCTION(REGD, loadConD_Ex_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(REGD, loadConD_Ex_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_ConF(const Node *n){
    if(         
#line 4301 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
jint_cast(n->getf()) == 0
#line 5178 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMF_0, immF_0_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION(IMMF, immF_rule, c)
        DFA_PRODUCTION(REGF, loadConF_Ex_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(REGF, loadConF_Ex_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_ConI(const Node *n){
    int _n_get_int__ = n->get_int();
    if(         
#line 4087 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 24
#line 5195 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_24, immI_24_rule, c)
    }
    if(         
#line 4078 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 16
#line 5203 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_16, immI_16_rule, c)
    }
    if(         
#line 4069 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == -1
#line 5211 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_MINUS1, immI_minus1_rule, c)
    }
    if(         
#line 4060 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 1
#line 5219 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_1, immI_1_rule, c)
    }
    if(         
#line 4051 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 0
#line 5227 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_0, immI_0_rule, c)
    }
    if(         
#line 4042 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 16)
#line 5235 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMMI16, uimmI16_rule, c)
    }
    if(         
#line 4033 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 15)
#line 5243 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMMI15, uimmI15_rule, c)
    }
    if(         
#line 4024 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 6) && _n_get_int__ >= 32
#line 5251 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMMI6_GE32, uimmI6_ge32_rule, c)
    }
    if(         
#line 4015 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 6)
#line 5259 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMMI6, uimmI6_rule, c)
    }
    if(         
#line 4006 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 5)
#line 5267 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMMI5, uimmI5_rule, c)
    }
    if(         
#line 3997 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2((juint)(_n_get_int__))
#line 5275 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIPOWEROF2, immIpowerOf2_rule, c)
    }
    if(         
#line 3989 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2((juint)(_n_get_int__) + 1u)
#line 5283 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIPOW2MINUS1, immIpow2minus1_rule, c)
    }
    if(         
#line 3981 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2(-(juint)(_n_get_int__))
#line 5291 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMINEGPOW2, immInegpow2_rule, c)
    }
    if(         
#line 3973 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10
#line 5299 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI32, immI32_rule, c)
        DFA_PRODUCTION(IREGIDST, loadConI32_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RSCRATCH1REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(IREGISRC, loadConI32_rule, c+DEFAULT_COST+1+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+1+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST+1+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(RARG1REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(RARG2REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(RARG3REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(RARG4REGI, loadConI32_rule, c+DEFAULT_COST+1+1)
    }
    if(         
#line 3964 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((_n_get_int__ & 0xffff0000) != 0) && ((_n_get_int__ & 0xffff) == 0)
#line 5317 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIHI16, immIhi16_rule, c)
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION(IREGIDST, loadConIhi16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGISRC, loadConIhi16_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG1REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG2REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG3REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG4REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
      }
    }
    if(         
#line 3955 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_int__, 16)
#line 5355 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI16, immI16_rule, c)
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION(IREGIDST, loadConI16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGISRC, loadConI16_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG1REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG2REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG3REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG4REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
    }
    if(         
#line 3946 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_int__, 8)
#line 5393 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI8, immI8_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION(IMMI, immI_rule, c)
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION(IREGIDST, loadConI_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+DEFAULT_COST*2+1+1) {
        DFA_PRODUCTION(IREGISRC, loadConI_Ex_rule, c+DEFAULT_COST*2+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST*2+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST*2+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+DEFAULT_COST*2+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST*2+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG1REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG2REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG3REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG4REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGIDST KNOWN_VALID || */ _cost[IREGIDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGIDST, loadConI_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* RSCRATCH1REGI KNOWN_VALID || */ _cost[RSCRATCH1REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RSCRATCH1REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGISRC KNOWN_VALID || */ _cost[IREGISRC] > DEFAULT_COST*2+1+1) {
     DFA_PRODUCTION(IREGISRC, loadConI_Ex_rule, DEFAULT_COST*2+1+1)
   }
   if ( /* STACKSLOTI KNOWN_VALID || */ _cost[STACKSLOTI] > DEFAULT_COST*2+1+1 + MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, DEFAULT_COST*2+1+1 + MEMORY_REF_COST)
   }
   if ( /* IREGISRC_IREGL2ISRC KNOWN_VALID || */ _cost[IREGISRC_IREGL2ISRC] > DEFAULT_COST*2+1+1) {
     DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, DEFAULT_COST*2+1+1)
   }
   if ( /* RSCRATCH2REGI KNOWN_VALID || */ _cost[RSCRATCH2REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RSCRATCH2REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG1REGI KNOWN_VALID || */ _cost[RARG1REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG1REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG2REGI KNOWN_VALID || */ _cost[RARG2REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG2REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG3REGI KNOWN_VALID || */ _cost[RARG3REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG3REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG4REGI KNOWN_VALID || */ _cost[RARG4REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG4REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConL(const Node *n){
    jlong _n_get_long__ = n->get_long();
    if(         
#line 4284 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_long__, 16)
#line 5468 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UIMML16, uimmL16_rule, c)
    }
    if(         
#line 4275 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 5476 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_32BITS, immL_32bits_rule, c)
    }
    if(         
#line 4266 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == -1L
#line 5484 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_MINUS1, immL_minus1_rule, c)
    }
    if(         
#line 4257 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == 0L
#line 5492 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_0, immL_0_rule, c)
    }
    if(         
#line 4248 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2((julong)(_n_get_long__) + 1ull)
#line 5500 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLPOW2MINUS1, immLpow2minus1_rule, c)
    }
    if(         
#line 4240 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2(-(julong)(_n_get_long__))
#line 5508 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLNEGPOW2, immLnegpow2_rule, c)
    }
    if(         
#line 4232 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(_n_get_long__ & 0xffff000000000000L) != 0L && (_n_get_long__ & 0x0000ffffffffffffL) == 0L
#line 5516 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLHIGHEST16, immLhighest16_rule, c)
        DFA_PRODUCTION(IREGLDST, loadConLhighest16_Ex_rule, c+DEFAULT_COST)
        DFA_PRODUCTION(RARG1REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG2REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG3REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG4REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(IREGLSRC, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
    }
    if(         
#line 4223 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10 && Assembler::is_simm(_n_get_long__, 34)
#line 5531 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML34, immL34_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(IREGLDST, loadConL34_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(RARG1REGL, loadConL34_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(RARG2REGL, loadConL34_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(RARG3REGL, loadConL34_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(RARG4REGL, loadConL34_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGLSRC, loadConL34_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4214 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 32)
#line 5560 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML32, immL32_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION(IREGLDST, loadConL32_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG1REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG2REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG3REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(RARG4REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION(IREGLSRC, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST*2+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST*2+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4205 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 32) && ((_n_get_long__ & 0xffffL) == 0L)
#line 5589 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML32HI16, immL32hi16_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION(IREGLDST, loadConL32hi16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG1REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG2REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG3REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG4REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(IREGLSRC, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4196 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 16) && ((_n_get_long__ & 0x3) == 0)
#line 5618 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML16ALG4, immL16Alg4_rule, c)
    }
    if(         
#line 4187 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 16)
#line 5626 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML16, immL16_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION(IREGLDST, loadConL16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG1REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG2REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG3REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG4REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(IREGLSRC, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4178 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(_n_get_long__ <= 30)
#line 5655 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLMAX30, immLmax30_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION(IMML, immL_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION(IREGLDST, loadConL_Ex_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG1REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG2REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG3REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG4REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(IREGLSRC, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST+1+MEMORY_REF_COST)
      }
    }
   if ( /* IREGLDST KNOWN_VALID || */ _cost[IREGLDST] > MEMORY_REF_COST) {
     DFA_PRODUCTION(IREGLDST, loadConL_Ex_rule, MEMORY_REF_COST)
   }
   if ( /* RARG1REGL KNOWN_VALID || */ _cost[RARG1REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG1REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG2REGL KNOWN_VALID || */ _cost[RARG2REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG2REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG3REGL KNOWN_VALID || */ _cost[RARG3REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG3REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG4REGL KNOWN_VALID || */ _cost[RARG4REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG4REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* IREGLSRC KNOWN_VALID || */ _cost[IREGLSRC] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(IREGLSRC, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* STACKSLOTL KNOWN_VALID || */ _cost[STACKSLOTL] > MEMORY_REF_COST+1+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST+1+MEMORY_REF_COST)
   }
}
void  State::_sub_Op_ConP(const Node *n){
    if(         
#line 4163 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->get_ptr() == 0) || (n->get_ptr() == 1)
#line 5711 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP_0OR1, immP_0or1_rule, c)
        DFA_PRODUCTION(IREGPDST, loadConP0or1_rule, c+DEFAULT_COST)
        DFA_PRODUCTION(IREGPSRC, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(INDIRECT, loadConP0or1_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(THREADREGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RSCRATCH1REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RSCRATCH2REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG1REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadConP0or1_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION(RARG2REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG3REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(RARG4REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
    }
    if(         
#line 4154 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->get_ptr() == 0
#line 5735 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP_0, immP_0_rule, c)
    }
    if(         
#line 4146 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 5743 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP_NM, immP_NM_rule, c)
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION(IREGPDST, loadConP_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(IREGPSRC, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION(INDIRECT, loadConP_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(THREADREGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG1REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadConP_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG2REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG3REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(RARG4REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP, immP_rule, c)
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION(IREGPDST, loadConP_Ex_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(IREGPSRC, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION(INDIRECT, loadConP_Ex_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(THREADREGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG1REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+MEMORY_REF_COST+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadConP_Ex_rule, c+MEMORY_REF_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG2REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG3REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(RARG4REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
    }
}
void  State::_sub_Op_Conv2B(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P];
        DFA_PRODUCTION(_CONV2B_IREGP_N2P_, _Conv2B_iRegP_N2P__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) &&
        (
#line 10529 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 5858 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, convP2Bool_reg__cmove_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION(IREGISRC, convP2Bool_reg__cmove_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, convP2Bool_reg__cmove_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) &&
        (
#line 10512 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 5876 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convP2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convP2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_IMMIPOWEROF2) &&
        (
#line 10487 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 5914 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_IMMIPOWEROF2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convI2Bool_andI_reg_immIpowerOf2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convI2Bool_andI_reg_immIpowerOf2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION(_CONV2B_IREGISRC_, _Conv2B_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 10441 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 5956 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convI2Bool_reg__cmove_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convI2Bool_reg__cmove_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convI2Bool_reg__cmove_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 10424 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 5994 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convI2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convI2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, convD2F_reg_rule, c)
    }
}
void  State::_sub_Op_ConvD2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 10828 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6040 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, convD2I_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGISRC, convD2I_reg_mffprd_ExEx_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 10811 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 6058 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convD2I_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convD2I_reg_ExEx_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convD2I_reg_ExEx_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11131 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6098 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, convD2L_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION(RARG1REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11114 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 6113 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, convD2L_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvF2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, convF2D_reg_rule, c)
    }
}
void  State::_sub_Op_ConvF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 10873 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6150 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, convF2I_regF_mffprd_ExEx_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGISRC, convF2I_regF_mffprd_ExEx_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 10856 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 6168 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convF2I_regF_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convF2I_regF_ExEx_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convF2I_regF_ExEx_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvF2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11086 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6208 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, convF2L_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION(RARG1REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11069 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 6223 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, convF2L_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvI2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11285 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6254 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, convI2D_reg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11268 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 6263 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, convI2D_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11222 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && VM_Version::has_mtfprd()
#line 6276 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, convI2F_ireg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11205 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && !VM_Version::has_mtfprd()
#line 6285 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, convI2F_ireg_fcfids_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11173 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_fcfids()
#line 6296 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, convI2F_ireg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvI2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, convI2L_reg_rule, c)
        DFA_PRODUCTION(RARG1REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, convI2L_reg_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVL2I_IREGLSRC_) ) {
      unsigned int c = _kids[0]->_cost[_CONVL2I_IREGLSRC_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, sxtI_L2L_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION(_CONVI2L_IREGISRC_, _ConvI2L_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYALG4_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYALG4_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadI2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYALG4_) &&
        (
#line 5393 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered()
#line 6371 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYALG4_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_];
        DFA_PRODUCTION(_CONVI2L__LOADI_MEMORY__, _ConvI2L__LoadI_memory___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadUS2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY_) &&
        (
#line 5329 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() || followed_by_acquire(_kids[0]->_leaf)
#line 6428 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadUB2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY_) &&
        (
#line 5247 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() || followed_by_acquire(_kids[0]->_leaf)
#line 6481 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11310 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 6512 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, convL2D_reg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL]+DEFAULT_COST + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, convL2D_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvL2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11250 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && VM_Version::has_mtfprd()
#line 6529 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, convL2F_ireg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11235 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && !VM_Version::has_mtfprd()
#line 6538 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, convL2F_ireg_fcfids_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvL2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, convL2I_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, convL2I_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, convL2I_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ORL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, orI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, orI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, orI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convL2I_andL_reg_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convL2I_andL_reg_immLpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, sxtI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, sxtI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, sxtI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGLSRC_IMMI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGLSRC_IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convL2I_urShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convL2I_urShiftL_regL_immI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGLSRC_IMMI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGLSRC_IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convL2I_arShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convL2I_arShiftL_regL_immI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IMML_0_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IMML_0_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, negI_con0_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, negI_con0_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, negI_con0_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, subI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, subI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, subI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, addI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, addI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, addI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X__DECODEN_IREGNSRC__) &&
        (
#line 6944 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::shift() == 0
#line 6861 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X__DECODEN_IREGNSRC__] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, decodeN2I_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, decodeN2I_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, decodeN2I_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC];
        DFA_PRODUCTION(_CONVL2I_IREGLSRC_, _ConvL2I_iRegLsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+1;
        DFA_PRODUCTION(IREGL2ISRC, iRegL2Isrc_rule, c)
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegL2Isrc_rule, c)
      }
    }
}
void  State::_sub_Op_CountedLoopEnd(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC] + BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, branchLoopEndFar_rule, c)
    }
}
void  State::_sub_Op_CountLeadingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 12934 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6918 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, countLeadingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountLeadingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 12947 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6938 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, countLeadingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 12992 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountTrailingZerosInstructionsPPC64
#line 6958 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, countTrailingZerosI_cnttzw_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, countTrailingZerosI_cnttzw_rule, c+1)
        DFA_PRODUCTION(IREGISRC, countTrailingZerosI_cnttzw_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, countTrailingZerosI_cnttzw_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, countTrailingZerosI_cnttzw_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, countTrailingZerosI_cnttzw_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, countTrailingZerosI_cnttzw_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, countTrailingZerosI_cnttzw_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 12973 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64 && !UseCountTrailingZerosInstructionsPPC64
#line 6976 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, countTrailingZerosI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, countTrailingZerosI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, countTrailingZerosI_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, countTrailingZerosI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, countTrailingZerosI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, countTrailingZerosI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, countTrailingZerosI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, countTrailingZerosI_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CountTrailingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13023 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountTrailingZerosInstructionsPPC64
#line 7016 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, countTrailingZerosL_cnttzd_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, countTrailingZerosL_cnttzd_rule, c+1)
        DFA_PRODUCTION(IREGISRC, countTrailingZerosL_cnttzd_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, countTrailingZerosL_cnttzd_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, countTrailingZerosL_cnttzd_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, countTrailingZerosL_cnttzd_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, countTrailingZerosL_cnttzd_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, countTrailingZerosL_cnttzd_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13005 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64 && !UseCountTrailingZerosInstructionsPPC64
#line 7034 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, countTrailingZerosL_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, countTrailingZerosL_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, countTrailingZerosL_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, countTrailingZerosL_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, countTrailingZerosL_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, countTrailingZerosL_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, countTrailingZerosL_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, countTrailingZerosL_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CreateEx(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(RARG1REGP, CreateException_rule, c)
        DFA_PRODUCTION(IREGPDST, CreateException_rule, c+1)
        DFA_PRODUCTION(IREGPSRC, CreateException_rule, c+1+1)
        DFA_PRODUCTION(INDIRECT, CreateException_rule, c+1+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1+1)
        DFA_PRODUCTION(THREADREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH1REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, CreateException_rule, c+1+1+1)
        DFA_PRODUCTION(RARG3REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(RARG4REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, CreateException_rule, c+1+1)
    }
}
void  State::_sub_Op_DecodeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6930 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::shift() == 0
#line 7095 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, decodeN_unscaled_rule, c)
        DFA_PRODUCTION(IREGPSRC, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(INDIRECT, decodeN_unscaled_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_unscaled_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_unscaled_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6917 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            CompressedOops::shift() != 0 &&
            CompressedOops::base() != 0
#line 7122 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_notNull_addBase_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_notNull_addBase_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_notNull_addBase_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6868 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() != TypePtr::NotNull &&
             n->bottom_type()->is_oopptr()->ptr() != TypePtr::Constant) &&
            CompressedOops::base_disjoint() && VM_Version::has_isel()
#line 7180 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_Disjoint_isel_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_Disjoint_isel_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_Disjoint_isel_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6835 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            CompressedOops::base_disjoint()
#line 7238 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_Disjoint_notNull_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_Disjoint_notNull_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_Disjoint_notNull_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6818 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7294 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_mergeDisjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_mergeDisjoint_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_mergeDisjoint_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_mergeDisjoint_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6801 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::shift() != 0 &&
            CompressedOops::base() == 0
#line 7351 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_nullBase_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_nullBase_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_nullBase_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_nullBase_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6787 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() != TypePtr::NotNull &&
             n->bottom_type()->is_oopptr()->ptr() != TypePtr::Constant) &&
            CompressedOops::shift() != 0 &&
            CompressedOops::base() != 0
#line 7410 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+4 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_FLAGSREGSRC_IREGPSRC) &&
        (
#line 6753 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7466 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_FLAGSREGSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, cond_add_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, cond_add_base_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, cond_add_base_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cond_add_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) &&
        (
#line 6737 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7522 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_add_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_add_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_add_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_add_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6723 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7578 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeN_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeN_shift_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeN_shift_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeN_shift_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADN_MEMORY_) &&
        (
#line 5527 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() && CompressedOops::shift() == 0
#line 7634 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADN_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, loadN2P_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, loadN2P_unscaled_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadN2P_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadN2P_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC];
        DFA_PRODUCTION(_DECODEN_IREGNSRC_, _DecodeN_iRegNsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4731 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 7694 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+100;
        DFA_PRODUCTION(INDIRECTNARROW, indirectNarrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirectNarrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION(MEMORYALG4, indirectNarrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirectNarrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4668 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 7712 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+1;
        DFA_PRODUCTION(IREGN2P, iRegN2P_rule, c)
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION(IREGP_N2P, iRegN2P_rule, c)
      }
    }
}
void  State::_sub_Op_DecodeNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+DEFAULT_COST*2;
        DFA_PRODUCTION(IREGPDST, decodeNKlass_notNull_addBase_ExEx_rule, c)
        DFA_PRODUCTION(IREGPSRC, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(INDIRECT, decodeNKlass_notNull_addBase_ExEx_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeNKlass_notNull_addBase_ExEx_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGNSRC) &&
        (
#line 7078 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7745 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeNKlass_notNull_addBase_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeNKlass_notNull_addBase_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeNKlass_notNull_addBase_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPDST) &&
        (
#line 7064 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7801 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeNKlass_add_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeNKlass_add_base_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeNKlass_add_base_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeNKlass_add_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7049 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7857 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, decodeNKlass_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, decodeNKlass_shift_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, decodeNKlass_shift_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeNKlass_shift_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADNKLASS_MEMORY_) &&
        (
#line 5538 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0 &&
            _kids[0]->_leaf->as_Load()->is_unordered()
#line 7914 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADNKLASS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, loadN2P_klass_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, loadN2P_klass_unscaled_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadN2P_klass_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadN2P_klass_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC];
        DFA_PRODUCTION(_DECODENKLASS_IREGNSRC_, _DecodeNKlass_iRegNsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4745 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0
#line 7974 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+100;
        DFA_PRODUCTION(INDIRECTNARROW_KLASS, indirectNarrow_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirectNarrow_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4676 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0
#line 7986 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+1;
        DFA_PRODUCTION(IREGN2P_KLASS, iRegN2P_klass_rule, c)
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION(IREGP_N2P, iRegN2P_klass_rule, c)
      }
    }
}
void  State::_sub_Op_DivD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, divD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, divF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+10*DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, divI_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGISRC, divI_reg_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, divI_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8835 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->in(2)->find_int_con(-1) != -1
#line 8025 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, divI_reg_regnotMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, divI_reg_regnotMinus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, divI_reg_regnotMinus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, divI_reg_immIvalueMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, divI_reg_immIvalueMinus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
    }
}
void  State::_sub_Op_DivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+10*DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, divL_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(RARG1REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) &&
        (
#line 8894 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->in(2)->find_long_con(-1L) != -1L
#line 8108 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, divL_reg_regnotMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, divL_reg_immLvalueMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_UDivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, udivI_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, udivI_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, udivI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, udivI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, udivI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, udivI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, udivI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, udivI_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_UDivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, udivL_reg_reg_rule, c)
        DFA_PRODUCTION(RARG1REGL, udivL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, udivL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, udivL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, udivL_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, udivL_reg_reg_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_EncodeISOArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) &&
        (
#line 12820 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((EncodeISOArrayNode*)n)->is_ascii()
#line 8190 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION(IREGIDST, encode_ascii_array_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, encode_ascii_array_rule, c+1)
        DFA_PRODUCTION(IREGISRC, encode_ascii_array_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, encode_ascii_array_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, encode_ascii_array_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, encode_ascii_array_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, encode_ascii_array_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, encode_ascii_array_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) &&
        (
#line 12804 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!((EncodeISOArrayNode*)n)->is_ascii()
#line 8208 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, encode_iso_array_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, encode_iso_array_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, encode_iso_array_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, encode_iso_array_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, encode_iso_array_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, encode_iso_array_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, encode_iso_array_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, encode_iso_array_rule, c+1)
      }
    }
}
void  State::_sub_Op_EncodeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6707 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::shift() == 0
#line 8248 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGNDST, encodeP_narrow_oop_shift_0_rule, c)
        DFA_PRODUCTION(IREGNSRC, encodeP_narrow_oop_shift_0_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6692 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::shift() != 0 &&
            CompressedOops::base() ==0
#line 8260 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodeP_not_null_base_null_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodeP_not_null_base_null_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6680 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull &&
            CompressedOops::shift() != 0 &&
            CompressedOops::base_overlaps()
#line 8279 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodeP_not_null_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodeP_not_null_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6669 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->bottom_type()->make_ptr()->ptr() != TypePtr::NotNull &&
            CompressedOops::shift() != 0 &&
            CompressedOops::base_overlaps()
#line 8298 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodeP_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6655 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
CompressedOops::base_disjoint()
#line 8315 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodeP_Disjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodeP_Disjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_FLAGSREGSRC_IREGPSRC) &&
        (
#line 6623 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8332 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_FLAGSREGSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, cond_sub_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, cond_sub_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) &&
        (
#line 6610 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8349 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, encodeP_sub_rule, c)
        DFA_PRODUCTION(IREGPSRC, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(INDIRECT, encodeP_sub_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, encodeP_sub_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, encodeP_sub_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6596 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8373 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodeP_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodeP_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        
#line 4660 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/&& CompressedOops::shift() == 0
#line 8390 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+1;
        DFA_PRODUCTION(IREGP2N, iRegP2N_rule, c)
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION(IREGN_P2N, iRegP2N_rule, c)
      }
    }
}
void  State::_sub_Op_EncodePKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+DEFAULT_COST*2;
        DFA_PRODUCTION(IREGNDST, encodePKlass_not_null_ExEx_rule, c)
        DFA_PRODUCTION(IREGNSRC, encodePKlass_not_null_ExEx_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPSRC) &&
        (
#line 7003 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8410 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodePKlass_not_null_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodePKlass_not_null_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6990 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port CompressedKlassPointers::base_disjoint()*/
#line 8427 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodePKlass_Disjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodePKlass_Disjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPDST) &&
        (
#line 6977 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8444 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, encodePKlass_sub_base_rule, c)
        DFA_PRODUCTION(IREGPSRC, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(INDIRECT, encodePKlass_sub_base_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, encodePKlass_sub_base_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, encodePKlass_sub_base_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6963 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8468 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, encodePKlass_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, encodePKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_FastLock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12152 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Compile::current()->use_rtm()
#line 8487 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[RARG2REGP] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpFastLock_tm_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpFastLock_tm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12135 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!Compile::current()->use_rtm()
#line 8497 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpFastLock_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpFastLock_rule, c+1)
      }
    }
}
void  State::_sub_Op_FastUnlock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12188 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
Compile::current()->use_rtm()
#line 8513 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREG, cmpFastUnlock_tm_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, cmpFastUnlock_tm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12171 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!Compile::current()->use_rtm()
#line 8523 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION(FLAGSREG, cmpFastUnlock_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, cmpFastUnlock_rule, c+1)
      }
    }
}
void  State::_sub_Op_FmaD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD_REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, msubD_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD__NEGD_REGD_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, mnaddD_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGD_REGD__REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY__NEGD_REGD__REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, mnaddD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD__NEGD_REGD_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, mnsubD_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGD_REGD__REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY__NEGD_REGD__REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, mnsubD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD_REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, maddD_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_FmaF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF_REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, msubF_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF__NEGF_REGF_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, mnaddF_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGF_REGF__REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY__NEGF_REGF__REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, mnaddF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF__NEGF_REGF_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, mnsubF_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGF_REGF__REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY__NEGF_REGF__REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, mnsubF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF_REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, maddF_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_Goto(const Node *n){
    {
      unsigned int c = BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, branch_rule, c)
    }
}
void  State::_sub_Op_Halt(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, ShouldNotReachHere_rule, c)
    }
}
void  State::_sub_Op_CountPositives(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IREGISRC]+300;
        DFA_PRODUCTION(IREGIDST, count_positives_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, count_positives_rule, c+1)
        DFA_PRODUCTION(IREGISRC, count_positives_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, count_positives_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, count_positives_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, count_positives_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, count_positives_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, count_positives_rule, c+1)
    }
}
void  State::_sub_Op_If(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC]+5*BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, branchConFar_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_N2P_IMMP_0) &&
        (
#line 11607 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 8645 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPP_IREGP_N2P_IMMP_0]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, zeroCheckP_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPN_IREGNSRC_IMMN_0) &&
        (
#line 11553 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 8659 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPN_IREGNSRC_IMMN_0]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, zeroCheckN_iReg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_UIMMI15) &&
        (
#line 11506 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If()->_prob >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 8673 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_UIMMI15] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, rangeCheck_uimm15_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_IREGISRC) &&
        (
#line 11480 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If()->_prob >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 8687 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, rangeCheck_iReg_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_UIMMI15) &&
        (
#line 11454 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le &&
            PROB_UNLIKELY(_leaf->as_If()->_prob) >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 8701 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_UIMMI15] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, rangeCheck_iReg_uimm15_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION(_LSHIFTI_IREGISRC_IMMI_16, _LShiftI_iRegIsrc_immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION(_LSHIFTI_IREGISRC_IMMI_24, _LShiftI_iRegIsrc_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION(_LSHIFTI_IREGISRC_IMMI8, _LShiftI_iRegIsrc_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2) && STATE__VALID_CHILD(_kids[1], UIMMI5) &&
        (
#line 9094 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 8726 "dfa_ppc.cpp"
) && /*src3*/(_kids[0]->_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2]+_kids[1]->_cost[UIMMI5] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION(IREGISRC, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_IMMINEGPOW2) && STATE__VALID_CHILD(_kids[1], UIMMI5) &&
        (
#line 9075 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 8744 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_IMMINEGPOW2]+_kids[1]->_cost[UIMMI5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, lShiftI_andI_immInegpow2_imm5_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, lShiftI_andI_immInegpow2_imm5_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, lShiftI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, lShiftI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, lShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, lShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_LShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], UIMMI6) &&
        (
#line 9163 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((ConvI2LNode*)(_kids[0]->_leaf))->type()->is_long()->is_positive_int()
#line 8850 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[UIMMI6] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c)
        DFA_PRODUCTION(RARG1REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], UIMMI6_GE32) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[UIMMI6_GE32] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, lShiftL_regI_immGE32_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, lshiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, lShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_LoadB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16]+3*MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, loadB_indOffset16_ac_Ex_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadB_indOffset16_ac_Ex_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadB_indOffset16_ac_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) &&
        (
#line 5198 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8952 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadB_indOffset16_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadB_indOffset16_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadB_indOffset16_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) &&
        (
#line 5174 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8990 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadUB_indOffset16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadUB_indOffset16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadUB_indOffset16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+3*MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadB_indirect_ac_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadB_indirect_ac_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 5152 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9061 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadB_indirect_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadB_indirect_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadB_indirect_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 5128 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
false
#line 9099 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadUB_indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadUB_indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadUB_indirect_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION(_LOADUB_MEMORY_, _LoadUB_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadUB_ac_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadUB_ac_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadUB_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5221 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9156 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadUB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadUB_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADUS_INDIRECT_, _LoadUS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION(_LOADUS_MEMORY_, _LoadUS_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadUS_ac_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadUS_ac_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadUS_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5304 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9217 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadUS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadUS_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(REGD, loadD_ac_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5651 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9261 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, loadD_rule, c)
      }
    }
}
void  State::_sub_Op_LoadD_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION(REGD, loadD_unaligned_rule, c)
    }
}
void  State::_sub_Op_LoadF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(REGF, loadF_ac_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5612 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9284 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, loadF_rule, c)
      }
    }
}
void  State::_sub_Op_LoadI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADI_INDIRECT_, _LoadI_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4];
        DFA_PRODUCTION(_LOADI_MEMORYALG4_, _LoadI_memoryAlg4__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION(_LOADI_MEMORY_, _LoadI_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadI_ac_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadI_ac_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadI_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5354 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9322 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadI_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION(IREGPDST, loadKlass_rule, c)
        DFA_PRODUCTION(IREGPSRC, loadKlass_rule, c+1)
        DFA_PRODUCTION(INDIRECT, loadKlass_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadKlass_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadKlass_rule, c+1)
    }
}
void  State::_sub_Op_LoadNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION(IREGNDST, loadNKlass_rule, c)
        DFA_PRODUCTION(IREGNSRC, loadNKlass_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION(_LOADNKLASS_MEMORY_, _LoadNKlass_memory__rule, c)
    }
}
void  State::_sub_Op_LoadL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADL_INDIRECT_, _LoadL_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGLDST, loadL_ac_rule, c)
        DFA_PRODUCTION(RARG1REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, loadL_ac_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5426 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9409 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, loadL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_LoadL_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION(IREGLDST, loadL_unaligned_rule, c)
        DFA_PRODUCTION(RARG1REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_LoadP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 154 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
UseZGC && n->as_Load()->barrier_data() != 0
#line 9452 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+3 * MEMORY_REF_COST;
        DFA_PRODUCTION(IREGPDST, zLoadP_acq_rule, c)
        DFA_PRODUCTION(IREGPSRC, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(INDIRECT, zLoadP_acq_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, zLoadP_acq_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, zLoadP_acq_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zLoadP_acq_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 134 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/z/z_ppc.ad"
(UseZGC && n->as_Load()->barrier_data() != 0)
            && (n->as_Load()->is_unordered() || followed_by_acquire(n))
#line 9477 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, zLoadP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, zLoadP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, zLoadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, zLoadP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4];
        DFA_PRODUCTION(_LOADP_MEMORYALG4_, _LoadP_memoryAlg4__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5565 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->barrier_data() == 0
#line 9537 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, loadP_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, loadP_ac_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadP_ac_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, loadP_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadP_ac_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5551 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
(n->as_Load()->is_unordered() || followed_by_acquire(n)) && n->as_Load()->barrier_data() == 0
#line 9593 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, loadP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, loadP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadP_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION(_LOADN_MEMORY_, _LoadN_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGNDST, loadN_ac_rule, c)
        DFA_PRODUCTION(IREGNSRC, loadN_ac_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5502 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9661 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, loadN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, loadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadRange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadRange_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadRange_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadRange_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadRange_rule, c+1)
    }
}
void  State::_sub_Op_LoadS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADS_INDIRECT_, _LoadS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION(IREGIDST, loadS_ac_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION(IREGISRC, loadS_ac_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, loadS_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5271 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 9712 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, loadS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, loadS_rule, c+1)
      }
    }
}
void  State::_sub_Op_MaxI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 12892 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 9752 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
        DFA_PRODUCTION(IREGIDST, maxI_reg_reg_isel_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(IREGISRC, maxI_reg_reg_isel_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, maxI_reg_reg_isel_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*6;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, maxI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, maxI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, maxI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_MemBarAcquire(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, unnecessary_membar_acquire_rule, c)
    }
}
void  State::_sub_Op_LoadFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_acquire_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquireLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, membar_acquire_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarCPUOrder(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, membar_CPUOrder_rule, c)
    }
}
void  State::_sub_Op_MemBarRelease(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_release_rule, c)
    }
}
void  State::_sub_Op_StoreFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_release_0_rule, c)
    }
}
void  State::_sub_Op_StoreStoreFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_storestore_0_rule, c)
    }
}
void  State::_sub_Op_MemBarReleaseLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, membar_release_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarVolatile(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_volatile_rule, c)
    }
}
void  State::_sub_Op_MemBarStoreStore(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_storestore_rule, c)
    }
}
void  State::_sub_Op_MinI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 12859 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 9865 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
        DFA_PRODUCTION(IREGIDST, minI_reg_reg_isel_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(IREGISRC, minI_reg_reg_isel_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, minI_reg_reg_isel_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*6;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, minI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, minI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, minI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+10*DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, modI_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGISRC, modI_reg_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, modI_reg_reg_Ex_rule, c+1)
    }
}
void  State::_sub_Op_ModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+10*DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, modL_reg_reg_Ex_rule, c)
        DFA_PRODUCTION(RARG1REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_UModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, umodI_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, umodI_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, umodI_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, umodI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, umodI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, umodI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, umodI_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, umodI_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_UModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, umodL_reg_reg_rule, c)
        DFA_PRODUCTION(RARG1REGL, umodL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, umodL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, umodL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, umodL_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, umodL_reg_reg_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_MoveI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + MEMORY_REF_COST;
        DFA_PRODUCTION(STACKSLOTF, moveI2F_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTI) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTI] + MEMORY_REF_COST;
        DFA_PRODUCTION(REGF, moveI2F_stack_reg_rule, c)
    }
}
void  State::_sub_Op_MoveF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION(STACKSLOTI, moveF2I_reg_stack_rule, c)
        DFA_PRODUCTION(IREGIDST, stkI_to_regI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION(RSCRATCH1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(IREGISRC, stkI_to_regI_rule, c+MEMORY_REF_COST+1+1)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+MEMORY_REF_COST+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG3REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG4REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTF) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTF] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, moveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, moveF2I_stack_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, moveF2I_stack_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MoveL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + MEMORY_REF_COST;
        DFA_PRODUCTION(STACKSLOTD, moveL2D_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL] + MEMORY_REF_COST;
        DFA_PRODUCTION(REGD, moveL2D_stack_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 10123 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 10038 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, moveL2D_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MoveD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION(STACKSLOTL, moveD2L_reg_stack_rule, c)
        DFA_PRODUCTION(IREGLDST, stkL_to_regL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION(RARG1REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG2REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG3REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(RARG4REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION(IREGLSRC, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTD) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTD] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, moveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MulD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, mulD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, mulF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulHiL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, mulHighL_reg_reg_rule, c)
        DFA_PRODUCTION(RARG1REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_MulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, mulI_reg_imm16_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION(IREGISRC, mulI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, mulI_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, mulI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, mulI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, mulI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, mulL_reg_imm16_rule, c)
        DFA_PRODUCTION(RARG1REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, mulL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_NegD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION(_NEGD_REGD_, _NegD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[_ABSD_REGD_] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, negD_absD_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION(REGD, negD_reg_rule, c)
      }
    }
}
void  State::_sub_Op_NegF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION(_NEGF_REGF_, _NegF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_ABSF_REGF_] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, negF_absF_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION(REGF, negF_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OrI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, orI_reg_uimm16_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(IREGISRC, orI_reg_uimm16_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, orI_reg_uimm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI_IREGISRC__ORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI_IREGISRC__ORI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI_IREGISRC__ORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI_IREGISRC__ORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI_IREGISRC_IREGISRC];
        DFA_PRODUCTION(_ORI_IREGISRC__ORI_IREGISRC_IREGISRC, _OrI_iRegIsrc__OrI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI__ORI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI__ORI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI__ORI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI__ORI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_ORI__ORI_IREGISRC_IREGISRC_IREGISRC, _OrI__OrI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_ORI_IREGISRC_IREGISRC, _OrI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, orI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, orI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGISRC_IMMI8) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGISRC_IMMI8) &&
        (
#line 9412 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 10417 "dfa_ppc.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGISRC_IMMI8]+_kids[1]->_cost[_LSHIFTI_IREGISRC_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, rotlI_reg_immi8_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, rotlI_reg_immi8_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, rotlI_reg_immi8_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI8) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGISRC_IMMI8) &&
        (
#line 9412 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 10455 "dfa_ppc.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI8]+_kids[1]->_cost[_URSHIFTI_IREGISRC_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, rotlI_reg_immi8_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, rotlI_reg_immi8_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, rotlI_reg_immi8_rule, c+1)
      }
    }
}
void  State::_sub_Op_OrL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, orL_reg_uimm16_rule, c)
        DFA_PRODUCTION(RARG1REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_ORL_IREGLSRC_IREGLSRC, _OrL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_OverflowAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREGCR0, overflowAddL_reg_reg_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, overflowAddL_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_OverflowSubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREGCR0, overflowNegL_reg_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, overflowNegL_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGCR0) || _cost[FLAGSREGCR0] > c) {
        DFA_PRODUCTION(FLAGSREGCR0, overflowSubL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION(FLAGSREGSRC, overflowSubL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_OverflowMulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(FLAGSREGCR0, overflowMulL_reg_reg_rule, c)
        DFA_PRODUCTION(FLAGSREGSRC, overflowMulL_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_PartialSubtypeCheck(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P]+DEFAULT_COST*10;
        DFA_PRODUCTION(IREGPDST, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(IREGPSRC, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(INDIRECT, partialSubtypeCheck_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, partialSubtypeCheck_rule, c+1)
    }
}
void  State::_sub_Op_PopCountI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 12907 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UsePopCountInstruction && VM_Version::has_popcntw()
#line 10586 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, popCountI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, popCountI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, popCountI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, popCountI_rule, c+1)
    }
}
void  State::_sub_Op_PopCountL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 12920 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UsePopCountInstruction && VM_Version::has_popcntw()
#line 10606 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, popCountL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, popCountL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, popCountL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, popCountL_rule, c+1)
    }
}
void  State::_sub_Op_PopCountVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vpopcnt_reg_rule, c)
    }
}
void  State::_sub_Op_PrefetchAllocation(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 6396 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle != 3
#line 10632 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, prefetch_alloc_no_offset_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_INDIRECTMEMORY_IREGLSRC) &&
        (
#line 6383 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle != 3
#line 10641 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_INDIRECTMEMORY_IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, prefetch_alloc_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 6370 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle == 3
#line 10652 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, prefetch_alloc_zero_no_offset_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_INDIRECTMEMORY_IREGLSRC) &&
        (
#line 6357 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle == 3
#line 10663 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_INDIRECTMEMORY_IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, prefetch_alloc_zero_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMI_16) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI_16]+_kids[1]->_cost[IMMI_16] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, convS2I_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, convS2I_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, convS2I_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI_24]+_kids[1]->_cost[IMMI_24] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, convB2I_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, convB2I_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, convB2I_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, arShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, arShiftI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, arShiftI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, arShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, arShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI5) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI5];
        DFA_PRODUCTION(_RSHIFTI_IREGISRC_UIMMI5, _RShiftI_iRegIsrc_uimmI5_rule, c)
    }
}
void  State::_sub_Op_RShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_RSHIFTL_IREGLSRC_IMMI, _RShiftL_iRegLsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, arShiftL_regL_immI_rule, c)
        DFA_PRODUCTION(RARG1REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, arShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_Rethrow(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, RethrowException_rule, c)
    }
}
void  State::_sub_Op_Return(const Node *n){
    {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION(UNIVERSE, Ret_rule, c)
    }
}
void  State::_sub_Op_RoundDouble(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION(REGD, roundDouble_nop_rule, c)
    }
}
void  State::_sub_Op_RoundDoubleMode(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[IMMI8] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, roundD_reg_rule, c)
    }
}
void  State::_sub_Op_RoundDoubleModeV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], IMMI8) &&
        (
#line 13996 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 10860 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[IMMI8] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vround2D_reg_rule, c)
    }
}
void  State::_sub_Op_RoundFloat(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION(REGF, roundFloat_nop_rule, c)
    }
}
void  State::_sub_Op_SafePoint(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION(UNIVERSE, safePoint_poll_rule, c)
    }
}
void  State::_sub_Op_ShenandoahCompareAndExchangeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 174 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 10884 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGPDST, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGPSRC, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(INDIRECT, compareAndExchangePAcq_shenandoah_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION(THREADREGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RSCRATCH1REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RSCRATCH2REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG1REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, compareAndExchangePAcq_shenandoah_rule, c+1+1)
        DFA_PRODUCTION(RARG2REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG3REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG4REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangePAcq_shenandoah_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 134 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 10909 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION(IREGPDST, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION(IREGPSRC, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangeP_shenandoah_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION(THREADREGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION(RARG1REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION(IREGPDSTNOSCRATCH, compareAndExchangeP_shenandoah_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION(RARG2REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION(RARG3REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION(RARG4REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangeP_shenandoah_rule, c+1)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndExchangeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 199 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 10968 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGNDST, compareAndExchangeNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGNSRC, compareAndExchangeNAcq_shenandoah_rule, c+1)
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 154 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 10980 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION(IREGNDST, compareAndExchangeN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION(IREGNSRC, compareAndExchangeN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 109 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 11000 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapN_acq_shenandoah_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapN_acq_shenandoah_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapN_acq_shenandoah_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 62 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 11019 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapN_shenandoah_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapN_shenandoah_rule, c+1)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 83 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 11060 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapP_acq_shenandoah_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapP_acq_shenandoah_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapP_acq_shenandoah_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 41 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 11079 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapP_shenandoah_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapP_shenandoah_rule, c+1)
      }
    }
}
void  State::_sub_Op_ShenandoahWeakCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 109 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 11120 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapN_acq_shenandoah_0_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapN_acq_shenandoah_0_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapN_acq_shenandoah_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 62 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 11139 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapN_shenandoah_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapN_shenandoah_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapN_shenandoah_0_rule, c+1)
      }
    }
}
void  State::_sub_Op_ShenandoahWeakCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 83 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire
            || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 11180 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, compareAndSwapP_acq_shenandoah_0_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(IREGISRC, compareAndSwapP_acq_shenandoah_0_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, compareAndSwapP_acq_shenandoah_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 41 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/gc/shenandoah/shenandoah_ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire
            && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 11199 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, compareAndSwapP_shenandoah_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, compareAndSwapP_shenandoah_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, compareAndSwapP_shenandoah_0_rule, c+1)
      }
    }
}
void  State::_sub_Op_SqrtD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, sqrtD_reg_rule, c)
    }
}
void  State::_sub_Op_SqrtF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 9607 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fsqrts()
#line 11245 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, sqrtF_reg_rule, c)
    }
}
void  State::_sub_Op_StoreB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeB_rule, c)
    }
}
void  State::_sub_Op_StoreC(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESS_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESS_IREGISRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeS_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESUS_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESUS_IREGISRC_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeUS_reversed_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeC_rule, c)
      }
    }
}
void  State::_sub_Op_StoreCM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IMMI_0] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeCM_rule, c)
    }
}
void  State::_sub_Op_StoreD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeD_rule, c)
    }
}
void  State::_sub_Op_StoreF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeF_rule, c)
    }
}
void  State::_sub_Op_StoreI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESI_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESI_IREGISRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeI_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], _CONVL2I_IREGLSRC_) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[_CONVL2I_IREGLSRC_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeI_convL2I_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeI_rule, c)
      }
    }
}
void  State::_sub_Op_StoreL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESL_IREGLSRC_) &&
        (
#line 13372 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_stdbrx()
#line 11316 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESL_IREGLSRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeL_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeL_rule, c)
      }
    }
}
void  State::_sub_Op_StoreP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGPSRC) &&
        (
#line 6540 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Store()->barrier_data() == 0
#line 11333 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGPSRC] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeP_rule, c)
    }
}
void  State::_sub_Op_StoreN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN_P2N] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeN_rule, c)
    }
}
void  State::_sub_Op_StoreNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN_P2N] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeNKlass_rule, c)
    }
}
void  State::_sub_Op_StrComp(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12315 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL
#line 11356 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
        DFA_PRODUCTION(IREGIDST, string_compareUL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, string_compareUL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, string_compareUL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12299 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU
#line 11374 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, string_compareLU_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, string_compareLU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, string_compareLU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12283 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU
#line 11412 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, string_compareU_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, string_compareU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, string_compareU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12267 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL
#line 11450 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, string_compareL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, string_compareL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, string_compareL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrCompressedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION(IREGIDST, string_compress_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, string_compress_rule, c+1)
        DFA_PRODUCTION(IREGISRC, string_compress_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, string_compress_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, string_compress_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, string_compress_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, string_compress_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, string_compress_rule, c+1)
    }
}
void  State::_sub_Op_StrEquals(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) &&
        (
#line 12346 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU
#line 11505 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG2REGP]+_kids[1]->_cost[RARG3REGI]+300;
        DFA_PRODUCTION(IREGIDST, string_equalsU_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION(IREGISRC, string_equalsU_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, string_equalsU_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) &&
        (
#line 12331 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL
#line 11523 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG2REGP]+_kids[1]->_cost[RARG3REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, string_equalsL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, string_equalsL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, string_equalsL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOf(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 12730 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 11563 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
        DFA_PRODUCTION(IREGIDST, indexOf_UL_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION(IREGISRC, indexOf_UL_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, indexOf_UL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 12709 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 11581 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 12688 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 11619 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 12662 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11659 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 12635 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11699 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 12608 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11739 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12542 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11779 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12515 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11819 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12481 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 11859 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12455 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 11897 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_char_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_char_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_char_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12429 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 11935 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_char_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_char_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_char_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12396 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 11973 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOf_imm1_char_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOf_imm1_char_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOf_imm1_char_U_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOfChar(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 12586 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L
#line 12013 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+180;
        DFA_PRODUCTION(IREGIDST, indexOfChar_L_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, indexOfChar_L_rule, c+1)
        DFA_PRODUCTION(IREGISRC, indexOfChar_L_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, indexOfChar_L_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, indexOfChar_L_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, indexOfChar_L_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, indexOfChar_L_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, indexOfChar_L_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 12567 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U
#line 12031 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, indexOfChar_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, indexOfChar_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, indexOfChar_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, indexOfChar_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, indexOfChar_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, indexOfChar_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, indexOfChar_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, indexOfChar_U_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrInflatedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION(UNIVERSE, string_inflate_rule, c)
    }
}
void  State::_sub_Op_SubD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION(REGD, subD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION(REGF, subF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, negI_regI_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION(IREGISRC, negI_regI_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, negI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI16) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IMMI16]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, subI_imm16_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, subI_imm16_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, subI_imm16_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, subI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, subI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_SubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGPSRC_) && STATE__VALID_CHILD(_kids[1], _CASTP2X_IREGPSRC_) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGPSRC_]+_kids[1]->_cost[_CASTP2X_IREGPSRC_] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, array_size_rule, c)
        DFA_PRODUCTION(RARG1REGL, array_size_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, array_size_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, array_size_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, array_size_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, array_size_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_SUBL_IMML_0_IREGLSRC, _SubL_immL_0_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, negL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_SUBL_IREGLSRC_IREGLSRC, _SubL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_TailCall(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDSTNOSCRATCH) && STATE__VALID_CHILD(_kids[1], INLINE_CACHE_REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGPDSTNOSCRATCH]+_kids[1]->_cost[INLINE_CACHE_REGP] + CALL_COST;
        DFA_PRODUCTION(UNIVERSE, TailCalljmpInd_rule, c)
    }
}
void  State::_sub_Op_TailJump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDSTNOSCRATCH) && STATE__VALID_CHILD(_kids[1], RARG1REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGPDSTNOSCRATCH]+_kids[1]->_cost[RARG1REGP] + CALL_COST;
        DFA_PRODUCTION(UNIVERSE, tailjmpInd_rule, c)
    }
}
void  State::_sub_Op_ThreadLocal(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(THREADREGP, tlsLoadP_rule, c)
        DFA_PRODUCTION(IREGPSRC, tlsLoadP_rule, c+1)
        DFA_PRODUCTION(INDIRECT, tlsLoadP_rule, c+1+100)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION(IREGP_N2P, iRegPsrc_rule, c+1)
    }
}
void  State::_sub_Op_URShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION(_URSHIFTI_IREGISRC_IMMI8, _URShiftI_iRegIsrc_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_URSHIFTI_IREGISRC_IMMI, _URShiftI_iRegIsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, urShiftI_reg_imm_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION(IREGISRC, urShiftI_reg_imm_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, urShiftI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, urShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, urShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_URShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], UIMMI6) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_N2P_]+_kids[1]->_cost[UIMMI6] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, shrP_convP2X_reg_imm6_rule, c)
        DFA_PRODUCTION(RARG1REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_URSHIFTL_IREGLSRC_IMMI, _URShiftL_iRegLsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, urShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, urShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_XorI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10559 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 12382 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGP_N2P_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION(IREGISRC, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10545 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 12400 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGP_N2P_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_convP2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10471 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 12438 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGISRC_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10457 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 12476 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGISRC_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1];
        DFA_PRODUCTION(_XORI_IREGISRC_IMMI_MINUS1, _XorI_iRegIsrc_immI_minus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, notI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, notI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, notI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_reg_uimm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_reg_uimm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC__XORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC__XORI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC__XORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC__XORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC_IREGISRC];
        DFA_PRODUCTION(_XORI_IREGISRC__XORI_IREGISRC_IREGISRC, _XorI_iRegIsrc__XorI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI__XORI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI__XORI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__XORI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI__XORI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_XORI__XORI_IREGISRC_IREGISRC_IREGISRC, _XorI__XorI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION(_XORI_IREGISRC_IREGISRC, _XorI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, xorI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, xorI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, notL_reg_rule, c)
        DFA_PRODUCTION(RARG1REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, notL_reg_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, xorL_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION(_XORL_IREGLSRC_IREGLSRC, _XorL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AddVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13741 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 12827 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd16B_reg_rule, c)
    }
}
void  State::_sub_Op_AddVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13752 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 12838 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd8S_reg_rule, c)
    }
}
void  State::_sub_Op_AddVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13763 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12849 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd4I_reg_rule, c)
    }
}
void  State::_sub_Op_AddVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13785 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 12860 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd2L_reg_rule, c)
    }
}
void  State::_sub_Op_AddVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13774 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12871 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd4F_reg_rule, c)
    }
}
void  State::_sub_Op_AddVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13796 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 12882 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vadd2D_reg_rule, c)
    }
}
void  State::_sub_Op_SubVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13809 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 12893 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub16B_reg_rule, c)
    }
}
void  State::_sub_Op_SubVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13820 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 12904 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub8S_reg_rule, c)
    }
}
void  State::_sub_Op_SubVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13831 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12915 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub4I_reg_rule, c)
    }
}
void  State::_sub_Op_SubVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13853 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 12926 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub2L_reg_rule, c)
    }
}
void  State::_sub_Op_SubVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13842 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12937 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub4F_reg_rule, c)
    }
}
void  State::_sub_Op_SubVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13864 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 12948 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsub2D_reg_rule, c)
    }
}
void  State::_sub_Op_MulVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13877 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 12959 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vmul8S_reg_rule, c)
    }
}
void  State::_sub_Op_MulVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13891 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12970 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vmul4I_reg_rule, c)
    }
}
void  State::_sub_Op_MulVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13902 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 12981 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vmul4F_reg_rule, c)
    }
}
void  State::_sub_Op_MulVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13913 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 12992 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vmul2D_reg_rule, c)
    }
}
void  State::_sub_Op_FmaVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGVD_VECX_) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX_VECX) &&
        (
#line 14169 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13003 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVD_VECX_]+_kids[1]->_cost[_BINARY_VECX_VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vfma2D_neg2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX__NEGVD_VECX_) &&
        (
#line 14155 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13012 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY_VECX__NEGVD_VECX_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma2D_neg1_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVD_VECX__VECX) &&
        (
#line 14155 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13023 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY__NEGVD_VECX__VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma2D_neg1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX_VECX) &&
        (
#line 14140 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13034 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY_VECX_VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma2D_rule, c)
      }
    }
}
void  State::_sub_Op_FmaVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGVF_VECX_) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX_VECX) &&
        (
#line 14126 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13047 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVF_VECX_]+_kids[1]->_cost[_BINARY_VECX_VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vfma4F_neg2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX__NEGVF_VECX_) &&
        (
#line 14112 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13056 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY_VECX__NEGVF_VECX_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma4F_neg1_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVF_VECX__VECX) &&
        (
#line 14112 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13067 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY__NEGVF_VECX__VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma4F_neg1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], _BINARY_VECX_VECX) &&
        (
#line 14097 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13078 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[_BINARY_VECX_VECX] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, vfma4F_rule, c)
      }
    }
}
void  State::_sub_Op_DivVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13926 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13091 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vdiv4F_reg_rule, c)
    }
}
void  State::_sub_Op_DivVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 13937 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13102 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX]+_kids[1]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vdiv2D_reg_rule, c)
    }
}
void  State::_sub_Op_AbsVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 13950 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13113 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vabs4F_reg_rule, c)
    }
}
void  State::_sub_Op_AbsVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 13961 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13124 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vabs2D_reg_rule, c)
    }
}
void  State::_sub_Op_NegVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL ) {
      unsigned int c = _kids[0]->_cost[VECX];
        DFA_PRODUCTION(_NEGVF_VECX_, _NegVF_vecX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 14021 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13139 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vneg4F_reg_rule, c)
    }
}
void  State::_sub_Op_NegVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL ) {
      unsigned int c = _kids[0]->_cost[VECX];
        DFA_PRODUCTION(_NEGVD_VECX_, _NegVD_vecX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 14032 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13154 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vneg2D_reg_rule, c)
    }
}
void  State::_sub_Op_SqrtVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 14056 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13165 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsqrt2D_reg_rule, c)
    }
}
void  State::_sub_Op_SqrtVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) && _kids[1] == NULL &&
        (
#line 14045 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13176 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VECX] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, vsqrt4F_reg_rule, c)
    }
}
void  State::_sub_Op_LoadVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 5476 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadVector()->memory_size() == 16
#line 13187 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + MEMORY_REF_COST;
        DFA_PRODUCTION(VECX, loadV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5464 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadVector()->memory_size() == 8
#line 13196 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION(IREGLDST, loadV8_rule, c)
        DFA_PRODUCTION(RARG1REGL, loadV8_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, loadV8_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, loadV8_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, loadV8_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, loadV8_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_StoreVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 6486 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_StoreVector()->memory_size() == 16
#line 13213 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VECX] + MEMORY_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGLSRC) &&
        (
#line 6474 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_StoreVector()->memory_size() == 8
#line 13222 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeA8B_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13543 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 13235 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl16B_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13531 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 13244 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl16B_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13515 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 13255 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl16B_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13504 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13266 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, repl8B_immIminus1_rule, c)
        DFA_PRODUCTION(RARG1REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13493 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13281 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl8B_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13482 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13310 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl8B_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13615 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13341 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl8S_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13603 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13350 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl8S_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13587 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 13361 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl8S_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13576 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13372 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, repl4S_immIminus1_rule, c)
        DFA_PRODUCTION(RARG1REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13565 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13387 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl4S_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13555 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13416 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl4S_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13687 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13447 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl4I_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13675 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13456 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl4I_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13659 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13467 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl4I_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13648 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13478 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, repl2I_immIminus1_rule, c)
        DFA_PRODUCTION(RARG1REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13637 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13493 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl2I_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13627 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13522 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl2I_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 14350 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13553 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl2L_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 14338 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13562 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl2L_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 14327 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13573 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl2L_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMF_0) &&
        (
#line 14258 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13586 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF_0] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl4F_immF0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 14249 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13595 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF]+10 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl4F_immF_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 14236 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 13606 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl4F_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF_0) &&
        (
#line 13725 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13617 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF_0] + DEFAULT_COST;
        DFA_PRODUCTION(IREGLDST, repl2F_immF0_rule, c)
        DFA_PRODUCTION(RARG1REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 13715 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13632 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF]+5 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl2F_immF_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 13700 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13661 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+2 * MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION(IREGLDST, repl2F_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION(RARG1REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION(RARG2REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION(RARG3REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION(RARG4REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION(IREGLSRC, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMD_0) &&
        (
#line 14281 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13692 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMD_0] + DEFAULT_COST;
        DFA_PRODUCTION(VECX, repl2D_immD0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 14269 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 13701 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION(VECX, repl2D_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_Digit(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+3 * DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, cmprb_Digit_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmprb_Digit_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmprb_Digit_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmprb_Digit_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmprb_Digit_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmprb_Digit_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmprb_Digit_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmprb_Digit_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_LowerCase(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+12 * DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, cmprb_LowerCase_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmprb_LowerCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmprb_LowerCase_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmprb_LowerCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmprb_LowerCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmprb_LowerCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmprb_LowerCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmprb_LowerCase_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_UpperCase(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+7 * DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, cmprb_UpperCase_reg_reg_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmprb_UpperCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmprb_UpperCase_reg_reg_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmprb_UpperCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmprb_UpperCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmprb_UpperCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmprb_UpperCase_reg_reg_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmprb_UpperCase_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_Whitespace(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11994 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 >= 10
#line 13759 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+3 * DEFAULT_COST;
        DFA_PRODUCTION(IREGIDST, cmprb_Whitespace_reg_reg_prefixed_rule, c)
        DFA_PRODUCTION(RSCRATCH1REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
        DFA_PRODUCTION(IREGISRC, cmprb_Whitespace_reg_reg_prefixed_rule, c+1+1)
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION(RSCRATCH2REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
        DFA_PRODUCTION(RARG1REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
        DFA_PRODUCTION(RARG2REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
        DFA_PRODUCTION(RARG3REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
        DFA_PRODUCTION(RARG4REGI, cmprb_Whitespace_reg_reg_prefixed_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11971 "/priv/d038402/git/reinrich/jdk3/src/hotspot/cpu/ppc/ppc.ad"
PowerArchitecturePPC64 <= 9
#line 13777 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+4 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION(IREGIDST, cmprb_Whitespace_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH1REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC, cmprb_Whitespace_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION(RSCRATCH2REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION(RARG1REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION(RARG2REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION(RARG3REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION(RARG4REGI, cmprb_Whitespace_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_VectorReinterpret(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VECX) ) {
      unsigned int c = _kids[0]->_cost[VECX];
        DFA_PRODUCTION(VECX, reinterpretX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST];
        DFA_PRODUCTION(IREGLDST, reinterpretL_rule, c)
        DFA_PRODUCTION(RARG1REGL, reinterpretL_rule, c+1)
        DFA_PRODUCTION(RARG2REGL, reinterpretL_rule, c+1)
        DFA_PRODUCTION(RARG3REGL, reinterpretL_rule, c+1)
        DFA_PRODUCTION(RARG4REGL, reinterpretL_rule, c+1)
        DFA_PRODUCTION(IREGLSRC, reinterpretL_rule, c+1)
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
bool State::DFA(int opcode, const Node *n) {
  switch(opcode) {
  case Op_RegN: { _sub_Op_RegN(n);
    break;
  }
  case Op_RegI: { _sub_Op_RegI(n);
    break;
  }
  case Op_RegP: { _sub_Op_RegP(n);
    break;
  }
  case Op_RegF: { _sub_Op_RegF(n);
    break;
  }
  case Op_RegD: { _sub_Op_RegD(n);
    break;
  }
  case Op_RegL: { _sub_Op_RegL(n);
    break;
  }
  case Op_VecX: { _sub_Op_VecX(n);
    break;
  }
  case Op_RegFlags: { _sub_Op_RegFlags(n);
    break;
  }
  case Op_AbsD: { _sub_Op_AbsD(n);
    break;
  }
  case Op_AbsF: { _sub_Op_AbsF(n);
    break;
  }
  case Op_AbsI: { _sub_Op_AbsI(n);
    break;
  }
  case Op_AbsL: { _sub_Op_AbsL(n);
    break;
  }
  case Op_AddD: { _sub_Op_AddD(n);
    break;
  }
  case Op_AddF: { _sub_Op_AddF(n);
    break;
  }
  case Op_AddI: { _sub_Op_AddI(n);
    break;
  }
  case Op_AddL: { _sub_Op_AddL(n);
    break;
  }
  case Op_AddP: { _sub_Op_AddP(n);
    break;
  }
  case Op_AndI: { _sub_Op_AndI(n);
    break;
  }
  case Op_AndL: { _sub_Op_AndL(n);
    break;
  }
  case Op_AryEq: { _sub_Op_AryEq(n);
    break;
  }
  case Op_Binary: { _sub_Op_Binary(n);
    break;
  }
  case Op_Bool: { _sub_Op_Bool(n);
    break;
  }
  case Op_ReverseBytesI: { _sub_Op_ReverseBytesI(n);
    break;
  }
  case Op_ReverseBytesL: { _sub_Op_ReverseBytesL(n);
    break;
  }
  case Op_ReverseBytesUS: { _sub_Op_ReverseBytesUS(n);
    break;
  }
  case Op_ReverseBytesS: { _sub_Op_ReverseBytesS(n);
    break;
  }
  case Op_CacheWB: { _sub_Op_CacheWB(n);
    break;
  }
  case Op_CacheWBPreSync: { _sub_Op_CacheWBPreSync(n);
    break;
  }
  case Op_CacheWBPostSync: { _sub_Op_CacheWBPostSync(n);
    break;
  }
  case Op_CallDynamicJava: { _sub_Op_CallDynamicJava(n);
    break;
  }
  case Op_CallLeaf: { _sub_Op_CallLeaf(n);
    break;
  }
  case Op_CallLeafNoFP: { _sub_Op_CallLeafNoFP(n);
    break;
  }
  case Op_CallRuntime: { _sub_Op_CallRuntime(n);
    break;
  }
  case Op_CallStaticJava: { _sub_Op_CallStaticJava(n);
    break;
  }
  case Op_CastDD: { _sub_Op_CastDD(n);
    break;
  }
  case Op_CastFF: { _sub_Op_CastFF(n);
    break;
  }
  case Op_CastII: { _sub_Op_CastII(n);
    break;
  }
  case Op_CastLL: { _sub_Op_CastLL(n);
    break;
  }
  case Op_CastVV: { _sub_Op_CastVV(n);
    break;
  }
  case Op_CastX2P: { _sub_Op_CastX2P(n);
    break;
  }
  case Op_CastP2X: { _sub_Op_CastP2X(n);
    break;
  }
  case Op_CastPP: { _sub_Op_CastPP(n);
    break;
  }
  case Op_CheckCastPP: { _sub_Op_CheckCastPP(n);
    break;
  }
  case Op_ClearArray: { _sub_Op_ClearArray(n);
    break;
  }
  case Op_CMoveD: { _sub_Op_CMoveD(n);
    break;
  }
  case Op_CMoveF: { _sub_Op_CMoveF(n);
    break;
  }
  case Op_CMoveI: { _sub_Op_CMoveI(n);
    break;
  }
  case Op_CMoveL: { _sub_Op_CMoveL(n);
    break;
  }
  case Op_CMoveP: { _sub_Op_CMoveP(n);
    break;
  }
  case Op_CMoveN: { _sub_Op_CMoveN(n);
    break;
  }
  case Op_CmpN: { _sub_Op_CmpN(n);
    break;
  }
  case Op_CmpD: { _sub_Op_CmpD(n);
    break;
  }
  case Op_CmpD3: { _sub_Op_CmpD3(n);
    break;
  }
  case Op_CmpF: { _sub_Op_CmpF(n);
    break;
  }
  case Op_CmpF3: { _sub_Op_CmpF3(n);
    break;
  }
  case Op_CmpI: { _sub_Op_CmpI(n);
    break;
  }
  case Op_CmpL: { _sub_Op_CmpL(n);
    break;
  }
  case Op_CmpL3: { _sub_Op_CmpL3(n);
    break;
  }
  case Op_CmpLTMask: { _sub_Op_CmpLTMask(n);
    break;
  }
  case Op_CmpP: { _sub_Op_CmpP(n);
    break;
  }
  case Op_CmpU: { _sub_Op_CmpU(n);
    break;
  }
  case Op_CmpUL: { _sub_Op_CmpUL(n);
    break;
  }
  case Op_CompareAndSwapB: { _sub_Op_CompareAndSwapB(n);
    break;
  }
  case Op_CompareAndSwapS: { _sub_Op_CompareAndSwapS(n);
    break;
  }
  case Op_CompareAndSwapI: { _sub_Op_CompareAndSwapI(n);
    break;
  }
  case Op_CompareAndSwapL: { _sub_Op_CompareAndSwapL(n);
    break;
  }
  case Op_CompareAndSwapP: { _sub_Op_CompareAndSwapP(n);
    break;
  }
  case Op_CompareAndSwapN: { _sub_Op_CompareAndSwapN(n);
    break;
  }
  case Op_WeakCompareAndSwapB: { _sub_Op_WeakCompareAndSwapB(n);
    break;
  }
  case Op_WeakCompareAndSwapS: { _sub_Op_WeakCompareAndSwapS(n);
    break;
  }
  case Op_WeakCompareAndSwapI: { _sub_Op_WeakCompareAndSwapI(n);
    break;
  }
  case Op_WeakCompareAndSwapL: { _sub_Op_WeakCompareAndSwapL(n);
    break;
  }
  case Op_WeakCompareAndSwapP: { _sub_Op_WeakCompareAndSwapP(n);
    break;
  }
  case Op_WeakCompareAndSwapN: { _sub_Op_WeakCompareAndSwapN(n);
    break;
  }
  case Op_CompareAndExchangeB: { _sub_Op_CompareAndExchangeB(n);
    break;
  }
  case Op_CompareAndExchangeS: { _sub_Op_CompareAndExchangeS(n);
    break;
  }
  case Op_CompareAndExchangeI: { _sub_Op_CompareAndExchangeI(n);
    break;
  }
  case Op_CompareAndExchangeL: { _sub_Op_CompareAndExchangeL(n);
    break;
  }
  case Op_CompareAndExchangeP: { _sub_Op_CompareAndExchangeP(n);
    break;
  }
  case Op_CompareAndExchangeN: { _sub_Op_CompareAndExchangeN(n);
    break;
  }
  case Op_GetAndAddB: { _sub_Op_GetAndAddB(n);
    break;
  }
  case Op_GetAndAddS: { _sub_Op_GetAndAddS(n);
    break;
  }
  case Op_GetAndAddI: { _sub_Op_GetAndAddI(n);
    break;
  }
  case Op_GetAndAddL: { _sub_Op_GetAndAddL(n);
    break;
  }
  case Op_GetAndSetB: { _sub_Op_GetAndSetB(n);
    break;
  }
  case Op_GetAndSetS: { _sub_Op_GetAndSetS(n);
    break;
  }
  case Op_GetAndSetI: { _sub_Op_GetAndSetI(n);
    break;
  }
  case Op_GetAndSetL: { _sub_Op_GetAndSetL(n);
    break;
  }
  case Op_GetAndSetP: { _sub_Op_GetAndSetP(n);
    break;
  }
  case Op_GetAndSetN: { _sub_Op_GetAndSetN(n);
    break;
  }
  case Op_ConN: { _sub_Op_ConN(n);
    break;
  }
  case Op_ConNKlass: { _sub_Op_ConNKlass(n);
    break;
  }
  case Op_ConD: { _sub_Op_ConD(n);
    break;
  }
  case Op_ConF: { _sub_Op_ConF(n);
    break;
  }
  case Op_ConI: { _sub_Op_ConI(n);
    break;
  }
  case Op_ConL: { _sub_Op_ConL(n);
    break;
  }
  case Op_ConP: { _sub_Op_ConP(n);
    break;
  }
  case Op_Conv2B: { _sub_Op_Conv2B(n);
    break;
  }
  case Op_ConvD2F: { _sub_Op_ConvD2F(n);
    break;
  }
  case Op_ConvD2I: { _sub_Op_ConvD2I(n);
    break;
  }
  case Op_ConvD2L: { _sub_Op_ConvD2L(n);
    break;
  }
  case Op_ConvF2D: { _sub_Op_ConvF2D(n);
    break;
  }
  case Op_ConvF2I: { _sub_Op_ConvF2I(n);
    break;
  }
  case Op_ConvF2L: { _sub_Op_ConvF2L(n);
    break;
  }
  case Op_ConvI2D: { _sub_Op_ConvI2D(n);
    break;
  }
  case Op_ConvI2F: { _sub_Op_ConvI2F(n);
    break;
  }
  case Op_ConvI2L: { _sub_Op_ConvI2L(n);
    break;
  }
  case Op_ConvL2D: { _sub_Op_ConvL2D(n);
    break;
  }
  case Op_ConvL2F: { _sub_Op_ConvL2F(n);
    break;
  }
  case Op_ConvL2I: { _sub_Op_ConvL2I(n);
    break;
  }
  case Op_CountedLoopEnd: { _sub_Op_CountedLoopEnd(n);
    break;
  }
  case Op_CountLeadingZerosI: { _sub_Op_CountLeadingZerosI(n);
    break;
  }
  case Op_CountLeadingZerosL: { _sub_Op_CountLeadingZerosL(n);
    break;
  }
  case Op_CountTrailingZerosI: { _sub_Op_CountTrailingZerosI(n);
    break;
  }
  case Op_CountTrailingZerosL: { _sub_Op_CountTrailingZerosL(n);
    break;
  }
  case Op_CreateEx: { _sub_Op_CreateEx(n);
    break;
  }
  case Op_DecodeN: { _sub_Op_DecodeN(n);
    break;
  }
  case Op_DecodeNKlass: { _sub_Op_DecodeNKlass(n);
    break;
  }
  case Op_DivD: { _sub_Op_DivD(n);
    break;
  }
  case Op_DivF: { _sub_Op_DivF(n);
    break;
  }
  case Op_DivI: { _sub_Op_DivI(n);
    break;
  }
  case Op_DivL: { _sub_Op_DivL(n);
    break;
  }
  case Op_UDivI: { _sub_Op_UDivI(n);
    break;
  }
  case Op_UDivL: { _sub_Op_UDivL(n);
    break;
  }
  case Op_EncodeISOArray: { _sub_Op_EncodeISOArray(n);
    break;
  }
  case Op_EncodeP: { _sub_Op_EncodeP(n);
    break;
  }
  case Op_EncodePKlass: { _sub_Op_EncodePKlass(n);
    break;
  }
  case Op_FastLock: { _sub_Op_FastLock(n);
    break;
  }
  case Op_FastUnlock: { _sub_Op_FastUnlock(n);
    break;
  }
  case Op_FmaD: { _sub_Op_FmaD(n);
    break;
  }
  case Op_FmaF: { _sub_Op_FmaF(n);
    break;
  }
  case Op_Goto: { _sub_Op_Goto(n);
    break;
  }
  case Op_Halt: { _sub_Op_Halt(n);
    break;
  }
  case Op_CountPositives: { _sub_Op_CountPositives(n);
    break;
  }
  case Op_If: { _sub_Op_If(n);
    break;
  }
  case Op_LShiftI: { _sub_Op_LShiftI(n);
    break;
  }
  case Op_LShiftL: { _sub_Op_LShiftL(n);
    break;
  }
  case Op_LoadB: { _sub_Op_LoadB(n);
    break;
  }
  case Op_LoadUB: { _sub_Op_LoadUB(n);
    break;
  }
  case Op_LoadUS: { _sub_Op_LoadUS(n);
    break;
  }
  case Op_LoadD: { _sub_Op_LoadD(n);
    break;
  }
  case Op_LoadD_unaligned: { _sub_Op_LoadD_unaligned(n);
    break;
  }
  case Op_LoadF: { _sub_Op_LoadF(n);
    break;
  }
  case Op_LoadI: { _sub_Op_LoadI(n);
    break;
  }
  case Op_LoadKlass: { _sub_Op_LoadKlass(n);
    break;
  }
  case Op_LoadNKlass: { _sub_Op_LoadNKlass(n);
    break;
  }
  case Op_LoadL: { _sub_Op_LoadL(n);
    break;
  }
  case Op_LoadL_unaligned: { _sub_Op_LoadL_unaligned(n);
    break;
  }
  case Op_LoadP: { _sub_Op_LoadP(n);
    break;
  }
  case Op_LoadN: { _sub_Op_LoadN(n);
    break;
  }
  case Op_LoadRange: { _sub_Op_LoadRange(n);
    break;
  }
  case Op_LoadS: { _sub_Op_LoadS(n);
    break;
  }
  case Op_MaxI: { _sub_Op_MaxI(n);
    break;
  }
  case Op_MemBarAcquire: { _sub_Op_MemBarAcquire(n);
    break;
  }
  case Op_LoadFence: { _sub_Op_LoadFence(n);
    break;
  }
  case Op_MemBarAcquireLock: { _sub_Op_MemBarAcquireLock(n);
    break;
  }
  case Op_MemBarCPUOrder: { _sub_Op_MemBarCPUOrder(n);
    break;
  }
  case Op_MemBarRelease: { _sub_Op_MemBarRelease(n);
    break;
  }
  case Op_StoreFence: { _sub_Op_StoreFence(n);
    break;
  }
  case Op_StoreStoreFence: { _sub_Op_StoreStoreFence(n);
    break;
  }
  case Op_MemBarReleaseLock: { _sub_Op_MemBarReleaseLock(n);
    break;
  }
  case Op_MemBarVolatile: { _sub_Op_MemBarVolatile(n);
    break;
  }
  case Op_MemBarStoreStore: { _sub_Op_MemBarStoreStore(n);
    break;
  }
  case Op_MinI: { _sub_Op_MinI(n);
    break;
  }
  case Op_ModI: { _sub_Op_ModI(n);
    break;
  }
  case Op_ModL: { _sub_Op_ModL(n);
    break;
  }
  case Op_UModI: { _sub_Op_UModI(n);
    break;
  }
  case Op_UModL: { _sub_Op_UModL(n);
    break;
  }
  case Op_MoveI2F: { _sub_Op_MoveI2F(n);
    break;
  }
  case Op_MoveF2I: { _sub_Op_MoveF2I(n);
    break;
  }
  case Op_MoveL2D: { _sub_Op_MoveL2D(n);
    break;
  }
  case Op_MoveD2L: { _sub_Op_MoveD2L(n);
    break;
  }
  case Op_MulD: { _sub_Op_MulD(n);
    break;
  }
  case Op_MulF: { _sub_Op_MulF(n);
    break;
  }
  case Op_MulHiL: { _sub_Op_MulHiL(n);
    break;
  }
  case Op_MulI: { _sub_Op_MulI(n);
    break;
  }
  case Op_MulL: { _sub_Op_MulL(n);
    break;
  }
  case Op_NegD: { _sub_Op_NegD(n);
    break;
  }
  case Op_NegF: { _sub_Op_NegF(n);
    break;
  }
  case Op_OrI: { _sub_Op_OrI(n);
    break;
  }
  case Op_OrL: { _sub_Op_OrL(n);
    break;
  }
  case Op_OverflowAddL: { _sub_Op_OverflowAddL(n);
    break;
  }
  case Op_OverflowSubL: { _sub_Op_OverflowSubL(n);
    break;
  }
  case Op_OverflowMulL: { _sub_Op_OverflowMulL(n);
    break;
  }
  case Op_PartialSubtypeCheck: { _sub_Op_PartialSubtypeCheck(n);
    break;
  }
  case Op_PopCountI: { _sub_Op_PopCountI(n);
    break;
  }
  case Op_PopCountL: { _sub_Op_PopCountL(n);
    break;
  }
  case Op_PopCountVI: { _sub_Op_PopCountVI(n);
    break;
  }
  case Op_PrefetchAllocation: { _sub_Op_PrefetchAllocation(n);
    break;
  }
  case Op_RShiftI: { _sub_Op_RShiftI(n);
    break;
  }
  case Op_RShiftL: { _sub_Op_RShiftL(n);
    break;
  }
  case Op_Rethrow: { _sub_Op_Rethrow(n);
    break;
  }
  case Op_Return: { _sub_Op_Return(n);
    break;
  }
  case Op_RoundDouble: { _sub_Op_RoundDouble(n);
    break;
  }
  case Op_RoundDoubleMode: { _sub_Op_RoundDoubleMode(n);
    break;
  }
  case Op_RoundDoubleModeV: { _sub_Op_RoundDoubleModeV(n);
    break;
  }
  case Op_RoundFloat: { _sub_Op_RoundFloat(n);
    break;
  }
  case Op_SafePoint: { _sub_Op_SafePoint(n);
    break;
  }
  case Op_ShenandoahCompareAndExchangeP: { _sub_Op_ShenandoahCompareAndExchangeP(n);
    break;
  }
  case Op_ShenandoahCompareAndExchangeN: { _sub_Op_ShenandoahCompareAndExchangeN(n);
    break;
  }
  case Op_ShenandoahCompareAndSwapN: { _sub_Op_ShenandoahCompareAndSwapN(n);
    break;
  }
  case Op_ShenandoahCompareAndSwapP: { _sub_Op_ShenandoahCompareAndSwapP(n);
    break;
  }
  case Op_ShenandoahWeakCompareAndSwapN: { _sub_Op_ShenandoahWeakCompareAndSwapN(n);
    break;
  }
  case Op_ShenandoahWeakCompareAndSwapP: { _sub_Op_ShenandoahWeakCompareAndSwapP(n);
    break;
  }
  case Op_SqrtD: { _sub_Op_SqrtD(n);
    break;
  }
  case Op_SqrtF: { _sub_Op_SqrtF(n);
    break;
  }
  case Op_StoreB: { _sub_Op_StoreB(n);
    break;
  }
  case Op_StoreC: { _sub_Op_StoreC(n);
    break;
  }
  case Op_StoreCM: { _sub_Op_StoreCM(n);
    break;
  }
  case Op_StoreD: { _sub_Op_StoreD(n);
    break;
  }
  case Op_StoreF: { _sub_Op_StoreF(n);
    break;
  }
  case Op_StoreI: { _sub_Op_StoreI(n);
    break;
  }
  case Op_StoreL: { _sub_Op_StoreL(n);
    break;
  }
  case Op_StoreP: { _sub_Op_StoreP(n);
    break;
  }
  case Op_StoreN: { _sub_Op_StoreN(n);
    break;
  }
  case Op_StoreNKlass: { _sub_Op_StoreNKlass(n);
    break;
  }
  case Op_StrComp: { _sub_Op_StrComp(n);
    break;
  }
  case Op_StrCompressedCopy: { _sub_Op_StrCompressedCopy(n);
    break;
  }
  case Op_StrEquals: { _sub_Op_StrEquals(n);
    break;
  }
  case Op_StrIndexOf: { _sub_Op_StrIndexOf(n);
    break;
  }
  case Op_StrIndexOfChar: { _sub_Op_StrIndexOfChar(n);
    break;
  }
  case Op_StrInflatedCopy: { _sub_Op_StrInflatedCopy(n);
    break;
  }
  case Op_SubD: { _sub_Op_SubD(n);
    break;
  }
  case Op_SubF: { _sub_Op_SubF(n);
    break;
  }
  case Op_SubI: { _sub_Op_SubI(n);
    break;
  }
  case Op_SubL: { _sub_Op_SubL(n);
    break;
  }
  case Op_TailCall: { _sub_Op_TailCall(n);
    break;
  }
  case Op_TailJump: { _sub_Op_TailJump(n);
    break;
  }
  case Op_ThreadLocal: { _sub_Op_ThreadLocal(n);
    break;
  }
  case Op_URShiftI: { _sub_Op_URShiftI(n);
    break;
  }
  case Op_URShiftL: { _sub_Op_URShiftL(n);
    break;
  }
  case Op_XorI: { _sub_Op_XorI(n);
    break;
  }
  case Op_XorL: { _sub_Op_XorL(n);
    break;
  }
  case Op_AddVB: { _sub_Op_AddVB(n);
    break;
  }
  case Op_AddVS: { _sub_Op_AddVS(n);
    break;
  }
  case Op_AddVI: { _sub_Op_AddVI(n);
    break;
  }
  case Op_AddVL: { _sub_Op_AddVL(n);
    break;
  }
  case Op_AddVF: { _sub_Op_AddVF(n);
    break;
  }
  case Op_AddVD: { _sub_Op_AddVD(n);
    break;
  }
  case Op_SubVB: { _sub_Op_SubVB(n);
    break;
  }
  case Op_SubVS: { _sub_Op_SubVS(n);
    break;
  }
  case Op_SubVI: { _sub_Op_SubVI(n);
    break;
  }
  case Op_SubVL: { _sub_Op_SubVL(n);
    break;
  }
  case Op_SubVF: { _sub_Op_SubVF(n);
    break;
  }
  case Op_SubVD: { _sub_Op_SubVD(n);
    break;
  }
  case Op_MulVS: { _sub_Op_MulVS(n);
    break;
  }
  case Op_MulVI: { _sub_Op_MulVI(n);
    break;
  }
  case Op_MulVF: { _sub_Op_MulVF(n);
    break;
  }
  case Op_MulVD: { _sub_Op_MulVD(n);
    break;
  }
  case Op_FmaVD: { _sub_Op_FmaVD(n);
    break;
  }
  case Op_FmaVF: { _sub_Op_FmaVF(n);
    break;
  }
  case Op_DivVF: { _sub_Op_DivVF(n);
    break;
  }
  case Op_DivVD: { _sub_Op_DivVD(n);
    break;
  }
  case Op_AbsVF: { _sub_Op_AbsVF(n);
    break;
  }
  case Op_AbsVD: { _sub_Op_AbsVD(n);
    break;
  }
  case Op_NegVF: { _sub_Op_NegVF(n);
    break;
  }
  case Op_NegVD: { _sub_Op_NegVD(n);
    break;
  }
  case Op_SqrtVD: { _sub_Op_SqrtVD(n);
    break;
  }
  case Op_SqrtVF: { _sub_Op_SqrtVF(n);
    break;
  }
  case Op_LoadVector: { _sub_Op_LoadVector(n);
    break;
  }
  case Op_StoreVector: { _sub_Op_StoreVector(n);
    break;
  }
  case Op_ReplicateB: { _sub_Op_ReplicateB(n);
    break;
  }
  case Op_ReplicateS: { _sub_Op_ReplicateS(n);
    break;
  }
  case Op_ReplicateI: { _sub_Op_ReplicateI(n);
    break;
  }
  case Op_ReplicateL: { _sub_Op_ReplicateL(n);
    break;
  }
  case Op_ReplicateF: { _sub_Op_ReplicateF(n);
    break;
  }
  case Op_ReplicateD: { _sub_Op_ReplicateD(n);
    break;
  }
  case Op_Digit: { _sub_Op_Digit(n);
    break;
  }
  case Op_LowerCase: { _sub_Op_LowerCase(n);
    break;
  }
  case Op_UpperCase: { _sub_Op_UpperCase(n);
    break;
  }
  case Op_Whitespace: { _sub_Op_Whitespace(n);
    break;
  }
  case Op_VectorReinterpret: { _sub_Op_VectorReinterpret(n);
    break;
  }
  
  default:
    tty->print("Default case invoked for: \n");
    tty->print("   opcode  = %d, \"%s\"\n", opcode, NodeClassNames[opcode]);
    return false;
  }
  return true;
}
