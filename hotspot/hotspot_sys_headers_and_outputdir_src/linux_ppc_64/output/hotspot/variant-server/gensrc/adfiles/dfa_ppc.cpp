#line 1 "dfa_ppc.cpp"
//
// Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2012, 2017 SAP SE. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_ppc.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/matcher.hpp"
#include "opto/narrowptrnode.hpp"
#include "opto/opcodes.hpp"
#include "opto/convertnode.hpp"

//------------------------- Source -----------------------------------------

//------------------------- Attributes -------------------------------------

// AttributeForm 
static const int op_cost = 1;

// AttributeForm 
static const int ins_cost = DEFAULT_COST;

// AttributeForm 
static const int ins_short_branch = 0;

// AttributeForm 
static const int ins_is_TrapBasedCheckNode = true;

// AttributeForm 
static const int ins_num_consts = 0;

// AttributeForm 
static const int ins_alignment = 1;

// AttributeForm 
static const int ins_cannot_rematerialize = false;

// AttributeForm 
static const int ins_should_rematerialize = false;

// AttributeForm 
static const int ins_variable_size_depending_on_alignment = false;

// AttributeForm 
static const int ins_is_nop = false;

// AttributeForm 
static const int ins_use_mach_if_fast_lock_node = false;

// AttributeForm 
static const int ins_field_const_toc_offset = 0;

// AttributeForm 
static const int ins_field_const_toc_offset_hi_node = 0;

// AttributeForm 
static const int ins_field_cbuf_insts_offset = -1;

// AttributeForm 
static const int ins_field_load_ic_hi_node = 0;

// AttributeForm 
static const int ins_field_load_ic_node = 0;

//------------------------- Macros -----------------------------------------
#define DFA_PRODUCTION(result, rule, cost)\
  _cost[ (result) ] = cost; _rule[ (result) ] = rule;

#define DFA_PRODUCTION__SET_VALID(result, rule, cost)\
  DFA_PRODUCTION( (result), (rule), (cost) ); STATE__SET_VALID( (result) );

//------------------------- DFA --------------------------------------------
// DFA is a large switch with case statements for each ideal opcode encountered
// in any match rule in the ad file.  Each case has a series of if's to handle
// the match or fail decisions.  The matches test the cost function of that
// rule, and prune any cases which are higher cost for the same reduction.
// In order to generate the DFA we walk the table of ideal opcode/MatchList
// pairs generated by the ADLC front end to build the contents of the case
// statements (a series of if statements).


void  State::_sub_Op_RegN(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGNDST, iRegNdst_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, iRegNsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGNSRC, iRegNsrc_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_RegI(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGISRC, iRegIsrc_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGIDST, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+MEMORY_REF_COST+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGIDST, iRegIdst_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(RSCRATCH1REGI, rscratch1RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RSCRATCH2REGI, rscratch2RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG1REGI, rarg1RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG2REGI, rarg2RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG3REGI, rarg3RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG4REGI, rarg4RegI_rule, c+1)	  // overwrites higher cost rule
    }
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegP(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGPSRC, iRegPsrc_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c)
        DFA_PRODUCTION__SET_VALID(INDIRECT, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+100)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, iRegPdstNoScratch_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGPDST, iRegPdst_rule, c)
        DFA_PRODUCTION__SET_VALID(THREADREGP, threadRegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, rscratch1RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, rscratch2RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, rarg1RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, rarg2RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, rarg3RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, rarg4RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, inline_cache_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, compiler_method_oop_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, interpreter_method_oop_regP_rule, c+1)
    }
}
void  State::_sub_Op_RegF(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGF, regF_rule, c)
    }
}
void  State::_sub_Op_RegD(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGD, regD_rule, c)
    }
}
void  State::_sub_Op_RegL(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGL, rscratch2RegL_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLDST, iRegLdst_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, rarg1RegL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, rarg2RegL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, rarg3RegL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, rarg4RegL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, iRegLsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+1+MEMORY_REF_COST)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGL, rscratch1RegL_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGLSRC, iRegLsrc_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)	  // overwrites higher cost rule
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGLDST, iRegLdst_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG1REGL, rarg1RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG2REGL, rarg2RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG3REGL, rarg3RegL_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG4REGL, rarg4RegL_rule, c+1)	  // overwrites higher cost rule
    }
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegFlags(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGCTR, regCTR_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR6, flagsRegCR6_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR1, flagsRegCR1_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, flagsRegCR0_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, flagsRegSrc_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(FLAGSREGSRC, flagsRegSrc_rule, c)	  // overwrites higher cost rule
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, flagsReg_rule, c)
    }
}
void  State::_sub_Op_VecX(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(VECX, vecX_rule, c)
    }
}
void  State::_sub_Op_AbsD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_ABSD_REGD_, _AbsD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, absD_reg_rule, c)
    }
}
void  State::_sub_Op_AbsF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_ABSF_REGF_, _AbsF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, absF_reg_rule, c)
    }
}
void  State::_sub_Op_AbsI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+DEFAULT_COST*3;
        DFA_PRODUCTION__SET_VALID(IREGIDST, absI_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, absI_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, absI_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, absI_reg_Ex_rule, c+1)
    }
}
void  State::_sub_Op_AddD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, addD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, addF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIHI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIHI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, addI_reg_immhi16_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, addI_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, addI_reg_immhi16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, addI_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_immhi16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, addI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, addI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI_IREGISRC_IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ADDI_IREGISRC__ADDI_IREGISRC_IREGISRC, _AddI_iRegIsrc__AddI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_addI_addI_addI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_addI_addI_addI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_addI_addI_addI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ADDI__ADDI_IREGISRC_IREGISRC_IREGISRC, _AddI__AddI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ADDI_IREGISRC_IREGISRC, _AddI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC_IREGL2ISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC_IREGL2ISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC_IREGL2ISRC]+_kids[1]->_cost[IREGISRC_IREGL2ISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, addI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML32HI16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML32HI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, addL_reg_immhi16_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, addL_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, addL_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, addL_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, addL_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, addL_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, addL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL_IREGLSRC_IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ADDL_IREGLSRC__ADDL_IREGLSRC_IREGLSRC, _AddL_iRegLsrc__AddL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], _ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, tree_addL_addL_addL_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, tree_addL_addL_addL_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ADDL__ADDL_IREGLSRC_IREGLSRC_IREGLSRC, _AddL__AddL_iRegLsrc_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ADDL_IREGLSRC_IREGLSRC, _AddL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, addL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AddP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMP) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IMMP]+_kids[1]->_cost[IMML];
        DFA_PRODUCTION__SET_VALID(_ADDP_IMMP_IMML, _AddP_immP_immL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML32HI16) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML32HI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, addP_reg_immhi16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_immhi16_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, addP_reg_immhi16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_immhi16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_immhi16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, addP_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm16_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, addP_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, addP_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ADDP_INDIRECTMEMORY_IREGLSRC, _AddP_indirectMemory_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODENKLASS_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) &&
        
#line 5095 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_klass_base() == NULL && Universe::narrow_klass_shift() == 0
#line 839 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODENKLASS_IREGNSRC_]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16NARROWALG4_KLASS, indOffset16NarrowAlg4_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indOffset16NarrowAlg4_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) &&
        
#line 5081 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 851 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16NARROWALG4, indOffset16NarrowAlg4_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indOffset16NarrowAlg4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODENKLASS_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        
#line 5066 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_klass_base() == NULL && Universe::narrow_klass_shift() == 0
#line 863 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODENKLASS_IREGNSRC_]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16NARROW_KLASS, indOffset16Narrow_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset16Narrow_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        
#line 5052 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 875 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16NARROW, indOffset16Narrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset16Narrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16ALG4) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16ALG4]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16ALG4, indOffset16Alg4_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indOffset16Alg4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16]+100;
        DFA_PRODUCTION__SET_VALID(INDOFFSET16, indOffset16_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset16_rule, c)
      }
    }
}
void  State::_sub_Op_AndI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGISRC_UIMMI16, _AndI_iRegIsrc_uimmI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOWEROF2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOWEROF2];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGISRC_IMMIPOWEROF2, _AndI_iRegIsrc_immIpowerOf2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC_IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC_IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, andcI_reg_reg_0_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, andcI_reg_reg_0_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andcI_reg_reg_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andcI_reg_reg_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC_IMMI_MINUS1) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC_IMMI_MINUS1]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andcI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andcI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andcI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andcI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOWEROF2) &&
        (
#line 10235 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 957 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOWEROF2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_immIpowerOf2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_immIpowerOf2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_immIpowerOf2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_immIpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_immIpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_immIpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMINEGPOW2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_immInegpow2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_immInegpow2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_immInegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_immInegpow2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_uimm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_uimm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMIHI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMIHI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_immIhi16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_immIhi16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_immIhi16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_immIhi16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGISRC_IMMI) && STATE__VALID_CHILD(_kids[1], IMMIPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGISRC_IMMI]+_kids[1]->_cost[IMMIPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, andI_urShiftI_regI_immI_immIpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_urShiftI_regI_immI_immIpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGISRC_UIMMI5) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGISRC_UIMMI5]+_kids[1]->_cost[IMMINEGPOW2];
        DFA_PRODUCTION__SET_VALID(_ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2, _AndI__RShiftI_iRegIsrc_uimmI5_immInegpow2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMINEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMINEGPOW2];
        DFA_PRODUCTION__SET_VALID(_ANDI_IREGISRC_IMMINEGPOW2, _AndI_iRegIsrc_immInegpow2_rule, c)
    }
}
void  State::_sub_Op_AndL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGPSRC_) && STATE__VALID_CHILD(_kids[1], IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGPSRC_]+_kids[1]->_cost[IMMLNEGPOW2];
        DFA_PRODUCTION__SET_VALID(_ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2, _AndL__CastP2X_iRegPsrc__immLnegpow2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16];
        DFA_PRODUCTION__SET_VALID(_ANDL_IREGLSRC_UIMML16, _AndL_iRegLsrc_uimmL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ANDL_IREGLSRC_IREGLSRC, _AndL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, zeroExtendL_regL_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, zeroExtendL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, zeroExtendL_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, zeroExtendL_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLPOW2MINUS1];
        DFA_PRODUCTION__SET_VALID(_ANDL_IREGLSRC_IMMLPOW2MINUS1, _AndL_iRegLsrc_immLpow2minus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, andL_reg_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMLNEGPOW2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, andL_reg_immLnegpow2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, andL_reg_immLnegpow2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, andL_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, andL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGLSRC_IMMI) && STATE__VALID_CHILD(_kids[1], IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGLSRC_IMMI]+_kids[1]->_cost[IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, andL_urShiftL_regL_immI_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, andL_urShiftL_regL_immI_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) &&
        (
#line 5676 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_kids[0]->_leaf->as_Load()->is_unordered()
#line 1373 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IMML_32BITS] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AryEq(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12807 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU
#line 1404 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, array_equalsC_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, array_equalsC_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, array_equalsC_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12791 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL
#line 1422 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, array_equalsB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, array_equalsB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, array_equalsB_rule, c+1)
      }
    }
}
void  State::_sub_Op_Binary(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG2REGP_IREGISRC, _Binary_rarg2RegP_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], RSCRATCH2REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[RSCRATCH2REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPSRC_RSCRATCH2REGI, _Binary_iRegPsrc_rscratch2RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], UIMMI15) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[UIMMI15];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPSRC_UIMMI15, _Binary_iRegPsrc_uimmI15_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], RSCRATCH1REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[RSCRATCH1REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPSRC_RSCRATCH1REGI, _Binary_iRegPsrc_rscratch1RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RSCRATCH2REGP) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[RSCRATCH2REGP]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION__SET_VALID(_BINARY_RSCRATCH2REGP_IMMI_1, _Binary_rscratch2RegP_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_IMMP_IMML) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_IMMP_IMML]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION__SET_VALID(_BINARY__ADDP_IMMP_IMML_IMMI_1, _Binary__AddP_immP_immL_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPSRC_IREGISRC, _Binary_iRegPsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG2REGP];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG1REGP_RARG2REGP, _Binary_rarg1RegP_rarg2RegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG4REGI) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[RARG4REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG2REGP_RARG4REGI, _Binary_rarg2RegP_rarg4RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[RARG3REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG1REGP_RARG3REGI, _Binary_rarg1RegP_rarg3RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_NEGD_REGD_];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGD__NEGD_REGD_, _Binary_regD__NegD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_BINARY__NEGD_REGD__REGD, _Binary__NegD_regD__regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_NEGF_REGF_];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGF__NEGF_REGF_, _Binary_regF__NegF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_BINARY__NEGF_REGF__REGF, _Binary__NegF_regF__regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGNSRC_IREGNSRC, _Binary_iRegNsrc_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], RARG4REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[RARG4REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGISRC_RARG4REGI, _Binary_iRegIsrc_rarg4RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGISRC_IREGISRC, _Binary_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPSRC_IREGPSRC, _Binary_iRegPsrc_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLSRC_IREGLSRC, _Binary_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGD_REGD, _Binary_regD_regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGF_REGF, _Binary_regF_regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IMMP_0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPDST_IMMP_0, _Binary_iRegPdst_immP_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPDST_IREGP_N2P, _Binary_iRegPdst_iRegP_N2P_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGPDST_IREGPSRC, _Binary_iRegPdst_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNDST) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNDST]+_kids[1]->_cost[IMMN_0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGNDST_IMMN_0, _Binary_iRegNdst_immN_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNDST) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNDST]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGNDST_IREGNSRC, _Binary_iRegNdst_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST]+_kids[1]->_cost[IMML16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLDST_IMML16, _Binary_iRegLdst_immL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLDST]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLDST_IREGLSRC, _Binary_iRegLdst_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST]+_kids[1]->_cost[IMMI16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGIDST_IMMI16, _Binary_iRegIdst_immI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGIDST_IREGISRC, _Binary_iRegIdst_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOP_FLAGSREGSRC, _Binary_cmpOp_flagsRegSrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGNSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLSRC_IREGNSRC, _Binary_iRegLsrc_iRegNsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLSRC_IREGPSRC, _Binary_iRegLsrc_iRegPsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGPDST];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGLSRC_IREGPDST, _Binary_iRegLsrc_iRegPdst_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[FLAGSREGSRC]+_kids[1]->_cost[IREGPSRC];
        DFA_PRODUCTION__SET_VALID(_BINARY_FLAGSREGSRC_IREGPSRC, _Binary_flagsRegSrc_iRegPsrc_rule, c)
    }
}
void  State::_sub_Op_Bool(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOP, cmpOp_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_REVERSEBYTESI_IREGISRC_, _ReverseBytesI_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_INDIRECT_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadI_reversed_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadI_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadI_reversed_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadI_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadI_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadI_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadI_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadI_reversed_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+7*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, bytes_reverse_int_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, bytes_reverse_int_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, bytes_reverse_int_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, bytes_reverse_int_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReverseBytesL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_REVERSEBYTESL_IREGLSRC_, _ReverseBytesL_iRegLsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_INDIRECT_) &&
        (
#line 13582 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_ldbrx()
#line 1666 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_INDIRECT_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadL_reversed_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadL_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadL_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadL_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadL_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+15*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, bytes_reverse_long_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, bytes_reverse_long_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReverseBytesUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_REVERSEBYTESUS_IREGISRC_, _ReverseBytesUS_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_INDIRECT_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUS_reversed_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUS_reversed_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUS_reversed_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, bytes_reverse_ushort_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, bytes_reverse_ushort_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, bytes_reverse_ushort_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReverseBytesS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_REVERSEBYTESS_IREGISRC_, _ReverseBytesS_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_INDIRECT_]+MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadS_reversed_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadS_reversed_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadS_reversed_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadS_reversed_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+3*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, bytes_reverse_short_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, bytes_reverse_short_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, bytes_reverse_short_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, bytes_reverse_short_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CallDynamicJava(const Node *n){
    if(         (
#line 14281 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!UseInlineCaches
#line 1810 "dfa_ppc.cpp"
) ) {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallDynamicJavaDirect_rule, c)
    }
    if(         (
#line 14266 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseInlineCaches
#line 1818 "dfa_ppc.cpp"
) ) {
      unsigned int c = CALL_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallDynamicJavaDirectSched_Ex_rule, c)
      }
    }
    if(         (
#line 14244 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 1828 "dfa_ppc.cpp"
) ) {
      unsigned int c = DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallDynamicJavaDirectSched_rule, c)
      }
    }
}
void  State::_sub_Op_CallLeaf(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafDirect_Ex_rule, c)
    }
    if(         (
#line 14326 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 1844 "dfa_ppc.cpp"
) ) {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafDirect_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_CallLeafNoFP(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafNoFPDirect_Ex_rule, c)
    }
}
void  State::_sub_Op_CallRuntime(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallRuntimeDirect_rule, c)
    }
}
void  State::_sub_Op_CallStaticJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallStaticJavaDirect_rule, c)
    }
}
void  State::_sub_Op_CastII(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIDST) ) {
      unsigned int c = _kids[0]->_cost[IREGIDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, castII_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, castII_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, castII_rule, c+1)
    }
}
void  State::_sub_Op_CastX2P(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2) ) {
      unsigned int c = _kids[0]->_cost[_ANDL__CASTP2X_IREGPSRC__IMMLNEGPOW2] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, align_addr_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, align_addr_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, align_addr_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, align_addr_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, align_addr_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, castX2P_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, castX2P_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, castX2P_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, castX2P_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castX2P_rule, c+1)
      }
    }
}
void  State::_sub_Op_CastP2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC];
        DFA_PRODUCTION__SET_VALID(_CASTP2X_IREGPSRC_, _CastP2X_iRegPsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, castP2X_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_CASTP2X_IREGP_N2P_, _CastP2X_iRegP_N2P__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGNSRC_) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGNSRC_];
        DFA_PRODUCTION__SET_VALID(_CASTP2X__DECODEN_IREGNSRC__, _CastP2X__DecodeN_iRegNsrc___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADP_MEMORYALG4_) &&
        (
#line 5873 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered()
#line 1990 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADP_MEMORYALG4_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadP2X_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadP2X_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, castPP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, castPP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, castPP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castPP_rule, c+1)
    }
}
void  State::_sub_Op_CheckCastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, checkCastPP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, checkCastPP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, checkCastPP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, checkCastPP_rule, c+1)
    }
}
void  State::_sub_Op_ClearArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGL) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGL]+_kids[1]->_cost[RARG2REGP]+4 * MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArray_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[IMML]+_kids[1]->_cost[RARG2REGP]+3 * MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArrayLarge_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMLMAX30) && STATE__VALID_CHILD(_kids[1], RARG2REGP) ) {
      unsigned int c = _kids[0]->_cost[IMMLMAX30]+_kids[1]->_cost[RARG2REGP]+2 * MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArrayShort_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_REGD_REGD]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(REGD, cmovD_reg_rule, c)
    }
}
void  State::_sub_Op_CMoveF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_REGF_REGF]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(REGF, cmovF_reg_rule, c)
    }
}
void  State::_sub_Op_CMoveI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IMMI16]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmovI_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmovI_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmovI_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IREGISRC) &&
        (
#line 7609 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2110 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IREGISRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmovI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmovI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmovI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIDST_IREGISRC) &&
        (
#line 7591 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2148 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGIDST_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmovI_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmovI_reg_isel_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmovI_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmovI_reg_isel_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IMML16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IMML16]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, cmovL_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IREGLSRC) &&
        (
#line 7655 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2198 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IREGLSRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, cmovL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLDST_IREGLSRC) &&
        (
#line 7637 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2227 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGLDST_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, cmovL_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, cmovL_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CMoveP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IMMP_0]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, cmovP_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovP_imm_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, cmovP_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovP_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IREGP_N2P) &&
        (
#line 7748 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2279 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IREGP_N2P]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, cmovP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovP_reg_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, cmovP_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovP_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPDST_IREGPSRC) &&
        (
#line 7730 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2341 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGPDST_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, cmovP_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovP_reg_isel_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, cmovP_reg_isel_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cmovP_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovP_reg_isel_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IMMN_0]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, cmovN_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IREGNSRC) &&
        (
#line 7702 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_isel()
#line 2411 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IREGNSRC]+DEFAULT_COST+BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, cmovN_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREGSRC) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNDST_IREGNSRC) &&
        (
#line 7683 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 2428 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREGSRC]+_kids[1]->_cost[_BINARY_IREGNDST_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, cmovN_reg_isel_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, cmovN_reg_isel_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IMMN_0]+2;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpN_reg_imm0_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpN_reg_imm0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IREGNSRC]+2;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpN_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpN_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) && STATE__VALID_CHILD(_kids[1], IMMN_0) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+_kids[1]->_cost[IMMN_0];
        DFA_PRODUCTION__SET_VALID(_CMPN_IREGNSRC_IMMN_0, _CmpN_iRegNsrc_immN_0_rule, c)
    }
}
void  State::_sub_Op_CmpD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpD_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) &&
        (
#line 12311 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 2472 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpDUnordered_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpDUnordered_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpD3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST*5+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmpD3_reg_reg_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmpD3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmpD3_reg_reg_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmpD3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpD3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpD3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpD3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpD3_reg_reg_ExEx_rule, c+1)
    }
}
void  State::_sub_Op_CmpF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpF_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) &&
        (
#line 12196 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 2508 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFUnordered_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpFUnordered_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpF3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST*5+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmpF3_reg_reg_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmpF3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmpF3_reg_reg_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmpF3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpF3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpF3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpF3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpF3_reg_reg_ExEx_rule, c+1)
    }
}
void  State::_sub_Op_CmpI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_UIMMI16) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_UIMMI16]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, testI_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, testI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpI_reg_imm16_rule, c)
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_UIMML16) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_UIMML16]+_kids[1]->_cost[IMML_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, testL_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, testL_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_IREGLSRC]+_kids[1]->_cost[IMML_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGCR0) || _cost[FLAGSREGCR0] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, testL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, testL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpL_reg_imm16_rule, c)
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpL_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+DEFAULT_COST*5+BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmpL3_reg_reg_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmpL3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmpL3_reg_reg_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmpL3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpL3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpL3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpL3_reg_reg_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpL3_reg_reg_ExEx_rule, c+1)
    }
}
void  State::_sub_Op_CmpLTMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmpLTMask_reg_immI0_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmpLTMask_reg_immI0_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpLTMask_reg_immI0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpLTMask_reg_immI0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*4;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, cmpLTMask_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, cmpLTMask_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpLTMask_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        (
#line 12179 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 2657 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpP_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpP_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP_0OR1) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP_0OR1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpP_reg_null_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpP_reg_null_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpP_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP_0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP_0];
        DFA_PRODUCTION__SET_VALID(_CMPP_IREGP_N2P_IMMP_0, _CmpP_iRegP_N2P_immP_0_rule, c)
    }
}
void  State::_sub_Op_CmpU(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compU_reg_uimm16_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, compU_reg_uimm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compU_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, compU_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_CMPU_IREGISRC_IREGISRC, _CmpU_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI15) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI15];
        DFA_PRODUCTION__SET_VALID(_CMPU_IREGISRC_UIMMI15, _CmpU_iRegIsrc_uimmI15_rule, c)
    }
}
void  State::_sub_Op_CmpUL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpUL_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpUL_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpUL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpUL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7905 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 2731 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapB4_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapB4_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapB4_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7885 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 2749 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 7945 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 2789 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapS4_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapS4_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapS4_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 7925 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 2807 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapI_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapI_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapI_regP_regI_regI_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapL_regP_regL_regL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapL_regP_regL_regL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapL_regP_regL_regL_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapP_regP_regP_regP_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapP_regP_regP_regP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapP_regP_regP_regP_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndSwapN_regP_regN_regN_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndSwapN_regP_regN_regN_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapN_regP_regN_regN_rule, c+1)
    }
}
void  State::_sub_Op_WeakCompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8088 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 2907 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapB4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8073 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 2925 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapB_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapB_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8058 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 2963 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapB4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapB4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapB4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8043 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3001 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8148 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 3041 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapS4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8133 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 3059 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapS_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapS_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8118 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 3097 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapS4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapS4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapS4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8103 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3135 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8178 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3175 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapI_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapI_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8163 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3193 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapI_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapI_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapI_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8243 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3233 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapL_acq_regP_regL_regL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapL_acq_regP_regL_regL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8227 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3251 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapL_regP_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapL_regP_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapL_regP_regL_regL_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8275 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3291 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapP_acq_regP_regP_regP_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapP_acq_regP_regP_regP_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8260 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3309 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapP_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapP_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapP_regP_regP_regP_rule, c+1)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8210 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3349 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapN_acq_regP_regN_regN_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapN_acq_regP_regN_regN_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8195 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3367 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, weakCompareAndSwapN_regP_regN_regN_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, weakCompareAndSwapN_regP_regN_regN_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, weakCompareAndSwapN_regP_regN_regN_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8345 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 3407 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeB4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeB4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8324 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 3425 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeB_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeB_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeB_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8309 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 3463 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeB4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeB4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeB4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8294 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3501 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeB_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeB_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeB_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8417 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && !VM_Version::has_lqarx()
#line 3541 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeS4_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeS4_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8396 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst) && VM_Version::has_lqarx()
#line 3559 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeS_acq_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeS_acq_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeS_acq_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_RARG4REGI) &&
        (
#line 8381 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && !VM_Version::has_lqarx()
#line 3597 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[_BINARY_IREGISRC_RARG4REGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeS4_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeS4_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeS4_regP_regI_regI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8366 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst && VM_Version::has_lqarx()
#line 3635 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeS_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeS_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeS_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8453 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3675 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeI_acq_regP_regI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeI_acq_regP_regI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeI_acq_regP_regI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGISRC_IREGISRC) &&
        (
#line 8438 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3693 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, compareAndExchangeI_regP_regI_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, compareAndExchangeI_regP_regI_regI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndExchangeI_regP_regI_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8525 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3733 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, compareAndExchangeL_acq_regP_regL_regL_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, compareAndExchangeL_acq_regP_regL_regL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) &&
        (
#line 8510 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3748 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, compareAndExchangeL_regP_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, compareAndExchangeL_regP_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8561 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3779 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, compareAndExchangeP_acq_regP_regP_regP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, compareAndExchangeP_acq_regP_regP_regP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, compareAndExchangeP_acq_regP_regP_regP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, compareAndExchangeP_acq_regP_regP_regP_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) &&
        (
#line 8546 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3805 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, compareAndExchangeP_regP_regP_regP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, compareAndExchangeP_regP_regP_regP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, compareAndExchangeP_regP_regP_regP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, compareAndExchangeP_regP_regP_regP_rule, c+1)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8489 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() == MemNode::acquire || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
#line 3869 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, compareAndExchangeN_acq_regP_regN_regN_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, compareAndExchangeN_acq_regP_regN_regN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNSRC_IREGNSRC) &&
        (
#line 8474 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
#line 3880 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[_BINARY_IREGNSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, compareAndExchangeN_regP_regN_regN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, compareAndExchangeN_regP_regN_regN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8601 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 3899 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndAddB4_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndAddB4_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndAddB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndAddB4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8584 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 3917 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndAddB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndAddB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndAddB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndAddB_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8635 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 3957 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndAddS4_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndAddS4_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndAddS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndAddS4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8618 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 3975 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndAddS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndAddS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndAddS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndAddS_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndAddI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndAddI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndAddI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndAddI_rule, c+1)
    }
}
void  State::_sub_Op_GetAndAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, getAndAddL_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, getAndAddL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, getAndAddL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_GetAndSetB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8701 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4042 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndSetB4_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndSetB4_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndSetB4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndSetB4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8684 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4060 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndSetB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndSetB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndSetB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndSetB_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndSetS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG3REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8735 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_lqarx()
#line 4100 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[RARG3REGP]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndSetS4_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndSetS4_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndSetS4_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndSetS4_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 8718 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_lqarx()
#line 4118 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndSetS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndSetS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndSetS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndSetS_rule, c+1)
      }
    }
}
void  State::_sub_Op_GetAndSetI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, getAndSetI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, getAndSetI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, getAndSetI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, getAndSetI_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, getAndSetL_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, getAndSetL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, getAndSetL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_GetAndSetP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, getAndSetP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, getAndSetP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, getAndSetP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, getAndSetP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, getAndSetP_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, getAndSetN_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, getAndSetN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
}
void  State::_sub_Op_ConN(const Node *n){
    if(         
#line 4402 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->get_narrowcon() == 0
#line 4215 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMN_0, immN_0_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadConN0_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadConN0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST+1)
    }
    {
      unsigned int c = 10;
        DFA_PRODUCTION__SET_VALID(IMMN, immN_rule, c)
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadConN_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadConN_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGNDST KNOWN_VALID || */ _cost[IREGNDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGNDST, loadConN_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* IREGNSRC KNOWN_VALID || */ _cost[IREGNSRC] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGNSRC, loadConN_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGN_P2N KNOWN_VALID || */ _cost[IREGN_P2N] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConNKlass(const Node *n){
    if(         
#line 4423 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 4250 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMNKLASS_NM, immNKlass_NM_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadConNKlass_hi_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadConNKlass_hi_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST+1)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMNKLASS, immNKlass_rule, c)
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadConNKlass_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadConNKlass_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGNDST KNOWN_VALID || */ _cost[IREGNDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGNDST, loadConNKlass_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* IREGNSRC KNOWN_VALID || */ _cost[IREGNSRC] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGNSRC, loadConNKlass_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGN_P2N KNOWN_VALID || */ _cost[IREGN_P2N] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(IREGN_P2N, iRegNsrc_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConD(const Node *n){
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMMD, immD_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, loadConD_Ex_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(REGD, loadConD_Ex_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_ConF(const Node *n){
    if(         
#line 4589 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
jint_cast(n->getf()) == 0
#line 4293 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMF_0, immF_0_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMMF, immF_rule, c)
        DFA_PRODUCTION__SET_VALID(REGF, loadConF_Ex_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(REGF, loadConF_Ex_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_ConI(const Node *n){
    int _n_get_int__ = n->get_int();
    if(         
#line 4383 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 24
#line 4310 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_24, immI_24_rule, c)
    }
    if(         
#line 4374 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 16
#line 4318 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_16, immI_16_rule, c)
    }
    if(         
#line 4365 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == -1
#line 4326 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_MINUS1, immI_minus1_rule, c)
    }
    if(         
#line 4356 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 1
#line 4334 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_1, immI_1_rule, c)
    }
    if(         
#line 4347 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_int__ == 0
#line 4342 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI_0, immI_0_rule, c)
    }
    if(         
#line 4338 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 16)
#line 4350 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMMI16, uimmI16_rule, c)
    }
    if(         
#line 4329 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 15)
#line 4358 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMMI15, uimmI15_rule, c)
    }
    if(         
#line 4320 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 6) && _n_get_int__ >= 32
#line 4366 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMMI6_GE32, uimmI6_ge32_rule, c)
    }
    if(         
#line 4311 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 6)
#line 4374 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMMI6, uimmI6_rule, c)
    }
    if(         
#line 4302 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_int__, 5)
#line 4382 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMMI5, uimmI5_rule, c)
    }
    if(         
#line 4293 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2_long((((jlong) (julong) (juint) (_n_get_int__))))
#line 4390 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIPOWEROF2, immIpowerOf2_rule, c)
    }
    if(         
#line 4285 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2_long((((jlong) (_n_get_int__))+1))
#line 4398 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIPOW2MINUS1, immIpow2minus1_rule, c)
    }
    if(         
#line 4277 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2_long((jlong) (julong) (juint) (-(_n_get_int__)))
#line 4406 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMINEGPOW2, immInegpow2_rule, c)
    }
    if(         
#line 4269 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((_n_get_int__ & 0xffff0000) != 0) && ((_n_get_int__ & 0xffff) == 0)
#line 4414 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMIHI16, immIhi16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadConIhi16_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadConIhi16_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConIhi16_rule, c+DEFAULT_COST+1)
    }
    if(         
#line 4260 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_int__, 16)
#line 4432 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI16, immI16_rule, c)
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadConI16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadConI16_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConI16_rule, c+DEFAULT_COST+1)
      }
    }
    if(         
#line 4251 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_int__, 8)
#line 4470 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMI8, immI8_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMMI, immI_rule, c)
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadConI_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+DEFAULT_COST*2+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadConI_Ex_rule, c+DEFAULT_COST*2+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST*2+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST*2+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+DEFAULT_COST*2+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+DEFAULT_COST*2+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConI_Ex_rule, c+DEFAULT_COST*2+1)
      }
    }
   if ( /* IREGIDST KNOWN_VALID || */ _cost[IREGIDST] > DEFAULT_COST*2) {
     DFA_PRODUCTION(IREGIDST, loadConI_Ex_rule, DEFAULT_COST*2)
   }
   if ( /* RSCRATCH1REGI KNOWN_VALID || */ _cost[RSCRATCH1REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RSCRATCH1REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* IREGISRC KNOWN_VALID || */ _cost[IREGISRC] > DEFAULT_COST*2+1+1) {
     DFA_PRODUCTION(IREGISRC, loadConI_Ex_rule, DEFAULT_COST*2+1+1)
   }
   if ( /* STACKSLOTI KNOWN_VALID || */ _cost[STACKSLOTI] > DEFAULT_COST*2+1+1 + MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, DEFAULT_COST*2+1+1 + MEMORY_REF_COST)
   }
   if ( /* IREGISRC_IREGL2ISRC KNOWN_VALID || */ _cost[IREGISRC_IREGL2ISRC] > DEFAULT_COST*2+1+1) {
     DFA_PRODUCTION(IREGISRC_IREGL2ISRC, iRegIsrc_rule, DEFAULT_COST*2+1+1)
   }
   if ( /* RSCRATCH2REGI KNOWN_VALID || */ _cost[RSCRATCH2REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RSCRATCH2REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG1REGI KNOWN_VALID || */ _cost[RARG1REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG1REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG2REGI KNOWN_VALID || */ _cost[RARG2REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG2REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG3REGI KNOWN_VALID || */ _cost[RARG3REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG3REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
   if ( /* RARG4REGI KNOWN_VALID || */ _cost[RARG4REGI] > DEFAULT_COST*2+1) {
     DFA_PRODUCTION(RARG4REGI, loadConI_Ex_rule, DEFAULT_COST*2+1)
   }
}
void  State::_sub_Op_ConL(const Node *n){
    jlong _n_get_long__ = n->get_long();
    if(         
#line 4572 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_uimm(_n_get_long__, 16)
#line 4545 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UIMML16, uimmL16_rule, c)
    }
    if(         
#line 4563 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 4553 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_32BITS, immL_32bits_rule, c)
    }
    if(         
#line 4554 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == -1L
#line 4561 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_MINUS1, immL_minus1_rule, c)
    }
    if(         
#line 4545 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_n_get_long__ == 0L
#line 4569 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML_0, immL_0_rule, c)
    }
    if(         
#line 4535 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2_long((((jlong) (_n_get_long__))+1)) &&
            (_n_get_long__ != (jlong)0xffffffffffffffffL)
#line 4578 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLPOW2MINUS1, immLpow2minus1_rule, c)
    }
    if(         
#line 4527 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
is_power_of_2_long((jlong)-(_n_get_long__))
#line 4586 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLNEGPOW2, immLnegpow2_rule, c)
    }
    if(         
#line 4519 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(_n_get_long__ & 0xffff000000000000L) != 0L && (_n_get_long__ & 0x0000ffffffffffffL) == 0L
#line 4594 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLHIGHEST16, immLhighest16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadConLhighest16_Ex_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadConLhighest16_Ex_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
    }
    if(         
#line 4510 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 32)
#line 4609 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML32, immL32_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST*2) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadConL32_Ex_rule, c+DEFAULT_COST*2)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST*2+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadConL32_Ex_rule, c+DEFAULT_COST*2+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST*2+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST*2+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4501 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 32) && ((_n_get_long__ & 0xffffL) == 0L)
#line 4638 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML32HI16, immL32hi16_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadConL32hi16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadConL32hi16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4492 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 16) && ((_n_get_long__ & 0x3) == 0)
#line 4667 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML16ALG4, immL16Alg4_rule, c)
    }
    if(         
#line 4483 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Assembler::is_simm(_n_get_long__, 16)
#line 4675 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMML16, immL16_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadConL16_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadConL16_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+1+MEMORY_REF_COST)
      }
    }
    if(         
#line 4474 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(_n_get_long__ <= 30)
#line 4704 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMLMAX30, immLmax30_rule, c)
    }
    {
      unsigned int c = 40;
        DFA_PRODUCTION__SET_VALID(IMML, immL_rule, c)
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadConL_Ex_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadConL_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST+1+MEMORY_REF_COST)
      }
    }
   if ( /* IREGLDST KNOWN_VALID || */ _cost[IREGLDST] > MEMORY_REF_COST) {
     DFA_PRODUCTION(IREGLDST, loadConL_Ex_rule, MEMORY_REF_COST)
   }
   if ( /* RARG1REGL KNOWN_VALID || */ _cost[RARG1REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG1REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG2REGL KNOWN_VALID || */ _cost[RARG2REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG2REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG3REGL KNOWN_VALID || */ _cost[RARG3REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG3REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* RARG4REGL KNOWN_VALID || */ _cost[RARG4REGL] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(RARG4REGL, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* IREGLSRC KNOWN_VALID || */ _cost[IREGLSRC] > MEMORY_REF_COST+1) {
     DFA_PRODUCTION(IREGLSRC, loadConL_Ex_rule, MEMORY_REF_COST+1)
   }
   if ( /* STACKSLOTL KNOWN_VALID || */ _cost[STACKSLOTL] > MEMORY_REF_COST+1+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST+1+MEMORY_REF_COST)
   }
}
void  State::_sub_Op_ConP(const Node *n){
    if(         
#line 4459 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(n->get_ptr() == 0) || (n->get_ptr() == 1)
#line 4760 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMP_0OR1, immP_0or1_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadConP0or1_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP0or1_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+DEFAULT_COST+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadConP0or1_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP0or1_rule, c+DEFAULT_COST+1)
    }
    if(         
#line 4450 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->get_ptr() == 0
#line 4786 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMP_0, immP_0_rule, c)
    }
    if(         
#line 4442 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 4794 "dfa_ppc.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMP_NM, immP_NM_rule, c)
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadConP_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+DEFAULT_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+DEFAULT_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadConP_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP_rule, c+DEFAULT_COST+1)
      }
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(IMMP, immP_rule, c)
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadConP_Ex_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP_Ex_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+MEMORY_REF_COST+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+MEMORY_REF_COST+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+MEMORY_REF_COST+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadConP_Ex_rule, c+MEMORY_REF_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+MEMORY_REF_COST+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP_Ex_rule, c+MEMORY_REF_COST+1)
      }
    }
}
void  State::_sub_Op_Conv2B(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_CONV2B_IREGP_N2P_, _Conv2B_iRegP_N2P__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) &&
        (
#line 10943 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 4921 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, convP2Bool_reg__cmove_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, convP2Bool_reg__cmove_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convP2Bool_reg__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convP2Bool_reg__cmove_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) &&
        (
#line 10926 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 4939 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convP2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convP2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_IMMIPOWEROF2) &&
        (
#line 10900 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 4977 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_IMMIPOWEROF2] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convI2Bool_andI_reg_immIpowerOf2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convI2Bool_andI_reg_immIpowerOf2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convI2Bool_andI_reg_immIpowerOf2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_CONV2B_IREGISRC_, _Conv2B_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 10854 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 5019 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convI2Bool_reg__cmove_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convI2Bool_reg__cmove_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convI2Bool_reg__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convI2Bool_reg__cmove_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 10837 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 5057 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convI2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convI2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convI2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convD2F_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SQRTD__CONVF2D_REGF__) &&
        (
#line 10021 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fsqrts()
#line 5101 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SQRTD__CONVF2D_REGF__] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, sqrtF_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ConvD2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11248 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5114 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, convD2I_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, convD2I_reg_mffprd_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convD2I_reg_mffprd_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11231 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 5132 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convD2I_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convD2I_reg_ExEx_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convD2I_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convD2I_reg_ExEx_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11557 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5172 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, convD2L_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, convD2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 11540 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 5187 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, convD2L_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, convD2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvF2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convF2D_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_CONVF2D_REGF_, _ConvF2D_regF__rule, c)
    }
}
void  State::_sub_Op_ConvF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11294 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5228 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, convF2I_regF_mffprd_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, convF2I_regF_mffprd_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convF2I_regF_mffprd_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11277 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 5246 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convF2I_regF_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convF2I_regF_ExEx_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convF2I_regF_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convF2I_regF_ExEx_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvF2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11511 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5286 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, convF2L_reg_mffprd_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, convF2L_reg_mffprd_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 11494 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 5301 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, convF2L_reg_ExEx_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, convF2L_reg_ExEx_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvI2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11714 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5332 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convI2D_reg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11697 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_mtfprd()
#line 5341 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, convI2D_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11651 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && VM_Version::has_mtfprd()
#line 5354 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convI2F_ireg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11634 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && !VM_Version::has_mtfprd()
#line 5363 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, convI2F_ireg_fcfids_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 11601 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!VM_Version::has_fcfids()
#line 5374 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, convI2F_ireg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvI2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, convI2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, convI2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVL2I_IREGLSRC_) ) {
      unsigned int c = _kids[0]->_cost[_CONVL2I_IREGLSRC_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, sxtI_L2L_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, sxtI_L2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_CONVI2L_IREGISRC_, _ConvI2L_iRegIsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYALG4_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYALG4_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadI2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadI2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYALG4_) &&
        (
#line 5688 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered()
#line 5449 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYALG4_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_];
        DFA_PRODUCTION__SET_VALID(_CONVI2L__LOADI_MEMORY__, _ConvI2L__LoadI_memory___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadUS2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadUS2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY_) &&
        (
#line 5624 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() || followed_by_acquire(_kids[0]->_leaf)
#line 5506 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY_]+3*MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadUB2L_ac_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadUB2L_ac_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY_) &&
        (
#line 5540 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() || followed_by_acquire(_kids[0]->_leaf)
#line 5559 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11739 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 5590 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convL2D_reg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL]+DEFAULT_COST + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, convL2D_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvL2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11679 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && VM_Version::has_mtfprd()
#line 5607 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convL2F_ireg_mtfprd_Ex_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 11664 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_fcfids() && !VM_Version::has_mtfprd()
#line 5616 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, convL2F_ireg_fcfids_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ConvL2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, convL2I_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, convL2I_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convL2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convL2I_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ORL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, orI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, orI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGLSRC_IMMLPOW2MINUS1) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGLSRC_IMMLPOW2MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convL2I_andL_reg_immLpow2minus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convL2I_andL_reg_immLpow2minus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convL2I_andL_reg_immLpow2minus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, sxtI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, sxtI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sxtI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sxtI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGLSRC_IMMI) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGLSRC_IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convL2I_urShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convL2I_urShiftL_regL_immI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convL2I_urShiftL_regL_immI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGLSRC_IMMI) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGLSRC_IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convL2I_arShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convL2I_arShiftL_regL_immI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convL2I_arShiftL_regL_immI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IMML_0_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IMML_0_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, negI_con0_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, negI_con0_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, negI_con0_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, negI_con0_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, subI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, subI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGLSRC_IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, addI_regL_regL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, addI_regL_regL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_regL_regL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_regL_regL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X__DECODEN_IREGNSRC__) &&
        (
#line 7276 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_shift() == 0
#line 5939 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X__DECODEN_IREGNSRC__] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, decodeN2I_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, decodeN2I_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, decodeN2I_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, decodeN2I_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_CONVL2I_IREGLSRC_, _ConvL2I_iRegLsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+1;
        DFA_PRODUCTION__SET_VALID(IREGL2ISRC, iRegL2Isrc_rule, c)
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegL2Isrc_rule, c)
      }
    }
}
void  State::_sub_Op_CountedLoopEnd(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) &&
        (
#line 12501 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port HB_Schedule */
#line 5990 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC]+5*BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchLoopEndSched_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) &&
        (
#line 12485 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!false /* TODO: PPC port HB_Schedule */
#line 5999 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchLoopEndFar_rule, c)
      }
    }
}
void  State::_sub_Op_CountLeadingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13370 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6012 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, countLeadingZerosI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countLeadingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountLeadingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13384 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6032 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, countLeadingZerosL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countLeadingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13412 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6052 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, countTrailingZerosI_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, countTrailingZerosI_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, countTrailingZerosI_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, countTrailingZerosI_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countTrailingZerosI_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countTrailingZerosI_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countTrailingZerosI_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countTrailingZerosI_Ex_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13431 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 6072 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, countTrailingZerosL_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, countTrailingZerosL_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, countTrailingZerosL_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, countTrailingZerosL_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countTrailingZerosL_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countTrailingZerosL_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countTrailingZerosL_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countTrailingZerosL_Ex_rule, c+1)
    }
}
void  State::_sub_Op_CreateEx(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(RARG1REGP, CreateException_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPDST, CreateException_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, CreateException_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, CreateException_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, CreateException_rule, c+1+1)
    }
}
void  State::_sub_Op_DecodeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7261 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_shift() == 0
#line 6115 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_unscaled_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_unscaled_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_unscaled_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_unscaled_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_unscaled_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7248 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base() != 0
#line 6144 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_notNull_addBase_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_notNull_addBase_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_notNull_addBase_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_notNull_addBase_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7199 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() != TypePtr::NotNull &&
             n->bottom_type()->is_oopptr()->ptr() != TypePtr::Constant) &&
            Universe::narrow_oop_base_disjoint() && VM_Version::has_isel()
#line 6208 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_Disjoint_isel_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_Disjoint_isel_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_Disjoint_isel_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_Disjoint_isel_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7169 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            Universe::narrow_oop_base_disjoint()
#line 6272 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_Disjoint_notNull_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_Disjoint_notNull_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_Disjoint_notNull_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_Disjoint_notNull_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7151 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6334 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_mergeDisjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_mergeDisjoint_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_mergeDisjoint_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_mergeDisjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_mergeDisjoint_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7133 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base() == 0
#line 6397 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_nullBase_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_nullBase_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_nullBase_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_nullBase_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_nullBase_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7119 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
(n->bottom_type()->is_oopptr()->ptr() != TypePtr::NotNull &&
             n->bottom_type()->is_oopptr()->ptr() != TypePtr::Constant) &&
            Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base() != 0
#line 6462 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+4 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_FLAGSREGSRC_IREGPSRC) &&
        (
#line 7083 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6524 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_FLAGSREGSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, cond_add_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cond_add_base_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, cond_add_base_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cond_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cond_add_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) &&
        (
#line 7066 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6586 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_add_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_add_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_add_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_add_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_add_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7051 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6648 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeN_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_shift_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeN_shift_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_shift_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADN_MEMORY_) &&
        (
#line 5824 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
_kids[0]->_leaf->as_Load()->is_unordered() && Universe::narrow_oop_shift() == 0
#line 6710 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADN_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadN2P_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadN2P_unscaled_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadN2P_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadN2P_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadN2P_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC];
        DFA_PRODUCTION__SET_VALID(_DECODEN_IREGNSRC_, _DecodeN_iRegNsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 5023 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 6776 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+100;
        DFA_PRODUCTION__SET_VALID(INDIRECTNARROW, indirectNarrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirectNarrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirectNarrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirectNarrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4960 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/
#line 6794 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+1;
        DFA_PRODUCTION__SET_VALID(IREGN2P, iRegN2P_rule, c)
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegN2P_rule, c)
      }
    }
}
void  State::_sub_Op_DecodeNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeNKlass_notNull_addBase_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeNKlass_notNull_addBase_ExEx_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeNKlass_notNull_addBase_ExEx_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeNKlass_notNull_addBase_ExEx_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGNSRC) &&
        (
#line 7416 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6829 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeNKlass_notNull_addBase_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeNKlass_notNull_addBase_Ex_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeNKlass_notNull_addBase_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeNKlass_notNull_addBase_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPDST) &&
        (
#line 7401 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6891 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeNKlass_add_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeNKlass_add_base_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeNKlass_add_base_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeNKlass_add_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeNKlass_add_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7385 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 6953 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, decodeNKlass_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeNKlass_shift_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, decodeNKlass_shift_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeNKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeNKlass_shift_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADNKLASS_MEMORY_) &&
        (
#line 5835 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_klass_base() == NULL && Universe::narrow_klass_shift() == 0 &&
            _kids[0]->_leaf->as_Load()->is_unordered()
#line 7016 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADNKLASS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadN2P_klass_unscaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadN2P_klass_unscaled_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadN2P_klass_unscaled_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadN2P_klass_unscaled_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadN2P_klass_unscaled_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC];
        DFA_PRODUCTION__SET_VALID(_DECODENKLASS_IREGNSRC_, _DecodeNKlass_iRegNsrc__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 5037 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_klass_base() == NULL && Universe::narrow_klass_shift() == 0
#line 7082 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+100;
        DFA_PRODUCTION__SET_VALID(INDIRECTNARROW_KLASS, indirectNarrow_klass_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirectNarrow_klass_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        
#line 4968 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_klass_base() == NULL && Universe::narrow_klass_shift() == 0
#line 7094 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC]+1;
        DFA_PRODUCTION__SET_VALID(IREGN2P_KLASS, iRegN2P_klass_rule, c)
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegN2P_klass_rule, c)
      }
    }
}
void  State::_sub_Op_DivD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, divD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, divF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+10*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, divI_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, divI_reg_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, divI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, divI_reg_reg_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 9244 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->in(2)->find_int_con(-1) != -1
#line 7133 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, divI_reg_regnotMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, divI_reg_regnotMinus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, divI_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, divI_reg_regnotMinus1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, divI_reg_immIvalueMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, divI_reg_immIvalueMinus1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, divI_reg_immIvalueMinus1_rule, c+1)
      }
    }
}
void  State::_sub_Op_DivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+10*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, divL_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, divL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) &&
        (
#line 9307 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->in(2)->find_long_con(-1L) != -1L
#line 7216 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+2*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, divL_reg_regnotMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, divL_reg_regnotMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, divL_reg_immLvalueMinus1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, divL_reg_immLvalueMinus1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_EncodeISOArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, encode_iso_array_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, encode_iso_array_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, encode_iso_array_rule, c+1)
    }
}
void  State::_sub_Op_EncodeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7034 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_shift() == 0
#line 7286 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_narrow_oop_shift_0_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_narrow_oop_shift_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7018 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base() ==0
#line 7298 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_not_null_base_null_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_not_null_base_null_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7006 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull &&
            Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base_overlaps()
#line 7317 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_not_null_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_not_null_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6995 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->bottom_type()->make_ptr()->ptr() != TypePtr::NotNull &&
            Universe::narrow_oop_shift() != 0 &&
            Universe::narrow_oop_base_overlaps()
#line 7336 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 6980 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Universe::narrow_oop_base_disjoint()
#line 7353 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_Disjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_Disjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_FLAGSREGSRC_IREGPSRC) &&
        (
#line 6946 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7370 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_FLAGSREGSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, cond_sub_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, cond_sub_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) &&
        (
#line 6932 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7387 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, encodeP_sub_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, encodeP_sub_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, encodeP_sub_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, encodeP_sub_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, encodeP_sub_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 6917 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7413 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodeP_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodeP_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        
#line 4952 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port MatchDecodeNodes*/&& Universe::narrow_oop_shift() == 0
#line 7430 "dfa_ppc.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+1;
        DFA_PRODUCTION__SET_VALID(IREGP2N, iRegP2N_rule, c)
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegP2N_rule, c)
      }
    }
}
void  State::_sub_Op_EncodePKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodePKlass_not_null_ExEx_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodePKlass_not_null_ExEx_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPSRC) &&
        (
#line 7339 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7450 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodePKlass_not_null_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodePKlass_not_null_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPSRC) &&
        (
#line 7325 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port Universe::narrow_klass_base_disjoint()*/
#line 7467 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodePKlass_Disjoint_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodePKlass_Disjoint_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGLSRC_IREGPDST) &&
        (
#line 7311 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7484 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGLSRC_IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, encodePKlass_sub_base_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, encodePKlass_sub_base_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, encodePKlass_sub_base_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, encodePKlass_sub_base_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, encodePKlass_sub_base_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNSRC) &&
        (
#line 7296 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 7510 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGNSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, encodePKlass_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, encodePKlass_shift_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_FastLock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], RARG2REGP) &&
        (
#line 12566 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Compile::current()->use_rtm()
#line 7529 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[RARG2REGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastLock_tm_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpFastLock_tm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12547 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!Compile::current()->use_rtm()
#line 7539 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastLock_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpFastLock_rule, c+1)
      }
    }
}
void  State::_sub_Op_FastUnlock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12606 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
Compile::current()->use_rtm()
#line 7555 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastUnlock_tm_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpFastUnlock_tm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) && STATE__VALID_CHILD(_kids[1], IREGPDST) &&
        (
#line 12587 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!Compile::current()->use_rtm()
#line 7565 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST]+_kids[1]->_cost[IREGPDST] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastUnlock_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, cmpFastUnlock_rule, c+1)
      }
    }
}
void  State::_sub_Op_FmaD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD_REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, msubD_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD__NEGD_REGD_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mnaddD_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGD_REGD__REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY__NEGD_REGD__REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mnaddD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__NEGD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD__NEGD_REGD_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mnsubD_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGD_REGD__REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY__NEGD_REGD__REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mnsubD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD_REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, maddD_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_FmaF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF_REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, msubF_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF__NEGF_REGF_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mnaddF_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGF_REGF__REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY__NEGF_REGF__REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mnaddF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__NEGF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF__NEGF_REGF_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mnsubF_reg_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGF_REGF__REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY__NEGF_REGF__REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mnsubF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF_REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, maddF_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_Goto(const Node *n){
    {
      unsigned int c = BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branch_rule, c)
    }
}
void  State::_sub_Op_Halt(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, ShouldNotReachHere_rule, c)
    }
}
void  State::_sub_Op_HasNegatives(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[IREGISRC]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, has_negatives_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, has_negatives_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, has_negatives_rule, c+1)
    }
}
void  State::_sub_Op_If(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) &&
        (
#line 12453 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false /* TODO: PPC port HB_Schedule*/
#line 7680 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC]+5*BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConSched_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREGSRC) &&
        (
#line 12435 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!false /* TODO: PPC port HB_Schedule*/
#line 7689 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREGSRC]+5*BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConFar_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_N2P_IMMP_0) &&
        (
#line 12126 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 7703 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPP_IREGP_N2P_IMMP_0]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, zeroCheckP_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPN_IREGNSRC_IMMN_0) &&
        (
#line 12069 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 7717 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPN_IREGNSRC_IMMN_0]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, zeroCheckN_iReg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_UIMMI15) &&
        (
#line 12019 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If()->_prob >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 7731 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_UIMMI15] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_uimm15_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_IREGISRC) &&
        (
#line 11992 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If()->_prob >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 7745 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_iReg_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGISRC_UIMMI15) &&
        (
#line 11965 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le &&
            PROB_UNLIKELY(_leaf->as_If()->_prob) >= PROB_ALWAYS &&
            (Matcher::branches_to_uncommon_trap(_leaf))
#line 7759 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_CMPU_IREGISRC_UIMMI15] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_iReg_uimm15_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGISRC_IMMI_16, _LShiftI_iRegIsrc_immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGISRC_IMMI_24, _LShiftI_iRegIsrc_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGISRC_IMMI8, _LShiftI_iRegIsrc_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2) && STATE__VALID_CHILD(_kids[1], UIMMI5) &&
        (
#line 9471 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 7784 "dfa_ppc.cpp"
) && /*src3*/(_kids[0]->_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__RSHIFTI_IREGISRC_UIMMI5_IMMINEGPOW2]+_kids[1]->_cost[UIMMI5] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, lShiftI_andI_immInegpow2_rShiftI_imm5_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGISRC_IMMINEGPOW2) && STATE__VALID_CHILD(_kids[1], UIMMI5) &&
        (
#line 9450 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseRotateAndMaskInstructionsPPC64
#line 7802 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGISRC_IMMINEGPOW2]+_kids[1]->_cost[UIMMI5] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, lShiftI_andI_immInegpow2_imm5_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, lShiftI_andI_immInegpow2_imm5_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, lShiftI_andI_immInegpow2_imm5_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, lShiftI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, lShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, lShiftI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, lShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, lShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, lShiftI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_LShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], UIMMI6) &&
        (
#line 9545 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((ConvI2LNode*)(_kids[0]->_leaf))->type()->is_long()->is_positive_int()
#line 7908 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[UIMMI6] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, scaledPositiveI2L_lShiftL_convI2L_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGISRC_) && STATE__VALID_CHILD(_kids[1], UIMMI6_GE32) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGISRC_]+_kids[1]->_cost[UIMMI6_GE32] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, lShiftL_regI_immGE32_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, lShiftL_regI_immGE32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, lshiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, lshiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, lShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, lShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_LoadB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16]+3*MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadB_indOffset16_ac_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadB_indOffset16_ac_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadB_indOffset16_ac_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadB_indOffset16_ac_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) &&
        (
#line 5491 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8010 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadB_indOffset16_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadB_indOffset16_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadB_indOffset16_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadB_indOffset16_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDOFFSET16) &&
        (
#line 5467 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8048 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDOFFSET16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUB_indOffset16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUB_indOffset16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUB_indOffset16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUB_indOffset16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+3*MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadB_indirect_ac_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadB_indirect_ac_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadB_indirect_ac_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 5445 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8119 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY]+MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadB_indirect_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadB_indirect_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadB_indirect_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadB_indirect_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 5421 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 8157 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUB_indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUB_indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUB_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUB_indirect_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADUB_MEMORY_, _LoadUB_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUB_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUB_ac_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUB_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUB_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5514 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8214 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUB_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION__SET_VALID(_LOADUS_INDIRECT_, _LoadUS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADUS_MEMORY_, _LoadUS_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUS_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUS_ac_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUS_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5599 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8275 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadUS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUS_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, loadD_ac_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5948 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8319 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, loadD_rule, c)
      }
    }
}
void  State::_sub_Op_LoadD_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, loadD_unaligned_rule, c)
    }
}
void  State::_sub_Op_LoadF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, loadF_ac_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5907 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8342 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, loadF_rule, c)
      }
    }
}
void  State::_sub_Op_LoadI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION__SET_VALID(_LOADI_INDIRECT_, _LoadI_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORYALG4_, _LoadI_memoryAlg4__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORY_, _LoadI_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadI_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadI_ac_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadI_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadI_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5649 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8380 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadI_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadI_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadKlass_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadKlass_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadKlass_rule, c+1)
    }
}
void  State::_sub_Op_LoadNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadNKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADNKLASS_MEMORY_, _LoadNKlass_memory__rule, c)
    }
}
void  State::_sub_Op_LoadL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION__SET_VALID(_LOADL_INDIRECT_, _LoadL_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadL_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadL_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadL_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5723 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8469 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_LoadL_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadL_unaligned_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_LoadPLocked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+2*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadPLocked_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadPLocked_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadPLocked_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadPLocked_rule, c+1)
    }
}
void  State::_sub_Op_LoadP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4];
        DFA_PRODUCTION__SET_VALID(_LOADP_MEMORYALG4_, _LoadP_memoryAlg4__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadP_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadP_ac_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadP_ac_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadP_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadP_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5848 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8560 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPDST) || _cost[IREGPDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGPDST, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGPSRC) || _cost[IREGPSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGPSRC, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadP_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(MEMORYALG4) || _cost[MEMORYALG4] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(INDIRECTMEMORY) || _cost[INDIRECTMEMORY] > c+1+100) {
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(THREADREGP) || _cost[THREADREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(THREADREGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGP) || _cost[RSCRATCH1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGP) || _cost[RSCRATCH2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGPDSTNOSCRATCH) || _cost[IREGPDSTNOSCRATCH] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, loadP_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadP_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADN_MEMORY_, _LoadN_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadN_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadN_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5799 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8634 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGNDST) || _cost[IREGNDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGNDST, loadN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGNSRC) || _cost[IREGNSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGNSRC, loadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegNsrc_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadRange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadRange_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadRange_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadRange_rule, c+1)
    }
}
void  State::_sub_Op_LoadS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION__SET_VALID(_LOADS_INDIRECT_, _LoadS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+3*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadS_ac_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadS_ac_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadS_ac_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadS_ac_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 5564 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Load()->is_unordered() || followed_by_acquire(n)
#line 8685 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, loadS_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadS_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadS_rule, c+1)
      }
    }
}
void  State::_sub_Op_MaxI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 13325 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 8725 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGIDST, maxI_reg_reg_isel_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, maxI_reg_reg_isel_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, maxI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, maxI_reg_reg_isel_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*6;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, maxI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, maxI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, maxI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, maxI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_MemBarAcquire(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, unnecessary_membar_acquire_rule, c)
    }
}
void  State::_sub_Op_LoadFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquireLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarCPUOrder(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_CPUOrder_rule, c)
    }
}
void  State::_sub_Op_MemBarRelease(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_rule, c)
    }
}
void  State::_sub_Op_StoreFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_0_rule, c)
    }
}
void  State::_sub_Op_MemBarReleaseLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarVolatile(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_volatile_rule, c)
    }
}
void  State::_sub_Op_MemBarStoreStore(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_storestore_rule, c)
    }
}
void  State::_sub_Op_MinI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) &&
        (
#line 13291 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_isel()
#line 8832 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
        DFA_PRODUCTION__SET_VALID(IREGIDST, minI_reg_reg_isel_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, minI_reg_reg_isel_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, minI_reg_reg_isel_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, minI_reg_reg_isel_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*6;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, minI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, minI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, minI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, minI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_ModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+10*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, modI_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, modI_reg_reg_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, modI_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, modI_reg_reg_Ex_rule, c+1)
    }
}
void  State::_sub_Op_ModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC]+10*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, modL_reg_reg_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, modL_reg_reg_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_MoveI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, moveI2F_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTI) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, moveI2F_stack_reg_rule, c)
    }
}
void  State::_sub_Op_MoveF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, moveF2I_reg_stack_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGIDST, stkI_to_regI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, stkI_to_regI_rule, c+MEMORY_REF_COST+1+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+MEMORY_REF_COST+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, stkI_to_regI_rule, c+MEMORY_REF_COST+1)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTF) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTF] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, moveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, moveF2I_stack_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, moveF2I_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, moveF2I_stack_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MoveL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, moveL2D_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, moveL2D_stack_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 10572 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_mtfprd()
#line 8978 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, moveL2D_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MoveD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, moveD2L_reg_stack_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGLDST, stkL_to_regL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTD) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTD] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, moveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, moveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MulD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, mulD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, mulF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulHiL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, mulHighL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, mulHighL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_MulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, mulI_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, mulI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, mulI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, mulI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, mulL_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, mulL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, mulL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_NegD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_NEGD_REGD_, _NegD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[_ABSD_REGD_] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, negD_absD_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, negD_reg_rule, c)
      }
    }
}
void  State::_sub_Op_NegF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_NEGF_REGF_, _NegF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_ABSF_REGF_] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, negF_absF_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, negF_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OrI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, orI_reg_uimm16_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, orI_reg_uimm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_reg_uimm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI_IREGISRC__ORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI_IREGISRC__ORI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI_IREGISRC__ORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI_IREGISRC__ORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI_IREGISRC_IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ORI_IREGISRC__ORI_IREGISRC_IREGISRC, _OrI_iRegIsrc__OrI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _ORI__ORI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_ORI__ORI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI__ORI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI__ORI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_orI_orI_orI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_orI_orI_orI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_orI_orI_orI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_ORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ORI__ORI_IREGISRC_IREGISRC_IREGISRC, _OrI__OrI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_ORI_IREGISRC_IREGISRC, _OrI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, orI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGISRC_IMMI8) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGISRC_IMMI8) &&
        (
#line 9809 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 9357 "dfa_ppc.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGISRC_IMMI8]+_kids[1]->_cost[_LSHIFTI_IREGISRC_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, rotlI_reg_immi8_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, rotlI_reg_immi8_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rotlI_reg_immi8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rotlI_reg_immi8_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI8) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGISRC_IMMI8) &&
        (
#line 9809 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 9395 "dfa_ppc.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI8]+_kids[1]->_cost[_URSHIFTI_IREGISRC_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, rotlI_reg_immi8_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, rotlI_reg_immi8_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rotlI_reg_immi8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rotlI_reg_immi8_rule, c+1)
      }
    }
}
void  State::_sub_Op_OrL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, orL_reg_uimm16_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_ORL_IREGLSRC_IREGLSRC, _OrL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_OverflowAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, overflowAddL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, overflowAddL_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_OverflowSubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, overflowNegL_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, overflowNegL_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREGCR0) || _cost[FLAGSREGCR0] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, overflowSubL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(FLAGSREGSRC) || _cost[FLAGSREGSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, overflowSubL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_OverflowMulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, overflowMulL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, overflowMulL_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_PartialSubtypeCheck(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P]+DEFAULT_COST*10;
        DFA_PRODUCTION__SET_VALID(IREGPDST, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, partialSubtypeCheck_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
        DFA_PRODUCTION__SET_VALID(THREADREGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGPDSTNOSCRATCH, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, partialSubtypeCheck_rule, c+1)
    }
}
void  State::_sub_Op_PopCountI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13341 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UsePopCountInstruction && VM_Version::has_popcntw()
#line 9528 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, popCountI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, popCountI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, popCountI_rule, c+1)
    }
}
void  State::_sub_Op_PopCountL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 13355 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UsePopCountInstruction && VM_Version::has_popcntw()
#line 9548 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, popCountL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, popCountL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, popCountL_rule, c+1)
    }
}
void  State::_sub_Op_PrefetchAllocation(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 6690 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle != 3
#line 9568 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetch_alloc_no_offset_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_INDIRECTMEMORY_IREGLSRC) &&
        (
#line 6676 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle != 3
#line 9577 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_INDIRECTMEMORY_IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetch_alloc_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECTMEMORY) &&
        (
#line 6662 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle == 3
#line 9588 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECTMEMORY] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetch_alloc_zero_no_offset_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_INDIRECTMEMORY_IREGLSRC) &&
        (
#line 6648 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
AllocatePrefetchStyle == 3
#line 9599 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_INDIRECTMEMORY_IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetch_alloc_zero_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMI_16) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI_16]+_kids[1]->_cost[IMMI_16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, convS2I_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, convS2I_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convS2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convS2I_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGISRC_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGISRC_IMMI_24]+_kids[1]->_cost[IMMI_24] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, convB2I_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, convB2I_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convB2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convB2I_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, arShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, arShiftI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, arShiftI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, arShiftI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, arShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, arShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, arShiftI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI5) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI5];
        DFA_PRODUCTION__SET_VALID(_RSHIFTI_IREGISRC_UIMMI5, _RShiftI_iRegIsrc_uimmI5_rule, c)
    }
}
void  State::_sub_Op_RShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION__SET_VALID(_RSHIFTL_IREGLSRC_IMMI, _RShiftL_iRegLsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, arShiftL_regL_immI_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, arShiftL_regL_immI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, arShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, arShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_Rethrow(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, RethrowException_rule, c)
    }
}
void  State::_sub_Op_Return(const Node *n){
    {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, Ret_rule, c)
    }
}
void  State::_sub_Op_RoundDouble(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(REGD, roundDouble_nop_rule, c)
    }
}
void  State::_sub_Op_RoundFloat(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(REGF, roundFloat_nop_rule, c)
    }
}
void  State::_sub_Op_SafePoint(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDST) ) {
      unsigned int c = _kids[0]->_cost[IREGPDST] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, safePoint_poll_rule, c)
    }
}
void  State::_sub_Op_SqrtD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONVF2D_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_CONVF2D_REGF_];
        DFA_PRODUCTION__SET_VALID(_SQRTD__CONVF2D_REGF__, _SqrtD__ConvF2D_regF___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, sqrtD_reg_rule, c)
    }
}
void  State::_sub_Op_StoreB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeB_rule, c)
    }
}
void  State::_sub_Op_StoreC(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESS_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESS_IREGISRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeS_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESUS_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESUS_IREGISRC_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeUS_reversed_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeC_rule, c)
      }
    }
}
void  State::_sub_Op_StoreCM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IMMI_0) &&
        (
#line 6892 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseG1GC
#line 9836 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IMMI_0] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeCM_G1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IMMI_0) &&
        (
#line 6879 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseConcMarkSweepGC
#line 9845 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeCM_CMS_ExEx_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGLDST) &&
        (
#line 6860 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
false
#line 9856 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGLDST] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeCM_CMS_rule, c)
      }
    }
}
void  State::_sub_Op_StorePConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGPSRC_IREGPSRC]+2*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREGCR0, storePConditional_regP_regP_regP_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, storePConditional_regP_regP_regP_rule, c+1)
    }
}
void  State::_sub_Op_StoreLConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLSRC_IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGLSRC_IREGLSRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, storeLConditional_regP_regL_regL_rule, c)
        DFA_PRODUCTION__SET_VALID(FLAGSREGSRC, storeLConditional_regP_regL_regL_rule, c+1)
    }
}
void  State::_sub_Op_StoreD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeD_rule, c)
    }
}
void  State::_sub_Op_StoreF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeF_rule, c)
    }
}
void  State::_sub_Op_StoreI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESI_IREGISRC_) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESI_IREGISRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeI_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], _CONVL2I_IREGLSRC_) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[_CONVL2I_IREGLSRC_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeI_convL2I_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGISRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeI_rule, c)
      }
    }
}
void  State::_sub_Op_StoreL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _REVERSEBYTESL_IREGLSRC_) &&
        (
#line 13632 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
VM_Version::has_stdbrx()
#line 9913 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_REVERSEBYTESL_IREGLSRC_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_reversed_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_rule, c)
      }
    }
}
void  State::_sub_Op_StoreP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGPSRC) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGPSRC] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeP_rule, c)
    }
}
void  State::_sub_Op_StoreN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN_P2N] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeN_rule, c)
    }
}
void  State::_sub_Op_StoreNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN_P2N] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeNKlass_rule, c)
    }
}
void  State::_sub_Op_StrComp(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12742 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL
#line 9948 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_compareUL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_compareUL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareUL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12725 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU
#line 9966 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_compareLU_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_compareLU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareLU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12708 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU
#line 10004 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_compareU_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_compareU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG3REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_RARG4REGI) &&
        (
#line 12691 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL
#line 10042 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG3REGI]+_kids[1]->_cost[_BINARY_RARG2REGP_RARG4REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_compareL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_compareL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrCompressedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_compress_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_compress_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compress_rule, c+1)
    }
}
void  State::_sub_Op_StrEquals(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) &&
        (
#line 12775 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU
#line 10097 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG2REGP]+_kids[1]->_cost[RARG3REGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_equalsU_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_equalsU_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equalsU_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equalsU_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_RARG1REGP_RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGI) &&
        (
#line 12759 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL
#line 10115 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_RARG1REGP_RARG2REGP]+_kids[1]->_cost[RARG3REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, string_equalsL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, string_equalsL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equalsL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOf(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 13154 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 10155 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_UL_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_UL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_UL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 13132 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 10173 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_RSCRATCH2REGI) &&
        (
#line 13110 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 10211 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_RSCRATCH2REGI]+300;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 13083 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10251 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 13055 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10291 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_RSCRATCH1REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGPSRC_UIMMI15) &&
        (
#line 13027 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10331 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_RSCRATCH1REGI]+_kids[1]->_cost[_BINARY_IREGPSRC_UIMMI15]+250;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12979 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10371 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12951 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10411 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY_RSCRATCH2REGP_IMMI_1) &&
        (
#line 12916 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop() &&
            n->in(3)->in(1)->bottom_type()->is_aryptr()->const_oop()->is_type_array()
#line 10451 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY_RSCRATCH2REGP_IMMI_1]+180;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12889 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 10489 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_char_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_char_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_char_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_char_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12862 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 10527 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_char_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_char_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_char_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_char_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], _BINARY__ADDP_IMMP_IMML_IMMI_1) &&
        (
#line 12828 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 10565 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[_BINARY__ADDP_IMMP_IMML_IMMI_1]+150;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOf_imm1_char_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOf_imm1_char_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_char_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_char_U_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOfChar(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGPSRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGPSRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+180;
        DFA_PRODUCTION__SET_VALID(IREGIDST, indexOfChar_U_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, indexOfChar_U_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOfChar_U_rule, c+1)
    }
}
void  State::_sub_Op_StrInflatedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG1REGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG2REGP_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[RARG1REGP]+_kids[1]->_cost[_BINARY_RARG2REGP_IREGISRC]+300;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, string_inflate_rule, c)
    }
}
void  State::_sub_Op_SubD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, subD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, subF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, negI_regI_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, negI_regI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, negI_regI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, negI_regI_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI16) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IMMI16]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, subI_imm16_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, subI_imm16_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_imm16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_imm16_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, subI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_SubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGPSRC_) && STATE__VALID_CHILD(_kids[1], _CASTP2X_IREGPSRC_) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGPSRC_]+_kids[1]->_cost[_CASTP2X_IREGPSRC_] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, array_size_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, array_size_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, array_size_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, array_size_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, array_size_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, array_size_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_SUBL_IMML_0_IREGLSRC, _SubL_immL_0_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, negL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_SUBL_IREGLSRC_IREGLSRC, _SubL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, subL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_TailCall(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDSTNOSCRATCH) && STATE__VALID_CHILD(_kids[1], INLINE_CACHE_REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGPDSTNOSCRATCH]+_kids[1]->_cost[INLINE_CACHE_REGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, TailCalljmpInd_rule, c)
    }
}
void  State::_sub_Op_TailJump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPDSTNOSCRATCH) && STATE__VALID_CHILD(_kids[1], RARG1REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGPDSTNOSCRATCH]+_kids[1]->_cost[RARG1REGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, tailjmpInd_rule, c)
    }
}
void  State::_sub_Op_ThreadLocal(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(THREADREGP, tlsLoadP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGPSRC, tlsLoadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, tlsLoadP_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(MEMORYALG4, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(INDIRECTMEMORY, indirect_rule, c+1+100)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegPsrc_rule, c+1)
    }
}
void  State::_sub_Op_URShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_URSHIFTI_IREGISRC_IMMI8, _URShiftI_iRegIsrc_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION__SET_VALID(_URSHIFTI_IREGISRC_IMMI, _URShiftI_iRegIsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, urShiftI_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, urShiftI_reg_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, urShiftI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, urShiftI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, urShiftI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, urShiftI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, urShiftI_reg_reg_Ex_rule, c+1)
      }
    }
}
void  State::_sub_Op_URShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], UIMMI6) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_N2P_]+_kids[1]->_cost[UIMMI6] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, shrP_convP2X_reg_imm6_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, shrP_convP2X_reg_imm6_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION__SET_VALID(_URSHIFTL_IREGLSRC_IMMI, _URShiftL_iRegLsrc_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, urShiftL_regL_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, urShiftL_regL_immI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*2;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, urShiftL_regL_regI_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, urShiftL_regL_regI_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_XorI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10973 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 10931 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGP_N2P_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c)
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_convP2Bool_reg_immIvalue1__cmove_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10959 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 10949 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGP_N2P_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_convP2Bool_reg__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_convP2Bool_reg__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10884 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
!UseCountLeadingZerosInstructionsPPC64
#line 10987 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGISRC_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_convI2Bool_reg_immIvalue1__cmove_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONV2B_IREGISRC_) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 10870 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
UseCountLeadingZerosInstructionsPPC64
#line 11025 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONV2B_IREGISRC_]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_convI2Bool_reg_immIvalue1__cntlz_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1];
        DFA_PRODUCTION__SET_VALID(_XORI_IREGISRC_IMMI_MINUS1, _XorI_iRegIsrc_immI_minus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IMMI_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IMMI_MINUS1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, notI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, notI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, notI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, notI_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_reg_uimm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_reg_uimm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC__XORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC__XORI_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_2_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC__XORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC__XORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI_IREGISRC_IREGISRC];
        DFA_PRODUCTION__SET_VALID(_XORI_IREGISRC__XORI_IREGISRC_IREGISRC, _XorI_iRegIsrc__XorI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], _XORI__XORI_IREGISRC_IREGISRC_IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[_XORI__XORI_IREGISRC_IREGISRC_IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__XORI_IREGISRC_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI__XORI_IREGISRC_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC]+DEFAULT_COST*3;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, tree_xorI_xorI_xorI_reg_reg_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGISRC_IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGISRC_IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_XORI__XORI_IREGISRC_IREGISRC_IREGISRC, _XorI__XorI_iRegIsrc_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC];
        DFA_PRODUCTION__SET_VALID(_XORI_IREGISRC_IREGISRC, _XorI_iRegIsrc_iRegIsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) && STATE__VALID_CHILD(_kids[1], IREGISRC) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+_kids[1]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGIDST) || _cost[IREGIDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGIDST, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH1REGI) || _cost[RSCRATCH1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGISRC) || _cost[IREGISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC, xorI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(IREGISRC_IREGL2ISRC) || _cost[IREGISRC_IREGL2ISRC] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(IREGISRC_IREGL2ISRC, iRegIsrc_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RSCRATCH2REGI) || _cost[RSCRATCH2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IMML_MINUS1) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IMML_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, notL_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, notL_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, notL_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, xorL_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, xorL_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC];
        DFA_PRODUCTION__SET_VALID(_XORL_IREGLSRC_IREGLSRC, _XorL_iRegLsrc_iRegLsrc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) && STATE__VALID_CHILD(_kids[1], IREGLSRC) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC]+_kids[1]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_LoadVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 5773 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadVector()->memory_size() == 16
#line 11376 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(VECX, loadV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) &&
        (
#line 5761 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_LoadVector()->memory_size() == 8
#line 11385 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, loadV8_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_StoreVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VECX) &&
        (
#line 6783 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_StoreVector()->memory_size() == 16
#line 11402 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VECX] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeV16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYALG4) && STATE__VALID_CHILD(_kids[1], IREGLSRC) &&
        (
#line 6771 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_StoreVector()->memory_size() == 8
#line 11411 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYALG4]+_kids[1]->_cost[IREGLSRC] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeA8B_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13795 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 11424 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl16B_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13783 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 11433 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl16B_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13767 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 16
#line 11444 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl16B_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13755 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11455 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl8B_immIminus1_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl8B_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13743 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11470 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl8B_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl8B_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13732 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11499 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl8B_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl8B_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13869 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11530 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl8S_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13857 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11539 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl8S_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13841 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 8
#line 11550 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl8S_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13829 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11561 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl4S_immIminus1_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl4S_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13817 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11576 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl4S_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl4S_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13807 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11605 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl4S_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl4S_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13943 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11636 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl4I_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13931 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11645 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl4I_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13915 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11656 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl4I_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 13903 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11667 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2I_immIminus1_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2I_immIminus1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 13891 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11682 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2I_immI0_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2I_immI0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGISRC) &&
        (
#line 13881 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11711 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGISRC]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2I_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2I_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 14190 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11742 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl2L_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 14178 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11751 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl2L_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLSRC) &&
        (
#line 14167 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11762 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGLSRC] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl2L_reg_Ex_rule, c)
      }
    }
}
void  State::_sub_Op_ReplicateF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMF_0) &&
        (
#line 14082 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11775 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl4F_immF0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 14073 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11784 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF]+10 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl4F_immF_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 14053 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 4
#line 11795 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+2 * MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl4F_reg_Ex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF_0) &&
        (
#line 13981 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11806 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2F_immF0_rule, c)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2F_immF0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 13971 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11821 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF]+5 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2F_immF_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2F_immF_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 13956 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11850 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF]+2 * MEMORY_REF_COST + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGLDST) || _cost[IREGLDST] > c) {
        DFA_PRODUCTION__SET_VALID(IREGLDST, repl2F_reg_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGL) || _cost[RARG2REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGL) || _cost[RARG3REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGL) || _cost[RARG4REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGL, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(IREGLSRC) || _cost[IREGLSRC] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGLSRC, repl2F_reg_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ReplicateD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 14121 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11881 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(VECX, repl2D_immIminus1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 14109 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11890 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl2D_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) &&
        (
#line 14093 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/ppc/ppc.ad"
n->as_Vector()->length() == 2
#line 11901 "dfa_ppc.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(VECX) || _cost[VECX] > c) {
        DFA_PRODUCTION__SET_VALID(VECX, repl2D_reg_Ex_rule, c)
      }
    }
}
bool State::DFA(int opcode, const Node *n) {
  switch(opcode) {
  case Op_RegN: { _sub_Op_RegN(n);
    break;
  }
  case Op_RegI: { _sub_Op_RegI(n);
    break;
  }
  case Op_RegP: { _sub_Op_RegP(n);
    break;
  }
  case Op_RegF: { _sub_Op_RegF(n);
    break;
  }
  case Op_RegD: { _sub_Op_RegD(n);
    break;
  }
  case Op_RegL: { _sub_Op_RegL(n);
    break;
  }
  case Op_RegFlags: { _sub_Op_RegFlags(n);
    break;
  }
  case Op_VecX: { _sub_Op_VecX(n);
    break;
  }
  case Op_AbsD: { _sub_Op_AbsD(n);
    break;
  }
  case Op_AbsF: { _sub_Op_AbsF(n);
    break;
  }
  case Op_AbsI: { _sub_Op_AbsI(n);
    break;
  }
  case Op_AddD: { _sub_Op_AddD(n);
    break;
  }
  case Op_AddF: { _sub_Op_AddF(n);
    break;
  }
  case Op_AddI: { _sub_Op_AddI(n);
    break;
  }
  case Op_AddL: { _sub_Op_AddL(n);
    break;
  }
  case Op_AddP: { _sub_Op_AddP(n);
    break;
  }
  case Op_AndI: { _sub_Op_AndI(n);
    break;
  }
  case Op_AndL: { _sub_Op_AndL(n);
    break;
  }
  case Op_AryEq: { _sub_Op_AryEq(n);
    break;
  }
  case Op_Binary: { _sub_Op_Binary(n);
    break;
  }
  case Op_Bool: { _sub_Op_Bool(n);
    break;
  }
  case Op_ReverseBytesI: { _sub_Op_ReverseBytesI(n);
    break;
  }
  case Op_ReverseBytesL: { _sub_Op_ReverseBytesL(n);
    break;
  }
  case Op_ReverseBytesUS: { _sub_Op_ReverseBytesUS(n);
    break;
  }
  case Op_ReverseBytesS: { _sub_Op_ReverseBytesS(n);
    break;
  }
  case Op_CallDynamicJava: { _sub_Op_CallDynamicJava(n);
    break;
  }
  case Op_CallLeaf: { _sub_Op_CallLeaf(n);
    break;
  }
  case Op_CallLeafNoFP: { _sub_Op_CallLeafNoFP(n);
    break;
  }
  case Op_CallRuntime: { _sub_Op_CallRuntime(n);
    break;
  }
  case Op_CallStaticJava: { _sub_Op_CallStaticJava(n);
    break;
  }
  case Op_CastII: { _sub_Op_CastII(n);
    break;
  }
  case Op_CastX2P: { _sub_Op_CastX2P(n);
    break;
  }
  case Op_CastP2X: { _sub_Op_CastP2X(n);
    break;
  }
  case Op_CastPP: { _sub_Op_CastPP(n);
    break;
  }
  case Op_CheckCastPP: { _sub_Op_CheckCastPP(n);
    break;
  }
  case Op_ClearArray: { _sub_Op_ClearArray(n);
    break;
  }
  case Op_CMoveD: { _sub_Op_CMoveD(n);
    break;
  }
  case Op_CMoveF: { _sub_Op_CMoveF(n);
    break;
  }
  case Op_CMoveI: { _sub_Op_CMoveI(n);
    break;
  }
  case Op_CMoveL: { _sub_Op_CMoveL(n);
    break;
  }
  case Op_CMoveP: { _sub_Op_CMoveP(n);
    break;
  }
  case Op_CMoveN: { _sub_Op_CMoveN(n);
    break;
  }
  case Op_CmpN: { _sub_Op_CmpN(n);
    break;
  }
  case Op_CmpD: { _sub_Op_CmpD(n);
    break;
  }
  case Op_CmpD3: { _sub_Op_CmpD3(n);
    break;
  }
  case Op_CmpF: { _sub_Op_CmpF(n);
    break;
  }
  case Op_CmpF3: { _sub_Op_CmpF3(n);
    break;
  }
  case Op_CmpI: { _sub_Op_CmpI(n);
    break;
  }
  case Op_CmpL: { _sub_Op_CmpL(n);
    break;
  }
  case Op_CmpL3: { _sub_Op_CmpL3(n);
    break;
  }
  case Op_CmpLTMask: { _sub_Op_CmpLTMask(n);
    break;
  }
  case Op_CmpP: { _sub_Op_CmpP(n);
    break;
  }
  case Op_CmpU: { _sub_Op_CmpU(n);
    break;
  }
  case Op_CmpUL: { _sub_Op_CmpUL(n);
    break;
  }
  case Op_CompareAndSwapB: { _sub_Op_CompareAndSwapB(n);
    break;
  }
  case Op_CompareAndSwapS: { _sub_Op_CompareAndSwapS(n);
    break;
  }
  case Op_CompareAndSwapI: { _sub_Op_CompareAndSwapI(n);
    break;
  }
  case Op_CompareAndSwapL: { _sub_Op_CompareAndSwapL(n);
    break;
  }
  case Op_CompareAndSwapP: { _sub_Op_CompareAndSwapP(n);
    break;
  }
  case Op_CompareAndSwapN: { _sub_Op_CompareAndSwapN(n);
    break;
  }
  case Op_WeakCompareAndSwapB: { _sub_Op_WeakCompareAndSwapB(n);
    break;
  }
  case Op_WeakCompareAndSwapS: { _sub_Op_WeakCompareAndSwapS(n);
    break;
  }
  case Op_WeakCompareAndSwapI: { _sub_Op_WeakCompareAndSwapI(n);
    break;
  }
  case Op_WeakCompareAndSwapL: { _sub_Op_WeakCompareAndSwapL(n);
    break;
  }
  case Op_WeakCompareAndSwapP: { _sub_Op_WeakCompareAndSwapP(n);
    break;
  }
  case Op_WeakCompareAndSwapN: { _sub_Op_WeakCompareAndSwapN(n);
    break;
  }
  case Op_CompareAndExchangeB: { _sub_Op_CompareAndExchangeB(n);
    break;
  }
  case Op_CompareAndExchangeS: { _sub_Op_CompareAndExchangeS(n);
    break;
  }
  case Op_CompareAndExchangeI: { _sub_Op_CompareAndExchangeI(n);
    break;
  }
  case Op_CompareAndExchangeL: { _sub_Op_CompareAndExchangeL(n);
    break;
  }
  case Op_CompareAndExchangeP: { _sub_Op_CompareAndExchangeP(n);
    break;
  }
  case Op_CompareAndExchangeN: { _sub_Op_CompareAndExchangeN(n);
    break;
  }
  case Op_GetAndAddB: { _sub_Op_GetAndAddB(n);
    break;
  }
  case Op_GetAndAddS: { _sub_Op_GetAndAddS(n);
    break;
  }
  case Op_GetAndAddI: { _sub_Op_GetAndAddI(n);
    break;
  }
  case Op_GetAndAddL: { _sub_Op_GetAndAddL(n);
    break;
  }
  case Op_GetAndSetB: { _sub_Op_GetAndSetB(n);
    break;
  }
  case Op_GetAndSetS: { _sub_Op_GetAndSetS(n);
    break;
  }
  case Op_GetAndSetI: { _sub_Op_GetAndSetI(n);
    break;
  }
  case Op_GetAndSetL: { _sub_Op_GetAndSetL(n);
    break;
  }
  case Op_GetAndSetP: { _sub_Op_GetAndSetP(n);
    break;
  }
  case Op_GetAndSetN: { _sub_Op_GetAndSetN(n);
    break;
  }
  case Op_ConN: { _sub_Op_ConN(n);
    break;
  }
  case Op_ConNKlass: { _sub_Op_ConNKlass(n);
    break;
  }
  case Op_ConD: { _sub_Op_ConD(n);
    break;
  }
  case Op_ConF: { _sub_Op_ConF(n);
    break;
  }
  case Op_ConI: { _sub_Op_ConI(n);
    break;
  }
  case Op_ConL: { _sub_Op_ConL(n);
    break;
  }
  case Op_ConP: { _sub_Op_ConP(n);
    break;
  }
  case Op_Conv2B: { _sub_Op_Conv2B(n);
    break;
  }
  case Op_ConvD2F: { _sub_Op_ConvD2F(n);
    break;
  }
  case Op_ConvD2I: { _sub_Op_ConvD2I(n);
    break;
  }
  case Op_ConvD2L: { _sub_Op_ConvD2L(n);
    break;
  }
  case Op_ConvF2D: { _sub_Op_ConvF2D(n);
    break;
  }
  case Op_ConvF2I: { _sub_Op_ConvF2I(n);
    break;
  }
  case Op_ConvF2L: { _sub_Op_ConvF2L(n);
    break;
  }
  case Op_ConvI2D: { _sub_Op_ConvI2D(n);
    break;
  }
  case Op_ConvI2F: { _sub_Op_ConvI2F(n);
    break;
  }
  case Op_ConvI2L: { _sub_Op_ConvI2L(n);
    break;
  }
  case Op_ConvL2D: { _sub_Op_ConvL2D(n);
    break;
  }
  case Op_ConvL2F: { _sub_Op_ConvL2F(n);
    break;
  }
  case Op_ConvL2I: { _sub_Op_ConvL2I(n);
    break;
  }
  case Op_CountedLoopEnd: { _sub_Op_CountedLoopEnd(n);
    break;
  }
  case Op_CountLeadingZerosI: { _sub_Op_CountLeadingZerosI(n);
    break;
  }
  case Op_CountLeadingZerosL: { _sub_Op_CountLeadingZerosL(n);
    break;
  }
  case Op_CountTrailingZerosI: { _sub_Op_CountTrailingZerosI(n);
    break;
  }
  case Op_CountTrailingZerosL: { _sub_Op_CountTrailingZerosL(n);
    break;
  }
  case Op_CreateEx: { _sub_Op_CreateEx(n);
    break;
  }
  case Op_DecodeN: { _sub_Op_DecodeN(n);
    break;
  }
  case Op_DecodeNKlass: { _sub_Op_DecodeNKlass(n);
    break;
  }
  case Op_DivD: { _sub_Op_DivD(n);
    break;
  }
  case Op_DivF: { _sub_Op_DivF(n);
    break;
  }
  case Op_DivI: { _sub_Op_DivI(n);
    break;
  }
  case Op_DivL: { _sub_Op_DivL(n);
    break;
  }
  case Op_EncodeISOArray: { _sub_Op_EncodeISOArray(n);
    break;
  }
  case Op_EncodeP: { _sub_Op_EncodeP(n);
    break;
  }
  case Op_EncodePKlass: { _sub_Op_EncodePKlass(n);
    break;
  }
  case Op_FastLock: { _sub_Op_FastLock(n);
    break;
  }
  case Op_FastUnlock: { _sub_Op_FastUnlock(n);
    break;
  }
  case Op_FmaD: { _sub_Op_FmaD(n);
    break;
  }
  case Op_FmaF: { _sub_Op_FmaF(n);
    break;
  }
  case Op_Goto: { _sub_Op_Goto(n);
    break;
  }
  case Op_Halt: { _sub_Op_Halt(n);
    break;
  }
  case Op_HasNegatives: { _sub_Op_HasNegatives(n);
    break;
  }
  case Op_If: { _sub_Op_If(n);
    break;
  }
  case Op_LShiftI: { _sub_Op_LShiftI(n);
    break;
  }
  case Op_LShiftL: { _sub_Op_LShiftL(n);
    break;
  }
  case Op_LoadB: { _sub_Op_LoadB(n);
    break;
  }
  case Op_LoadUB: { _sub_Op_LoadUB(n);
    break;
  }
  case Op_LoadUS: { _sub_Op_LoadUS(n);
    break;
  }
  case Op_LoadD: { _sub_Op_LoadD(n);
    break;
  }
  case Op_LoadD_unaligned: { _sub_Op_LoadD_unaligned(n);
    break;
  }
  case Op_LoadF: { _sub_Op_LoadF(n);
    break;
  }
  case Op_LoadI: { _sub_Op_LoadI(n);
    break;
  }
  case Op_LoadKlass: { _sub_Op_LoadKlass(n);
    break;
  }
  case Op_LoadNKlass: { _sub_Op_LoadNKlass(n);
    break;
  }
  case Op_LoadL: { _sub_Op_LoadL(n);
    break;
  }
  case Op_LoadL_unaligned: { _sub_Op_LoadL_unaligned(n);
    break;
  }
  case Op_LoadPLocked: { _sub_Op_LoadPLocked(n);
    break;
  }
  case Op_LoadP: { _sub_Op_LoadP(n);
    break;
  }
  case Op_LoadN: { _sub_Op_LoadN(n);
    break;
  }
  case Op_LoadRange: { _sub_Op_LoadRange(n);
    break;
  }
  case Op_LoadS: { _sub_Op_LoadS(n);
    break;
  }
  case Op_MaxI: { _sub_Op_MaxI(n);
    break;
  }
  case Op_MemBarAcquire: { _sub_Op_MemBarAcquire(n);
    break;
  }
  case Op_LoadFence: { _sub_Op_LoadFence(n);
    break;
  }
  case Op_MemBarAcquireLock: { _sub_Op_MemBarAcquireLock(n);
    break;
  }
  case Op_MemBarCPUOrder: { _sub_Op_MemBarCPUOrder(n);
    break;
  }
  case Op_MemBarRelease: { _sub_Op_MemBarRelease(n);
    break;
  }
  case Op_StoreFence: { _sub_Op_StoreFence(n);
    break;
  }
  case Op_MemBarReleaseLock: { _sub_Op_MemBarReleaseLock(n);
    break;
  }
  case Op_MemBarVolatile: { _sub_Op_MemBarVolatile(n);
    break;
  }
  case Op_MemBarStoreStore: { _sub_Op_MemBarStoreStore(n);
    break;
  }
  case Op_MinI: { _sub_Op_MinI(n);
    break;
  }
  case Op_ModI: { _sub_Op_ModI(n);
    break;
  }
  case Op_ModL: { _sub_Op_ModL(n);
    break;
  }
  case Op_MoveI2F: { _sub_Op_MoveI2F(n);
    break;
  }
  case Op_MoveF2I: { _sub_Op_MoveF2I(n);
    break;
  }
  case Op_MoveL2D: { _sub_Op_MoveL2D(n);
    break;
  }
  case Op_MoveD2L: { _sub_Op_MoveD2L(n);
    break;
  }
  case Op_MulD: { _sub_Op_MulD(n);
    break;
  }
  case Op_MulF: { _sub_Op_MulF(n);
    break;
  }
  case Op_MulHiL: { _sub_Op_MulHiL(n);
    break;
  }
  case Op_MulI: { _sub_Op_MulI(n);
    break;
  }
  case Op_MulL: { _sub_Op_MulL(n);
    break;
  }
  case Op_NegD: { _sub_Op_NegD(n);
    break;
  }
  case Op_NegF: { _sub_Op_NegF(n);
    break;
  }
  case Op_OrI: { _sub_Op_OrI(n);
    break;
  }
  case Op_OrL: { _sub_Op_OrL(n);
    break;
  }
  case Op_OverflowAddL: { _sub_Op_OverflowAddL(n);
    break;
  }
  case Op_OverflowSubL: { _sub_Op_OverflowSubL(n);
    break;
  }
  case Op_OverflowMulL: { _sub_Op_OverflowMulL(n);
    break;
  }
  case Op_PartialSubtypeCheck: { _sub_Op_PartialSubtypeCheck(n);
    break;
  }
  case Op_PopCountI: { _sub_Op_PopCountI(n);
    break;
  }
  case Op_PopCountL: { _sub_Op_PopCountL(n);
    break;
  }
  case Op_PrefetchAllocation: { _sub_Op_PrefetchAllocation(n);
    break;
  }
  case Op_RShiftI: { _sub_Op_RShiftI(n);
    break;
  }
  case Op_RShiftL: { _sub_Op_RShiftL(n);
    break;
  }
  case Op_Rethrow: { _sub_Op_Rethrow(n);
    break;
  }
  case Op_Return: { _sub_Op_Return(n);
    break;
  }
  case Op_RoundDouble: { _sub_Op_RoundDouble(n);
    break;
  }
  case Op_RoundFloat: { _sub_Op_RoundFloat(n);
    break;
  }
  case Op_SafePoint: { _sub_Op_SafePoint(n);
    break;
  }
  case Op_SqrtD: { _sub_Op_SqrtD(n);
    break;
  }
  case Op_StoreB: { _sub_Op_StoreB(n);
    break;
  }
  case Op_StoreC: { _sub_Op_StoreC(n);
    break;
  }
  case Op_StoreCM: { _sub_Op_StoreCM(n);
    break;
  }
  case Op_StorePConditional: { _sub_Op_StorePConditional(n);
    break;
  }
  case Op_StoreLConditional: { _sub_Op_StoreLConditional(n);
    break;
  }
  case Op_StoreD: { _sub_Op_StoreD(n);
    break;
  }
  case Op_StoreF: { _sub_Op_StoreF(n);
    break;
  }
  case Op_StoreI: { _sub_Op_StoreI(n);
    break;
  }
  case Op_StoreL: { _sub_Op_StoreL(n);
    break;
  }
  case Op_StoreP: { _sub_Op_StoreP(n);
    break;
  }
  case Op_StoreN: { _sub_Op_StoreN(n);
    break;
  }
  case Op_StoreNKlass: { _sub_Op_StoreNKlass(n);
    break;
  }
  case Op_StrComp: { _sub_Op_StrComp(n);
    break;
  }
  case Op_StrCompressedCopy: { _sub_Op_StrCompressedCopy(n);
    break;
  }
  case Op_StrEquals: { _sub_Op_StrEquals(n);
    break;
  }
  case Op_StrIndexOf: { _sub_Op_StrIndexOf(n);
    break;
  }
  case Op_StrIndexOfChar: { _sub_Op_StrIndexOfChar(n);
    break;
  }
  case Op_StrInflatedCopy: { _sub_Op_StrInflatedCopy(n);
    break;
  }
  case Op_SubD: { _sub_Op_SubD(n);
    break;
  }
  case Op_SubF: { _sub_Op_SubF(n);
    break;
  }
  case Op_SubI: { _sub_Op_SubI(n);
    break;
  }
  case Op_SubL: { _sub_Op_SubL(n);
    break;
  }
  case Op_TailCall: { _sub_Op_TailCall(n);
    break;
  }
  case Op_TailJump: { _sub_Op_TailJump(n);
    break;
  }
  case Op_ThreadLocal: { _sub_Op_ThreadLocal(n);
    break;
  }
  case Op_URShiftI: { _sub_Op_URShiftI(n);
    break;
  }
  case Op_URShiftL: { _sub_Op_URShiftL(n);
    break;
  }
  case Op_XorI: { _sub_Op_XorI(n);
    break;
  }
  case Op_XorL: { _sub_Op_XorL(n);
    break;
  }
  case Op_LoadVector: { _sub_Op_LoadVector(n);
    break;
  }
  case Op_StoreVector: { _sub_Op_StoreVector(n);
    break;
  }
  case Op_ReplicateB: { _sub_Op_ReplicateB(n);
    break;
  }
  case Op_ReplicateS: { _sub_Op_ReplicateS(n);
    break;
  }
  case Op_ReplicateI: { _sub_Op_ReplicateI(n);
    break;
  }
  case Op_ReplicateL: { _sub_Op_ReplicateL(n);
    break;
  }
  case Op_ReplicateF: { _sub_Op_ReplicateF(n);
    break;
  }
  case Op_ReplicateD: { _sub_Op_ReplicateD(n);
    break;
  }
  
  default:
    tty->print("Default case invoked for: \n");
    tty->print("   opcode  = %d, \"%s\"\n", opcode, NodeClassNames[opcode]);
    return false;
  }
  return true;
}
