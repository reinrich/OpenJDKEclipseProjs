#line 1 "ad_ppc_misc.cpp"
//
// Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2012, 2017 SAP SE. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_ppc.hpp"
const RegMask &convB2I_reg_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB_indirectNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB_indirect_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadB_indirect_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadB_indirect_ac_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB_indOffset16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB_indOffset16_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadB_indOffset16_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadB_indOffset16_ac_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUBNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUB2LNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadUB2L_acNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadSNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadS_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUSNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUS_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUS2LNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadUS2L_acNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadI_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadUI2LNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadI2LNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadI2L_acNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadL_acNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadL_unalignedNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadV8Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadV16Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &loadRangeNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadN_acNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadN2P_unscaledNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadN2P_klass_unscaledNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadP_acNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadP2XNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadNKlassNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadKlassNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadFNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &loadF_acNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &loadDNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &loadD_acNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &loadD_unalignedNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &loadToc_hiNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadToc_loNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConI16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConIhi16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConI32_lo16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConI_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConL16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL32hi16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL32_lo16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL32_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConLhighest16_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL_hiNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL_loNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConL_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConN0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConN_hiNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConN_loNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rldiclNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &clearMs32bNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadBaseNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConN_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConNKlass_hiNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConNKlass_maskNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConNKlass_loNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConNKlass_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadConP0or1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConP_hiNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConP_loNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConP_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadConFNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &loadConFCompNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &loadConF_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &loadConDNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &loadConDCompNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &loadConD_ExNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &prefetch_alloc_zeroNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetch_alloc_zero_no_offsetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetch_allocNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetch_alloc_no_offsetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeI_convL2INode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeA8BNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeV16Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeNNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeNKlassNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCM_CMSNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCM_CMS_ExExNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCM_G1Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &encodeP_shiftNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_subNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cond_sub_baseNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cond_set_0_oopNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_DisjointNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_not_null_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_not_null_base_nullNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodeP_narrow_oop_shift_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &decodeN_shiftNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_addNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cond_add_baseNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cond_set_0_ptrNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_nullBaseNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_mergeDisjointNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_Disjoint_notNull_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_Disjoint_isel_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_notNull_addBase_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN_unscaledNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeN2I_unscaledNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodePKlass_shiftNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodePKlass_sub_baseNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &encodePKlass_DisjointNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodePKlass_not_null_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encodePKlass_not_null_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &decodeNKlass_shiftNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeNKlass_add_baseNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeNKlass_notNull_addBase_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &decodeNKlass_notNull_addBase_ExExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_storestoreNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_CPUOrderNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmovI_reg_iselNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovL_reg_iselNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_immNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovN_reg_iselNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovN_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovN_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovP_reg_iselNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovP_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovP_immNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovF_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &cmovD_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &storeLConditional_regP_regL_regLNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &storePConditional_regP_regP_regPNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &loadPLockedNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &compareAndSwapB_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapB4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapS_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapS4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapI_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapN_regP_regN_regNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapL_regP_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndSwapP_regP_regP_regPNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapB_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapB4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapB_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapB4_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapS_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapS4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapS_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapS4_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapI_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapI_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapN_regP_regN_regNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapN_acq_regP_regN_regNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapL_regP_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapL_acq_regP_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapP_regP_regP_regPNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &weakCompareAndSwapP_acq_regP_regP_regPNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeB_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeB4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeB_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeB4_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeS_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeS4_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeS_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeS4_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeI_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeI_acq_regP_regI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeN_regP_regN_regNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeN_acq_regP_regN_regNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &compareAndExchangeL_regP_regL_regLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &compareAndExchangeL_acq_regP_regL_regLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &compareAndExchangeP_regP_regP_regPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &compareAndExchangeP_acq_regP_regP_regPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &getAndAddBNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndAddB4Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndAddSNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndAddS4Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndAddINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndAddLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &getAndSetBNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndSetB4Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndSetSNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndSetS4Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndSetINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &getAndSetLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &getAndSetPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &getAndSetNNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addI_reg_reg_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_addI_addI_addI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_addI_addI_addI_reg_reg_Ex_1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_addI_addI_addI_reg_reg_Ex_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_addI_addI_addI_reg_reg_Ex_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addI_reg_imm16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addI_reg_immhi16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addL_reg_reg_2Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &tree_addL_addL_addL_reg_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &tree_addL_addL_addL_reg_reg_Ex_1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &tree_addL_addL_addL_reg_reg_Ex_0Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &tree_addL_addL_addL_reg_reg_Ex_2Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addI_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addL_reg_imm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addL_reg_immhi16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addP_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addP_reg_imm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &addP_reg_immhi16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &subI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &subI_imm16_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &signmask32I_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &absI_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &negI_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &subL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &subI_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &signmask64I_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &signmask64L_regLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &negL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &negI_con0_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &mulI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &mulI_reg_imm16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &mulL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &mulHighL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &mulL_reg_imm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &divI_reg_immIvalueMinus1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &divI_reg_regnotMinus1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_bne_negI_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &divI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &divL_reg_immLvalueMinus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &divL_reg_regnotMinus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_bne_negL_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &divL_reg_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &modI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &modL_reg_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &maskI_reg_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftI_reg_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftI_andI_immInegpow2_imm5Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftI_andI_immInegpow2_rShiftI_imm5Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &lShiftL_regL_regINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &lShiftL_regL_regI_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &lshiftL_regL_immINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &lShiftL_regI_immGE32Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &scaledPositiveI2L_lShiftL_convI2L_reg_imm6Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &arShiftI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &arShiftI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &arShiftI_reg_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &arShiftL_regL_regINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &arShiftL_regL_regI_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &arShiftL_regL_immINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convL2I_arShiftL_regL_immINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &urShiftI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &urShiftI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &urShiftI_reg_immNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &urShiftL_regL_regINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &urShiftL_regL_regI_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &urShiftL_regL_immINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convL2I_urShiftL_regL_immINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &shrP_convP2X_reg_imm6Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &andI_urShiftI_regI_immI_immIpow2minus1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andL_urShiftL_regL_immI_immLpow2minus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &sxtI_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rotlI_reg_immi8Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rotlI_reg_immi8_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rotrI_reg_immi8Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rotrI_reg_immi8_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &addF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &addD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &subF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &subD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &mulF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &mulD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &divF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &divD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &absF_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &absD_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &negF_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &negD_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &negF_absF_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &negD_absD_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &sqrtD_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &sqrtF_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &roundDouble_nopNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &roundFloat_nopNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &maddF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &maddD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &mnsubF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &mnsubF_reg_reg_0Node::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &mnsubD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &mnsubD_reg_reg_0Node::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &mnaddF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &mnaddF_reg_reg_0Node::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &mnaddD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &mnaddD_reg_reg_0Node::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &msubF_reg_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &msubD_reg_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &andI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andI_reg_immIhi16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andI_reg_uimm16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andI_reg_immInegpow2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andI_reg_immIpow2minus1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andI_reg_immIpowerOf2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &andL_reg_uimm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &andL_reg_immLnegpow2Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &andL_reg_immLpow2minus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convL2I_andL_reg_immLpow2minus1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &orI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &orI_reg_reg_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_orI_orI_orI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_orI_orI_orI_reg_reg_Ex_1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_orI_orI_orI_reg_reg_Ex_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_orI_orI_orI_reg_reg_Ex_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &orI_reg_uimm16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &orL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &orI_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &orL_reg_uimm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &xorI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_reg_reg_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_xorI_xorI_xorI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_xorI_xorI_xorI_reg_reg_Ex_1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_xorI_xorI_xorI_reg_reg_Ex_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &tree_xorI_xorI_xorI_reg_reg_Ex_2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_reg_uimm16Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &xorI_regL_regLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorL_reg_uimm16Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &notI_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &notL_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &andcI_reg_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andcI_reg_reg_0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &andcL_reg_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &moveL2D_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &moveI2D_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &stkI_to_regINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &regI_to_stkINode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stkL_to_regLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &regL_to_stkLNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveF2I_stack_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &moveF2I_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveI2F_stack_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &moveI2F_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveF2L_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveD2L_stack_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &moveD2L_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveL2D_stack_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &moveL2D_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &moveRegNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &castX2PNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &castP2XNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &castPPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &castIINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &checkCastPPNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convI2Bool_reg__cntlz_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convI2Bool_reg__cmoveNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_convI2Bool_reg_immIvalue1__cntlz_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_convI2Bool_reg_immIvalue1__cmoveNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convI2Bool_andI_reg_immIpowerOf2Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convP2Bool_reg__cntlz_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convP2Bool_reg__cmoveNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_convP2Bool_reg__cntlz_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &xorI_convP2Bool_reg_immIvalue1__cmoveNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmpLTMask_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmpLTMask_reg_immI0Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convB2I_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &extshNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convS2I_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &sxtI_L2L_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convL2I_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convD2IRaw_regDNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &cmovI_bso_stackSlotLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_bso_regNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_bso_stackSlotL_conLvalue0_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_bso_reg_conLvalue0_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convD2I_reg_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convD2I_reg_mffprd_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convF2IRaw_regFNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convF2I_regF_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convF2I_regF_mffprd_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &convI2L_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &zeroExtendL_regINode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &zeroExtendL_regLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convF2LRaw_regFNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &cmovL_bso_stackSlotLNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_bso_regNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_bso_stackSlotL_conLvalue0_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmovL_bso_reg_conLvalue0_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convF2L_reg_ExExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convF2L_reg_mffprd_ExExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convD2LRaw_regDNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convD2L_reg_ExExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convD2L_reg_mffprd_ExExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &convL2DRaw_regDNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convD2F_regNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convI2F_ireg_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convL2FRaw_regFNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convI2F_ireg_fcfids_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convI2F_ireg_mtfprd_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convL2F_ireg_fcfids_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convL2F_ireg_mtfprd_ExNode::out_RegMask() const { return (FLT_REG_mask()); }
const RegMask &convI2D_reg_ExNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convI2D_reg_mtfprd_ExNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convL2D_reg_ExNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convL2D_reg_mtfprd_ExNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &convF2D_regNode::out_RegMask() const { return (DBL_REG_mask()); }
const RegMask &cmpI_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpI_reg_imm16Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testI_reg_immNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &cmpL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpL_reg_imm16Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpUL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpUL_reg_imm16Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testL_reg_regNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &testL_reg_immNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &cmovI_conIvalueMinus1_conIvalue1Node::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmovI_conIvalueMinus1_conIvalue0_conIvalue1_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmpL3_reg_reg_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &rangeCheck_iReg_uimm15Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &rangeCheck_iReg_iRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &rangeCheck_uimm15_iRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &compU_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_reg_uimm16Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &zeroCheckN_iReg_imm0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpN_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpN_reg_imm0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &zeroCheckP_reg_imm0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpP_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpP_reg_nullNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpP_reg_imm16Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFUnordered_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmov_bns_lessNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpF_reg_reg_ExNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpF3_reg_reg_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &cmpDUnordered_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpD_reg_reg_ExNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpD3_reg_reg_ExExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConSchedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndSchedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &partialSubtypeCheckNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &cmpFastLockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastLock_tmNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastUnlockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastUnlock_tmNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &align_addrNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &array_sizeNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &inlineCallClearArrayShortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &inlineCallClearArrayLargeNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &inlineCallClearArrayNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &string_compareLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_compareUNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_compareLUNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_compareULNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_equalsLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_equalsUNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &array_equalsBNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &array_equalsCNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_char_UNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_char_LNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_char_ULNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_UNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_LNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm1_ULNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOfChar_UNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm_UNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm_LNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_imm_ULNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_UNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_LNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &indexOf_ULNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_compressNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &string_inflateNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &has_negativesNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &encode_iso_arrayNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &minI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &minI_reg_reg_iselNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &maxI_reg_reg_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &maxI_reg_reg_iselNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &popCountINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &popCountLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &countLeadingZerosINode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &countLeadingZerosLNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &countLeadingZerosPNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &countTrailingZerosI_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &countTrailingZerosL_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &insrwi_aNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &insrwiNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &bytes_reverse_int_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &bytes_reverse_long_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &bytes_reverse_ushort_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &bytes_reverse_short_ExNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadI_reversedNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadL_reversedNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &loadUS_reversedNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &loadS_reversedNode::out_RegMask() const { return (BITS32_REG_RW_mask()); }
const RegMask &storeI_reversedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_reversedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeUS_reversedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeS_reversedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &mtvsrwzNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &xxspltwNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl32Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl48Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl56Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl8B_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl8B_immI0Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl8B_immIminus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl16B_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl16B_immI0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl16B_immIminus1Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl4S_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl4S_immI0Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl4S_immIminus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl8S_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl8S_immI0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl8S_immIminus1Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2I_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl2I_immI0Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl2I_immIminus1Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl4I_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl4I_immI0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl4I_immIminus1Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2F_reg_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl2F_immF_ExNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &repl2F_immF0Node::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &overflowAddL_reg_regNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &overflowSubL_reg_regNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &overflowNegL_regNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &overflowMulL_reg_regNode::out_RegMask() const { return (INT_FLAGS_CR0_mask()); }
const RegMask &repl4F_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl4F_immF_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl4F_immF0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2D_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2D_immI0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2D_immIminus1Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &mtvsrdNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &xxspltdNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &xxpermdiNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2L_reg_ExNode::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2L_immI0Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &repl2L_immIminus1Node::out_RegMask() const { return (VS_REG_mask()); }
const RegMask &safePoint_pollNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectSchedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectSched_ExNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallRuntimeDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirect_mtctrNode::out_RegMask() const { return (BITS64_REG_RW_mask()); }
const RegMask &CallLeafDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirect_ExNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafNoFPDirect_ExNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailCalljmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &RetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tailjmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CreateExceptionNode::out_RegMask() const { return (RARG1_BITS64_REG_mask()); }
const RegMask &RethrowExceptionNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &ShouldNotReachHereNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tlsLoadPNode::out_RegMask() const { return (THREAD_BITS64_REG_mask()); }
const RegMask &endGroupNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &fxNopNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &fpNop0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &fpNop1Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &brNop0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &brNop1Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &brNop2Node::out_RegMask() const { return (RegMask::Empty); }
// Check consistency of C++ compilation with ADLC options:
// Check adlc -DLINUX=1
#ifndef LINUX
#  error "LINUX must be defined"
#endif // LINUX
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DPPC64=1
#ifndef PPC64
#  error "PPC64 must be defined"
#endif // PPC64
// Check adlc -D_LP64=1
#ifndef _LP64
#  error "_LP64 must be defined"
#endif // _LP64
