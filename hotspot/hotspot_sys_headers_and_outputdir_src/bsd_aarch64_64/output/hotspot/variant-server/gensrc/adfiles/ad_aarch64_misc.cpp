#line 1 "ad_aarch64_misc.cpp"
//
// Copyright (c) 2003, 2024, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2014, 2021, Red Hat, Inc. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_aarch64.hpp"
const RegMask &loadBNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadB2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadUBNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUB2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadSNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadS2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadUSNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUS2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadI2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadUI2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadRangeNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadKlassNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadNKlassNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &loadDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &loadConINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadConLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadConPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadConP0Node::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadConP1Node::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadByteMapBaseNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadConNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadConN0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadConNKlassNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadConF_packedNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &loadConFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &loadConD_packedNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &loadConDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &storeimmCM0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmCM0_orderedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmB0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmC0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmI0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmL0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmP0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeNNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmN0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeNKlassNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchallocNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadB_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadB2L_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadUB_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUB2L_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadS_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUS_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUS2L_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadS2L_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadI_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadUI2L_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadL_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &loadP_volatileNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &loadN_volatileNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &loadF_volatileNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &loadD_volatileNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &storeB_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmB0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeC_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmC0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeI_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmI0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmL0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeP_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmP0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeN_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeimmN0_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeF_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeD_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cacheWBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cacheWBPreSyncNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cacheWBPostSyncNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &bytes_reverse_intNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &bytes_reverse_longNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &bytes_reverse_unsigned_shortNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &bytes_reverse_shortNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &countLeadingZerosINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &countLeadingZerosLNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &countTrailingZerosINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &countTrailingZerosLNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &popCountINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &popCountI_memNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &popCountLNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &popCountL_memNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &verify_vector_alignmentNode::out_RegMask() const { return (PTR_REG_mask()); }
const RegMask &load_fenceNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &store_fenceNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_storestoreNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_storestore_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &castX2PNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &castP2XNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convP2INode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &convN2INode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &encodeHeapOopNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &encodeHeapOop_not_nullNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &decodeHeapOopNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &decodeHeapOop_not_nullNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &encodeKlass_not_nullNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &decodeKlass_not_nullNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &checkCastPPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &castPPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &castIINode::out_RegMask() const { return (ANY_REG32_mask()); }
const RegMask &castLLNode::out_RegMask() const { return (ANY_REG_mask()); }
const RegMask &castFFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &castDDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &castVVNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &castVVMaskNode::out_RegMask() const { return (GOV_PR_mask()); }
const RegMask &compareAndSwapBNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapSNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapLNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapPNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapBAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapSAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapIAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapLAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapPAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapNAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeBNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeSNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &compareAndExchangeNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangePNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &compareAndExchangeBAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeSAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeIAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeLAcqNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &compareAndExchangeNAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangePAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &weakCompareAndSwapBNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapSNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapLNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapPNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapBAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapSAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapIAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapLAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapNAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapPAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_setINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_setLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_setNNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_setPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &get_and_setIAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_setLAcqNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_setNAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_setPAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &get_and_addLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_addL_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addLiNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_addLi_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_addI_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addIiNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_addIi_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addLAcqNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_addL_no_resAcqNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addLiAcqNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &get_and_addLi_no_resAcqNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addIAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_addI_no_resAcqNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &get_and_addIiAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &get_and_addIi_no_resAcqNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpU3_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpU3_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpUL3_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpUL3_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpL3_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpL3_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUI_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUI_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_zero_oneNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUI_reg_zero_oneNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovUL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovL_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovUL_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovL_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovUL_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &cmovP_reg_regNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovUP_reg_regNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovP_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovUP_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovP_zero_regNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovUP_zero_regNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &cmovN_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUN_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovN_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUN_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovN_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovUN_zero_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &cmovUF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &cmovD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &cmovUD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &addI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &addI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &addI_reg_imm_i2lNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &addP_reg_regNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &addP_reg_reg_extNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &addP_reg_reg_lslNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &addP_reg_reg_ext_shiftNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &lshift_extNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &addP_reg_immNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &addL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &addL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &subI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &subI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &subL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &subL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &negI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &negL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &mulINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &smulINode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smulI_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &mulLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &mulHiL_rRegNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &umulHiL_rRegNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &maddINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maddI_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &msubINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &mnegINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &mnegI_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maddLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &maddL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &msubLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &mnegLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &mnegL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smaddLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smaddL_1Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smaddL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smaddL_2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smsubLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smsubL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smnegLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &smnegL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &muladdS2INode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &divINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &divLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &modINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &modLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &UdivI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &UdivL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &UmodI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &UModL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &lShiftI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &lShiftI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &urShiftI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &urShiftI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rShiftI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rShiftI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &lShiftL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &lShiftL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &urShiftL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &urShiftL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &urShiftP_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &rShiftL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &rShiftL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &regL_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &regI_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &NegI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &NegI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &NegI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &NegL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &NegL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &NegL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_URShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_URShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_URShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_URShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RotateRight_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RotateRight_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RotateRight_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RotateRight_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_LShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_LShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_LShift_not_reg_1Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_LShift_not_reg_2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_URShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_URShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_RShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_RShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_RotateRight_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_RotateRight_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_LShift_not_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_LShift_not_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndI_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndI_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AndL_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AndL_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorI_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorI_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &XorL_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &XorL_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrI_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrI_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &OrL_reg_RotateRight_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &OrL_reg_RotateRight_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddI_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddL_reg_URShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddI_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddL_reg_RShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddI_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddL_reg_LShift_reg_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubI_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubL_reg_URShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubI_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubL_reg_RShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubI_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubL_reg_LShift_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &sbfmLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &sbfmwINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfmLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfmwINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfxwINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfxLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfxIConvI2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfizwINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfizLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfizwIConvI2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfizLConvL2INode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfizIConvI2LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &ubfizLConvL2IxNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &ubfizIConvI2LAndINode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extrOrLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extrOrL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extrOrINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extrOrI_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extrAddLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extrAddL_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extrAddINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extrAddI_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rorI_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rorL_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &rorI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rorL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &rolI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &rolL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtINode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtINode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_sxthNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxth_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxtbNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxtb_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxtbNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxtb_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtL_sxthNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxth_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtwNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtw_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtbNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtb_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtbNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtb_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_uxtb_andNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxtb_and_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxth_andNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxth_and_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtL_uxtb_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtb_and_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxth_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxth_and_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtw_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtw_and_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtI_uxtb_andNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtI_uxth_andNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtL_uxtb_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_uxth_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_uxtw_andNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtb_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtb_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxth_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxth_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtw_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_sxtw_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_sxtb_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_sxth_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_sxtw_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_sxtb_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxtb_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxth_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_sxth_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtI_sxtb_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtI_sxth_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtI_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtb_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtb_and_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxth_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxth_and_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtw_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtL_uxtw_and_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_uxtb_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_uxth_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &SubExtL_uxtw_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &AddExtI_uxtb_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxtb_and_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxth_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &AddExtI_uxth_and_shift_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtI_uxtb_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &SubExtI_uxth_and_shiftNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_reg_ltNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_reg_gtNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_imm0_ltNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_imm0_gtNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_imm1_leNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_imm1_gtNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_immM1_ltNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmovI_reg_immM1_geNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_reg_imm0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_imm0_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_reg_imm1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_imm1_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_reg_immM1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &minI_immM1_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_reg_imm0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_imm0_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_reg_imm1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_imm1_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_reg_immM1Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_immM1_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &bits_reverse_INode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &bits_reverse_LNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &addF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &addD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &subF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &subD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &mulF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &mulD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &maddF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &maddD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &msubF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &msubD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &mnaddF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &mnaddD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &mnsubF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &mnsubD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &maxF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &minF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &maxD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &minD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &divF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &divD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &negF_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &negD_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &absI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &absL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &absF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &absD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &absdF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &absdD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &sqrtD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &sqrtF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &roundD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &copySignD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &copySignF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &signumD_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &signumF_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &onspinwaitNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &andI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &andI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &orI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &orI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xorI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xorI_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &andL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &andL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &orL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &orL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &xorL_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &xorL_reg_immNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convI2L_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convUI2L_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convL2I_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &convD2F_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &convF2D_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &convF2I_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &convF2L_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convF2HF_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &convHF2F_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &convI2F_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &convL2F_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &convD2I_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &convD2L_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &convI2D_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &convL2D_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &round_double_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &round_float_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &MoveF2I_stack_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &MoveI2F_stack_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &MoveD2L_stack_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &MoveL2D_stack_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &MoveF2I_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveI2F_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveD2L_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveL2D_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveF2I_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &MoveI2F_reg_regNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &MoveD2L_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &MoveL2D_reg_regNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &clearArray_reg_regNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &clearArray_imm_regNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &overflowAddI_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowAddI_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowAddL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowAddL_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowSubI_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowSubI_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowSubL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowSubL_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowNegI_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowNegL_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowMulI_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowMulI_reg_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &overflowMulL_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &overflowMulL_reg_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &compI_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compI_reg_immI0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compI_reg_immIAddSubNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compI_reg_immINode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_reg_immI0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_reg_immIAddSubNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compU_reg_immINode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_immL0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_immLAddSubNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compL_reg_immLNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compUL_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compUL_reg_immL0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compUL_reg_immLAddSubNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compUL_reg_immLNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compP_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compN_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testP_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &testN_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compF_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compF_reg_zeroNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compD_reg_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compD_reg_zeroNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &compF3_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compD3_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compF3_reg_immF0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compD3_reg_immD0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpLTMask_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &cmpLTMask_reg_zeroNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compI_reg_imm0Node::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &minI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &maxI_reg_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConUNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpI_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpP_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpN_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpP_narrowOop_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpUI_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpUL_imm0_branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL_branch_signNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpI_branch_signNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL_branch_bitNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpI_branch_bitNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &far_cmpL_branch_signNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &far_cmpI_branch_signNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &far_cmpL_branch_bitNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &far_cmpI_branch_bitNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL_andNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpI_andNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpL_and_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpI_and_regNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &branchLoopEndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpFastLockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastUnlockNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastLockLightweightNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &cmpFastUnlockLightweightNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &safePointNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallRuntimeDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafNoFPDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailCalljmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailjmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CreateExceptionNode::out_RegMask() const { return (R0_REG_mask()); }
const RegMask &RethrowExceptionNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &RetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &ShouldNotReachHereNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &partialSubtypeCheckNode::out_RegMask() const { return (R5_REG_mask()); }
const RegMask &partialSubtypeCheckVsZeroNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &string_compareUNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareLNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareULNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareLUNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareLL_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareLU_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareUL_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compareUU_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexofUUNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexofLLNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexofULNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexof_conUUNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexof_conLLNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexof_conULNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_indexof_charNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &stringL_indexof_charNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &stringL_indexof_char_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &stringU_indexof_char_sveNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_equalsLNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &array_equalsBNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &array_equalsCNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &count_positivesNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_compressNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &string_inflateNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &encode_iso_arrayNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &encode_ascii_arrayNode::out_RegMask() const { return (INT_R0_REG_mask()); }
const RegMask &compressBitsI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compressBitsI_memconNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compressBitsL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &compressBitsL_memconNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &expandBitsI_regNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &expandBitsI_memconNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &expandBitsL_regNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &expandBitsL_memconNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &tlsLoadPNode::out_RegMask() const { return (THREAD_REG_mask()); }
const RegMask &loadV2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeV2Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadV4Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeV4Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadV8Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeV8Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadV16Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeV16Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadVNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeVNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadV_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &storeV_maskedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &vloadconNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddB_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddS_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmB_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmS_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vaddImmL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubB_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubS_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsubD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulB_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulB_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulS_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulS_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulI_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulI_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulL_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulL_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulB_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulS_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmulD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivF_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivF_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivD_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivD_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vdivD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmB_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmS_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vandImmL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vor_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmB_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmS_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vorImmL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxor_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmB_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmS_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vxorImmL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &veor3_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &veor3_neon_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &veor3_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &veor3_sve_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnotL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notI_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notI_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notI_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notL_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notL_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notI_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vand_notL_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsB_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsS_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vabsD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_neon_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_sve_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfabd_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vnegD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsqrtFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsqrtDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsqrtF_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsqrtD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vminL_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vminL_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmin_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmin_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmin_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaxL_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaxL_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmax_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmax_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmax_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmlaNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_3Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_4Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmlaLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmlaL_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmla_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmlaNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmla_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmad_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmad_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmlsNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmlsLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmls_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmlsNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmls_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmsb_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfmsb_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmlaNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmla_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmad_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmad_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmlsNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmls_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmsb_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vfnmsb_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmuladdS2INode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vshiftcntLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vshiftcntRNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_neon_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_neon_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_neon_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_sve_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_sve_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_sve_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_varNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_var_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_var_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_neon_var_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_sve_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_sve_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_sve_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_varNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_var_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_var_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_neon_var_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_sve_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_sve_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_sve_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_immNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_immNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_immNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_immNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_3Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_4Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_5Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasra_imm_6Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_immNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_3Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_4Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_5Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsra_imm_6Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsl_imm_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vasr_imm_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_masked_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_masked_1Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vlsr_imm_masked_2Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &reduce_addI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_addI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_addL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_addL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_add2F_neonNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_add4F_neonNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_addF_sveNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_addD_neonNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_addD_sveNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_addI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_addL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_addF_maskedNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_addD_maskedNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_mulINode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_mulLNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_mulFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_mulDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_andI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_andI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_andL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_andL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_andI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_andL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_orI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_orI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_orL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_orL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_orI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_orL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_xorI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_xorI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_xorL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_xorL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_xorI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_xorL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_maxI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_maxI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_maxL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_maxL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_maxFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_maxDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_maxI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_maxL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_maxF_maskedNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_maxD_maskedNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_minI_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_minI_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_minL_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_minL_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_minFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_minDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reduce_minI_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &reduce_minL_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &reduce_minF_maskedNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &reduce_minD_maskedNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &reinterpret_same_sizeNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &reinterpret_resize_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &reinterpret_resize_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vzeroExtBtoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vzeroExtStoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vzeroExtItoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtBtoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtStoB_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtStoB_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtStoX_extendNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtItoX_narrow_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtItoX_narrow_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtItoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtLtoI_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtLtoI_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtLtoF_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtLtoF_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtLtoDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtFtoX_narrow_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtFtoX_narrow_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtFtoXNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtDtoI_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtDtoI_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtDtoLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtDtoF_64bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtDtoF_gt64bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtHFtoFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtFtoHF_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcvtFtoHF_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateFNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateI_imm_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateB_imm8_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateI_imm8_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateL_imm_128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &replicateL_imm8_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertI_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertI_index_lt32Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertI_index_ge32Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertL_128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertL_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertF_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertF_index_lt32Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertF_index_ge32Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertD_128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &insertD_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &extractUB_iregNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractUB_index_lt16Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractUB_index_ge16Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractB_index_lt16Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractB_index_ge16Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractS_index_lt8Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractS_index_ge8Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractI_index_lt4Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractI_index_ge4Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &extractL_index_lt2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extractL_index_ge2Node::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &extractFNode::out_RegMask() const { return (FLOAT_REG_mask()); }
const RegMask &extractDNode::out_RegMask() const { return (DOUBLE_REG_mask()); }
const RegMask &vloadmask_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vloadmaskB_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmask_extend_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmaskB_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmask_extend_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vstoremaskB_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vstoremask_narrow_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vstoremaskB_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vstoremask_narrow_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vloadmask_loadVNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmask_loadV_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmask_loadVMaskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vloadmask_loadVMasked_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &storeV_vstoremaskNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeV_vstoremask_maskedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeVMasked_vstoremaskNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeVMasked_vstoremask_maskedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &vmask_andNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_orNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_xorNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_and_notINode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_and_notLNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmp_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcmp_zeroI_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcmp_zeroL_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcmp_zeroF_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcmp_zeroD_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcmp_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmp_immI_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmpU_immI_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmp_immL_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmpU_immL_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcmp_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcast_same_esize_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcast_extend_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcast_narrow_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vmaskcast_same_esize_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcast_extend_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskcast_narrow_sveNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_reinterpret_same_esizeNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_reinterpret_diff_esizeNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_truecount_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_truecount_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vstoremask_truecount_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_firsttrue_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_firsttrue_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_firsttrue_maskedNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_lasttrue_neonNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_lasttrue_sveNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &vmask_tolong_neonNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &vmask_tolong_sveNode::out_RegMask() const { return (NO_SPECIAL_REG_mask()); }
const RegMask &vmask_fromlongNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAll_immINode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAllINode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAllI_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAll_immLNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAllLNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmaskAllL_maskedNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_gen_INode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_gen_LNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_gen_immNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vmask_gen_subNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vpopcountINode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vpopcountLNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vpopcountI_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vpopcountL_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vblend_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vblend_sveNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vround_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vround_le128b_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vround_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vround_gt128b_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vroundDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vtest_anytrue_neonNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &vtest_anytrue_sveNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &vtest_alltrue_neonNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &vtest_alltrue_sveNode::out_RegMask() const { return (INT_FLAGS_mask()); }
const RegMask &loadshuffleNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &rearrange_HS_neonNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &rearrangeNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &gather_loadSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &gather_loadDNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &gather_loadS_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &gather_loadD_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &scatter_storeSNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &scatter_storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &scatter_storeS_maskedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &scatter_storeD_maskedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &vcountLeadingZerosNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcountLeadingZeros_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcountTrailingZerosNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcountTrailingZeros_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vreverseNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vreverse_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vreverseBytesNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vreverseBytes_maskedNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &populateindexNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &mcompressNode::out_RegMask() const { return (PR_REG_mask()); }
const RegMask &vcompressNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcompressBNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcompressSNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vexpandNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsignum_le128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsignum_le128b_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsignum_gt128bNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vsignum_gt128b_0Node::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vcompressBitsNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &vexpandBitsNode::out_RegMask() const { return (*_opnds[0]->in_RegMask(0)); }
const RegMask &compareAndSwapP_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapN_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapPAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndSwapNAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeN_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangeP_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &compareAndExchangeNAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &compareAndExchangePAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &weakCompareAndSwapN_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapP_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapNAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &weakCompareAndSwapPAcq_shenandoahNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xLoadPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &xLoadPVolatileNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &xCompareAndSwapPNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xCompareAndSwapP_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xCompareAndSwapPAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xCompareAndSwapPAcq_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &xCompareAndExchangePNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &xCompareAndExchangePAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &xGetAndSetPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &xGetAndSetPAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zLoadPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zLoadPVolatileNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zStorePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &zStorePVolatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &zCompareAndSwapPNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &zCompareAndSwapP_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &zCompareAndSwapPAcqNode::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &zCompareAndSwapPAcq_0Node::out_RegMask() const { return (NO_SPECIAL_REG32_mask()); }
const RegMask &zCompareAndExchangePNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zCompareAndExchangePAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zGetAndSetPNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
const RegMask &zGetAndSetPAcqNode::out_RegMask() const { return (NO_SPECIAL_PTR_REG_mask()); }
// Check consistency of C++ compilation with ADLC options:
// Check adlc -D_ALLBSD_SOURCE=1
#ifndef _ALLBSD_SOURCE
#  error "_ALLBSD_SOURCE must be defined"
#endif // _ALLBSD_SOURCE
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DR18_RESERVED=1
#ifndef R18_RESERVED
#  error "R18_RESERVED must be defined"
#endif // R18_RESERVED
// Check adlc -DAARCH64=1
#ifndef AARCH64
#  error "AARCH64 must be defined"
#endif // AARCH64
// Check adlc -D_LP64=1
#ifndef _LP64
#  error "_LP64 must be defined"
#endif // _LP64
// Check adlc -DASSERT=1
#ifndef ASSERT
#  error "ASSERT must be defined"
#endif // ASSERT
