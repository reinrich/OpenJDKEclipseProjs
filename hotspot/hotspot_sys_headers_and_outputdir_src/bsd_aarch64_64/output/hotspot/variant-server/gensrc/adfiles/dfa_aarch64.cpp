#line 1 "dfa_aarch64.cpp"
//
// Copyright (c) 2003, 2024, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2014, 2021, Red Hat, Inc. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_aarch64.hpp"
#include "oops/compressedOops.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/matcher.hpp"
#include "opto/narrowptrnode.hpp"
#include "opto/opcodes.hpp"
#include "opto/convertnode.hpp"
#include "opto/superword.hpp"
#include "utilities/powerOfTwo.hpp"

//------------------------- Source -----------------------------------------

//------------------------- Attributes -------------------------------------

// AttributeForm 
static const int op_cost = 1;

// AttributeForm 
static const int ins_cost = INSN_COST;

// AttributeForm 
static const int ins_size = 32;

// AttributeForm 
static const int ins_short_branch = 0;

// AttributeForm 
static const int ins_alignment = 4;

//------------------------- Macros -----------------------------------------
#define DFA_PRODUCTION(result, rule, cost)\
  assert(rule < (1 << 15), "too many rules"); _cost[ (result) ] = cost; _rule[ (result) ] = (rule << 1) | 0x1;

//------------------------- DFA --------------------------------------------
// DFA is a large switch with case statements for each ideal opcode encountered
// in any match rule in the ad file.  Each case has a series of if's to handle
// the match or fail decisions.  The matches test the cost function of that
// rule, and prune any cases which are higher cost for the same reduction.
// In order to generate the DFA we walk the table of ideal opcode/MatchList
// pairs generated by the ADLC front end to build the contents of the case
// statements (a series of if statements).


void  State::_sub_Op_RegN(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGNNOSP, iRegNNoSp_rule, c)
        DFA_PRODUCTION(IREGN, iRegN_rule, c)
    }
    {
      unsigned int c = 0;
    }
}
void  State::_sub_Op_RegI(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGI_R4, iRegI_R4_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGI_R3, iRegI_R3_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGI_R2, iRegI_R2_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGI_R0, iRegI_R0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGINOSP, iRegINoSp_rule, c)
        DFA_PRODUCTION(IREGI, iRegI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
    }
    {
      unsigned int c = 0;
    }
}
void  State::_sub_Op_RegP(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R10, iRegP_R10_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R5, iRegP_R5_rule, c)
        DFA_PRODUCTION(IREGP, iRegP_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, inline_cache_RegP_rule, c)
        DFA_PRODUCTION(THREAD_REGP, thread_RegP_rule, c)
        DFA_PRODUCTION(INDIRECT, indirect_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R4, iRegP_R4_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R3, iRegP_R3_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R2, iRegP_R2_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R1, iRegP_R1_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGP_R0, iRegP_R0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGPNOSP, iRegPNoSp_rule, c)
    }
    {
      unsigned int c = 0;
    }
}
void  State::_sub_Op_RegF(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGF, vRegF_rule, c)
    }
}
void  State::_sub_Op_RegD(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V7, vRegD_V7_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V6, vRegD_V6_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V5, vRegD_V5_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V4, vRegD_V4_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V3, vRegD_V3_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V2, vRegD_V2_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V1, vRegD_V1_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD_V0, vRegD_V0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREGD, vRegD_rule, c)
    }
}
void  State::_sub_Op_RegL(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGL_R11, iRegL_R11_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGL_R0, iRegL_R0_rule, c)
        DFA_PRODUCTION(IREGLNOSP, iRegLNoSp_rule, c+1)
        DFA_PRODUCTION(IREGL, iRegL_rule, c+1)
    }
    {
      unsigned int c = 1;
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IREGL, iRegL_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_VecA(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VECA, vecA_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREG, vReg_rule, c)
    }
}
void  State::_sub_Op_VecD(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VECD, vecD_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREG, vReg_rule, c)
    }
}
void  State::_sub_Op_VecX(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VECX, vecX_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(VREG, vReg_rule, c)
    }
}
void  State::_sub_Op_RegVectMask(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(PREGGOV_P1, pRegGov_P1_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(PREGGOV_P0, pRegGov_P0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(PREGGOV, pRegGov_rule, c)
        DFA_PRODUCTION(PREG, pReg_rule, c)
    }
    {
      unsigned int c = 0;
    }
}
void  State::_sub_Op_RegFlags(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(RFLAGSREGU, rFlagsRegU_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(RFLAGSREG, rFlagsReg_rule, c)
    }
}
void  State::_sub_Op_AbsD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBD_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[_SUBD_VREGD_VREGD]+INSN_COST * 3;
        DFA_PRODUCTION(VREGD, absdD_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, absD_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AbsF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBF_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[_SUBF_VREGF_VREGF]+INSN_COST * 3;
        DFA_PRODUCTION(VREGF, absdF_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, absF_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AbsI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, absI_reg_rule, c)
        DFA_PRODUCTION(IREGI, absI_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, absI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, absI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, absI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, absI_reg_rule, c)
    }
}
void  State::_sub_Op_AbsL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+INSN_COST * 2;
        DFA_PRODUCTION(IREGLNOSP, absL_reg_rule, c)
        DFA_PRODUCTION(IREGL, absL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, absL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, absL_reg_rule, c)
    }
}
void  State::_sub_Op_AddD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+INSN_COST * 5;
        DFA_PRODUCTION(VREGD, addD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+INSN_COST * 5;
        DFA_PRODUCTION(VREGF, addF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_AddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxth_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGI, AddExtI_uxth_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxth_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxth_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxth_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxth_and_shift_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxth_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_and_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxth_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxth_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxtb_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxtb_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_65535) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_65535]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxth_and_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGIORL2I_IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ANDI_IREGIORL2I_IMMI_65535] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxth_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_255) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_255]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_and_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGIORL2I_IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ANDI_IREGIORL2I_IMMI_255] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_uxtb_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxtb_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxtb_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxth_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddExtI_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddExtI_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddExtI_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddExtI_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddExtI_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddExtI_sxth_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) &&
        (
#line 12544 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 31) + (n->in(2)->in(2)->get_int() & 31)) & 31)
#line 763 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extrAddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extrAddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extrAddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extrAddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extrAddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extrAddI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) &&
        (
#line 12544 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 31) + (n->in(2)->in(2)->get_int() & 31)) & 31)
#line 792 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extrAddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extrAddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extrAddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extrAddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extrAddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extrAddI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AddI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AddI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AddI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AddI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AddI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AddI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULI_IREGIORL2I_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_MULI_IREGIORL2I_IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maddI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maddI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _MULI_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_MULI_IREGIORL2I_IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maddI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maddI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVL2I_IREGL_) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[_CONVL2I_IREGL_]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, addI_reg_imm_i2l_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, addI_reg_imm_i2l_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, addI_reg_imm_i2l_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, addI_reg_imm_i2l_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, addI_reg_imm_i2l_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, addI_reg_imm_i2l_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, addI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, addI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, addI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, addI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, addI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, addI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, addI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, addI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtw_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGL, AddExtL_uxtw_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtw_and_shift_0_rule, c)
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtw_and_shift_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtw_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtw_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtw_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtw_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxth_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxth_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxth_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxth_and_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxth_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_and_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_and_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtI_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtI_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtI_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtI_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtI_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtw_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtw_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtw_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtw_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtw_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxth_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxth_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxth_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtb_shift_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtb_shift_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtb_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_4294967295) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_4294967295]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtw_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtw_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtw_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtw_and_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_4294967295) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_4294967295] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtw_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_65535) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_65535]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxth_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxth_and_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_65535] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxth_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_255) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_255]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_and_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_and_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_255) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_255] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_uxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_uxtb_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtb_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtb_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtb_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtb_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtw_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtw_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtw_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtw_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxtw_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxtw_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxtw_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxtw_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxth_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxth_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtL_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtL_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtL_sxth_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtL_sxth_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddExtI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) &&
        (
#line 12526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 63) + (n->in(2)->in(2)->get_int() & 63)) & 63)
#line 1529 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, extrAddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, extrAddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, extrAddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, extrAddL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) &&
        (
#line 12526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 63) + (n->in(2)->in(2)->get_int() & 63)) & 63)
#line 1549 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, extrAddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, extrAddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, extrAddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, extrAddL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AddL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AddL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AddL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AddL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IREGLNOSP) ) {
      unsigned int c = _kids[0]->_cost[_MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IREGLNOSP]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, smaddL_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, smaddL_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, smaddL_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, smaddL_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLNOSP) && STATE__VALID_CHILD(_kids[1], _MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IREGLNOSP]+_kids[1]->_cost[_MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, smaddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, smaddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, smaddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, smaddL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULL_IREGL_IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_MULL_IREGL_IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, maddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, maddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, maddL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, maddL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _MULL_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_MULL_IREGL_IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, maddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, maddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, maddL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, maddL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, addL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, addL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, addL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, addL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, addL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, addL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AddP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
        DFA_PRODUCTION(IREGPNOSP, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP, addP_reg_imm_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_imm_rule, c)
        DFA_PRODUCTION(THREAD_REGP, addP_reg_imm_rule, c)
        DFA_PRODUCTION(INDIRECT, addP_reg_imm_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R1, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R2, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R3, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R4, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R5, addP_reg_imm_rule, c)
        DFA_PRODUCTION(IREGP_R10, addP_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__CONVI2L_IREGIORL2I__IMMISCALE) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LSHIFTL__CONVI2L_IREGIORL2I__IMMISCALE]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, addP_reg_reg_ext_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, addP_reg_reg_ext_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMISCALE) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMISCALE]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, addP_reg_reg_lsl_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, addP_reg_reg_lsl_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, addP_reg_reg_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, addP_reg_reg_ext_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, addP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, addP_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], VMEMA_IMMLOFFSET4) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[VMEMA_IMMLOFFSET4];
        DFA_PRODUCTION(VMEMA_INDOFFL4, vmemA_indOffL4_rule, c)
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, vmemA_indOffL4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], VMEMA_IMMIOFFSET4) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[VMEMA_IMMIOFFSET4];
        DFA_PRODUCTION(VMEMA_INDOFFI4, vmemA_indOffI4_rule, c)
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, vmemA_indOffI4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET) &&
        
#line 5494 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 2066 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMMLOFFSET];
        DFA_PRODUCTION(INDOFFLN, indOffLN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indOffLN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indOffLN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffLN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET) &&
        
#line 5479 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 2084 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMMIOFFSET];
        DFA_PRODUCTION(INDOFFIN, indOffIN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indOffIN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indOffIN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffIN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        
#line 5464 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 2102 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(INDINDEXN, indIndexN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) &&
        
#line 5449 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 2126 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[_CONVI2L_IREGI_];
        DFA_PRODUCTION(INDINDEXI2LN, indIndexI2LN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexI2LN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMISCALE) &&
        
#line 5434 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int())
#line 2150 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMISCALE];
        DFA_PRODUCTION(INDINDEXSCALEDN, indIndexScaledN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexScaledN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexScaledN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexScaledN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexScaledN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexScaledN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__CONVI2L_IREGI__IMMISCALE) &&
        
#line 5419 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int())
#line 2174 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[_LSHIFTL__CONVI2L_IREGI__IMMISCALE];
        DFA_PRODUCTION(INDINDEXSCALEDI2LN, indIndexScaledI2LN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexScaledI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexScaledI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexScaledI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexScaledI2LN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexScaledI2LN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET16) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLOFFSET16];
        DFA_PRODUCTION(INDOFFL16, indOffL16_rule, c)
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indOffL16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET8) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLOFFSET8];
        DFA_PRODUCTION(INDOFFL8, indOffL8_rule, c)
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indOffL8_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indOffL8_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffL8_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET4) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLOFFSET4];
        DFA_PRODUCTION(INDOFFL4, indOffL4_rule, c)
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indOffL4_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indOffL4_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffL4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET2) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLOFFSET2];
        DFA_PRODUCTION(INDOFFL2, indOffL2_rule, c)
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indOffL2_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indOffL2_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffL2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMLOFFSET1) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMLOFFSET1];
        DFA_PRODUCTION(INDOFFL1, indOffL1_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indOffL1_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffL1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET16) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMIOFFSET16];
        DFA_PRODUCTION(INDOFFI16, indOffI16_rule, c)
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indOffI16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET8) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMIOFFSET8];
        DFA_PRODUCTION(INDOFFI8, indOffI8_rule, c)
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indOffI8_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indOffI8_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffI8_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET4) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMIOFFSET4];
        DFA_PRODUCTION(INDOFFI4, indOffI4_rule, c)
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indOffI4_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indOffI4_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffI4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET2) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMIOFFSET2];
        DFA_PRODUCTION(INDOFFI2, indOffI2_rule, c)
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indOffI2_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indOffI2_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffI2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMIOFFSET1) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMIOFFSET1];
        DFA_PRODUCTION(INDOFFI1, indOffI1_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indOffI1_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indOffI1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(INDINDEX, indIndex_rule, c)
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_CONVI2L_IREGI_];
        DFA_PRODUCTION(INDINDEXI2L, indIndexI2L_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexI2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMISCALE) &&
        
#line 5222 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int())
#line 2360 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMISCALE];
        DFA_PRODUCTION(INDINDEXSCALED, indIndexScaled_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexScaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexScaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexScaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexScaled_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexScaled_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__CONVI2L_IREGI__IMMISCALE) &&
        
#line 5207 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int())
#line 2384 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LSHIFTL__CONVI2L_IREGI__IMMISCALE];
        DFA_PRODUCTION(INDINDEXSCALEDI2L, indIndexScaledI2L_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indIndexScaledI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indIndexScaledI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indIndexScaledI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indIndexScaledI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indIndexScaledI2L_rule, c)
      }
    }
}
void  State::_sub_Op_AndI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_ANDI_IREGIORL2I_IREGIORL2I, _AndI_iRegIorL2I_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_ANDI_IREGIORL2I_IMMI, _AndI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMILOG) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMILOG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, andI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, andI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, andI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, andI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, andI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, andI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, andI_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_65535];
        DFA_PRODUCTION(_ANDI_IREGIORL2I_IMMI_65535, _AndI_iRegIorL2I_immI_65535_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_255];
        DFA_PRODUCTION(_ANDI_IREGIORL2I_IMMI_255, _AndI_iRegIorL2I_immI_255_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_BITMASK];
        DFA_PRODUCTION(_ANDI_IREGI_IMMI_BITMASK, _AndI_iRegI_immI_bitmask_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_BITMASK];
        DFA_PRODUCTION(_ANDI_IREGIORL2I_IMMI_BITMASK, _AndI_iRegIorL2I_immI_bitmask_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_BITMASK];
        DFA_PRODUCTION(_ANDI__URSHIFTI_IREGIORL2I_IMMI_IMMI_BITMASK, _AndI__URShiftI_iRegIorL2I_immI_immI_bitmask_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_BITMASK) &&
        (
#line 12277 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2(n->in(2)->get_int() + 1) + (n->in(1)->in(2)->get_int() & 31)) <= (31 + 1)
#line 2472 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_BITMASK] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, ubfxwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, ubfxwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, ubfxwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, ubfxwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, ubfxwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, ubfxwI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I_IMMI_M1]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI_IREGIORL2I_IMMI_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, AndI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, AndI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, AndI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, AndI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, AndI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, AndI_reg_not_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AndL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_ANDL_IREGL_IREGL, _AndL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML];
        DFA_PRODUCTION(_ANDL_IREGL_IMML, _AndL_iRegL_immL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IMML_32BITS] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, convUI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, convUI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, convUI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, convUI2L_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, andL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, andL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, andL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, andL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, andL_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_4294967295) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_4294967295];
        DFA_PRODUCTION(_ANDL_IREGL_IMML_4294967295, _AndL_iRegL_immL_4294967295_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_65535];
        DFA_PRODUCTION(_ANDL_IREGL_IMML_65535, _AndL_iRegL_immL_65535_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_255) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_255];
        DFA_PRODUCTION(_ANDL_IREGL_IMML_255, _AndL_iRegL_immL_255_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_POSITIVE_BITMASKI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_POSITIVE_BITMASKI];
        DFA_PRODUCTION(_ANDL_IREGL_IMML_POSITIVE_BITMASKI, _AndL_iRegL_immL_positive_bitmaskI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_BITMASK];
        DFA_PRODUCTION(_ANDL_IREGL_IMML_BITMASK, _AndL_iRegL_immL_bitmask_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_BITMASK) &&
        (
#line 12297 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2_long(n->in(2)->get_long() + 1) + (n->in(1)->in(2)->get_int() & 63)) <= (63 + 1)
#line 3000 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_BITMASK] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, ubfxL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, ubfxL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, ubfxL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, ubfxL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ROTATERIGHT_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__LSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__LSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__RSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__RSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__URSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__URSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL_IMML_M1]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL_IREGL_IMML_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, AndL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, AndL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, AndL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, AndL_reg_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_INDIRECT__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_INDIRECT__]+_kids[1]->_cost[IMML_32BITS] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUI2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUI2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUI2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUI2L_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY4__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) &&
        (
#line 6600 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1)->in(1)->as_Load())
#line 3305 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY4__]+_kids[1]->_cost[IMML_32BITS]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUI2L_rule, c)
      }
    }
}
void  State::_sub_Op_AryEq(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGP_R2) &&
        (
#line 16723 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU
#line 3327 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGP_R2] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, array_equalsC_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGP_R2) &&
        (
#line 16698 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL
#line 3336 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGP_R2] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, array_equalsB_rule, c)
      }
    }
}
void  State::_sub_Op_Binary(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_PREGGOV];
        DFA_PRODUCTION(_BINARY_VREG__BINARY_VREG_PREGGOV, _Binary_vReg__Binary_vReg_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[IMMI]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_BINARY_IMMI_PREGGOV, _Binary_immI_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMLU7_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMLU7_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMLU7_, _Binary_vReg__Replicate_immLU7__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMML5_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMML5_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMML5_, _Binary_vReg__Replicate_immL5__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMIU7_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMIU7_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMIU7_, _Binary_vReg__Replicate_immIU7__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMI5_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMI5_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMI5_, _Binary_vReg__Replicate_immI5__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMD0_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMD0_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMD0_, _Binary_vReg__Replicate_immD0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMF0_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMF0_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMF0_, _Binary_vReg__Replicate_immF0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMML0_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMML0_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMML0_, _Binary_vReg__Replicate_immL0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMI0_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMI0_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMI0_, _Binary_vReg__Replicate_immI0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _VECTORSTOREMASK_PREG_IMMI_GT_1) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[_VECTORSTOREMASK_PREG_IMMI_GT_1]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_BINARY__VECTORSTOREMASK_PREG_IMMI_GT_1_PREGGOV, _Binary__VectorStoreMask_pReg_immI_gt_1_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREGD];
        DFA_PRODUCTION(_BINARY_VREG_VREGD, _Binary_vReg_vRegD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREGF];
        DFA_PRODUCTION(_BINARY_VREG_VREGF, _Binary_vReg_vRegF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_BINARY_VREG_IREGL, _Binary_vReg_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_BINARY_VREG_IREGIORL2I, _Binary_vReg_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_BINARY_VREGD_VREG, _Binary_vRegD_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_BINARY_VREGF_VREG, _Binary_vRegF_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_BINARY_IREGL_VREG, _Binary_iRegL_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_BINARY_IREGIORL2I_VREG, _Binary_iRegIorL2I_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _Binary_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _LSHIFTCNTV_IMMI_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_LSHIFTCNTV_IMMI_];
        DFA_PRODUCTION(_BINARY_VREG__LSHIFTCNTV_IMMI_, _Binary_vReg__LShiftCntV_immI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVD_VREG_) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[_NEGVD_VREG_]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_BINARY__NEGVD_VREG__PREGGOV, _Binary__NegVD_vReg__pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVF_VREG_) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[_NEGVF_VREG_]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_BINARY__NEGVF_VREG__PREGGOV, _Binary__NegVF_vReg__pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _NEGVD_VREG_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_NEGVD_VREG_];
        DFA_PRODUCTION(_BINARY_VREG__NEGVD_VREG_, _Binary_vReg__NegVD_vReg__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _NEGVF_VREG_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_NEGVF_VREG_];
        DFA_PRODUCTION(_BINARY_VREG__NEGVF_VREG_, _Binary_vReg__NegVF_vReg__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVL_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVL_VREG_VREG];
        DFA_PRODUCTION(_BINARY_VREG__MULVL_VREG_VREG, _Binary_vReg__MulVL_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVI_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVI_VREG_VREG];
        DFA_PRODUCTION(_BINARY_VREG__MULVI_VREG_VREG, _Binary_vReg__MulVI_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVS_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVS_VREG_VREG];
        DFA_PRODUCTION(_BINARY_VREG__MULVS_VREG_VREG, _Binary_vReg__MulVS_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVB_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVB_VREG_VREG];
        DFA_PRODUCTION(_BINARY_VREG__MULVB_VREG_VREG, _Binary_vReg__MulVB_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV__REPLICATE_IMML_M1__VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV__REPLICATE_IMML_M1__VREG];
        DFA_PRODUCTION(_BINARY_VREG__XORV__REPLICATE_IMML_M1__VREG, _Binary_vReg__XorV__Replicate_immL_M1__vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG__REPLICATE_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG__REPLICATE_IMML_M1_];
        DFA_PRODUCTION(_BINARY_VREG__XORV_VREG__REPLICATE_IMML_M1_, _Binary_vReg__XorV_vReg__Replicate_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV__REPLICATE_IMMI_M1__VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV__REPLICATE_IMMI_M1__VREG];
        DFA_PRODUCTION(_BINARY_VREG__XORV__REPLICATE_IMMI_M1__VREG, _Binary_vReg__XorV__Replicate_immI_M1__vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG__REPLICATE_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG__REPLICATE_IMMI_M1_];
        DFA_PRODUCTION(_BINARY_VREG__XORV_VREG__REPLICATE_IMMI_M1_, _Binary_vReg__XorV_vReg__Replicate_immI_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMML_M1_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMML_M1_, _Binary_vReg__Replicate_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMI_M1_];
        DFA_PRODUCTION(_BINARY_VREG__REPLICATE_IMMI_M1_, _Binary_vReg__Replicate_immI_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_BINARY_VREG_VREG, _Binary_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_BINARY_VREG_PREGGOV, _Binary_vReg_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGI_R3) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGI_R3];
        DFA_PRODUCTION(_BINARY_IREGP_R1_IREGI_R3, _Binary_iRegP_R1_iRegI_R3_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGP_R3) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGP_R3];
        DFA_PRODUCTION(_BINARY_IREGP_R1_IREGP_R3, _Binary_iRegP_R1_iRegP_R3_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R3) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R3]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION(_BINARY_IREGP_R3_IMMI_1, _Binary_iRegP_R3_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R3) && STATE__VALID_CHILD(_kids[1], IMMI_LE_4) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R3]+_kids[1]->_cost[IMMI_LE_4];
        DFA_PRODUCTION(_BINARY_IREGP_R3_IMMI_LE_4, _Binary_iRegP_R3_immI_le_4_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R3) && STATE__VALID_CHILD(_kids[1], IREGI_R2) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R3]+_kids[1]->_cost[IREGI_R2];
        DFA_PRODUCTION(_BINARY_IREGP_R3_IREGI_R2, _Binary_iRegP_R3_iRegI_R2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGI_R4) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGI_R4];
        DFA_PRODUCTION(_BINARY_IREGP_R1_IREGI_R4, _Binary_iRegP_R1_iRegI_R4_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R3) && STATE__VALID_CHILD(_kids[1], IREGI_R4) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R3]+_kids[1]->_cost[IREGI_R4];
        DFA_PRODUCTION(_BINARY_IREGP_R3_IREGI_R4, _Binary_iRegP_R3_iRegI_R4_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGI_R2) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGI_R2];
        DFA_PRODUCTION(_BINARY_IREGP_R1_IREGI_R2, _Binary_iRegP_R1_iRegI_R2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], _NEGD_VREGD_) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[_NEGD_VREGD_];
        DFA_PRODUCTION(_BINARY_VREGD__NEGD_VREGD_, _Binary_vRegD__NegD_vRegD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], _NEGF_VREGF_) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[_NEGF_VREGF_];
        DFA_PRODUCTION(_BINARY_VREGF__NEGF_VREGF_, _Binary_vRegF__NegF_vRegF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD];
        DFA_PRODUCTION(_BINARY_VREGD_VREGD, _Binary_vRegD_vRegD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF];
        DFA_PRODUCTION(_BINARY_VREGF_VREGF, _Binary_vRegF_vRegF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMN0) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IMMN0]+_kids[1]->_cost[IREGN];
        DFA_PRODUCTION(_BINARY_IMMN0_IREGN, _Binary_immN0_iRegN_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IMMN0];
        DFA_PRODUCTION(_BINARY_IREGN_IMMN0, _Binary_iRegN_immN0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMP0) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IMMP0]+_kids[1]->_cost[IREGP];
        DFA_PRODUCTION(_BINARY_IMMP0_IREGP, _Binary_immP0_iRegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION(_BINARY_IREGP_IMMP0, _Binary_iRegP_immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_BINARY_IMML0_IREGL, _Binary_immL0_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0];
        DFA_PRODUCTION(_BINARY_IREGL_IMML0, _Binary_iRegL_immL0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_1) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IMMI_1]+_kids[1]->_cost[IMMI0];
        DFA_PRODUCTION(_BINARY_IMMI_1_IMMI0, _Binary_immI_1_immI0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0];
        DFA_PRODUCTION(_BINARY_IREGIORL2I_IMMI0, _Binary_iRegIorL2I_immI0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_BINARY_IMMI0_IREGIORL2I, _Binary_immI0_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPU) && STATE__VALID_CHILD(_kids[1], RFLAGSREGU) ) {
      unsigned int c = _kids[0]->_cost[CMPOPU]+_kids[1]->_cost[RFLAGSREGU];
        DFA_PRODUCTION(_BINARY_CMPOPU_RFLAGSREGU, _Binary_cmpOpU_rFlagsRegU_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_BINARY_IREGIORL2I_IREGIORL2I, _Binary_iRegIorL2I_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], RFLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[RFLAGSREG];
        DFA_PRODUCTION(_BINARY_CMPOP_RFLAGSREG, _Binary_cmpOp_rFlagsReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IREGN];
        DFA_PRODUCTION(_BINARY_IREGN_IREGN, _Binary_iRegN_iRegN_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_BINARY_IREGL_IREGL, _Binary_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION(_BINARY_IREGI_IREGI, _Binary_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGNNOSP) && STATE__VALID_CHILD(_kids[1], IREGNNOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGNNOSP]+_kids[1]->_cost[IREGNNOSP];
        DFA_PRODUCTION(_BINARY_IREGNNOSP_IREGNNOSP, _Binary_iRegNNoSp_iRegNNoSp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP];
        DFA_PRODUCTION(_BINARY_IREGP_IREGP, _Binary_iRegP_iRegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLNOSP) && STATE__VALID_CHILD(_kids[1], IREGLNOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGLNOSP]+_kids[1]->_cost[IREGLNOSP];
        DFA_PRODUCTION(_BINARY_IREGLNOSP_IREGLNOSP, _Binary_iRegLNoSp_iRegLNoSp_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGINOSP) && STATE__VALID_CHILD(_kids[1], IREGINOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGINOSP]+_kids[1]->_cost[IREGINOSP];
        DFA_PRODUCTION(_BINARY_IREGINOSP_IREGINOSP, _Binary_iRegINoSp_iRegINoSp_rule, c)
    }
}
void  State::_sub_Op_Bool(const Node *n){
    if(         
#line 5694 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Bool()->_test._test == BoolTest::eq
            || n->as_Bool()->_test._test == BoolTest::ne
            || n->as_Bool()->_test._test == BoolTest::lt
            || n->as_Bool()->_test._test == BoolTest::ge
#line 3625 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(CMPOPUEQNELTGE, cmpOpUEqNeLtGe_rule, c)
    }
    if(         
#line 5670 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Bool()->_test._test == BoolTest::lt
            || n->as_Bool()->_test._test == BoolTest::ge
#line 3634 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(CMPOPLTGE, cmpOpLtGe_rule, c)
    }
    if(         
#line 5646 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Bool()->_test._test == BoolTest::ne
            || n->as_Bool()->_test._test == BoolTest::eq
#line 3643 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(CMPOPEQNE, cmpOpEqNe_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(CMPOPU, cmpOpU_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(CMPOP, cmpOp_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, bytes_reverse_int_rule, c)
        DFA_PRODUCTION(IREGI, bytes_reverse_int_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, bytes_reverse_int_rule, c)
        DFA_PRODUCTION(IREGI_R2, bytes_reverse_int_rule, c)
        DFA_PRODUCTION(IREGI_R3, bytes_reverse_int_rule, c)
        DFA_PRODUCTION(IREGI_R4, bytes_reverse_int_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, bytes_reverse_long_rule, c)
        DFA_PRODUCTION(IREGL, bytes_reverse_long_rule, c)
        DFA_PRODUCTION(IREGL_R0, bytes_reverse_long_rule, c)
        DFA_PRODUCTION(IREGL_R11, bytes_reverse_long_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION(IREGI, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION(IREGI_R2, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION(IREGI_R3, bytes_reverse_unsigned_short_rule, c)
        DFA_PRODUCTION(IREGI_R4, bytes_reverse_unsigned_short_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, bytes_reverse_short_rule, c)
        DFA_PRODUCTION(IREGI, bytes_reverse_short_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, bytes_reverse_short_rule, c)
        DFA_PRODUCTION(IREGI_R2, bytes_reverse_short_rule, c)
        DFA_PRODUCTION(IREGI_R3, bytes_reverse_short_rule, c)
        DFA_PRODUCTION(IREGI_R4, bytes_reverse_short_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 6543 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 3707 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vreverseBytes_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vreverseBytes_rule, c)
      }
    }
}
void  State::_sub_Op_CacheWB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 7552 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
VM_Version::supports_data_cache_line_flush()
#line 3724 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+100;
        DFA_PRODUCTION(UNIVERSE, cacheWB_rule, c)
    }
}
void  State::_sub_Op_CacheWBPreSync(const Node *n){
    if(         (
#line 7567 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
VM_Version::supports_data_cache_line_flush()
#line 3734 "dfa_aarch64.cpp"
) ) {
      unsigned int c = 100;
        DFA_PRODUCTION(UNIVERSE, cacheWBPreSync_rule, c)
    }
}
void  State::_sub_Op_CacheWBPostSync(const Node *n){
    if(         (
#line 7580 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
VM_Version::supports_data_cache_line_flush()
#line 3744 "dfa_aarch64.cpp"
) ) {
      unsigned int c = 100;
        DFA_PRODUCTION(UNIVERSE, cacheWBPostSync_rule, c)
    }
}
void  State::_sub_Op_CallDynamicJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallDynamicJavaDirect_rule, c)
    }
}
void  State::_sub_Op_CallLeaf(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafDirect_rule, c)
    }
}
void  State::_sub_Op_CallLeafNoFP(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallLeafNoFPDirect_rule, c)
    }
}
void  State::_sub_Op_CallRuntime(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallRuntimeDirect_rule, c)
    }
}
void  State::_sub_Op_CallStaticJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, CallStaticJavaDirect_rule, c)
    }
}
void  State::_sub_Op_CastDD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD];
        DFA_PRODUCTION(VREGD, castDD_rule, c)
    }
}
void  State::_sub_Op_CastFF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF];
        DFA_PRODUCTION(VREGF, castFF_rule, c)
    }
}
void  State::_sub_Op_CastII(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION(IREGI, castII_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
    }
}
void  State::_sub_Op_CastLL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL];
        DFA_PRODUCTION(IREGL, castLL_rule, c)
    }
}
void  State::_sub_Op_CastVV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[PREGGOV];
        DFA_PRODUCTION(PREGGOV, castVVMask_rule, c)
        DFA_PRODUCTION(PREG, castVVMask_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG];
        DFA_PRODUCTION(VREG, castVV_rule, c)
    }
}
void  State::_sub_Op_CastX2P(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGPNOSP, castX2P_rule, c)
        DFA_PRODUCTION(IREGP, castX2P_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, castX2P_rule, c)
        DFA_PRODUCTION(THREAD_REGP, castX2P_rule, c)
        DFA_PRODUCTION(INDIRECT, castX2P_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R1, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R2, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R3, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R4, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R5, castX2P_rule, c)
        DFA_PRODUCTION(IREGP_R10, castX2P_rule, c)
    }
}
void  State::_sub_Op_CastP2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_];
        DFA_PRODUCTION(_CASTP2X__DECODEN_IREGN__, _CastP2X__DecodeN_iRegN___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP];
        DFA_PRODUCTION(_CASTP2X_IREGP_, _CastP2X_iRegP__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, castP2X_rule, c)
        DFA_PRODUCTION(IREGL, castP2X_rule, c)
        DFA_PRODUCTION(IREGL_R0, castP2X_rule, c)
        DFA_PRODUCTION(IREGL_R11, castP2X_rule, c)
    }
}
void  State::_sub_Op_CastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPNOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGPNOSP] + INSN_COST;
        DFA_PRODUCTION(IREGPNOSP, castPP_rule, c)
        DFA_PRODUCTION(IREGP, castPP_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, castPP_rule, c)
        DFA_PRODUCTION(THREAD_REGP, castPP_rule, c)
        DFA_PRODUCTION(INDIRECT, castPP_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R1, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R2, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R3, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R4, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R5, castPP_rule, c)
        DFA_PRODUCTION(IREGP_R10, castPP_rule, c)
    }
}
void  State::_sub_Op_CheckCastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPNOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGPNOSP] + INSN_COST;
        DFA_PRODUCTION(IREGPNOSP, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP, checkCastPP_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, checkCastPP_rule, c)
        DFA_PRODUCTION(THREAD_REGP, checkCastPP_rule, c)
        DFA_PRODUCTION(INDIRECT, checkCastPP_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R1, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R2, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R3, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R4, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R5, checkCastPP_rule, c)
        DFA_PRODUCTION(IREGP_R10, checkCastPP_rule, c)
    }
}
void  State::_sub_Op_ClearArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMML) && STATE__VALID_CHILD(_kids[1], IREGP_R10) &&
        (
#line 14819 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(uint64_t)n->in(2)->get_long()
            < (uint64_t)(BlockZeroingLowLimit >> LogBytesPerWord)
#line 3920 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMML]+_kids[1]->_cost[IREGP_R10]+4 * INSN_COST;
        DFA_PRODUCTION(UNIVERSE, clearArray_imm_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL_R11) && STATE__VALID_CHILD(_kids[1], IREGP_R10) ) {
      unsigned int c = _kids[0]->_cost[IREGL_R11]+_kids[1]->_cost[IREGP_R10]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, clearArray_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CompressBits(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY8_) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY8_]+_kids[1]->_cost[IMML] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, compressBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGL, compressBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGL_R0, compressBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGL_R11, compressBitsL_memcon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, compressBitsL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, compressBitsL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, compressBitsL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, compressBitsL_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY4_) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY4_]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, compressBitsI_memcon_rule, c)
        DFA_PRODUCTION(IREGI, compressBitsI_memcon_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compressBitsI_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R2, compressBitsI_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R3, compressBitsI_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R4, compressBitsI_memcon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compressBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compressBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compressBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compressBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compressBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compressBitsI_reg_rule, c)
      }
    }
}
void  State::_sub_Op_ExpandBits(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY8_) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY8_]+_kids[1]->_cost[IMML] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, expandBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGI, expandBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, expandBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R2, expandBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R3, expandBitsL_memcon_rule, c)
        DFA_PRODUCTION(IREGI_R4, expandBitsL_memcon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, expandBitsL_reg_rule, c)
        DFA_PRODUCTION(IREGL, expandBitsL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, expandBitsL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, expandBitsL_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY4_) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY4_]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, expandBitsI_memcon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, expandBitsI_memcon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, expandBitsI_memcon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, expandBitsI_memcon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, expandBitsI_memcon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, expandBitsI_memcon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, expandBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, expandBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, expandBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, expandBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, expandBitsI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, expandBitsI_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CompressBitsV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcompressBits_rule, c)
    }
}
void  State::_sub_Op_ExpandBitsV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vexpandBits_rule, c)
    }
}
void  State::_sub_Op_CMoveD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_VREGD_VREGD]+INSN_COST * 3;
        DFA_PRODUCTION(VREGD, cmovUD_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_VREGD_VREGD]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, cmovD_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_VREGF_VREGF]+INSN_COST * 3;
        DFA_PRODUCTION(VREGF, cmovUF_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_VREGF_VREGF]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, cmovF_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMI_1_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IMMI_1_IMMI0]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, cmovUI_reg_zero_one_rule, c)
        DFA_PRODUCTION(IREGI, cmovUI_reg_zero_one_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, cmovUI_reg_zero_one_rule, c)
        DFA_PRODUCTION(IREGI_R2, cmovUI_reg_zero_one_rule, c)
        DFA_PRODUCTION(IREGI_R3, cmovUI_reg_zero_one_rule, c)
        DFA_PRODUCTION(IREGI_R4, cmovUI_reg_zero_one_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMI_1_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IMMI_1_IMMI0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovI_reg_zero_one_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovI_reg_zero_one_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovI_reg_zero_one_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovI_reg_zero_one_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovI_reg_zero_one_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovI_reg_zero_one_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIORL2I_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGIORL2I_IMMI0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovUI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovUI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovUI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovUI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovUI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovUI_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIORL2I_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGIORL2I_IMMI0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovI_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovI_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMI0_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IMMI0_IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovUI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovUI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovUI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovUI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovUI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovUI_zero_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMI0_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IMMI0_IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovI_zero_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGIORL2I_IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovUI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovUI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovUI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovUI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovUI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovUI_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGIORL2I_IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmovI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmovI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmovI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmovI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmovI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmovI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IMML0_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IMML0_IREGL]+INSN_COST * 2;
        DFA_PRODUCTION(IREGLNOSP, cmovUL_zero_reg_rule, c)
        DFA_PRODUCTION(IREGL, cmovUL_zero_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, cmovUL_zero_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, cmovUL_zero_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMML0_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IMML0_IREGL]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, cmovL_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, cmovL_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, cmovL_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, cmovL_zero_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGL_IMML0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, cmovUL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, cmovUL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, cmovUL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, cmovUL_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IMML0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, cmovL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, cmovL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, cmovL_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, cmovL_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, cmovUL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, cmovUL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, cmovUL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, cmovUL_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, cmovL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, cmovL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, cmovL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, cmovL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMP0_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IMMP0_IREGP]+INSN_COST * 2;
        DFA_PRODUCTION(IREGPNOSP, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(THREAD_REGP, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(INDIRECT, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R1, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R2, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R3, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R4, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R5, cmovUP_zero_reg_rule, c)
        DFA_PRODUCTION(IREGP_R10, cmovUP_zero_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMP0_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IMMP0_IREGP]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, cmovP_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, cmovP_zero_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, cmovUP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, cmovUP_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, cmovP_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, cmovP_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, cmovUP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, cmovUP_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, cmovP_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, cmovP_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMN0_IREGN) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IMMN0_IREGN]+INSN_COST * 2;
        DFA_PRODUCTION(IREGNNOSP, cmovUN_zero_reg_rule, c)
        DFA_PRODUCTION(IREGN, cmovUN_zero_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMN0_IREGN) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IMMN0_IREGN]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, cmovN_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, cmovN_zero_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IMMN0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGN_IMMN0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, cmovUN_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, cmovUN_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IMMN0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGN_IMMN0]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, cmovN_reg_zero_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, cmovN_reg_zero_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPU_RFLAGSREGU) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPU_RFLAGSREGU]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, cmovUN_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, cmovUN_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_RFLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_RFLAGSREG]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, cmovN_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, cmovN_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IMMN0];
        DFA_PRODUCTION(_CMPN_IREGN_IMMN0, _CmpN_iRegN_immN0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IMMN0] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREGU, testN_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IREGN] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compN_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], IMMD0) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[IMMD0]+3 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, compD_reg_zero_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+3 * INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compD_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpD3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], IMMD0) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[IMMD0]+5 * INSN_COST;
        DFA_PRODUCTION(IREGINOSP, compD3_reg_immD0_rule, c)
        DFA_PRODUCTION(IREGI, compD3_reg_immD0_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compD3_reg_immD0_rule, c)
        DFA_PRODUCTION(IREGI_R2, compD3_reg_immD0_rule, c)
        DFA_PRODUCTION(IREGI_R3, compD3_reg_immD0_rule, c)
        DFA_PRODUCTION(IREGI_R4, compD3_reg_immD0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+5 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compD3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compD3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compD3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compD3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compD3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compD3_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], IMMF0) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[IMMF0]+3 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, compF_reg_zero_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+3 * INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compF_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpF3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], IMMF0) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[IMMF0]+5 * INSN_COST;
        DFA_PRODUCTION(IREGINOSP, compF3_reg_immF0_rule, c)
        DFA_PRODUCTION(IREGI, compF3_reg_immF0_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compF3_reg_immF0_rule, c)
        DFA_PRODUCTION(IREGI_R2, compF3_reg_immF0_rule, c)
        DFA_PRODUCTION(IREGI_R3, compF3_reg_immF0_rule, c)
        DFA_PRODUCTION(IREGI_R4, compF3_reg_immF0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+5 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compF3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compF3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compF3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compF3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compF3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compF3_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IREGIORL2I]+_kids[1]->_cost[IMMI0] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, cmpI_and_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI0) &&
        (
#line 15929 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_logical_immediate
            (/*is_32*/true, n->in(1)->in(2)->get_int())
#line 4903 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, cmpI_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI0];
        DFA_PRODUCTION(_CMPI__ANDI_IREGIORL2I_IMMI_IMMI0, _CmpI__AndI_iRegIorL2I_immI_immI0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0];
        DFA_PRODUCTION(_CMPI_IREGIORL2I_IMMI0, _CmpI_iRegIorL2I_immI0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compI_reg_immI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compI_reg_immIAddSub_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compI_reg_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IREGL]+_kids[1]->_cost[IMML0] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, cmpL_and_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML) && STATE__VALID_CHILD(_kids[1], IMML0) &&
        (
#line 15916 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_logical_immediate
            (/*is_32*/false, n->in(1)->in(2)->get_long())
#line 4953 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML]+_kids[1]->_cost[IMML0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, cmpL_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML]+_kids[1]->_cost[IMML0];
        DFA_PRODUCTION(_CMPL__ANDL_IREGL_IMML_IMML0, _CmpL__AndL_iRegL_immL_immL0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0];
        DFA_PRODUCTION(_CMPL_IREGL_IMML0, _CmpL_iRegL_immL0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compL_reg_immL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compL_reg_immLAddSub_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compL_reg_immL0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, compL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, cmpL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, cmpL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, cmpL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, cmpL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, cmpL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, cmpL3_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmpL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmpL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmpL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmpL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmpL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmpL3_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpLTMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION(IREGI, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION(IREGI_R2, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION(IREGI_R3, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION(IREGI_R4, cmpLTMask_reg_zero_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+3 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmpLTMask_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _PARTIALSUBTYPECHECK_IREGP_R4_IREGP_R0) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_PARTIALSUBTYPECHECK_IREGP_R4_IREGP_R0]+_kids[1]->_cost[IMMP0]+1100;
        DFA_PRODUCTION(RFLAGSREG, partialSubtypeCheckVsZero_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION(_CMPP__DECODEN_IREGN__IMMP0, _CmpP__DecodeN_iRegN__immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION(_CMPP_IREGP_IMMP0, _CmpP_iRegP_immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP0] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREGU, testP_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compP_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpU(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0];
        DFA_PRODUCTION(_CMPU_IREGIORL2I_IMMI0, _CmpU_iRegIorL2I_immI0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
        DFA_PRODUCTION(RFLAGSREGU, compU_reg_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compU_reg_immIAddSub_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compU_reg_immI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compU_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpU3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMIADDSUB]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, cmpU3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, cmpU3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, cmpU3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, cmpU3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, cmpU3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, cmpU3_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmpU3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmpU3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmpU3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmpU3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmpU3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmpU3_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpUL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0];
        DFA_PRODUCTION(_CMPUL_IREGL_IMML0, _CmpUL_iRegL_immL0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML]+INSN_COST * 2;
        DFA_PRODUCTION(RFLAGSREGU, compUL_reg_immL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compUL_reg_immLAddSub_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML0] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compUL_reg_immL0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREGU) || _cost[RFLAGSREGU] > c) {
        DFA_PRODUCTION(RFLAGSREGU, compUL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpUL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, cmpUL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, cmpUL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, cmpUL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, cmpUL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, cmpUL3_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, cmpUL3_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, cmpUL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, cmpUL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, cmpUL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, cmpUL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, cmpUL3_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, cmpUL3_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) &&
        (
#line 8323 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5222 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapBAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapB_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) &&
        (
#line 8342 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5263 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapSAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapS_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) &&
        (
#line 8361 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5304 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapIAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGINOSP_IREGINOSP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGINOSP_IREGINOSP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapI_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLNOSP_IREGLNOSP) &&
        (
#line 8380 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5345 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGLNOSP_IREGLNOSP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapLAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGLNOSP_IREGLNOSP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGLNOSP_IREGLNOSP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapL_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 5386 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, zCompareAndSwapPAcq_rule, c)
        DFA_PRODUCTION(IREGI, zCompareAndSwapPAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, zCompareAndSwapPAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, zCompareAndSwapPAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, zCompareAndSwapPAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, zCompareAndSwapPAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 179 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 5401 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, zCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, zCompareAndSwapP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 127 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
#line 5430 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, xCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, xCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, xCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, xCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, xCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, xCompareAndSwapPAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 95 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong
#line 5459 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, xCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, xCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, xCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, xCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, xCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, xCompareAndSwapP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8399 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0)
#line 5488 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapPAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8285 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->barrier_data() == 0
#line 5517 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapP_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNNOSP_IREGNNOSP) &&
        (
#line 8418 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5548 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNNOSP_IREGNNOSP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapNAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGNNOSP_IREGNNOSP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGNNOSP_IREGNNOSP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapN_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8783 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5589 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapBAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapB_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8803 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5630 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapSAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapS_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8823 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5671 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapIAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapI_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 8843 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5712 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGL_IREGL] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapLAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapLAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapL_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 5753 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, zCompareAndSwapPAcq_0_rule, c)
        DFA_PRODUCTION(IREGI, zCompareAndSwapPAcq_0_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, zCompareAndSwapPAcq_0_rule, c)
        DFA_PRODUCTION(IREGI_R2, zCompareAndSwapPAcq_0_rule, c)
        DFA_PRODUCTION(IREGI_R3, zCompareAndSwapPAcq_0_rule, c)
        DFA_PRODUCTION(IREGI_R4, zCompareAndSwapPAcq_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 179 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 5768 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, zCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, zCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, zCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, zCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, zCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, zCompareAndSwapP_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 127 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
#line 5797 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, xCompareAndSwapPAcq_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, xCompareAndSwapPAcq_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, xCompareAndSwapPAcq_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, xCompareAndSwapPAcq_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, xCompareAndSwapPAcq_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, xCompareAndSwapPAcq_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 95 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong
#line 5826 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, xCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, xCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, xCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, xCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, xCompareAndSwapP_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, xCompareAndSwapP_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8883 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0)
#line 5855 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapPAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8763 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->barrier_data() == 0
#line 5884 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapP_rule, c)
      }
    }
}
void  State::_sub_Op_WeakCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) &&
        (
#line 8863 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5915 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapNAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapN_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8558 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5956 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeBAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndExchangeBAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeBAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeBAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndExchangeB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeB_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8577 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 5997 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeSAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndExchangeSAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeSAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeSAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndExchangeS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeS_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) &&
        (
#line 8596 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6038 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeIAcq_rule, c)
        DFA_PRODUCTION(IREGI, compareAndExchangeIAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeIAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndExchangeI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndExchangeI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndExchangeI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndExchangeI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndExchangeI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndExchangeI_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) &&
        (
#line 8614 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6079 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGL_IREGL] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGLNOSP, compareAndExchangeLAcq_rule, c)
        DFA_PRODUCTION(IREGL, compareAndExchangeLAcq_rule, c)
        DFA_PRODUCTION(IREGL_R0, compareAndExchangeLAcq_rule, c)
        DFA_PRODUCTION(IREGL_R11, compareAndExchangeLAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, compareAndExchangeL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, compareAndExchangeL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, compareAndExchangeL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, compareAndExchangeL_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 250 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 6108 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGPNOSP, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(THREAD_REGP, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(INDIRECT, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R1, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R2, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R3, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R4, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R5, zCompareAndExchangePAcq_rule, c)
        DFA_PRODUCTION(IREGP_R10, zCompareAndExchangePAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 227 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 6138 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, zCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, zCompareAndExchangeP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 186 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong
#line 6212 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xCompareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xCompareAndExchangePAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 158 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong
#line 6286 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xCompareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xCompareAndExchangeP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8650 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0)
#line 6360 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, compareAndExchangePAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, compareAndExchangePAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 8540 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->barrier_data() == 0
#line 6434 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, compareAndExchangeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, compareAndExchangeP_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndExchangeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) &&
        (
#line 8632 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6510 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGNNOSP, compareAndExchangeNAcq_rule, c)
        DFA_PRODUCTION(IREGN, compareAndExchangeNAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, compareAndExchangeN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, compareAndExchangeN_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) &&
        (
#line 9151 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used() && needs_acquiring_load_exclusive(n)
#line 6531 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMIADDSUB] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, get_and_addIi_no_resAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) &&
        (
#line 9140 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6540 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMIADDSUB]+VOLATILE_REF_COST + 1;
        DFA_PRODUCTION(IREGINOSP, get_and_addIiAcq_rule, c)
        DFA_PRODUCTION(IREGI, get_and_addIiAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, get_and_addIiAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, get_and_addIiAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, get_and_addIiAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, get_and_addIiAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 9129 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used() && needs_acquiring_load_exclusive(n)
#line 6555 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addI_no_resAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 9118 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6566 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I]+VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, get_and_addIAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, get_and_addIAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, get_and_addIAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, get_and_addIAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, get_and_addIAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, get_and_addIAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) &&
        (
#line 9063 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used()
#line 6595 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMIADDSUB]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addIi_no_res_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMIADDSUB]+2 * VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, get_and_addIi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, get_and_addIi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, get_and_addIi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, get_and_addIi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, get_and_addIi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, get_and_addIi_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 9042 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used()
#line 6630 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addI_no_res_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I]+2 * VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, get_and_addI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, get_and_addI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, get_and_addI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, get_and_addI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, get_and_addI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, get_and_addI_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) &&
        (
#line 9107 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used() && needs_acquiring_load_exclusive(n)
#line 6667 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMLADDSUB] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, get_and_addLi_no_resAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) &&
        (
#line 9096 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6676 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMLADDSUB]+VOLATILE_REF_COST + 1;
        DFA_PRODUCTION(IREGLNOSP, get_and_addLiAcq_rule, c)
        DFA_PRODUCTION(IREGL, get_and_addLiAcq_rule, c)
        DFA_PRODUCTION(IREGL_R0, get_and_addLiAcq_rule, c)
        DFA_PRODUCTION(IREGL_R11, get_and_addLiAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 9085 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used() && needs_acquiring_load_exclusive(n)
#line 6688 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addL_no_resAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 9074 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6699 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL]+VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, get_and_addLAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, get_and_addLAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, get_and_addLAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, get_and_addLAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) &&
        (
#line 9021 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used()
#line 6719 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMLADDSUB]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addLi_no_res_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMLADDSUB]+2 * VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, get_and_addLi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, get_and_addLi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, get_and_addLi_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, get_and_addLi_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 9000 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->result_not_used()
#line 6745 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, get_and_addL_no_res_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL]+2 * VOLATILE_REF_COST + 1;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, get_and_addL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, get_and_addL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, get_and_addL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, get_and_addL_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndSetI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8945 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6773 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGI] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, get_and_setIAcq_rule, c)
        DFA_PRODUCTION(IREGI, get_and_setIAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, get_and_setIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, get_and_setIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, get_and_setIAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, get_and_setIAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGI]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, get_and_setI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, get_and_setI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, get_and_setI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, get_and_setI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, get_and_setI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, get_and_setI_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndSetL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 8956 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 6814 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGLNOSP, get_and_setLAcq_rule, c)
        DFA_PRODUCTION(IREGL, get_and_setLAcq_rule, c)
        DFA_PRODUCTION(IREGL_R0, get_and_setLAcq_rule, c)
        DFA_PRODUCTION(IREGL_R11, get_and_setLAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, get_and_setL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, get_and_setL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, get_and_setL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, get_and_setL_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndSetP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 291 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 6843 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP]+2 * VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGPNOSP, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(THREAD_REGP, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(INDIRECT, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R1, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R2, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R3, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R4, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R5, zGetAndSetPAcq_rule, c)
        DFA_PRODUCTION(IREGP_R10, zGetAndSetPAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 273 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 6873 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, zGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, zGetAndSetP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 231 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() != 0)
#line 6947 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xGetAndSetPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xGetAndSetPAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 214 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && !needs_acquiring_load_exclusive(n) && n->as_LoadStore()->barrier_data() != 0
#line 7021 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xGetAndSetP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xGetAndSetP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 8978 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0)
#line 7095 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, get_and_setPAcq_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, get_and_setPAcq_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 8934 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_LoadStore()->barrier_data() == 0
#line 7169 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, get_and_setP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, get_and_setP_rule, c)
      }
    }
}
void  State::_sub_Op_GetAndSetN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGN) &&
        (
#line 8967 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 7245 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, get_and_setNAcq_rule, c)
        DFA_PRODUCTION(IREGI, get_and_setNAcq_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, get_and_setNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R2, get_and_setNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R3, get_and_setNAcq_rule, c)
        DFA_PRODUCTION(IREGI_R4, get_and_setNAcq_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, get_and_setN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, get_and_setN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, get_and_setN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, get_and_setN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, get_and_setN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, get_and_setN_rule, c)
      }
    }
}
void  State::_sub_Op_ConN(const Node *n){
    if(         
#line 4679 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->get_narrowcon() == 0
#line 7285 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMN0, immN0_rule, c)
        DFA_PRODUCTION(IREGNNOSP, loadConN0_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGN, loadConN0_rule, c+INSN_COST)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMN, immN_rule, c)
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGNNOSP, loadConN_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGN, loadConN_rule, c+INSN_COST * 4)
      }
    }
   if ( /* IREGNNOSP KNOWN_VALID || */ _cost[IREGNNOSP] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGNNOSP, loadConN_rule, INSN_COST * 4)
   }
   if ( /* IREGN KNOWN_VALID || */ _cost[IREGN] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGN, loadConN_rule, INSN_COST * 4)
   }
}
void  State::_sub_Op_ConNKlass(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMNKLASS, immNKlass_rule, c)
        DFA_PRODUCTION(IREGNNOSP, loadConNKlass_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGN, loadConNKlass_rule, c+INSN_COST)
    }
}
void  State::_sub_Op_ConD(const Node *n){
    if(         
#line 4628 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_float_immediate(n->getd())
#line 7321 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMDPACKED, immDPacked_rule, c)
        DFA_PRODUCTION(VREGD, loadConD_packed_rule, c+INSN_COST)
    }
    if(         
#line 4617 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
jlong_cast(n->getd()) == 0
#line 7330 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMD0, immD0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMD, immD_rule, c)
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c+INSN_COST * 5) {
        DFA_PRODUCTION(VREGD, loadConD_rule, c+INSN_COST * 5)
      }
    }
   if ( /* VREGD KNOWN_VALID || */ _cost[VREGD] > INSN_COST * 5) {
     DFA_PRODUCTION(VREGD, loadConD_rule, INSN_COST * 5)
   }
}
void  State::_sub_Op_ConF(const Node *n){
    if(         
#line 4658 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_float_immediate((double)n->getf())
#line 7350 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMFPACKED, immFPacked_rule, c)
        DFA_PRODUCTION(VREGF, loadConF_packed_rule, c+INSN_COST * 4)
    }
    if(         
#line 4647 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
jint_cast(n->getf()) == 0
#line 7359 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMF0, immF0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMF, immF_rule, c)
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VREGF, loadConF_rule, c+INSN_COST * 4)
      }
    }
   if ( /* VREGF KNOWN_VALID || */ _cost[VREGF] > INSN_COST * 4) {
     DFA_PRODUCTION(VREGF, loadConF_rule, INSN_COST * 4)
   }
}
void  State::_sub_Op_ConI(const Node *n){
    int _n_get_int__ = n->get_int();
    if(         
#line 35 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Address::offset_ok_for_sve_immed(_n_get_int__, 4,
            Matcher::scalable_vector_reg_size(T_BYTE))
#line 7381 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(VMEMA_IMMIOFFSET4, vmemA_immIOffset4_rule, c)
    }
    if(         
#line 4475 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_logical_immediate(/*is32*/true, (uint64_t)n->get_int())
#line 7389 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMILOG, immILog_rule, c)
    }
    if(         
#line 4465 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_sve_logical_immediate(BitsPerShort, (uint64_t)n->get_int())
#line 7397 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMSLOG, immSLog_rule, c)
    }
    if(         
#line 4455 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_sve_logical_immediate(BitsPerByte, (uint64_t)n->get_int())
#line 7405 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMBLOG, immBLog_rule, c)
    }
    if(         
#line 4443 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_sve_add_sub_immediate((int64_t)n->get_int())
#line 7413 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIADDSUBV, immIAddSubV_rule, c)
    }
    if(         
#line 4433 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_add_sub_immediate((int64_t)n->get_int())
#line 7421 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIADDSUB, immIAddSub_rule, c)
    }
    if(         
#line 4422 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ <= 255 && _n_get_int__ >= -255
#line 7429 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMBADDSUBV, immBAddSubV_rule, c)
    }
    if(         
#line 4398 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(_n_get_int__ <= 127 && _n_get_int__ >= -128) ||
            (_n_get_int__ <= 32512 && _n_get_int__ >= -32768 && (_n_get_int__ & 0xff) == 0)
#line 7438 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI8_SHIFT8, immI8_shift8_rule, c)
    }
    if(         
#line 4387 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ <= 127 && _n_get_int__ >= -128
#line 7446 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI8, immI8_rule, c)
    }
    if(         
#line 4294 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 4)
#line 7454 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET16, immIOffset16_rule, c)
    }
    if(         
#line 4284 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 3)
#line 7462 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET8, immIOffset8_rule, c)
    }
    if(         
#line 4274 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 2)
#line 7470 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET4, immIOffset4_rule, c)
    }
    if(         
#line 4264 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 1)
#line 7478 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET2, immIOffset2_rule, c)
    }
    if(         
#line 4254 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 0)
#line 7486 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET1, immIOffset1_rule, c)
    }
    if(         
#line 4244 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_int__, 0)
#line 7494 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIOFFSET, immIOffset_rule, c)
    }
    if(         
#line 4233 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::is_uimm(_n_get_int__, 7)
#line 7502 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIU7, immIU7_rule, c)
    }
    if(         
#line 4222 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::is_simm(_n_get_int__, 5)
#line 7510 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI5, immI5_rule, c)
    }
    if(         
#line 4211 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 <= _n_get_int__ && (_n_get_int__ <= 3)
#line 7518 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMISCALE, immIScale_rule, c)
    }
    if(         
#line 4186 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(_n_get_int__ != 0)
            && ((_n_get_int__ & 0xc0000000) == 0)
            && is_power_of_2(_n_get_int__ + 1)
#line 7528 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_BITMASK, immI_bitmask_rule, c)
    }
    if(         
#line 4134 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Matcher::is_unsigned_booltest_pred(_n_get_int__)
#line 7536 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_CMPU_COND, immI_cmpU_cond_rule, c)
    }
    if(         
#line 4123 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!Matcher::is_unsigned_booltest_pred(_n_get_int__)
#line 7544 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_CMP_COND, immI_cmp_cond_rule, c)
    }
    if(         
#line 4112 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ > 0
#line 7552 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_POSITIVE, immI_positive_rule, c)
    }
    if(         
#line 4102 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 65535
#line 7560 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_65535, immI_65535_rule, c)
    }
    if(         
#line 4092 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 255
#line 7568 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_255, immI_255_rule, c)
    }
    if(         
#line 4082 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 56
#line 7576 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_56, immI_56_rule, c)
    }
    if(         
#line 4072 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 48
#line 7584 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_48, immI_48_rule, c)
    }
    if(         
#line 4062 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 32
#line 7592 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_32, immI_32_rule, c)
    }
    if(         
#line 4052 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 24
#line 7600 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_24, immI_24_rule, c)
    }
    if(         
#line 4042 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 16
#line 7608 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_16, immI_16_rule, c)
    }
    if(         
#line 4032 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ <= 4
#line 7616 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_LE_4, immI_le_4_rule, c)
    }
    if(         
#line 4022 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ > 1
#line 7624 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_GT_1, immI_gt_1_rule, c)
    }
    if(         
#line 4012 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 <= _n_get_int__ && (_n_get_int__ <= 4)
#line 7632 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMIEXT, immIExt_rule, c)
    }
    if(         
#line 4001 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == -1
#line 7640 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_M1, immI_M1_rule, c)
    }
    if(         
#line 3990 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 1
#line 7648 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI_1, immI_1_rule, c)
    }
    if(         
#line 3979 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_int__ == 0
#line 7656 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI0, immI0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMI, immI_rule, c)
        DFA_PRODUCTION(IREGINOSP, loadConI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGI, loadConI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGI_R0, loadConI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGI_R2, loadConI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGI_R3, loadConI_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGI_R4, loadConI_rule, c+INSN_COST)
    }
}
void  State::_sub_Op_ConL(const Node *n){
    jlong _n_get_long__ = n->get_long();
    if(         
#line 45 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Address::offset_ok_for_sve_immed(_n_get_long__, 4,
            Matcher::scalable_vector_reg_size(T_BYTE))
#line 7679 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(VMEMA_IMMLOFFSET4, vmemA_immLOffset4_rule, c)
    }
    if(         
#line 4550 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 7687 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_32BITS, immL_32bits_rule, c)
    }
    if(         
#line 4540 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_logical_immediate(/*is32*/false, (uint64_t)n->get_long())
#line 7695 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLLOG, immLLog_rule, c)
    }
    if(         
#line 4529 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_sve_add_sub_immediate(_n_get_long__)
#line 7703 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLADDSUBV, immLAddSubV_rule, c)
    }
    if(         
#line 4519 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::operand_valid_for_add_sub_immediate(_n_get_long__)
#line 7711 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLADDSUB, immLAddSub_rule, c)
    }
    if(         
#line 4508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == -1
#line 7719 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_M1, immL_M1_rule, c)
    }
    if(         
#line 4497 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == 0
#line 7727 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML0, immL0_rule, c)
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML, immL_rule, c)
        DFA_PRODUCTION(IREGLNOSP, loadConL_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGL, loadConL_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGL_R0, loadConL_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGL_R11, loadConL_rule, c+INSN_COST)
    }
    if(         
#line 4410 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(_n_get_long__ <= 127 && _n_get_long__ >= -128) ||
            (_n_get_long__ <= 32512 && _n_get_long__ >= -32768 && (_n_get_long__ & 0xff) == 0)
#line 7744 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML8_SHIFT8, immL8_shift8_rule, c)
    }
    if(         
#line 4376 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::is_uimm(_n_get_long__, 7)
#line 7752 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLU7, immLU7_rule, c)
    }
    if(         
#line 4365 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Assembler::is_simm(_n_get_long__, 5)
#line 7760 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML5, immL5_rule, c)
    }
    if(         
#line 4354 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 4)
#line 7768 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET16, immLoffset16_rule, c)
    }
    if(         
#line 4344 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 3)
#line 7776 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET8, immLoffset8_rule, c)
    }
    if(         
#line 4334 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 2)
#line 7784 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET4, immLoffset4_rule, c)
    }
    if(         
#line 4324 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 1)
#line 7792 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET2, immLoffset2_rule, c)
    }
    if(         
#line 4314 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 0)
#line 7800 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET1, immLoffset1_rule, c)
    }
    if(         
#line 4304 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
Address::offset_ok_for_immed(_n_get_long__, 0)
#line 7808 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMLOFFSET, immLoffset_rule, c)
    }
    if(         
#line 4198 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(_n_get_long__ != 0)
            && ((julong)n->get_long() < 0x80000000ULL)
            && is_power_of_2(n->get_long() + 1)
#line 7818 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_POSITIVE_BITMASKI, immL_positive_bitmaskI_rule, c)
    }
    if(         
#line 4174 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(_n_get_long__ != 0)
            && ((_n_get_long__ & 0xc000000000000000l) == 0)
            && is_power_of_2(_n_get_long__ + 1)
#line 7828 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_BITMASK, immL_bitmask_rule, c)
    }
    if(         
#line 4164 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == 4294967295L
#line 7836 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_4294967295, immL_4294967295_rule, c)
    }
    if(         
#line 4154 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == 65535L
#line 7844 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_65535, immL_65535_rule, c)
    }
    if(         
#line 4144 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
_n_get_long__ == 255L
#line 7852 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMML_255, immL_255_rule, c)
    }
}
void  State::_sub_Op_ConP(const Node *n){
    if(         
#line 4595 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
BarrierSet::barrier_set()->is_a(BarrierSet::CardTableBarrierSet) &&
            (CardTable::CardValue*)n->get_ptr() == ((CardTableBarrierSet*)(BarrierSet::barrier_set()))->card_table()->byte_map_base()
#line 7863 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMBYTEMAPBASE, immByteMapBase_rule, c)
        DFA_PRODUCTION(IREGPNOSP, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(THREAD_REGP, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(INDIRECT, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(VMEM2, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(VMEM4, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(VMEM8, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(VMEM16, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(MEMORY, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(VMEMA, indirect_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R0, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R1, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R2, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R3, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R4, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R5, loadByteMapBase_rule, c+INSN_COST)
        DFA_PRODUCTION(IREGP_R10, loadByteMapBase_rule, c+INSN_COST)
    }
    if(         
#line 4583 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->get_ptr() == 1
#line 7893 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP_1, immP_1_rule, c)
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c+INSN_COST) {
        DFA_PRODUCTION(IREGPNOSP, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+INSN_COST) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c+INSN_COST) {
        DFA_PRODUCTION(THREAD_REGP, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+INSN_COST) {
        DFA_PRODUCTION(INDIRECT, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c+INSN_COST) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R0, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R1, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R2, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R3, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R4, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R5, loadConP1_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R10, loadConP1_rule, c+INSN_COST)
      }
    }
    if(         
#line 4571 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->get_ptr() == 0
#line 7967 "dfa_aarch64.cpp"
 ) {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP0, immP0_rule, c)
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c+INSN_COST) {
        DFA_PRODUCTION(IREGPNOSP, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+INSN_COST) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c+INSN_COST) {
        DFA_PRODUCTION(THREAD_REGP, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+INSN_COST) {
        DFA_PRODUCTION(INDIRECT, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c+INSN_COST) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+INSN_COST) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c+INSN_COST) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R0, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R1, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R2, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R3, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R4, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R5, loadConP0_rule, c+INSN_COST)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c+INSN_COST) {
        DFA_PRODUCTION(IREGP_R10, loadConP0_rule, c+INSN_COST)
      }
    }
    {
      unsigned int c = 0;
        DFA_PRODUCTION(IMMP, immP_rule, c)
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGPNOSP, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+INSN_COST * 4) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c+INSN_COST * 4) {
        DFA_PRODUCTION(THREAD_REGP, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+INSN_COST * 4) {
        DFA_PRODUCTION(INDIRECT, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c+INSN_COST * 4) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c+INSN_COST * 4) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c+INSN_COST * 4) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c+INSN_COST * 4) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+INSN_COST * 4) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c+INSN_COST * 4) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R0, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R1, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R2, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R3, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R4, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R5, loadConP_rule, c+INSN_COST * 4)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c+INSN_COST * 4) {
        DFA_PRODUCTION(IREGP_R10, loadConP_rule, c+INSN_COST * 4)
      }
    }
   if ( /* IREGPNOSP KNOWN_VALID || */ _cost[IREGPNOSP] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGPNOSP, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP KNOWN_VALID || */ _cost[IREGP] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP, loadConP_rule, INSN_COST * 4)
   }
   if ( /* INLINE_CACHE_REGP KNOWN_VALID || */ _cost[INLINE_CACHE_REGP] > INSN_COST * 4) {
     DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_rule, INSN_COST * 4)
   }
   if ( /* THREAD_REGP KNOWN_VALID || */ _cost[THREAD_REGP] > INSN_COST * 4) {
     DFA_PRODUCTION(THREAD_REGP, loadConP_rule, INSN_COST * 4)
   }
   if ( /* INDIRECT KNOWN_VALID || */ _cost[INDIRECT] > INSN_COST * 4) {
     DFA_PRODUCTION(INDIRECT, loadConP_rule, INSN_COST * 4)
   }
   if ( /* VMEM2 KNOWN_VALID || */ _cost[VMEM2] > INSN_COST * 4) {
     DFA_PRODUCTION(VMEM2, indirect_rule, INSN_COST * 4)
   }
   if ( /* VMEM4 KNOWN_VALID || */ _cost[VMEM4] > INSN_COST * 4) {
     DFA_PRODUCTION(VMEM4, indirect_rule, INSN_COST * 4)
   }
   if ( /* VMEM8 KNOWN_VALID || */ _cost[VMEM8] > INSN_COST * 4) {
     DFA_PRODUCTION(VMEM8, indirect_rule, INSN_COST * 4)
   }
   if ( /* VMEM16 KNOWN_VALID || */ _cost[VMEM16] > INSN_COST * 4) {
     DFA_PRODUCTION(VMEM16, indirect_rule, INSN_COST * 4)
   }
   if ( /* MEMORY1 KNOWN_VALID || */ _cost[MEMORY1] > INSN_COST * 4) {
     DFA_PRODUCTION(MEMORY1, indirect_rule, INSN_COST * 4)
   }
   if ( /* MEMORY2 KNOWN_VALID || */ _cost[MEMORY2] > INSN_COST * 4) {
     DFA_PRODUCTION(MEMORY2, indirect_rule, INSN_COST * 4)
   }
   if ( /* MEMORY4 KNOWN_VALID || */ _cost[MEMORY4] > INSN_COST * 4) {
     DFA_PRODUCTION(MEMORY4, indirect_rule, INSN_COST * 4)
   }
   if ( /* MEMORY8 KNOWN_VALID || */ _cost[MEMORY8] > INSN_COST * 4) {
     DFA_PRODUCTION(MEMORY8, indirect_rule, INSN_COST * 4)
   }
   if ( /* MEMORY KNOWN_VALID || */ _cost[MEMORY] > INSN_COST * 4) {
     DFA_PRODUCTION(MEMORY, indirect_rule, INSN_COST * 4)
   }
   if ( /* VMEMA KNOWN_VALID || */ _cost[VMEMA] > INSN_COST * 4) {
     DFA_PRODUCTION(VMEMA, indirect_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R0 KNOWN_VALID || */ _cost[IREGP_R0] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R0, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R1 KNOWN_VALID || */ _cost[IREGP_R1] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R1, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R2 KNOWN_VALID || */ _cost[IREGP_R2] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R2, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R3 KNOWN_VALID || */ _cost[IREGP_R3] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R3, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R4 KNOWN_VALID || */ _cost[IREGP_R4] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R4, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R5 KNOWN_VALID || */ _cost[IREGP_R5] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R5, loadConP_rule, INSN_COST * 4)
   }
   if ( /* IREGP_R10 KNOWN_VALID || */ _cost[IREGP_R10] > INSN_COST * 4) {
     DFA_PRODUCTION(IREGP_R10, loadConP_rule, INSN_COST * 4)
   }
}
void  State::_sub_Op_ConvD2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 5;
        DFA_PRODUCTION(VREGF, convD2F_reg_rule, c)
    }
}
void  State::_sub_Op_ConvD2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 5;
        DFA_PRODUCTION(IREGINOSP, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, convD2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, convD2I_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 5;
        DFA_PRODUCTION(IREGLNOSP, convD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, convD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, convD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, convD2L_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvF2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 5;
        DFA_PRODUCTION(VREGD, convF2D_reg_rule, c)
    }
}
void  State::_sub_Op_ConvF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 5;
        DFA_PRODUCTION(IREGINOSP, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, convF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, convF2I_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvF2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 5;
        DFA_PRODUCTION(IREGLNOSP, convF2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, convF2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, convF2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, convF2L_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvI2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+INSN_COST * 5;
        DFA_PRODUCTION(VREGD, convI2D_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+INSN_COST * 5;
        DFA_PRODUCTION(VREGF, convI2F_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvI2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, convI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, convI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, convI2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, convI2L_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGI_IMMI_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGI_IMMI_BITMASK] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, ubfizIConvI2LAndI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, ubfizIConvI2LAndI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, ubfizIConvI2LAndI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, ubfizIConvI2LAndI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_BITMASK) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_BITMASK];
        DFA_PRODUCTION(_CONVI2L__ANDI_IREGIORL2I_IMMI_BITMASK_, _ConvI2L__AndI_iRegIorL2I_immI_bitmask__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI__ANDI_IREGIORL2I_IMMI_BITMASK_IMMI) &&
        (
#line 12388 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2(n->in(1)->in(1)->in(2)->get_int() + 1) + (n->in(1)->in(2)->get_int() & 31)) <= 31
#line 8272 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_BITMASK_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, ubfizwIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, ubfizwIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, ubfizwIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, ubfizwIConvI2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI__URSHIFTI_IREGIORL2I_IMMI_IMMI_BITMASK) &&
        (
#line 12321 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2(n->in(1)->in(2)->get_int() + 1) + (n->in(1)->in(1)->in(2)->get_int() & 31)) <= (31 + 1)
#line 8292 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI__URSHIFTI_IREGIORL2I_IMMI_IMMI_BITMASK]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, ubfxIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, ubfxIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, ubfxIConvI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, ubfxIConvI2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_CONVI2L_IREGIORL2I_, _ConvI2L_iRegIorL2I__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_INDIRECT_];
        DFA_PRODUCTION(_CONVI2L__LOADI_INDIRECT__, _ConvI2L__LoadI_indirect___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_INDIRECT_] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadS2L_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_INDIRECT_] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUS2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUS2L_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_INDIRECT_] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUB2L_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADB_INDIRECT_) ) {
      unsigned int c = _kids[0]->_cost[_LOADB_INDIRECT_] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadB2L_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadB2L_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY4_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY4_];
        DFA_PRODUCTION(_CONVI2L__LOADI_MEMORY4__, _ConvI2L__LoadI_memory4___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY4_) &&
        (
#line 6586 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1))
#line 8384 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY4_]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadI2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY2_) &&
        (
#line 6558 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1))
#line 8404 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY2_]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUS2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_MEMORY2_) &&
        (
#line 6530 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1))
#line 8424 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_MEMORY2_]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadS2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY1_) &&
        (
#line 6502 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1))
#line 8444 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY1_]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadUB2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADB_MEMORY1_) &&
        (
#line 6474 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n->in(1))
#line 8464 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADB_MEMORY1_]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadB2L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION(_CONVI2L_IREGI_, _ConvI2L_iRegI__rule, c)
    }
}
void  State::_sub_Op_ConvL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+INSN_COST * 5;
        DFA_PRODUCTION(VREGD, convL2D_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvL2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+INSN_COST * 5;
        DFA_PRODUCTION(VREGF, convL2F_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvL2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, convL2I_reg_rule, c)
        DFA_PRODUCTION(IREGI, convL2I_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, convL2I_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, convL2I_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, convL2I_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, convL2I_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_POSITIVE_BITMASKI) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_POSITIVE_BITMASKI];
        DFA_PRODUCTION(_CONVL2I__ANDL_IREGL_IMML_POSITIVE_BITMASKI_, _ConvL2I__AndL_iRegL_immL_positive_bitmaskI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL__ANDL_IREGL_IMML_POSITIVE_BITMASKI_IMMI) &&
        (
#line 12410 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2_long(n->in(1)->in(1)->in(2)->get_long() + 1) + (n->in(1)->in(2)->get_int() & 63)) <= 31
#line 8516 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL__ANDL_IREGL_IMML_POSITIVE_BITMASKI_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, ubfizLConvL2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, ubfizLConvL2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, ubfizLConvL2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, ubfizLConvL2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, ubfizLConvL2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, ubfizLConvL2I_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL];
        DFA_PRODUCTION(_CONVL2I_IREGL_, _ConvL2I_iRegL__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X__DECODEN_IREGN__) &&
        (
#line 8009 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 8549 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X__DECODEN_IREGN__] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, convN2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, convN2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, convN2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, convN2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, convN2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, convN2I_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, convP2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, convP2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, convP2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, convP2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, convP2I_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, convP2I_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL];
        DFA_PRODUCTION(IREGL2I, iRegL2I_rule, c)
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegL2I_rule, c)
      }
    }
}
void  State::_sub_Op_ConvF2HF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, convF2HF_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, convF2HF_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, convF2HF_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, convF2HF_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, convF2HF_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, convF2HF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ConvHF2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGINOSP) ) {
      unsigned int c = _kids[0]->_cost[IREGINOSP] + INSN_COST;
        DFA_PRODUCTION(VREGF, convHF2F_reg_reg_rule, c)
    }
}
void  State::_sub_Op_CountedLoopEnd(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], RFLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[RFLAGSREG] + BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, branchLoopEnd_rule, c)
    }
}
void  State::_sub_Op_CountLeadingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(IREGI, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R2, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R3, countLeadingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R4, countLeadingZerosI_rule, c)
    }
}
void  State::_sub_Op_CountLeadingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(IREGI, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R2, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R3, countLeadingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R4, countLeadingZerosL_rule, c)
    }
}
void  State::_sub_Op_CountLeadingZerosV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 6388 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 8659 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vcountLeadingZeros_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcountLeadingZeros_rule, c)
      }
    }
}
void  State::_sub_Op_CountTrailingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, countTrailingZerosI_rule, c)
        DFA_PRODUCTION(IREGI, countTrailingZerosI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, countTrailingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R2, countTrailingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R3, countTrailingZerosI_rule, c)
        DFA_PRODUCTION(IREGI_R4, countTrailingZerosI_rule, c)
    }
}
void  State::_sub_Op_CountTrailingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, countTrailingZerosL_rule, c)
        DFA_PRODUCTION(IREGI, countTrailingZerosL_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, countTrailingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R2, countTrailingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R3, countTrailingZerosL_rule, c)
        DFA_PRODUCTION(IREGI_R4, countTrailingZerosL_rule, c)
    }
}
void  State::_sub_Op_CountTrailingZerosV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 6446 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 8700 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vcountTrailingZeros_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcountTrailingZeros_rule, c)
      }
    }
}
void  State::_sub_Op_CreateEx(const Node *n){
    {
      unsigned int c = INSN_COST;
        DFA_PRODUCTION(IREGP_R0, CreateException_rule, c)
        DFA_PRODUCTION(IREGP, CreateException_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, CreateException_rule, c)
        DFA_PRODUCTION(THREAD_REGP, CreateException_rule, c)
        DFA_PRODUCTION(INDIRECT, CreateException_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
    }
}
void  State::_sub_Op_DecodeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 8063 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->bottom_type()->is_ptr()->ptr() == TypePtr::NotNull ||
            n->bottom_type()->is_ptr()->ptr() == TypePtr::Constant
#line 8738 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+INSN_COST * 3;
        DFA_PRODUCTION(IREGPNOSP, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(THREAD_REGP, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(INDIRECT, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R1, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R2, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R3, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R4, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R5, decodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R10, decodeHeapOop_not_null_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 8049 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->bottom_type()->is_ptr()->ptr() != TypePtr::NotNull &&
            n->bottom_type()->is_ptr()->ptr() != TypePtr::Constant
#line 8769 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, decodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, decodeHeapOop_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN];
        DFA_PRODUCTION(_DECODEN_IREGN_, _DecodeN_iRegN__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        
#line 5404 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
CompressedOops::shift() == 0
#line 8847 "dfa_aarch64.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGN];
        DFA_PRODUCTION(INDIRECTN, indirectN_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirectN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirectN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirectN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirectN_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirectN_rule, c)
      }
    }
}
void  State::_sub_Op_DecodeNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+INSN_COST * 3;
        DFA_PRODUCTION(IREGPNOSP, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(THREAD_REGP, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(INDIRECT, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R1, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R2, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R3, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R4, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R5, decodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGP_R10, decodeKlass_not_null_rule, c)
    }
}
void  State::_sub_Op_DivD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+INSN_COST * 32;
        DFA_PRODUCTION(VREGD, divD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+INSN_COST * 18;
        DFA_PRODUCTION(VREGF, divF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_DivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 19;
        DFA_PRODUCTION(IREGINOSP, divI_rule, c)
        DFA_PRODUCTION(IREGI, divI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, divI_rule, c)
        DFA_PRODUCTION(IREGI_R2, divI_rule, c)
        DFA_PRODUCTION(IREGI_R3, divI_rule, c)
        DFA_PRODUCTION(IREGI_R4, divI_rule, c)
    }
}
void  State::_sub_Op_DivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 35;
        DFA_PRODUCTION(IREGLNOSP, divL_rule, c)
        DFA_PRODUCTION(IREGL, divL_rule, c)
        DFA_PRODUCTION(IREGL_R0, divL_rule, c)
        DFA_PRODUCTION(IREGL_R11, divL_rule, c)
    }
}
void  State::_sub_Op_UDivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 19;
        DFA_PRODUCTION(IREGINOSP, UdivI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, UdivI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, UdivI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, UdivI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, UdivI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, UdivI_reg_reg_rule, c)
    }
}
void  State::_sub_Op_UDivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 35;
        DFA_PRODUCTION(IREGLNOSP, UdivL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, UdivL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, UdivL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, UdivL_reg_reg_rule, c)
    }
}
void  State::_sub_Op_EncodeISOArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R1_IREGI_R3) &&
        (
#line 16827 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((EncodeISOArrayNode*)n)->is_ascii()
#line 8954 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R2]+_kids[1]->_cost[_BINARY_IREGP_R1_IREGI_R3] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, encode_ascii_array_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R1_IREGI_R3) &&
        (
#line 16806 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!((EncodeISOArrayNode*)n)->is_ascii()
#line 8963 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R2]+_kids[1]->_cost[_BINARY_IREGP_R1_IREGI_R3] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, encode_iso_array_rule, c)
      }
    }
}
void  State::_sub_Op_EncodeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 8038 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull
#line 8976 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+INSN_COST * 3;
        DFA_PRODUCTION(IREGNNOSP, encodeHeapOop_not_null_rule, c)
        DFA_PRODUCTION(IREGN, encodeHeapOop_not_null_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 8024 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->bottom_type()->make_ptr()->ptr() != TypePtr::NotNull
#line 8986 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, encodeHeapOop_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, encodeHeapOop_rule, c)
      }
    }
}
void  State::_sub_Op_EncodePKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+INSN_COST * 3;
        DFA_PRODUCTION(IREGNNOSP, encodeKlass_not_null_rule, c)
        DFA_PRODUCTION(IREGN, encodeKlass_not_null_rule, c)
    }
}
void  State::_sub_Op_FastLock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 16024 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
LockingMode == LM_LIGHTWEIGHT
#line 9009 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+5 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, cmpFastLockLightweight_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 15992 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
LockingMode != LM_LIGHTWEIGHT
#line 9018 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+5 * INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, cmpFastLock_rule, c)
      }
    }
}
void  State::_sub_Op_FastUnlock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 16040 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
LockingMode == LM_LIGHTWEIGHT
#line 9031 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+5 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, cmpFastUnlockLightweight_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 16008 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
LockingMode != LM_LIGHTWEIGHT
#line 9040 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+5 * INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, cmpFastUnlock_rule, c)
      }
    }
}
void  State::_sub_Op_FmaD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGD_VREGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_VREGD_]+_kids[1]->_cost[_BINARY_VREGD_VREGD] + INSN_COST;
        DFA_PRODUCTION(VREGD, mnsubD_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_VREGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD__NEGD_VREGD_) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_VREGD_]+_kids[1]->_cost[_BINARY_VREGD__NEGD_VREGD_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, mnaddD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD__NEGD_VREGD_) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[_BINARY_VREGD__NEGD_VREGD_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, msubD_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[_BINARY_VREGD_VREGD] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, maddD_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_FmaF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGF_VREGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_VREGF_]+_kids[1]->_cost[_BINARY_VREGF_VREGF] + INSN_COST;
        DFA_PRODUCTION(VREGF, mnsubF_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_VREGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF__NEGF_VREGF_) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_VREGF_]+_kids[1]->_cost[_BINARY_VREGF__NEGF_VREGF_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, mnaddF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF__NEGF_VREGF_) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[_BINARY_VREGF__NEGF_VREGF_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, msubF_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[_BINARY_VREGF_VREGF] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, maddF_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_Goto(const Node *n){
    {
      unsigned int c = BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, branch_rule, c)
    }
}
void  State::_sub_Op_Halt(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, ShouldNotReachHere_rule, c)
    }
}
void  State::_sub_Op_CountPositives(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R1) && STATE__VALID_CHILD(_kids[1], IREGI_R2) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R1]+_kids[1]->_cost[IREGI_R2] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, count_positives_rule, c)
    }
}
void  State::_sub_Op_If(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPI__ANDI_IREGIORL2I_IMMI_IMMI0) &&
        (
#line 15898 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
is_power_of_2((juint)n->in(2)->in(1)->in(2)->get_int())
#line 9119 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPI__ANDI_IREGIORL2I_IMMI_IMMI0] + BRANCH_COST;
        DFA_PRODUCTION(UNIVERSE, far_cmpI_branch_bit_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPL__ANDL_IREGL_IMML_IMML0) &&
        (
#line 15882 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
is_power_of_2((julong)n->in(2)->in(1)->in(2)->get_long())
#line 9128 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPL__ANDL_IREGL_IMML_IMML0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, far_cmpL_branch_bit_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPLTGE) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGIORL2I_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPLTGE]+_kids[1]->_cost[_CMPI_IREGIORL2I_IMMI0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, far_cmpI_branch_sign_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPLTGE) && STATE__VALID_CHILD(_kids[1], _CMPL_IREGL_IMML0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPLTGE]+_kids[1]->_cost[_CMPL_IREGL_IMML0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, far_cmpL_branch_sign_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPUEQNELTGE) && STATE__VALID_CHILD(_kids[1], _CMPUL_IREGL_IMML0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPUEQNELTGE]+_kids[1]->_cost[_CMPUL_IREGL_IMML0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpUL_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPUEQNELTGE) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGIORL2I_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPUEQNELTGE]+_kids[1]->_cost[_CMPU_IREGIORL2I_IMMI0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpUI_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPP__DECODEN_IREGN__IMMP0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPP__DECODEN_IREGN__IMMP0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpP_narrowOop_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPN_IREGN_IMMN0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPN_IREGN_IMMN0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpN_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPP_IREGP_IMMP0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpP_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPL_IREGL_IMML0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPL_IREGL_IMML0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpL_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPEQNE) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGIORL2I_IMMI0) ) {
      unsigned int c = _kids[0]->_cost[CMPOPEQNE]+_kids[1]->_cost[_CMPI_IREGIORL2I_IMMI0] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, cmpI_imm0_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPU) && STATE__VALID_CHILD(_kids[1], RFLAGSREGU) ) {
      unsigned int c = _kids[0]->_cost[CMPOPU]+_kids[1]->_cost[RFLAGSREGU] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, branchConU_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], RFLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[RFLAGSREG] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, branchCon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _OVERFLOWMULL_IREGL_IREGL) &&
        (
#line 15040 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->in(1)->as_Bool()->_test._test == BoolTest::overflow
            || n->in(1)->as_Bool()->_test._test == BoolTest::no_overflow
#line 9206 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_OVERFLOWMULL_IREGL_IREGL]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, overflowMulL_reg_branch_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], _OVERFLOWMULI_IREGIORL2I_IREGIORL2I) &&
        (
#line 14995 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->in(1)->as_Bool()->_test._test == BoolTest::overflow
            || n->in(1)->as_Bool()->_test._test == BoolTest::no_overflow
#line 9218 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[_OVERFLOWMULI_IREGIORL2I_IREGIORL2I]+3 * INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, overflowMulI_reg_branch_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_65535) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_65535]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT, _LShiftI__AndI_iRegIorL2I_immI_65535_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_255) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_255]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT, _LShiftI__AndI_iRegIorL2I_immI_255_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT, _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT, _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION(_LSHIFTI_IREGIORL2I_IMMI_24, _LShiftI_iRegIorL2I_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION(_LSHIFTI_IREGIORL2I_IMMI_16, _LShiftI_iRegIorL2I_immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVL2I__ANDL_IREGL_IMML_POSITIVE_BITMASKI_) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 12453 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2_long(n->in(1)->in(1)->in(2)->get_long() + 1) + (n->in(2)->get_int() & 31)) <= 31
#line 9255 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVL2I__ANDL_IREGL_IMML_POSITIVE_BITMASKI_]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, ubfizLConvL2Ix_rule, c)
        DFA_PRODUCTION(IREGI, ubfizLConvL2Ix_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, ubfizLConvL2Ix_rule, c)
        DFA_PRODUCTION(IREGI_R2, ubfizLConvL2Ix_rule, c)
        DFA_PRODUCTION(IREGI_R3, ubfizLConvL2Ix_rule, c)
        DFA_PRODUCTION(IREGI_R4, ubfizLConvL2Ix_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_BITMASK) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_BITMASK]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_LSHIFTI__ANDI_IREGIORL2I_IMMI_BITMASK_IMMI, _LShiftI__AndI_iRegIorL2I_immI_bitmask_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDI_IREGIORL2I_IMMI_BITMASK) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 12344 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2(n->in(1)->in(2)->get_int() + 1) + (n->in(2)->get_int() & 31)) <= (31 + 1)
#line 9274 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDI_IREGIORL2I_IMMI_BITMASK]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, ubfizwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, ubfizwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, ubfizwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, ubfizwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, ubfizwI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, ubfizwI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_LSHIFTI_IREGIORL2I_IMMI, _LShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, lShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, lShiftI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, lShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, lShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, lShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, lShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, lShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, lShiftI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_4294967295) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_4294967295]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT, _LShiftL__AndL_iRegL_immL_4294967295_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_65535) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_65535]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT, _LShiftL__AndL_iRegL_immL_65535_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_255) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_255]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT, _LShiftL__AndL_iRegL_immL_255_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT, _LShiftL__ConvI2L_iRegIorL2I__immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT, _LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT, _LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56) && STATE__VALID_CHILD(_kids[1], IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56]+_kids[1]->_cost[IMMIEXT];
        DFA_PRODUCTION(_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT, _LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_56) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_56];
        DFA_PRODUCTION(_LSHIFTL_IREGL_IMMI_56, _LShiftL_iRegL_immI_56_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_32];
        DFA_PRODUCTION(_LSHIFTL_IREGL_IMMI_32, _LShiftL_iRegL_immI_32_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_48) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_48];
        DFA_PRODUCTION(_LSHIFTL_IREGL_IMMI_48, _LShiftL_iRegL_immI_48_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__ANDI_IREGIORL2I_IMMI_BITMASK_) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 12432 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2(n->in(1)->in(1)->in(2)->get_int() + 1) + (n->in(2)->get_int() & 63)) <= (63 + 1)
#line 9397 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__ANDI_IREGIORL2I_IMMI_BITMASK_]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, ubfizIConvI2L_rule, c)
        DFA_PRODUCTION(IREGL, ubfizIConvI2L_rule, c)
        DFA_PRODUCTION(IREGL_R0, ubfizIConvI2L_rule, c)
        DFA_PRODUCTION(IREGL_R11, ubfizIConvI2L_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_POSITIVE_BITMASKI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_POSITIVE_BITMASKI]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_LSHIFTL__ANDL_IREGL_IMML_POSITIVE_BITMASKI_IMMI, _LShiftL__AndL_iRegL_immL_positive_bitmaskI_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ANDL_IREGL_IMML_BITMASK) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 12366 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(exact_log2_long(n->in(1)->in(2)->get_long() + 1) + (n->in(2)->get_int() & 63)) <= (63 + 1)
#line 9413 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ANDL_IREGL_IMML_BITMASK]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, ubfizL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, ubfizL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, ubfizL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, ubfizL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_LSHIFTL_IREGL_IMMI, _LShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, lShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, lShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, lShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, lShiftL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, lShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, lShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, lShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, lShiftL_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, lshift_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, lshift_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, lshift_ext_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, lshift_ext_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], IMMISCALE) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[IMMISCALE];
        DFA_PRODUCTION(_LSHIFTL__CONVI2L_IREGIORL2I__IMMISCALE, _LShiftL__ConvI2L_iRegIorL2I__immIScale_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMISCALE) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMISCALE];
        DFA_PRODUCTION(_LSHIFTL_IREGL_IMMISCALE, _LShiftL_iRegL_immIScale_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IMMISCALE) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IMMISCALE];
        DFA_PRODUCTION(_LSHIFTL__CONVI2L_IREGI__IMMISCALE, _LShiftL__ConvI2L_iRegI__immIScale_rule, c)
    }
}
void  State::_sub_Op_LoadB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADB_INDIRECT_, _LoadB_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, loadB_volatile_rule, c)
        DFA_PRODUCTION(IREGI, loadB_volatile_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadB_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1];
        DFA_PRODUCTION(_LOADB_MEMORY1_, _LoadB_memory1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) &&
        (
#line 6460 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9514 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, loadB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, loadB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, loadB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, loadB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, loadB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, loadB_rule, c)
      }
    }
}
void  State::_sub_Op_LoadUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADUB_INDIRECT_, _LoadUB_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, loadUB_volatile_rule, c)
        DFA_PRODUCTION(IREGI, loadUB_volatile_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadUB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadUB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadUB_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadUB_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1];
        DFA_PRODUCTION(_LOADUB_MEMORY1_, _LoadUB_memory1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) &&
        (
#line 6488 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9563 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, loadUB_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, loadUB_rule, c)
      }
    }
}
void  State::_sub_Op_LoadUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADUS_INDIRECT_, _LoadUS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, loadUS_volatile_rule, c)
        DFA_PRODUCTION(IREGI, loadUS_volatile_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadUS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadUS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadUS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadUS_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2];
        DFA_PRODUCTION(_LOADUS_MEMORY2_, _LoadUS_memory2__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) &&
        (
#line 6544 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9612 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, loadUS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, loadUS_rule, c)
      }
    }
}
void  State::_sub_Op_LoadD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(VREGD, loadD_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 6711 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9647 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, loadD_rule, c)
      }
    }
}
void  State::_sub_Op_LoadF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(VREGF, loadF_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) &&
        (
#line 6697 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9664 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, loadF_rule, c)
      }
    }
}
void  State::_sub_Op_LoadI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADI_INDIRECT_, _LoadI_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, loadI_volatile_rule, c)
        DFA_PRODUCTION(IREGI, loadI_volatile_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadI_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadI_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadI_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadI_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4];
        DFA_PRODUCTION(_LOADI_MEMORY4_, _LoadI_memory4__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) &&
        (
#line 6572 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9695 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, loadI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, loadI_rule, c)
      }
    }
}
void  State::_sub_Op_LoadKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 6669 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9726 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
        DFA_PRODUCTION(IREGPNOSP, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP, loadKlass_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadKlass_rule, c)
        DFA_PRODUCTION(THREAD_REGP, loadKlass_rule, c)
        DFA_PRODUCTION(INDIRECT, loadKlass_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R1, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R2, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R3, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R4, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R5, loadKlass_rule, c)
        DFA_PRODUCTION(IREGP_R10, loadKlass_rule, c)
    }
}
void  State::_sub_Op_LoadNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) &&
        (
#line 6683 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9758 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+4 * INSN_COST;
        DFA_PRODUCTION(IREGNNOSP, loadNKlass_rule, c)
        DFA_PRODUCTION(IREGN, loadNKlass_rule, c)
    }
}
void  State::_sub_Op_LoadL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8];
        DFA_PRODUCTION(_LOADL_MEMORY8_, _LoadL_memory8__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGLNOSP, loadL_volatile_rule, c)
        DFA_PRODUCTION(IREGL, loadL_volatile_rule, c)
        DFA_PRODUCTION(IREGL_R0, loadL_volatile_rule, c)
        DFA_PRODUCTION(IREGL_R11, loadL_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 6614 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 9781 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, loadL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, loadL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, loadL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, loadL_rule, c)
      }
    }
}
void  State::_sub_Op_LoadP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 126 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_acquiring_load(n) && n->as_Load()->barrier_data() != 0
#line 9803 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGPNOSP, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(THREAD_REGP, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(INDIRECT, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R1, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R2, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R3, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R4, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R5, zLoadPVolatile_rule, c)
        DFA_PRODUCTION(IREGP_R10, zLoadPVolatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 106 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_acquiring_load(n) && n->as_Load()->barrier_data() != 0
#line 9833 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, zLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, zLoadP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 77 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && needs_acquiring_load(n) && n->as_Load()->barrier_data() != 0
#line 9907 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xLoadPVolatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xLoadPVolatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 57 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/x/x_aarch64.ad"
UseZGC && !ZGenerational && !needs_acquiring_load(n) && (n->as_Load()->barrier_data() != 0)
#line 9981 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, xLoadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, xLoadP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) &&
        (
#line 7317 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Load()->barrier_data() == 0
#line 10055 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, loadP_volatile_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, loadP_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) &&
        (
#line 6641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n) && (n->as_Load()->barrier_data() == 0)
#line 10129 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, loadP_rule, c)
      }
    }
}
void  State::_sub_Op_LoadN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGNNOSP, loadN_volatile_rule, c)
        DFA_PRODUCTION(IREGN, loadN_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) &&
        (
#line 6655 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 10210 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, loadN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, loadN_rule, c)
      }
    }
}
void  State::_sub_Op_LoadRange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+4 * INSN_COST;
        DFA_PRODUCTION(IREGINOSP, loadRange_rule, c)
        DFA_PRODUCTION(IREGI, loadRange_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadRange_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadRange_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadRange_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadRange_rule, c)
    }
}
void  State::_sub_Op_LoadS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADS_INDIRECT_, _LoadS_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, loadS_volatile_rule, c)
        DFA_PRODUCTION(IREGI, loadS_volatile_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, loadS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R2, loadS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R3, loadS_volatile_rule, c)
        DFA_PRODUCTION(IREGI_R4, loadS_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2];
        DFA_PRODUCTION(_LOADS_MEMORY2_, _LoadS_memory2__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) &&
        (
#line 6516 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_acquiring_load(n)
#line 10256 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, loadS_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, loadS_rule, c)
      }
    }
}
void  State::_sub_Op_MulAddS2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_IREGIORL2I]+_kids[1]->_cost[_BINARY_IREGIORL2I_IREGIORL2I]+INSN_COST * 5;
        DFA_PRODUCTION(IREGINOSP, muladdS2I_rule, c)
        DFA_PRODUCTION(IREGI, muladdS2I_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, muladdS2I_rule, c)
        DFA_PRODUCTION(IREGI_R2, muladdS2I_rule, c)
        DFA_PRODUCTION(IREGI_R3, muladdS2I_rule, c)
        DFA_PRODUCTION(IREGI_R4, muladdS2I_rule, c)
    }
}
void  State::_sub_Op_MaxI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, maxI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, maxI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, maxI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, maxI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, maxI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, maxI_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_immM1_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_reg_immM1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_1]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_imm1_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_1]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_reg_imm1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_imm0_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, maxI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, maxI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, maxI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, maxI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, maxI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, maxI_reg_imm0_rule, c)
      }
    }
}
void  State::_sub_Op_MaxD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD] + INSN_COST;
        DFA_PRODUCTION(VREGD, maxD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MaxF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(VREGF, maxF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquire(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_acquire_rule, c)
    }
    if(         (
#line 7823 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
unnecessary_acquire(n)
#line 10470 "dfa_aarch64.cpp"
) ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, unnecessary_membar_acquire_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_LoadFence(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, load_fence_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquireLock(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_acquire_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarRelease(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_release_rule, c)
    }
    if(         (
#line 7878 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
unnecessary_release(n)
#line 10496 "dfa_aarch64.cpp"
) ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, unnecessary_membar_release_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_StoreFence(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, store_fence_rule, c)
    }
}
void  State::_sub_Op_StoreStoreFence(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_storestore_0_rule, c)
    }
}
void  State::_sub_Op_MemBarReleaseLock(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_release_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarVolatile(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST*100;
        DFA_PRODUCTION(UNIVERSE, membar_volatile_rule, c)
    }
    if(         (
#line 7931 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
unnecessary_volatile(n)
#line 10528 "dfa_aarch64.cpp"
) ) {
      unsigned int c = 0;
        DFA_PRODUCTION(UNIVERSE, unnecessary_membar_volatile_rule, c)	  // overwrites higher cost rule
    }
}
void  State::_sub_Op_MemBarStoreStore(const Node *n){
    {
      unsigned int c = VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, membar_storestore_rule, c)
    }
}
void  State::_sub_Op_MinI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, minI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, minI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, minI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, minI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, minI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, minI_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_immM1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_immM1_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_reg_immM1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_reg_immM1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_1]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_imm1_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_imm1_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_1]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_reg_imm1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_reg_imm1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_imm0_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_imm0_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI0]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, minI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, minI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, minI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, minI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, minI_reg_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, minI_reg_imm0_rule, c)
      }
    }
}
void  State::_sub_Op_MinF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(VREGF, minF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MinD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD] + INSN_COST;
        DFA_PRODUCTION(VREGD, minD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_ModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 22;
        DFA_PRODUCTION(IREGINOSP, modI_rule, c)
        DFA_PRODUCTION(IREGI, modI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, modI_rule, c)
        DFA_PRODUCTION(IREGI_R2, modI_rule, c)
        DFA_PRODUCTION(IREGI_R3, modI_rule, c)
        DFA_PRODUCTION(IREGI_R4, modI_rule, c)
    }
}
void  State::_sub_Op_ModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 38;
        DFA_PRODUCTION(IREGLNOSP, modL_rule, c)
        DFA_PRODUCTION(IREGL, modL_rule, c)
        DFA_PRODUCTION(IREGL_R0, modL_rule, c)
        DFA_PRODUCTION(IREGL_R11, modL_rule, c)
    }
}
void  State::_sub_Op_UModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 22;
        DFA_PRODUCTION(IREGINOSP, UmodI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, UmodI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, UmodI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, UmodI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, UmodI_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, UmodI_reg_reg_rule, c)
    }
}
void  State::_sub_Op_UModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 38;
        DFA_PRODUCTION(IREGLNOSP, UModL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, UModL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, UModL_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, UModL_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MoveI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(VREGF, MoveI2F_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(STACKSLOTF, MoveI2F_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTI) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTI]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, MoveI2F_stack_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MoveF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, MoveF2I_reg_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, MoveF2I_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(STACKSLOTI, MoveF2I_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTF) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTF]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, MoveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, MoveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, MoveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, MoveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, MoveF2I_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, MoveF2I_stack_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MoveL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(VREGD, MoveL2D_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(STACKSLOTD, MoveL2D_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, MoveL2D_stack_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MoveD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, MoveD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL, MoveD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, MoveD2L_reg_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, MoveD2L_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD] + INSN_COST;
        DFA_PRODUCTION(STACKSLOTL, MoveD2L_reg_stack_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTD) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTD]+4 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, MoveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, MoveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, MoveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, MoveD2L_stack_reg_rule, c)
      }
    }
}
void  State::_sub_Op_MulD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+INSN_COST * 6;
        DFA_PRODUCTION(VREGD, mulD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+INSN_COST * 6;
        DFA_PRODUCTION(VREGF, mulF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_MulHiL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 7;
        DFA_PRODUCTION(IREGLNOSP, mulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL, mulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL_R0, mulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL_R11, mulHiL_rReg_rule, c)
    }
}
void  State::_sub_Op_UMulHiL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 7;
        DFA_PRODUCTION(IREGLNOSP, umulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL, umulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL_R0, umulHiL_rReg_rule, c)
        DFA_PRODUCTION(IREGL_R11, umulHiL_rReg_rule, c)
    }
}
void  State::_sub_Op_MulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _SUBI_IMMI0_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_SUBI_IMMI0_IREGIORL2I]+INSN_COST * 3;
        DFA_PRODUCTION(IREGINOSP, mnegI_0_rule, c)
        DFA_PRODUCTION(IREGI, mnegI_0_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, mnegI_0_rule, c)
        DFA_PRODUCTION(IREGI_R2, mnegI_0_rule, c)
        DFA_PRODUCTION(IREGI_R3, mnegI_0_rule, c)
        DFA_PRODUCTION(IREGI_R4, mnegI_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBI_IMMI0_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_SUBI_IMMI0_IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, mnegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, mnegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, mnegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, mnegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, mnegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, mnegI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_MULI_IREGIORL2I_IREGIORL2I, _MulI_iRegIorL2I_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, mulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, mulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, mulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, mulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, mulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, mulI_rule, c)
      }
    }
}
void  State::_sub_Op_MulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], _SUBL_IMML0__CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[_SUBL_IMML0__CONVI2L_IREGIORL2I_]+INSN_COST * 3;
        DFA_PRODUCTION(IREGLNOSP, smnegL_0_rule, c)
        DFA_PRODUCTION(IREGL, smnegL_0_rule, c)
        DFA_PRODUCTION(IREGL_R0, smnegL_0_rule, c)
        DFA_PRODUCTION(IREGL_R11, smnegL_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IMML0__CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IMML0__CONVI2L_IREGIORL2I_]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, smnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, smnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, smnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, smnegL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_];
        DFA_PRODUCTION(_MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_, _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _SUBL_IMML0_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_SUBL_IMML0_IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, mnegL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, mnegL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, mnegL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, mnegL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IMML0_IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IMML0_IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, mnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, mnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, mnegL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, mnegL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_MULL_IREGL_IREGL, _MulL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, mulL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, mulL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, mulL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, mulL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, smulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, smulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, smulI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, smulI_rule, c)
      }
    }
}
void  State::_sub_Op_NegD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 3;
        DFA_PRODUCTION(VREGD, negD_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD];
        DFA_PRODUCTION(_NEGD_VREGD_, _NegD_vRegD__rule, c)
    }
}
void  State::_sub_Op_NegF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 3;
        DFA_PRODUCTION(VREGF, negF_reg_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF];
        DFA_PRODUCTION(_NEGF_VREGF_, _NegF_vRegF__rule, c)
    }
}
void  State::_sub_Op_OnSpinWait(const Node *n){
    {
      unsigned int c = INSN_COST;
        DFA_PRODUCTION(UNIVERSE, onspinwait_rule, c)
    }
}
void  State::_sub_Op_OrI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMILOG) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMILOG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, orI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, orI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, orI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, orI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, orI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, orI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, orI_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) &&
        (
#line 12508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 31) + (n->in(2)->in(2)->get_int() & 31)) & 31)
#line 11101 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extrOrI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extrOrI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extrOrI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extrOrI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extrOrI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extrOrI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) &&
        (
#line 12508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 31) + (n->in(2)->in(2)->get_int() & 31)) & 31)
#line 11130 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extrOrI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extrOrI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extrOrI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extrOrI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extrOrI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extrOrI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I_IMMI_M1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I_IMMI_M1]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I_IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_XORI_IREGIORL2I_IMMI_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, OrI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, OrI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, OrI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, OrI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, OrI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, OrI_reg_not_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OrL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOG] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, orL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL, orL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL_R0, orL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL_R11, orL_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, orL_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) &&
        (
#line 12490 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 63) + (n->in(2)->in(2)->get_int() & 63)) & 63)
#line 11615 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, extrOrL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, extrOrL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, extrOrL_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, extrOrL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) &&
        (
#line 12490 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
0 == (((n->in(1)->in(2)->get_int() & 63) + (n->in(2)->in(2)->get_int() & 63)) & 63)
#line 11635 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, extrOrL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, extrOrL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, extrOrL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, extrOrL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ROTATERIGHT_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__LSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__LSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__RSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__RSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__URSHIFTL_IREGL_IMMI_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IMML_M1]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL__URSHIFTL_IREGL_IMMI_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL_IMML_M1) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL_IMML_M1]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL_IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_XORL_IREGL_IMML_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, OrL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, OrL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, OrL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, OrL_reg_not_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowAddI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowAddI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowSubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowNegI_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowSubI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowSubI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowMulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_OVERFLOWMULI_IREGIORL2I_IREGIORL2I, _OverflowMulI_iRegIorL2I_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+5 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowMulI_reg_rule, c)
    }
}
void  State::_sub_Op_OverflowAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowAddL_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowAddL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowSubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowNegL_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowSubL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, overflowSubL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowMulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_OVERFLOWMULL_IREGL_IREGL, _OverflowMulL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+6 * INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, overflowMulL_reg_rule, c)
    }
}
void  State::_sub_Op_PartialSubtypeCheck(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R4) && STATE__VALID_CHILD(_kids[1], IREGP_R0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R4]+_kids[1]->_cost[IREGP_R0];
        DFA_PRODUCTION(_PARTIALSUBTYPECHECK_IREGP_R4_IREGP_R0, _PartialSubtypeCheck_iRegP_R4_iRegP_R0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_R4) && STATE__VALID_CHILD(_kids[1], IREGP_R0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R4]+_kids[1]->_cost[IREGP_R0]+1100;
        DFA_PRODUCTION(IREGP_R5, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(IREGP, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(THREAD_REGP, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(INDIRECT, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
    }
}
void  State::_sub_Op_PopCountI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY4_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY4_]+INSN_COST * 13;
        DFA_PRODUCTION(IREGINOSP, popCountI_mem_rule, c)
        DFA_PRODUCTION(IREGI, popCountI_mem_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, popCountI_mem_rule, c)
        DFA_PRODUCTION(IREGI_R2, popCountI_mem_rule, c)
        DFA_PRODUCTION(IREGI_R3, popCountI_mem_rule, c)
        DFA_PRODUCTION(IREGI_R4, popCountI_mem_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+INSN_COST * 13;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, popCountI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, popCountI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, popCountI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, popCountI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, popCountI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, popCountI_rule, c)
      }
    }
}
void  State::_sub_Op_PopCountL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY8_) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY8_]+INSN_COST * 13;
        DFA_PRODUCTION(IREGINOSP, popCountL_mem_rule, c)
        DFA_PRODUCTION(IREGI, popCountL_mem_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, popCountL_mem_rule, c)
        DFA_PRODUCTION(IREGI_R2, popCountL_mem_rule, c)
        DFA_PRODUCTION(IREGI_R3, popCountL_mem_rule, c)
        DFA_PRODUCTION(IREGI_R4, popCountL_mem_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+INSN_COST * 13;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, popCountL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, popCountL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, popCountL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, popCountL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, popCountL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, popCountL_rule, c)
      }
    }
}
void  State::_sub_Op_PopCountVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 5932 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 12103 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vpopcountI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vpopcountI_rule, c)
      }
    }
}
void  State::_sub_Op_PopCountVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 5944 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 12120 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vpopcountL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vpopcountL_rule, c)
      }
    }
}
void  State::_sub_Op_PopulateIndex(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 6561 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 12137 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREG, populateindex_rule, c)
    }
}
void  State::_sub_Op_PrefetchAllocation(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, prefetchalloc_rule, c)
    }
}
void  State::_sub_Op_RShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI_24]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION(_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24, _RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI_16]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION(_RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16, _RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, sbfmwI_rule, c)
        DFA_PRODUCTION(IREGI, sbfmwI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, sbfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R2, sbfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R3, sbfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R4, sbfmwI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_RSHIFTI_IREGIORL2I_IMMI, _RShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, rShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, rShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, rShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, rShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, rShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, rShiftI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, rShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, rShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, rShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, rShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, rShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, rShiftI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI_56) && STATE__VALID_CHILD(_kids[1], IMMI_56) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI_56]+_kids[1]->_cost[IMMI_56];
        DFA_PRODUCTION(_RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56, _RShiftL__LShiftL_iRegL_immI_56_immI_56_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI_32) && STATE__VALID_CHILD(_kids[1], IMMI_32) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI_32]+_kids[1]->_cost[IMMI_32];
        DFA_PRODUCTION(_RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32, _RShiftL__LShiftL_iRegL_immI_32_immI_32_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI_48) && STATE__VALID_CHILD(_kids[1], IMMI_48) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI_48]+_kids[1]->_cost[IMMI_48];
        DFA_PRODUCTION(_RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48, _RShiftL__LShiftL_iRegL_immI_48_immI_48_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
        DFA_PRODUCTION(IREGLNOSP, sbfmL_rule, c)
        DFA_PRODUCTION(IREGL, sbfmL_rule, c)
        DFA_PRODUCTION(IREGL_R0, sbfmL_rule, c)
        DFA_PRODUCTION(IREGL_R11, sbfmL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_RSHIFTL_IREGL_IMMI, _RShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, rShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, rShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, rShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, rShiftL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, rShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, rShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, rShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, rShiftL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_Rethrow(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION(UNIVERSE, RethrowException_rule, c)
    }
}
void  State::_sub_Op_Return(const Node *n){
    {
      unsigned int c = INSN_COST;
        DFA_PRODUCTION(UNIVERSE, Ret_rule, c)
    }
}
void  State::_sub_Op_ReverseI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, bits_reverse_I_rule, c)
        DFA_PRODUCTION(IREGI, bits_reverse_I_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, bits_reverse_I_rule, c)
        DFA_PRODUCTION(IREGI_R2, bits_reverse_I_rule, c)
        DFA_PRODUCTION(IREGI_R3, bits_reverse_I_rule, c)
        DFA_PRODUCTION(IREGI_R4, bits_reverse_I_rule, c)
    }
}
void  State::_sub_Op_ReverseL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, bits_reverse_L_rule, c)
        DFA_PRODUCTION(IREGL, bits_reverse_L_rule, c)
        DFA_PRODUCTION(IREGL_R0, bits_reverse_L_rule, c)
        DFA_PRODUCTION(IREGL_R11, bits_reverse_L_rule, c)
    }
}
void  State::_sub_Op_ReverseV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 6495 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 12314 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vreverse_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vreverse_rule, c)
      }
    }
}
void  State::_sub_Op_RoundDoubleMode(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREGD, roundD_reg_rule, c)
    }
}
void  State::_sub_Op_RoundDoubleModeV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 6022 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_DOUBLE
#line 12337 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREG, vroundD_rule, c)
    }
}
void  State::_sub_Op_RotateLeft(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, rolL_reg_rule, c)
        DFA_PRODUCTION(IREGL, rolL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, rolL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, rolL_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, rolI_reg_rule, c)
        DFA_PRODUCTION(IREGI, rolI_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, rolI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, rolI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, rolI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, rolI_reg_rule, c)
    }
}
void  State::_sub_Op_RotateRight(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, rorL_reg_rule, c)
        DFA_PRODUCTION(IREGL, rorL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, rorL_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, rorL_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, rorI_reg_rule, c)
        DFA_PRODUCTION(IREGI, rorI_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, rorI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, rorI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, rorI_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, rorI_reg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, rorL_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, rorL_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, rorL_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, rorL_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, rorI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, rorI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, rorI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, rorI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, rorI_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, rorI_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_ROTATERIGHT_IREGL_IMMI, _RotateRight_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_ROTATERIGHT_IREGIORL2I_IMMI, _RotateRight_iRegIorL2I_immI_rule, c)
    }
}
void  State::_sub_Op_SafePoint(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, safePoint_rule, c)
    }
}
void  State::_sub_Op_ShenandoahCompareAndExchangeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 174 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12439 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGPNOSP, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(THREAD_REGP, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(INDIRECT, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
        DFA_PRODUCTION(IREGP_R0, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R1, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R2, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R3, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R4, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R5, compareAndExchangePAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGP_R10, compareAndExchangePAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGPNOSP) || _cost[IREGPNOSP] > c) {
        DFA_PRODUCTION(IREGPNOSP, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION(IREGP, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c) {
        DFA_PRODUCTION(INLINE_CACHE_REGP, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(THREAD_REGP) || _cost[THREAD_REGP] > c) {
        DFA_PRODUCTION(THREAD_REGP, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c) {
        DFA_PRODUCTION(INDIRECT, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM2) || _cost[VMEM2] > c) {
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM4) || _cost[VMEM4] > c) {
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM8) || _cost[VMEM8] > c) {
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEM16) || _cost[VMEM16] > c) {
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY1) || _cost[MEMORY1] > c) {
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY2) || _cost[MEMORY2] > c) {
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY4) || _cost[MEMORY4] > c) {
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY8) || _cost[MEMORY8] > c) {
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(VMEMA) || _cost[VMEMA] > c) {
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R0) || _cost[IREGP_R0] > c) {
        DFA_PRODUCTION(IREGP_R0, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R1) || _cost[IREGP_R1] > c) {
        DFA_PRODUCTION(IREGP_R1, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R2) || _cost[IREGP_R2] > c) {
        DFA_PRODUCTION(IREGP_R2, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R3) || _cost[IREGP_R3] > c) {
        DFA_PRODUCTION(IREGP_R3, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R4) || _cost[IREGP_R4] > c) {
        DFA_PRODUCTION(IREGP_R4, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R5) || _cost[IREGP_R5] > c) {
        DFA_PRODUCTION(IREGP_R5, compareAndExchangeP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_R10) || _cost[IREGP_R10] > c) {
        DFA_PRODUCTION(IREGP_R10, compareAndExchangeP_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndExchangeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) &&
        (
#line 157 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12540 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGNNOSP, compareAndExchangeNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGN, compareAndExchangeNAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGNNOSP) || _cost[IREGNNOSP] > c) {
        DFA_PRODUCTION(IREGNNOSP, compareAndExchangeN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION(IREGN, compareAndExchangeN_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) &&
        (
#line 105 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12561 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapNAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapN_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_ShenandoahCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 88 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12602 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, compareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI, compareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, compareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R2, compareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R3, compareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R4, compareAndSwapPAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, compareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, compareAndSwapP_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_ShenandoahWeakCompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) &&
        (
#line 226 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12643 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapNAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapNAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGN_IREGN]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapN_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapN_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_ShenandoahWeakCompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) &&
        (
#line 245 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"
needs_acquiring_load_exclusive(n)
#line 12684 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP] + VOLATILE_REF_COST;
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI, weakCompareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapPAcq_shenandoah_rule, c)
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapPAcq_shenandoah_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_IREGP_IREGP]+2 * VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, weakCompareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, weakCompareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, weakCompareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, weakCompareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, weakCompareAndSwapP_shenandoah_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, weakCompareAndSwapP_shenandoah_rule, c)
      }
    }
}
void  State::_sub_Op_CopySignD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[_BINARY_VREGD_VREGD] + INSN_COST;
        DFA_PRODUCTION(VREGD, copySignD_reg_rule, c)
    }
}
void  State::_sub_Op_CopySignF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(VREGF, copySignF_reg_rule, c)
    }
}
void  State::_sub_Op_SignumD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGD_VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[_BINARY_VREGD_VREGD] + INSN_COST;
        DFA_PRODUCTION(VREGD, signumD_reg_rule, c)
    }
}
void  State::_sub_Op_SignumF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], _BINARY_VREGF_VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[_BINARY_VREGF_VREGF] + INSN_COST;
        DFA_PRODUCTION(VREGF, signumF_reg_rule, c)
    }
}
void  State::_sub_Op_SignumVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6676 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16
#line 12749 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vsignum_gt128b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6663 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 12758 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsignum_le128b_rule, c)
      }
    }
}
void  State::_sub_Op_SignumVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6676 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16
#line 12771 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vsignum_gt128b_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6663 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 12780 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsignum_le128b_0_rule, c)
      }
    }
}
void  State::_sub_Op_SqrtD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+INSN_COST * 50;
        DFA_PRODUCTION(VREGD, sqrtD_reg_rule, c)
    }
}
void  State::_sub_Op_SqrtF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+INSN_COST * 50;
        DFA_PRODUCTION(VREGF, sqrtF_reg_rule, c)
    }
}
void  State::_sub_Op_RoundF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, round_float_reg_rule, c)
        DFA_PRODUCTION(IREGI, round_float_reg_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, round_float_reg_rule, c)
        DFA_PRODUCTION(IREGI_R2, round_float_reg_rule, c)
        DFA_PRODUCTION(IREGI_R3, round_float_reg_rule, c)
        DFA_PRODUCTION(IREGI_R4, round_float_reg_rule, c)
    }
}
void  State::_sub_Op_RoundD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, round_double_reg_rule, c)
        DFA_PRODUCTION(IREGL, round_double_reg_rule, c)
        DFA_PRODUCTION(IREGL_R0, round_double_reg_rule, c)
        DFA_PRODUCTION(IREGL_R11, round_double_reg_rule, c)
    }
}
void  State::_sub_Op_StoreB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMI0] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmB0_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeB_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) && STATE__VALID_CHILD(_kids[1], IMMI0) &&
        (
#line 6959 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12836 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmB0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 6945 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12847 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeB_rule, c)
      }
    }
}
void  State::_sub_Op_StoreC(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMI0] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmC0_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeC_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) && STATE__VALID_CHILD(_kids[1], IMMI0) &&
        (
#line 6986 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12870 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmC0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY2) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 6973 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12881 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY2]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeC_rule, c)
      }
    }
}
void  State::_sub_Op_StoreCM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY1) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[MEMORY1]+_kids[1]->_cost[IMMI0] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmCM0_rule, c)
    }
}
void  State::_sub_Op_StoreD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VREGD] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeD_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) && STATE__VALID_CHILD(_kids[1], VREGD) &&
        (
#line 7128 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12904 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+_kids[1]->_cost[VREGD] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeD_rule, c)
      }
    }
}
void  State::_sub_Op_StoreF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VREGF] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeF_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], VREGF) &&
        (
#line 7111 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12921 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[VREGF] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeF_rule, c)
      }
    }
}
void  State::_sub_Op_StoreI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMI0] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmI0_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGIORL2I] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeI_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], IMMI0) &&
        (
#line 7014 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12944 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[IMMI0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmI0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) &&
        (
#line 7001 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12955 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeI_rule, c)
      }
    }
}
void  State::_sub_Op_StoreL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMML0) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMML0] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmL0_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGL] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeL_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) && STATE__VALID_CHILD(_kids[1], IMML0) &&
        (
#line 7042 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12978 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+_kids[1]->_cost[IMML0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmL0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 7028 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 12989 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeL_rule, c)
      }
    }
}
void  State::_sub_Op_StoreP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 162 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && needs_releasing_store(n) && n->as_Store()->barrier_data() != 0
#line 13002 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP]+125;
        DFA_PRODUCTION(UNIVERSE, zStorePVolatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 145 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"
UseZGC && ZGenerational && !needs_releasing_store(n) && n->as_Store()->barrier_data() != 0
#line 13011 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGP]+125;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, zStoreP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMP0) &&
        (
#line 7484 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Store()->barrier_data() == 0
#line 13022 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMP0] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmP0_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 7471 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
n->as_Store()->barrier_data() == 0
#line 13033 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGP] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeP_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) && STATE__VALID_CHILD(_kids[1], IMMP0) &&
        (
#line 7070 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n) && n->as_Store()->barrier_data() == 0
#line 13044 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+_kids[1]->_cost[IMMP0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeimmP0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY8) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 7056 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n) && n->as_Store()->barrier_data() == 0
#line 13055 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY8]+_kids[1]->_cost[IREGP] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeP_rule, c)
      }
    }
}
void  State::_sub_Op_StoreN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IMMN0] + VOLATILE_REF_COST;
        DFA_PRODUCTION(UNIVERSE, storeimmN0_volatile_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[IREGN] + VOLATILE_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeN_volatile_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], IMMN0) &&
        (
#line 7097 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 13078 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[IMMN0] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeImmN0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], IREGN) &&
        (
#line 7084 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 13089 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[IREGN] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeN_rule, c)
      }
    }
}
void  State::_sub_Op_StoreNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY4) && STATE__VALID_CHILD(_kids[1], IREGN) &&
        (
#line 7141 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
!needs_releasing_store(n)
#line 13102 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY4]+_kids[1]->_cost[IREGN] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, storeNKlass_rule, c)
    }
}
void  State::_sub_Op_StrComp(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16450 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE > 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU)
#line 13113 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, string_compareUU_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16427 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE > 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL)
#line 13122 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareUL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16404 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE > 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU)
#line 13133 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareLU_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16381 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE > 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL)
#line 13144 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareLL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16356 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU)
#line 13155 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareLU_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16336 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL)
#line 13166 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareUL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16318 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL)
#line 13177 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R4) &&
        (
#line 16300 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU)
#line 13188 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_compareU_rule, c)
      }
    }
}
void  State::_sub_Op_StrCompressedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R2) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R1_IREGI_R3) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R2]+_kids[1]->_cost[_BINARY_IREGP_R1_IREGI_R3] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, string_compress_rule, c)
    }
}
void  State::_sub_Op_StrEquals(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGP_R3) && STATE__VALID_CHILD(_kids[1], IREGI_R4) &&
        (
#line 16679 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL
#line 13207 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGP_R3]+_kids[1]->_cost[IREGI_R4] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, string_equalsL_rule, c)
    }
}
void  State::_sub_Op_StrIndexOf(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IMMI_1) &&
        (
#line 16588 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 13218 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IMMI_1] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, string_indexof_conUL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IMMI_LE_4) &&
        (
#line 16566 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 13227 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IMMI_LE_4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexof_conLL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IMMI_LE_4) &&
        (
#line 16544 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 13238 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IMMI_LE_4] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexof_conUU_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R2) &&
        (
#line 16521 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 13249 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R2] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexofUL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R2) &&
        (
#line 16497 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 13260 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R2] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexofLL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R4) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R3_IREGI_R2) &&
        (
#line 16473 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU
#line 13271 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R4]+_kids[1]->_cost[_BINARY_IREGP_R3_IREGI_R2] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexofUU_rule, c)
      }
    }
}
void  State::_sub_Op_StrIndexOfChar(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], IREGI_R3) &&
        (
#line 16663 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
UseSVE > 0 && ((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U
#line 13284 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[IREGI_R3] + INSN_COST;
        DFA_PRODUCTION(IREGI_R0, stringU_indexof_char_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], IREGI_R3) &&
        (
#line 16647 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
UseSVE > 0 && ((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L
#line 13293 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[IREGI_R3] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, stringL_indexof_char_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], IREGI_R3) &&
        (
#line 16630 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L)
#line 13304 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[IREGI_R3] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, stringL_indexof_char_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_R1_IREGI_R2) && STATE__VALID_CHILD(_kids[1], IREGI_R3) &&
        (
#line 16611 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
(UseSVE == 0) && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U)
#line 13315 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_R1_IREGI_R2]+_kids[1]->_cost[IREGI_R3] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, string_indexof_char_rule, c)
      }
    }
}
void  State::_sub_Op_StrInflatedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_R0) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_R1_IREGI_R2) ) {
      unsigned int c = _kids[0]->_cost[IREGP_R0]+_kids[1]->_cost[_BINARY_IREGP_R1_IREGI_R2] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, string_inflate_rule, c)
    }
}
void  State::_sub_Op_SubD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD];
        DFA_PRODUCTION(_SUBD_VREGD_VREGD, _SubD_vRegD_vRegD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREGD]+INSN_COST * 5;
        DFA_PRODUCTION(VREGD, subD_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF];
        DFA_PRODUCTION(_SUBF_VREGF_VREGF, _SubF_vRegF_vRegF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREGF]+INSN_COST * 5;
        DFA_PRODUCTION(VREGF, subF_reg_reg_rule, c)
    }
}
void  State::_sub_Op_SubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_65535_IMMIEXT]+1.9 * INSN_COST;
        DFA_PRODUCTION(IREGINOSP, SubExtI_uxth_and_shift_rule, c)
        DFA_PRODUCTION(IREGI, SubExtI_uxth_and_shift_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, SubExtI_uxth_and_shift_rule, c)
        DFA_PRODUCTION(IREGI_R2, SubExtI_uxth_and_shift_rule, c)
        DFA_PRODUCTION(IREGI_R3, SubExtI_uxth_and_shift_rule, c)
        DFA_PRODUCTION(IREGI_R4, SubExtI_uxth_and_shift_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__ANDI_IREGIORL2I_IMMI_255_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubExtI_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubExtI_uxtb_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_16_IMMI_16_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubExtI_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubExtI_sxth_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI__RSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubExtI_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubExtI_sxtb_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGIORL2I_IMMI_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ANDI_IREGIORL2I_IMMI_65535] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubExtI_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubExtI_uxth_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ANDI_IREGIORL2I_IMMI_255) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ANDI_IREGIORL2I_IMMI_255] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubExtI_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubExtI_uxtb_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, SubI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, SubI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, SubI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, SubI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, SubI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, SubI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, NegI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, NegI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, NegI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, NegI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, NegI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, NegI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, NegI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, NegI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, NegI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, NegI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, NegI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, NegI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, NegI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, NegI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, NegI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, NegI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, NegI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, NegI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_SUBI_IMMI0_IREGIORL2I, _SubI_immI0_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _MULI_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_MULI_IREGIORL2I_IREGIORL2I]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, msubI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, msubI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, msubI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, msubI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, msubI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, msubI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI0]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, negI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, negI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, negI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, negI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, negI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, negI_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMIADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMIADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, subI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, subI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, subI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, subI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, subI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, subI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, subI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, subI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_SubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_SUBL_IREGL_IREGL, _SubL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_4294967295_IMMIEXT]+1.9 * INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxtw_and_shift_rule, c)
        DFA_PRODUCTION(IREGL, SubExtL_uxtw_and_shift_rule, c)
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxtw_and_shift_rule, c)
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxtw_and_shift_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_65535_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxth_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxth_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__ANDL_IREGL_IMML_255_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxtb_and_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxtb_and_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__CONVI2L_IREGIORL2I__IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtI_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtI_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_32_IMMI_32_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_sxtw_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_sxtw_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_48_IMMI_48_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_sxth_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_sxth_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL__RSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56_IMMIEXT]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_sxtb_shift_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_sxtb_shift_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_4294967295) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_4294967295] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxtw_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxtw_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_65535) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_65535] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxth_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxth_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ANDL_IREGL_IMML_255) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ANDL_IREGL_IMML_255] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtL_uxtb_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtL_uxtb_and_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubExtI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubExtI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, SubL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, SubL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, SubL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, SubL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, NegL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, NegL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, NegL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, NegL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, NegL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, NegL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, NegL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, NegL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, NegL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, NegL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, NegL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, NegL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[_CONVI2L_IREGIORL2I_];
        DFA_PRODUCTION(_SUBL_IMML0__CONVI2L_IREGIORL2I_, _SubL_immL0__ConvI2L_iRegIorL2I__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGLNOSP) && STATE__VALID_CHILD(_kids[1], _MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_) ) {
      unsigned int c = _kids[0]->_cost[IREGLNOSP]+_kids[1]->_cost[_MULL__CONVI2L_IREGIORL2I___CONVI2L_IREGIORL2I_]+INSN_COST * 3;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, smsubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, smsubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, smsubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, smsubL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_SUBL_IMML0_IREGL, _SubL_immL0_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _MULL_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_MULL_IREGL_IREGL]+INSN_COST * 5;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, msubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, msubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, msubL_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, msubL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML0]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, negL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, negL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, negL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, negL_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLADDSUB) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLADDSUB] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, subL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, subL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, subL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, subL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, subL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, subL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_TailCall(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPNOSP) && STATE__VALID_CHILD(_kids[1], INLINE_CACHE_REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGPNOSP]+_kids[1]->_cost[INLINE_CACHE_REGP] + CALL_COST;
        DFA_PRODUCTION(UNIVERSE, TailCalljmpInd_rule, c)
    }
}
void  State::_sub_Op_TailJump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGPNOSP) && STATE__VALID_CHILD(_kids[1], IREGP_R0) ) {
      unsigned int c = _kids[0]->_cost[IREGPNOSP]+_kids[1]->_cost[IREGP_R0] + CALL_COST;
        DFA_PRODUCTION(UNIVERSE, TailjmpInd_rule, c)
    }
}
void  State::_sub_Op_ThreadLocal(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION(THREAD_REGP, tlsLoadP_rule, c)
        DFA_PRODUCTION(IREGP, tlsLoadP_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, tlsLoadP_rule, c)
        DFA_PRODUCTION(INDIRECT, tlsLoadP_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
    }
}
void  State::_sub_Op_URShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI_24]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION(_URSHIFTI__LSHIFTI_IREGIORL2I_IMMI_24_IMMI_24, _URShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
        DFA_PRODUCTION(IREGINOSP, ubfmwI_rule, c)
        DFA_PRODUCTION(IREGI, ubfmwI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, ubfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R2, ubfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R3, ubfmwI_rule, c)
        DFA_PRODUCTION(IREGI_R4, ubfmwI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_URSHIFTI_IREGIORL2I_IMMI, _URShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, urShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, urShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, urShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, urShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, urShiftI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, urShiftI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, urShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, urShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, urShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, urShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, urShiftI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, urShiftI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI_56) && STATE__VALID_CHILD(_kids[1], IMMI_56) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI_56]+_kids[1]->_cost[IMMI_56];
        DFA_PRODUCTION(_URSHIFTL__LSHIFTL_IREGL_IMMI_56_IMMI_56, _URShiftL__LShiftL_iRegL_immI_56_immI_56_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMMI]+INSN_COST * 2;
        DFA_PRODUCTION(IREGLNOSP, ubfmL_rule, c)
        DFA_PRODUCTION(IREGL, ubfmL_rule, c)
        DFA_PRODUCTION(IREGL_R0, ubfmL_rule, c)
        DFA_PRODUCTION(IREGL_R11, ubfmL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION(_URSHIFTL_IREGL_IMMI, _URShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, urShiftP_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, urShiftP_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, urShiftP_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, urShiftP_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, urShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, urShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, urShiftL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, urShiftL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGIORL2I]+INSN_COST * 2;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, urShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, urShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, urShiftL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, urShiftL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_XorI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMILOG) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMILOG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, xorI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI, xorI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, xorI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R2, xorI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R3, xorI_reg_imm_rule, c)
        DFA_PRODUCTION(IREGI_R4, xorI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, xorI_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I__LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I__LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I__LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI_IREGIORL2I__LSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_LSHIFTI_IREGIORL2I_IMMI];
        DFA_PRODUCTION(_XORI_IREGIORL2I__LSHIFTI_IREGIORL2I_IMMI, _XorI_iRegIorL2I__LShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__LSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI__LSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI__LSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_XORI__LSHIFTI_IREGIORL2I_IMMI_IREGIORL2I, _XorI__LShiftI_iRegIorL2I_immI_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I__ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I__ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I__ROTATERIGHT_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI_IREGIORL2I__ROTATERIGHT_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI];
        DFA_PRODUCTION(_XORI_IREGIORL2I__ROTATERIGHT_IREGIORL2I_IMMI, _XorI_iRegIorL2I__RotateRight_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI__ROTATERIGHT_IREGIORL2I_IMMI_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IREGIORL2I, _XorI__RotateRight_iRegIorL2I_immI_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I__RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I__RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I__RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI_IREGIORL2I__RSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _RSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_RSHIFTI_IREGIORL2I_IMMI];
        DFA_PRODUCTION(_XORI_IREGIORL2I__RSHIFTI_IREGIORL2I_IMMI, _XorI_iRegIorL2I__RShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__RSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI__RSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI__RSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_XORI__RSHIFTI_IREGIORL2I_IMMI_IREGIORL2I, _XorI__RShiftI_iRegIorL2I_immI_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I__URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I__URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I__URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI_IREGIORL2I__URSHIFTI_IREGIORL2I_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGIORL2I_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[_URSHIFTI_IREGIORL2I_IMMI];
        DFA_PRODUCTION(_XORI_IREGIORL2I__URSHIFTI_IREGIORL2I_IMMI, _XorI_iRegIorL2I__URShiftI_iRegIorL2I_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI__URSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+_kids[1]->_cost[IMMI_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI__URSHIFTI_IREGIORL2I_IMMI_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI__URSHIFTI_IREGIORL2I_IMMI_IREGIORL2I]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_XORI__URSHIFTI_IREGIORL2I_IMMI_IREGIORL2I, _XorI__URShiftI_iRegIorL2I_immI_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1];
        DFA_PRODUCTION(_XORI__LSHIFTI_IREGIORL2I_IMMI_IMMI_M1, _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1];
        DFA_PRODUCTION(_XORI__ROTATERIGHT_IREGIORL2I_IMMI_IMMI_M1, _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1];
        DFA_PRODUCTION(_XORI__RSHIFTI_IREGIORL2I_IMMI_IMMI_M1, _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGIORL2I_IMMI) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGIORL2I_IMMI]+_kids[1]->_cost[IMMI_M1];
        DFA_PRODUCTION(_XORI__URSHIFTI_IREGIORL2I_IMMI_IMMI_M1, _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORI_IREGIORL2I_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORI_IREGIORL2I_IREGIORL2I]+_kids[1]->_cost[IMMI_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && STATE__VALID_CHILD(_kids[1], _XORI_IREGIORL2I_IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1]+_kids[1]->_cost[_XORI_IREGIORL2I_IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, XorI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, XorI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, XorI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, XorI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, XorI_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, XorI_reg_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IREGIORL2I];
        DFA_PRODUCTION(_XORI_IREGIORL2I_IREGIORL2I, _XorI_iRegIorL2I_iRegIorL2I_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_M1];
        DFA_PRODUCTION(_XORI_IREGIORL2I_IMMI_M1, _XorI_iRegIorL2I_immI_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[IMMI_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, regI_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, regI_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, regI_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, regI_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, regI_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, regI_not_reg_rule, c)
      }
    }
}
void  State::_sub_Op_XorL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMLLOG) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMLLOG] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, xorL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL, xorL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL_R0, xorL_reg_imm_rule, c)
        DFA_PRODUCTION(IREGL_R11, xorL_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, xorL_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ROTATERIGHT_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL__LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL__LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL__LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL_IREGL__LSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI];
        DFA_PRODUCTION(_XORL_IREGL__LSHIFTL_IREGL_IMMI, _XorL_iRegL__LShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__LSHIFTL_IREGL_IMMI_IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IREGL]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL__LSHIFTL_IREGL_IMMI_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL__LSHIFTL_IREGL_IMMI_IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_LShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_LShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_XORL__LSHIFTL_IREGL_IMMI_IREGL, _XorL__LShiftL_iRegL_immI_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL__ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL__ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL__ROTATERIGHT_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL_IREGL__ROTATERIGHT_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _ROTATERIGHT_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_ROTATERIGHT_IREGL_IMMI];
        DFA_PRODUCTION(_XORL_IREGL__ROTATERIGHT_IREGL_IMMI, _XorL_iRegL__RotateRight_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__ROTATERIGHT_IREGL_IMMI_IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IREGL]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL__ROTATERIGHT_IREGL_IMMI_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL__ROTATERIGHT_IREGL_IMMI_IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RotateRight_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RotateRight_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_XORL__ROTATERIGHT_IREGL_IMMI_IREGL, _XorL__RotateRight_iRegL_immI_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL__RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL__RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL__RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL_IREGL__RSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _RSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_RSHIFTL_IREGL_IMMI];
        DFA_PRODUCTION(_XORL_IREGL__RSHIFTL_IREGL_IMMI, _XorL_iRegL__RShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__RSHIFTL_IREGL_IMMI_IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IREGL]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL__RSHIFTL_IREGL_IMMI_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL__RSHIFTL_IREGL_IMMI_IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_RShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_RShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_XORL__RSHIFTL_IREGL_IMMI_IREGL, _XorL__RShiftL_iRegL_immI_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL__URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL__URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_not_reg_2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_not_reg_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL__URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL_IREGL__URSHIFTL_IREGL_IMMI]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI];
        DFA_PRODUCTION(_XORL_IREGL__URSHIFTL_IREGL_IMMI, _XorL_iRegL__URShiftL_iRegL_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL__URSHIFTL_IREGL_IMMI_IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IREGL]+_kids[1]->_cost[IMML_M1]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_not_reg_1_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_not_reg_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL__URSHIFTL_IREGL_IMMI_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL__URSHIFTL_IREGL_IMMI_IREGL]+1.9 * INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_URShift_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_URShift_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_XORL__URSHIFTL_IREGL_IMMI_IREGL, _XorL__URShiftL_iRegL_immI_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1];
        DFA_PRODUCTION(_XORL__LSHIFTL_IREGL_IMMI_IMML_M1, _XorL__LShiftL_iRegL_immI_immL_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ROTATERIGHT_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_ROTATERIGHT_IREGL_IMMI]+_kids[1]->_cost[IMML_M1];
        DFA_PRODUCTION(_XORL__ROTATERIGHT_IREGL_IMMI_IMML_M1, _XorL__RotateRight_iRegL_immI_immL_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1];
        DFA_PRODUCTION(_XORL__RSHIFTL_IREGL_IMMI_IMML_M1, _XorL__RShiftL_iRegL_immI_immL_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI]+_kids[1]->_cost[IMML_M1];
        DFA_PRODUCTION(_XORL__URSHIFTL_IREGL_IMMI_IMML_M1, _XorL__URShiftL_iRegL_immI_immL_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _XORL_IREGL_IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[_XORL_IREGL_IREGL]+_kids[1]->_cost[IMML_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_not_reg_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_not_reg_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && STATE__VALID_CHILD(_kids[1], _XORL_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1]+_kids[1]->_cost[_XORL_IREGL_IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, XorL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, XorL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, XorL_reg_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, XorL_reg_not_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION(_XORL_IREGL_IREGL, _XorL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_M1];
        DFA_PRODUCTION(_XORL_IREGL_IMML_M1, _XorL_iRegL_immL_M1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_M1] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, regL_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, regL_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, regL_not_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, regL_not_reg_rule, c)
      }
    }
}
void  State::_sub_Op_AddVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15452 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsra_imm_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _URSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15461 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_URSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsra_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15472 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15483 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVB_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2113 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15494 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVB_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULVB_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_MULVB_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVB_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVB_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMBADDSUBV_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 674 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15517 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMBADDSUBV_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmB_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMBADDSUBV_) &&
        (
#line 674 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15528 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMBADDSUBV_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmB_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 612 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15539 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddB_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddB_rule, c)
      }
    }
}
void  State::_sub_Op_AddVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15558 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsra_imm_2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _URSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15567 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_URSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsra_imm_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15578 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15589 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVS_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2113 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15600 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVS_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULVS_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_MULVS_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVS_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVS_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMIADDSUBV_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 689 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15623 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMIADDSUBV_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmS_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMIADDSUBV_) &&
        (
#line 689 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15634 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMIADDSUBV_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmS_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 622 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15645 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddS_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddS_rule, c)
      }
    }
}
void  State::_sub_Op_AddVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15664 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsra_imm_4_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _URSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15673 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_URSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsra_imm_3_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15684 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15695 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_3_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVI_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2113 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15706 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVI_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_masked_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULVI_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_MULVI_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVI_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVI_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_3_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMIADDSUBV_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 704 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15729 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMIADDSUBV_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMIADDSUBV_) &&
        (
#line 704 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15740 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMIADDSUBV_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 632 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15751 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddI_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddI_rule, c)
      }
    }
}
void  State::_sub_Op_AddReductionVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2928 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15770 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_addI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_addI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_addI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_addI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_addI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_addI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2806 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2)))
#line 15785 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_addI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_addI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_addI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_addI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_addI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_addI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2791 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2)))
#line 15814 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_addI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_addI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_addI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_addI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_addI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_addI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_AddVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15845 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsra_imm_6_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _URSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15854 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_URSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsra_imm_5_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15865 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_6_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 15876 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasra_imm_5_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVL_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2113 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15887 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVL_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmla_masked_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _MULVL_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2101 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15898 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_MULVL_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmlaL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVL_VREG_VREG) &&
        (
#line 2101 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15909 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVL_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmlaL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMLADDSUBV_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 719 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15920 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMLADDSUBV_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMLADDSUBV_) &&
        (
#line 719 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15931 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMLADDSUBV_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddImmL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 642 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15942 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddL_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddL_rule, c)
      }
    }
}
void  State::_sub_Op_AddReductionVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2942 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 15961 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_addL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_addL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_addL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_addL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2840 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2)))
#line 15973 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_addL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_addL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_addL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_addL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2825 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2)))
#line 15993 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_addL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_addL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_addL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_addL_neon_rule, c)
      }
    }
}
void  State::_sub_Op_AddVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 652 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16015 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vaddF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddF_rule, c)
      }
    }
}
void  State::_sub_Op_AddReductionVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGF_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2956 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16032 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGF_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGF, reduce_addF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2886 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16041 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, reduce_addF_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2873 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_length(n->in(2)) == 4
#line 16052 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, reduce_add4F_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2861 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_length(n->in(2)) == 2
#line 16063 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, reduce_add2F_neon_rule, c)
      }
    }
}
void  State::_sub_Op_AddVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 662 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16076 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vaddD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vaddD_rule, c)
      }
    }
}
void  State::_sub_Op_AddReductionVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGD_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2967 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16093 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGD_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGD, reduce_addD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2914 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16102 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, reduce_addD_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2902 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 16113 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, reduce_addD_neon_rule, c)
      }
    }
}
void  State::_sub_Op_SubVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVB_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16126 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVB_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmls_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVB_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVB_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmls_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 836 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16141 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubB_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubB_rule, c)
      }
    }
}
void  State::_sub_Op_SubVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVS_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16160 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVS_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmls_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVS_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVS_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmls_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 846 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16175 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubS_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubS_rule, c)
      }
    }
}
void  State::_sub_Op_SubVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVI_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16194 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVI_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmls_masked_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVI_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVI_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmls_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 856 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16209 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubI_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubI_rule, c)
      }
    }
}
void  State::_sub_Op_SubVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__MULVL_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2203 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16228 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__MULVL_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmls_masked_2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _MULVL_VREG_VREG) &&
        (
#line 2191 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16237 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_MULVL_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmlsL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 866 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16248 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubL_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubL_rule, c)
      }
    }
}
void  State::_sub_Op_SubVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_SUBVF__BINARY_VREG_VREG_PREGGOV, _SubVF__Binary_vReg_vReg_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_SUBVF_VREG_VREG, _SubVF_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 876 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16275 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vsubF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubF_rule, c)
      }
    }
}
void  State::_sub_Op_SubVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_SUBVD__BINARY_VREG_VREG_PREGGOV, _SubVD__Binary_vReg_vReg_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_SUBVD_VREG_VREG, _SubVD_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 886 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16300 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vsubD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsubD_rule, c)
      }
    }
}
void  State::_sub_Op_MulVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_MULVB_VREG_VREG, _MulVB_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1033 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16321 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulB_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 911 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16330 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulB_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 900 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16341 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulB_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MulVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_MULVS_VREG_VREG, _MulVS_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1043 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16358 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulS_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 933 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16367 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulS_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 922 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16378 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulS_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MulVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_MULVI_VREG_VREG, _MulVI_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1053 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16395 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 955 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16404 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 944 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16415 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MulReductionVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2981 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n->in(2)) == 8 ||
            Matcher::vector_length_in_bytes(n->in(2)) == 16
#line 16429 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_mulI_rule, c)
        DFA_PRODUCTION(IREGI, reduce_mulI_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_mulI_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_mulI_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_mulI_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_mulI_rule, c)
    }
}
void  State::_sub_Op_MulVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_MULVL_VREG_VREG, _MulVL_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1063 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16450 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 987 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16459 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 968 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 16470 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulL_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MulReductionVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2997 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n->in(2)) == 16
#line 16483 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_mulL_rule, c)
        DFA_PRODUCTION(IREGL, reduce_mulL_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_mulL_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_mulL_rule, c)
    }
}
void  State::_sub_Op_MulVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1073 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16497 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulF_rule, c)
      }
    }
}
void  State::_sub_Op_MulReductionVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3009 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n->in(2)) <= 16
#line 16514 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREGF, reduce_mulF_rule, c)
    }
}
void  State::_sub_Op_MulVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1083 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16525 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmulD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmulD_rule, c)
      }
    }
}
void  State::_sub_Op_MulReductionVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3022 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n->in(2)) == 16
#line 16542 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREGD, reduce_mulD_rule, c)
    }
}
void  State::_sub_Op_MulAddVS2VI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2331 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) == 16 &&
            Matcher::vector_element_basic_type(n->in(1)) == T_SHORT
#line 16554 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vmuladdS2I_rule, c)
    }
}
void  State::_sub_Op_FmaVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVD_VREG__PREGGOV) &&
        (
#line 2314 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16565 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[_BINARY__NEGVD_VREG__PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vfnmsb_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVD_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 2297 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16574 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVD_VREG_]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmls_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__NEGVD_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVD_VREG__PREGGOV) &&
        (
#line 2280 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16585 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__NEGVD_VREG_]+_kids[1]->_cost[_BINARY__NEGVD_VREG__PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmad_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVD_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__NEGVD_VREG_) &&
        (
#line 2263 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16596 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVD_VREG_]+_kids[1]->_cost[_BINARY_VREG__NEGVD_VREG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmla_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__NEGVD_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 2245 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16607 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__NEGVD_VREG_]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmsb_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__NEGVD_VREG_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG__NEGVD_VREG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmls_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 2154 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16624 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmad_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmla_0_rule, c)
      }
    }
}
void  State::_sub_Op_FmaVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVF_VREG__PREGGOV) &&
        (
#line 2314 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16643 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[_BINARY__NEGVF_VREG__PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vfnmsb_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVF_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 2297 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16652 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVF_VREG_]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmls_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__NEGVF_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY__NEGVF_VREG__PREGGOV) &&
        (
#line 2280 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16663 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__NEGVF_VREG_]+_kids[1]->_cost[_BINARY__NEGVF_VREG__PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmad_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGVF_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__NEGVF_VREG_) &&
        (
#line 2263 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16674 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_NEGVF_VREG_]+_kids[1]->_cost[_BINARY_VREG__NEGVF_VREG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfnmla_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__NEGVF_VREG_) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 2245 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16685 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__NEGVF_VREG_]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmsb_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__NEGVF_VREG_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG__NEGVF_VREG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmls_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 2154 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16702 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmad_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfmla_rule, c)
      }
    }
}
void  State::_sub_Op_DivVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1143 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16721 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vdivF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1108 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16730 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vdivF_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1097 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16741 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vdivF_neon_rule, c)
      }
    }
}
void  State::_sub_Op_DivVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1153 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16754 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vdivD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1130 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16763 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vdivD_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1119 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16774 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vdivD_neon_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1631 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16787 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vabsB_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsB_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1641 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16804 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vabsS_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsS_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1651 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16821 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vabsI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsI_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1661 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16838 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vabsL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsL_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBVF__BINARY_VREG_VREG_PREGGOV) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1723 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16855 "dfa_aarch64.cpp"
) && /*pg*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_SUBVF__BINARY_VREG_VREG_PREGGOV]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vfabd_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBVF_VREG_VREG) && _kids[1] == nullptr &&
        (
#line 1707 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16864 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SUBVF_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfabd_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBVF_VREG_VREG) && _kids[1] == nullptr &&
        (
#line 1695 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16875 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SUBVF_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfabd_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1671 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16886 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsF_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsF_rule, c)
      }
    }
}
void  State::_sub_Op_AbsVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBVD__BINARY_VREG_VREG_PREGGOV) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1723 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16905 "dfa_aarch64.cpp"
) && /*pg*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_SUBVD__BINARY_VREG_VREG_PREGGOV]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vfabd_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBVD_VREG_VREG) && _kids[1] == nullptr &&
        (
#line 1707 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16914 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SUBVD_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfabd_sve_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SUBVD_VREG_VREG) && _kids[1] == nullptr &&
        (
#line 1695 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 16925 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SUBVD_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vfabd_neon_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1681 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16936 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsD_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vabsD_rule, c)
      }
    }
}
void  State::_sub_Op_NegVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1804 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16955 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vnegI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnegI_rule, c)
      }
    }
}
void  State::_sub_Op_NegVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1816 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16972 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vnegL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnegL_rule, c)
      }
    }
}
void  State::_sub_Op_NegVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG];
        DFA_PRODUCTION(_NEGVF_VREG_, _NegVF_vReg__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1826 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 16993 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vnegF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnegF_rule, c)
      }
    }
}
void  State::_sub_Op_NegVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG];
        DFA_PRODUCTION(_NEGVD_VREG_, _NegVD_vReg__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1836 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17014 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vnegD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnegD_rule, c)
      }
    }
}
void  State::_sub_Op_SqrtVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1892 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17031 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vsqrtD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsqrtD_rule, c)
      }
    }
}
void  State::_sub_Op_SqrtVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1882 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17048 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vsqrtF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vsqrtF_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftCntV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IMMI];
        DFA_PRODUCTION(_LSHIFTCNTV_IMMI_, _LShiftCntV_immI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(VREG, vshiftcntL_rule, c)
    }
}
void  State::_sub_Op_RShiftCntV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_POSITIVE) ) {
      unsigned int c = _kids[0]->_cost[IMMI_POSITIVE];
        DFA_PRODUCTION(_RSHIFTCNTV_IMMI_POSITIVE_, _RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
        DFA_PRODUCTION(VREG, vshiftcntR_rule, c)
    }
}
void  State::_sub_Op_LShiftVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__LSHIFTCNTV_IMMI_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2733 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17085 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__LSHIFTCNTV_IMMI_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsl_imm_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2686 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17094 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _LSHIFTCNTV_IMMI_) &&
        (
#line 2543 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17105 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_LSHIFTCNTV_IMMI_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2427 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17116 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2413 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17127 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_neon_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__LSHIFTCNTV_IMMI_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2733 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17140 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__LSHIFTCNTV_IMMI_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsl_imm_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2686 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17149 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _LSHIFTCNTV_IMMI_) &&
        (
#line 2543 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17160 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_LSHIFTCNTV_IMMI_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2427 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17171 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_sve_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2413 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17182 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_neon_0_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__LSHIFTCNTV_IMMI_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2733 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17195 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__LSHIFTCNTV_IMMI_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsl_imm_masked_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2686 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17204 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_masked_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _LSHIFTCNTV_IMMI_) &&
        (
#line 2543 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17215 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_LSHIFTCNTV_IMMI_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_imm_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2427 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17226 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_sve_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2413 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17237 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_neon_1_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__LSHIFTCNTV_IMMI_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2733 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17250 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__LSHIFTCNTV_IMMI_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsl_imm_masked_2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2686 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17259 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_masked_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _LSHIFTCNTV_IMMI_) &&
        (
#line 2543 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17270 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_LSHIFTCNTV_IMMI_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_imm_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2427 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17281 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_sve_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2413 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 17292 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsl_neon_2_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2751 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17305 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vasr_imm_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2701 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17314 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_RSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _RShiftVB_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2578 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17329 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2477 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17340 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2459 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17351 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_var_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2445 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17362 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2751 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17375 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vasr_imm_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2701 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17384 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_RSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _RShiftVS_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2578 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17399 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2477 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17410 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_sve_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2459 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17421 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_var_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2445 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17432 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_0_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2751 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17445 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vasr_imm_masked_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2701 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17454 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_masked_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_RSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _RShiftVI_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2578 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17469 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_imm_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2477 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17480 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_sve_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2459 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17491 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_var_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2445 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17502 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_1_rule, c)
      }
    }
}
void  State::_sub_Op_RShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2751 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17515 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vasr_imm_masked_2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2701 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17524 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_masked_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_RSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _RShiftVL_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2578 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17539 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_imm_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2477 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17550 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_sve_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2459 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17561 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_var_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2445 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17572 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vasr_neon_2_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2769 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17585 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsr_imm_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2716 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17594 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_URSHIFTVB_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _URShiftVB_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2604 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17609 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17620 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17631 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_var_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2494 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17642 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2769 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17655 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsr_imm_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2716 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17664 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_URSHIFTVS_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _URShiftVS_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2604 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17679 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_imm_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17690 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_sve_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17701 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_var_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2494 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17712 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_0_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2769 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17725 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsr_imm_masked_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2716 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17734 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_masked_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_URSHIFTVI_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _URShiftVI_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2604 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17749 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_imm_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17760 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_sve_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17771 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_var_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2494 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17782 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_1_rule, c)
      }
    }
}
void  State::_sub_Op_URShiftVL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2769 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17795 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__RSHIFTCNTV_IMMI_POSITIVE_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vlsr_imm_masked_2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2716 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17804 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_masked_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_];
        DFA_PRODUCTION(_URSHIFTVL_VREG__RSHIFTCNTV_IMMI_POSITIVE_, _URShiftVL_vReg__RShiftCntV_immI_positive__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _RSHIFTCNTV_IMMI_POSITIVE_) &&
        (
#line 2604 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
assert_not_var_shift(n)
#line 17819 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_RSHIFTCNTV_IMMI_POSITIVE_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_imm_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17830 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_sve_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && n->as_ShiftV()->is_var_shift()
#line 17841 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_var_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2494 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && !n->as_ShiftV()->is_var_shift()
#line 17852 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vlsr_neon_2_rule, c)
      }
    }
}
void  State::_sub_Op_AndV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__XORV__REPLICATE_IMML_M1__VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1524 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17865 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__XORV__REPLICATE_IMML_M1__VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vand_notL_masked_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__XORV_VREG__REPLICATE_IMML_M1_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1524 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17874 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__XORV_VREG__REPLICATE_IMML_M1_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notL_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__XORV__REPLICATE_IMMI_M1__VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1513 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17885 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__XORV__REPLICATE_IMMI_M1__VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_masked_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__XORV_VREG__REPLICATE_IMMI_M1_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1513 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 17896 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__XORV_VREG__REPLICATE_IMMI_M1_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV__REPLICATE_IMML_M1__VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_XORV__REPLICATE_IMML_M1__VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notL_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV__REPLICATE_IMML_M1__VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV__REPLICATE_IMML_M1__VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV_VREG__REPLICATE_IMML_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_XORV_VREG__REPLICATE_IMML_M1_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notL_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG__REPLICATE_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG__REPLICATE_IMML_M1_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV__REPLICATE_IMMI_M1__VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_XORV__REPLICATE_IMMI_M1__VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_2_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV__REPLICATE_IMMI_M1__VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV__REPLICATE_IMMI_M1__VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV_VREG__REPLICATE_IMMI_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_XORV_VREG__REPLICATE_IMMI_M1_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_1_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG__REPLICATE_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG__REPLICATE_IMMI_M1_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_notI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMLLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1229 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 17955 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMLLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMLLOG_) &&
        (
#line 1229 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 17966 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMLLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMILOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1219 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 17977 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMILOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMILOG_) &&
        (
#line 1219 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 17988 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMILOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMSLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1209 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 17999 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMSLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmS_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMSLOG_) &&
        (
#line 1209 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 18010 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMSLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmS_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMBLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1199 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18021 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMBLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmB_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMBLOG_) &&
        (
#line 1199 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18032 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMBLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vandImmB_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1185 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18043 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vand_rule, c)
      }
    }
}
void  State::_sub_Op_AndReductionV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3116 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_LONG
#line 18062 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_andL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_andL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_andL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_andL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3102 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) != T_LONG
#line 18074 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_andI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_andI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_andI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_andI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_andI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_andI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3084 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18089 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_andL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_andL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_andL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_andL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3070 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18109 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_andL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_andL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_andL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_andL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3052 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18129 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_andI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_andI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_andI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_andI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_andI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_andI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3038 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18158 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_andI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_andI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_andI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_andI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_andI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_andI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_OrV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMLLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1305 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18189 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMLLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vorImmL_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMLLOG_) &&
        (
#line 1305 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18198 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMLLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMILOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1295 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 18209 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMILOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMILOG_) &&
        (
#line 1295 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 18220 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMILOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMSLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1285 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 18231 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMSLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmS_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMSLOG_) &&
        (
#line 1285 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 18242 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMSLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmS_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMBLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1275 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18253 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMBLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmB_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMBLOG_) &&
        (
#line 1275 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18264 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMBLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vorImmB_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1261 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18275 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vor_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vor_rule, c)
      }
    }
}
void  State::_sub_Op_OrReductionV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3212 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_LONG
#line 18294 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_orL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_orL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_orL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_orL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3198 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) != T_LONG
#line 18306 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_orI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_orI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_orI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_orI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_orI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_orI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3180 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18321 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_orL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_orL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_orL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_orL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3166 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18341 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_orL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_orL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_orL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_orL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3148 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18361 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_orI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_orI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_orI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_orI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_orI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_orI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3134 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18390 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_orI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_orI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_orI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_orI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_orI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_orI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_XorV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMML_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMML_M1_]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_XORV__REPLICATE_IMML_M1__VREG, _XorV__Replicate_immL_M1__vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMML_M1_];
        DFA_PRODUCTION(_XORV_VREG__REPLICATE_IMML_M1_, _XorV_vReg__Replicate_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMI_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMI_M1_]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_XORV__REPLICATE_IMMI_M1__VREG, _XorV__Replicate_immI_M1__vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMI_M1_];
        DFA_PRODUCTION(_XORV_VREG__REPLICATE_IMMI_M1_, _XorV_vReg__Replicate_immI_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMML_M1_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1464 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18437 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMML_M1_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vnotL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMI_M1_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1453 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18446 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMI_M1_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnotI_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMML_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMML_M1_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnotL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMML_M1_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnotL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMI_M1_) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMI_M1_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnotI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMI_M1_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vnotI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1405 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 2 && !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18481 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_XORV_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, veor3_sve_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG_VREG) &&
        (
#line 1405 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 2 && !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18492 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, veor3_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _XORV_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1393 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::supports_sha3() &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18504 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_XORV_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, veor3_neon_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _XORV_VREG_VREG) &&
        (
#line 1393 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::supports_sha3() &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18516 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_XORV_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, veor3_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG];
        DFA_PRODUCTION(_XORV_VREG_VREG, _XorV_vReg_vReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMLLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1381 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18531 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMLLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmL_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMLLOG_) &&
        (
#line 1381 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18542 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMLLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMILOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1371 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 18553 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMILOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmI_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMILOG_) &&
        (
#line 1371 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 18564 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMILOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMSLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1361 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 18575 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMSLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmS_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMSLOG_) &&
        (
#line 1361 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 18586 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMSLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmS_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _REPLICATE_IMMBLOG_) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1351 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18597 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_REPLICATE_IMMBLOG_]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmB_0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], _REPLICATE_IMMBLOG_) &&
        (
#line 1351 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 18608 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[_REPLICATE_IMMBLOG_] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxorImmB_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1337 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18619 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxor_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vxor_rule, c)
      }
    }
}
void  State::_sub_Op_XorReductionV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3308 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_LONG
#line 18638 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_xorL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_xorL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_xorL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_xorL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3294 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) != T_LONG
#line 18650 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_xorI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_xorI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_xorI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_xorI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_xorI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_xorI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3276 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18665 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_xorL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_xorL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_xorL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_xorL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3262 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18685 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_xorL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_xorL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_xorL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_xorL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3244 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18705 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_xorI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_xorI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_xorI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_xorI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_xorI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_xorI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3230 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) != T_LONG
#line 18734 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_xorI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_xorI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_xorI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_xorI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_xorI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_xorI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MinV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 1971 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18765 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmin_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1949 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) != T_LONG &&
            !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18775 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmin_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1930 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) != T_LONG &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18787 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmin_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1918 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18798 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vminL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1906 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18809 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vminL_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MaxV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 2058 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 18822 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vmax_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2036 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) != T_LONG &&
            !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18832 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmax_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2017 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) != T_LONG &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n))
#line 18844 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmax_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 2005 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18855 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaxL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 1993 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n) == T_LONG
#line 18866 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaxL_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MinReductionV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGD_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3670 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_DOUBLE
#line 18879 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGD_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGD, reduce_minD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGF_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3658 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_FLOAT
#line 18888 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGF_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGF, reduce_minF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3644 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_LONG
#line 18897 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_minL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_minL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_minL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_minL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3626 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            (Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_INT)
#line 18912 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_minI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_minI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_minI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_minI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_minI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_minI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3604 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE
#line 18927 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, reduce_minD_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3579 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT
#line 18938 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, reduce_minF_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3562 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18949 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_minL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_minL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_minL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_minL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3548 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 18969 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_minL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_minL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_minL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_minL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2))) &&
            (Matcher::vector_element_basic_type(n->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(2)) == T_INT)
#line 18992 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_minI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_minI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_minI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_minI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_minI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_minI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3507 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2))) &&
            (Matcher::vector_element_basic_type(n->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(2)) == T_INT)
#line 19024 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_minI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_minI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_minI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_minI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_minI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_minI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_MaxReductionV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGD_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3490 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_DOUBLE
#line 19055 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGD_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGD, reduce_maxD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREGF_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3478 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_FLOAT
#line 19064 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREGF_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREGF, reduce_maxF_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGL_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3464 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_LONG
#line 19073 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGL_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, reduce_maxL_masked_rule, c)
        DFA_PRODUCTION(IREGL, reduce_maxL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R0, reduce_maxL_masked_rule, c)
        DFA_PRODUCTION(IREGL_R11, reduce_maxL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGIORL2I_VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 3446 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            (Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(1)->in(2)) == T_INT)
#line 19088 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGIORL2I_VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, reduce_maxI_masked_rule, c)
        DFA_PRODUCTION(IREGI, reduce_maxI_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, reduce_maxI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, reduce_maxI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, reduce_maxI_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, reduce_maxI_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3424 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE
#line 19103 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGD]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGD) || _cost[VREGD] > c) {
        DFA_PRODUCTION(VREGD, reduce_maxD_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3399 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT
#line 19114 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREGF]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREGF) || _cost[VREGF] > c) {
        DFA_PRODUCTION(VREGF, reduce_maxF_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3382 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 19125 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_maxL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_maxL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_maxL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_maxL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3368 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n->in(2)) == T_LONG
#line 19145 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, reduce_maxL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, reduce_maxL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, reduce_maxL_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, reduce_maxL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3346 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2))) &&
            (Matcher::vector_element_basic_type(n->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(2)) == T_INT)
#line 19168 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_maxI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_maxI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_maxI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_maxI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_maxI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_maxI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 3327 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(2))) &&
            (Matcher::vector_element_basic_type(n->in(2)) == T_BYTE ||
             Matcher::vector_element_basic_type(n->in(2)) == T_SHORT ||
             Matcher::vector_element_basic_type(n->in(2)) == T_INT)
#line 19200 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, reduce_maxI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, reduce_maxI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, reduce_maxI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, reduce_maxI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, reduce_maxI_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, reduce_maxI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_CompressV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 6618 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT
#line 19231 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcompressS_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 6603 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 19240 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcompressB_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 6589 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            !is_subword_type(Matcher::vector_element_basic_type(n))
#line 19252 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcompress_rule, c)
      }
    }
}
void  State::_sub_Op_CompressM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 6575 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19265 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(PREG, mcompress_rule, c)
        DFA_PRODUCTION(PREGGOV, mcompress_rule, c)
    }
}
void  State::_sub_Op_ExpandV(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, vexpand_rule, c)
    }
}
void  State::_sub_Op_LoadVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT];
        DFA_PRODUCTION(_LOADVECTOR_INDIRECT_, _LoadVector_indirect__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VMEMA) &&
        (
#line 417 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_LoadVector()->memory_size() > 16
#line 19287 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA] + INSN_COST;
        DFA_PRODUCTION(VREG, loadV_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM16) &&
        (
#line 399 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_LoadVector()->memory_size() == 16
#line 19296 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM16] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, loadV16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM8) &&
        (
#line 381 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_LoadVector()->memory_size() == 8
#line 19307 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM8] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, loadV8_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM4) &&
        (
#line 363 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_LoadVector()->memory_size() == 4
#line 19318 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM4] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, loadV4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM2) &&
        (
#line 345 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_LoadVector()->memory_size() == 2
#line 19329 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM2] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, loadV2_rule, c)
      }
    }
}
void  State::_sub_Op_LoadVectorGather(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6253 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) == 8
#line 19343 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, gather_loadD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6239 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4
#line 19353 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, gather_loadS_rule, c)
      }
    }
}
void  State::_sub_Op_LoadVectorGatherMasked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 6281 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) == 8
#line 19367 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, gather_loadD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 6269 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) == 4
#line 19377 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, gather_loadS_masked_rule, c)
      }
    }
}
void  State::_sub_Op_StoreVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _VECTORSTOREMASK_PREG_IMMI_GT_1) &&
        (
#line 5043 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n->as_StoreVector()->in(MemNode::ValueIn)->in(1)) < MaxVectorSize
#line 19391 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_VECTORSTOREMASK_PREG_IMMI_GT_1] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, storeV_vstoremask_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _VECTORSTOREMASK_PREG_IMMI_GT_1) &&
        (
#line 5021 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n->as_StoreVector()->in(MemNode::ValueIn)->in(1)) == MaxVectorSize
#line 19401 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_VECTORSTOREMASK_PREG_IMMI_GT_1] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV_vstoremask_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 434 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_StoreVector()->memory_size() > 16
#line 19412 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM16) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 408 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_StoreVector()->memory_size() == 16
#line 19423 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM16]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM8) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 390 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_StoreVector()->memory_size() == 8
#line 19434 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM8]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV8_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM4) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 372 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_StoreVector()->memory_size() == 4
#line 19445 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM4]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV4_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEM2) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 354 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->as_StoreVector()->memory_size() == 2
#line 19456 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEM2]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV2_rule, c)
      }
    }
}
void  State::_sub_Op_StoreVectorScatter(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6311 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n->in(3)->in(1))) == 8
#line 19470 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, scatter_storeD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_VREG) &&
        (
#line 6297 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n->in(3)->in(1))) == 4
#line 19480 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG_VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, scatter_storeS_rule, c)
      }
    }
}
void  State::_sub_Op_StoreVectorScatterMasked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__BINARY_VREG_PREGGOV) &&
        (
#line 6339 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n->in(3)->in(1))) == 8
#line 19494 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG__BINARY_VREG_PREGGOV] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, scatter_storeD_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG__BINARY_VREG_PREGGOV) &&
        (
#line 6327 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n->in(3)->in(1))) == 4
#line 19504 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_VREG__BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, scatter_storeS_masked_rule, c)
      }
    }
}
void  State::_sub_Op_LoadVectorMasked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], PREGGOV) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[PREGGOV];
        DFA_PRODUCTION(_LOADVECTORMASKED_VMEMA_PREGGOV, _LoadVectorMasked_vmemA_pRegGov_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 452 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19521 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(VREG, loadV_masked_rule, c)
    }
}
void  State::_sub_Op_StoreVectorMasked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], _BINARY__VECTORSTOREMASK_PREG_IMMI_GT_1_PREGGOV) &&
        (
#line 5091 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n->as_StoreVector()->in(MemNode::ValueIn)->in(1)) < MaxVectorSize
#line 19533 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[_BINARY__VECTORSTOREMASK_PREG_IMMI_GT_1_PREGGOV] + INSN_COST;
        DFA_PRODUCTION(UNIVERSE, storeVMasked_vstoremask_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], _BINARY__VECTORSTOREMASK_PREG_IMMI_GT_1_PREGGOV) &&
        (
#line 5064 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n->as_StoreVector()->in(MemNode::ValueIn)->in(1)) == MaxVectorSize
#line 19543 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[_BINARY__VECTORSTOREMASK_PREG_IMMI_GT_1_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeVMasked_vstoremask_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VMEMA) && STATE__VALID_CHILD(_kids[1], _BINARY_VREG_PREGGOV) &&
        (
#line 465 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19554 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VMEMA]+_kids[1]->_cost[_BINARY_VREG_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION(UNIVERSE, storeV_masked_rule, c)
      }
    }
}
void  State::_sub_Op_VerifyVectorAlignment(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMML_POSITIVE_BITMASKI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMML_POSITIVE_BITMASKI] + INSN_COST;
        DFA_PRODUCTION(IREGP, verify_vector_alignment_rule, c)
        DFA_PRODUCTION(INLINE_CACHE_REGP, verify_vector_alignment_rule, c)
        DFA_PRODUCTION(THREAD_REGP, verify_vector_alignment_rule, c)
        DFA_PRODUCTION(INDIRECT, verify_vector_alignment_rule, c)
        DFA_PRODUCTION(VMEM2, indirect_rule, c)
        DFA_PRODUCTION(VMEM4, indirect_rule, c)
        DFA_PRODUCTION(VMEM8, indirect_rule, c)
        DFA_PRODUCTION(VMEM16, indirect_rule, c)
        DFA_PRODUCTION(MEMORY1, indirect_rule, c)
        DFA_PRODUCTION(MEMORY2, indirect_rule, c)
        DFA_PRODUCTION(MEMORY4, indirect_rule, c)
        DFA_PRODUCTION(MEMORY8, indirect_rule, c)
        DFA_PRODUCTION(MEMORY, indirect_rule, c)
        DFA_PRODUCTION(VMEMA, indirect_rule, c)
    }
}
void  State::_sub_Op_VectorMaskGen(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _SUBL_IREGL_IREGL) &&
        (
#line 5861 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19586 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_SUBL_IREGL_IREGL] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_gen_sub_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_gen_sub_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) &&
        (
#line 5849 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19596 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMML] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_gen_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_gen_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 5837 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19610 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_gen_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_gen_L_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGIORL2I_) &&
        (
#line 5825 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19624 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGIORL2I_] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_gen_I_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_gen_I_rule, c)
      }
    }
}
void  State::_sub_Op_VectorMaskTrueCount(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _VECTORSTOREMASK_VREG_IMMI_GT_1) ) {
      unsigned int c = _kids[0]->_cost[_VECTORSTOREMASK_VREG_IMMI_GT_1] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, vstoremask_truecount_neon_rule, c)
        DFA_PRODUCTION(IREGI, vstoremask_truecount_neon_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, vstoremask_truecount_neon_rule, c)
        DFA_PRODUCTION(IREGI_R2, vstoremask_truecount_neon_rule, c)
        DFA_PRODUCTION(IREGI_R3, vstoremask_truecount_neon_rule, c)
        DFA_PRODUCTION(IREGI_R4, vstoremask_truecount_neon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5488 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19650 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, vmask_truecount_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, vmask_truecount_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, vmask_truecount_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, vmask_truecount_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, vmask_truecount_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, vmask_truecount_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5470 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 19679 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, vmask_truecount_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, vmask_truecount_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, vmask_truecount_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, vmask_truecount_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, vmask_truecount_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, vmask_truecount_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorMaskFirstTrue(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 5596 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19710 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, vmask_firsttrue_masked_rule, c)
        DFA_PRODUCTION(IREGI, vmask_firsttrue_masked_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, vmask_firsttrue_masked_rule, c)
        DFA_PRODUCTION(IREGI_R2, vmask_firsttrue_masked_rule, c)
        DFA_PRODUCTION(IREGI_R3, vmask_firsttrue_masked_rule, c)
        DFA_PRODUCTION(IREGI_R4, vmask_firsttrue_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && _kids[1] == nullptr &&
        (
#line 5581 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19725 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, vmask_firsttrue_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, vmask_firsttrue_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, vmask_firsttrue_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, vmask_firsttrue_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, vmask_firsttrue_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, vmask_firsttrue_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr &&
        (
#line 5526 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 19754 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, vmask_firsttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, vmask_firsttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, vmask_firsttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, vmask_firsttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, vmask_firsttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, vmask_firsttrue_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorMaskLastTrue(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5654 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19785 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, vmask_lasttrue_sve_rule, c)
        DFA_PRODUCTION(IREGI, vmask_lasttrue_sve_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, vmask_lasttrue_sve_rule, c)
        DFA_PRODUCTION(IREGI_R2, vmask_lasttrue_sve_rule, c)
        DFA_PRODUCTION(IREGI_R3, vmask_lasttrue_sve_rule, c)
        DFA_PRODUCTION(IREGI_R4, vmask_lasttrue_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5611 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 19800 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, vmask_lasttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, vmask_lasttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, vmask_lasttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, vmask_lasttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, vmask_lasttrue_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, vmask_lasttrue_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorMaskToLong(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5692 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 19831 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, vmask_tolong_sve_rule, c)
        DFA_PRODUCTION(IREGL, vmask_tolong_sve_rule, c)
        DFA_PRODUCTION(IREGL_R0, vmask_tolong_sve_rule, c)
        DFA_PRODUCTION(IREGL_R11, vmask_tolong_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5668 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 19843 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, vmask_tolong_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, vmask_tolong_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, vmask_tolong_neon_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, vmask_tolong_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorLongToMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_fromlong_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_fromlong_rule, c)
    }
}
void  State::_sub_Op_Replicate(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMLU7) ) {
      unsigned int c = _kids[0]->_cost[IMMLU7];
        DFA_PRODUCTION(_REPLICATE_IMMLU7_, _Replicate_immLU7__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML5) ) {
      unsigned int c = _kids[0]->_cost[IMML5];
        DFA_PRODUCTION(_REPLICATE_IMML5_, _Replicate_immL5__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMIU7) ) {
      unsigned int c = _kids[0]->_cost[IMMIU7];
        DFA_PRODUCTION(_REPLICATE_IMMIU7_, _Replicate_immIU7__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI5) ) {
      unsigned int c = _kids[0]->_cost[IMMI5];
        DFA_PRODUCTION(_REPLICATE_IMMI5_, _Replicate_immI5__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMD0) ) {
      unsigned int c = _kids[0]->_cost[IMMD0];
        DFA_PRODUCTION(_REPLICATE_IMMD0_, _Replicate_immD0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF0) ) {
      unsigned int c = _kids[0]->_cost[IMMF0];
        DFA_PRODUCTION(_REPLICATE_IMMF0_, _Replicate_immF0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML0) ) {
      unsigned int c = _kids[0]->_cost[IMML0];
        DFA_PRODUCTION(_REPLICATE_IMML0_, _Replicate_immL0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IMMI0];
        DFA_PRODUCTION(_REPLICATE_IMMI0_, _Replicate_immI0__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML8_SHIFT8) &&
        (
#line 4367 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16
#line 19904 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMML8_SHIFT8] + INSN_COST;
        DFA_PRODUCTION(VREG, replicateL_imm8_gt128b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) &&
        (
#line 4357 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) == 16
#line 19913 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMML] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateL_imm_128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI8_SHIFT8) &&
        (
#line 4344 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16 &&
            (Matcher::vector_element_basic_type(n) == T_SHORT ||
             Matcher::vector_element_basic_type(n) == T_INT)
#line 19926 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI8_SHIFT8] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateI_imm8_gt128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI8) &&
        (
#line 4332 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16 &&
            Matcher::vector_element_basic_type(n) == T_BYTE
#line 19938 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI8] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateB_imm8_gt128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) &&
        (
#line 4312 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16 &&
            Matcher::is_non_long_integral_vector(n)
#line 19950 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateI_imm_le128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGD) ) {
      unsigned int c = _kids[0]->_cost[VREGD] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateD_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREGF) ) {
      unsigned int c = _kids[0]->_cost[VREGF] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateF_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, replicateI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) ) {
      unsigned int c = _kids[0]->_cost[IMML_M1];
        DFA_PRODUCTION(_REPLICATE_IMML_M1_, _Replicate_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1];
        DFA_PRODUCTION(_REPLICATE_IMMI_M1_, _Replicate_immI_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMLLOG) ) {
      unsigned int c = _kids[0]->_cost[IMMLLOG];
        DFA_PRODUCTION(_REPLICATE_IMMLLOG_, _Replicate_immLLog__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMILOG) ) {
      unsigned int c = _kids[0]->_cost[IMMILOG];
        DFA_PRODUCTION(_REPLICATE_IMMILOG_, _Replicate_immILog__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMSLOG) ) {
      unsigned int c = _kids[0]->_cost[IMMSLOG];
        DFA_PRODUCTION(_REPLICATE_IMMSLOG_, _Replicate_immSLog__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMBLOG) ) {
      unsigned int c = _kids[0]->_cost[IMMBLOG];
        DFA_PRODUCTION(_REPLICATE_IMMBLOG_, _Replicate_immBLog__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMLADDSUBV) ) {
      unsigned int c = _kids[0]->_cost[IMMLADDSUBV];
        DFA_PRODUCTION(_REPLICATE_IMMLADDSUBV_, _Replicate_immLAddSubV__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMIADDSUBV) ) {
      unsigned int c = _kids[0]->_cost[IMMIADDSUBV];
        DFA_PRODUCTION(_REPLICATE_IMMIADDSUBV_, _Replicate_immIAddSubV__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMBADDSUBV) ) {
      unsigned int c = _kids[0]->_cost[IMMBADDSUBV];
        DFA_PRODUCTION(_REPLICATE_IMMBADDSUBV_, _Replicate_immBAddSubV__rule, c)
    }
}
void  State::_sub_Op_RoundVF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 6002 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16
#line 20023 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vround_gt128b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5987 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 20032 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vround_le128b_rule, c)
      }
    }
}
void  State::_sub_Op_RoundVD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 6002 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16
#line 20045 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vround_gt128b_0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5987 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16
#line 20054 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vround_le128b_0_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4642 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 16
#line 20067 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, extractB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI, extractB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, extractB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R2, extractB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R3, extractB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R4, extractB_index_ge16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4632 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 16
#line 20082 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extractB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extractB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extractB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extractB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extractB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extractB_index_lt16_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4617 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 16
#line 20113 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, extractUB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI, extractUB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, extractUB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R2, extractUB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R3, extractUB_index_ge16_rule, c)
        DFA_PRODUCTION(IREGI_R4, extractUB_index_ge16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4607 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 16
#line 20128 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extractUB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extractUB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extractUB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extractUB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extractUB_index_lt16_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extractUB_index_lt16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IREGI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extractUB_ireg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extractUB_ireg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extractUB_ireg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extractUB_ireg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extractUB_ireg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extractUB_ireg_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4667 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 8
#line 20183 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, extractS_index_ge8_rule, c)
        DFA_PRODUCTION(IREGI, extractS_index_ge8_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, extractS_index_ge8_rule, c)
        DFA_PRODUCTION(IREGI_R2, extractS_index_ge8_rule, c)
        DFA_PRODUCTION(IREGI_R3, extractS_index_ge8_rule, c)
        DFA_PRODUCTION(IREGI_R4, extractS_index_ge8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4657 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 8
#line 20198 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extractS_index_lt8_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extractS_index_lt8_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extractS_index_lt8_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extractS_index_lt8_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extractS_index_lt8_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extractS_index_lt8_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4692 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 4
#line 20229 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGINOSP, extractI_index_ge4_rule, c)
        DFA_PRODUCTION(IREGI, extractI_index_ge4_rule, c)
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
        DFA_PRODUCTION(IREGI_R0, extractI_index_ge4_rule, c)
        DFA_PRODUCTION(IREGI_R2, extractI_index_ge4_rule, c)
        DFA_PRODUCTION(IREGI_R3, extractI_index_ge4_rule, c)
        DFA_PRODUCTION(IREGI_R4, extractI_index_ge4_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4682 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 4
#line 20244 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGINOSP) || _cost[IREGINOSP] > c) {
        DFA_PRODUCTION(IREGINOSP, extractI_index_lt4_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION(IREGI, extractI_index_lt4_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGIORL2I) || _cost[IREGIORL2I] > c) {
        DFA_PRODUCTION(IREGIORL2I, iRegI_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R0) || _cost[IREGI_R0] > c) {
        DFA_PRODUCTION(IREGI_R0, extractI_index_lt4_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R2) || _cost[IREGI_R2] > c) {
        DFA_PRODUCTION(IREGI_R2, extractI_index_lt4_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R3) || _cost[IREGI_R3] > c) {
        DFA_PRODUCTION(IREGI_R3, extractI_index_lt4_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI_R4) || _cost[IREGI_R4] > c) {
        DFA_PRODUCTION(IREGI_R4, extractI_index_lt4_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4717 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 2
#line 20275 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(IREGLNOSP, extractL_index_ge2_rule, c)
        DFA_PRODUCTION(IREGL, extractL_index_ge2_rule, c)
        DFA_PRODUCTION(IREGL_R0, extractL_index_ge2_rule, c)
        DFA_PRODUCTION(IREGL_R11, extractL_index_ge2_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4707 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 2
#line 20287 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(IREGLNOSP) || _cost[IREGLNOSP] > c) {
        DFA_PRODUCTION(IREGLNOSP, extractL_index_lt2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION(IREGL, extractL_index_lt2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R0) || _cost[IREGL_R0] > c) {
        DFA_PRODUCTION(IREGL_R0, extractL_index_lt2_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL_R11) || _cost[IREGL_R11] > c) {
        DFA_PRODUCTION(IREGL_R11, extractL_index_lt2_rule, c)
      }
    }
}
void  State::_sub_Op_ExtractF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREGF, extractF_rule, c)
    }
}
void  State::_sub_Op_ExtractD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREGD, extractD_rule, c)
    }
}
void  State::_sub_Op_VectorMaskCmp(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMI_PREGGOV) &&
        (
#line 5321 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20321 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[_BINARY_IMMI_PREGGOV] + INSN_COST;
        DFA_PRODUCTION(PREG, vmaskcmp_masked_rule, c)
        DFA_PRODUCTION(PREGGOV, vmaskcmp_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMLU7_) && STATE__VALID_CHILD(_kids[1], IMMI_CMPU_COND) &&
        (
#line 5305 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20331 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMLU7_]+_kids[1]->_cost[IMMI_CMPU_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcmpU_immL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcmpU_immL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMML5_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5290 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20345 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMML5_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcmp_immL_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcmp_immL_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMIU7_) && STATE__VALID_CHILD(_kids[1], IMMI_CMPU_COND) &&
        (
#line 5275 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20359 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMIU7_]+_kids[1]->_cost[IMMI_CMPU_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcmpU_immI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcmpU_immI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMI5_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5260 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20373 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMI5_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcmp_immI_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcmp_immI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 5244 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20387 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcmp_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcmp_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMD0_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5230 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20401 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMD0_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
        DFA_PRODUCTION(VREG, vmaskcmp_zeroD_neon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMF0_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5216 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20410 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMF0_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcmp_zeroF_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMML0_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5202 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20421 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMML0_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcmp_zeroL_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG__REPLICATE_IMMI0_) && STATE__VALID_CHILD(_kids[1], IMMI_CMP_COND) &&
        (
#line 5188 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20432 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG__REPLICATE_IMMI0_]+_kids[1]->_cost[IMMI_CMP_COND] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcmp_zeroI_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 5172 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            (Matcher::vector_length_in_bytes(n) == 8 ||
             Matcher::vector_length_in_bytes(n) == 16)
#line 20445 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcmp_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorMaskCast(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5417 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1))
#line 20459 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(PREG, vmaskcast_narrow_sve_rule, c)
        DFA_PRODUCTION(PREGGOV, vmaskcast_narrow_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5400 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n) > Matcher::vector_length_in_bytes(n->in(1))
#line 20470 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcast_extend_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcast_extend_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5390 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))
#line 20485 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG];
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskcast_same_esize_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskcast_same_esize_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5369 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1))
#line 20500 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vmaskcast_narrow_neon_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5348 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            Matcher::vector_length_in_bytes(n) > Matcher::vector_length_in_bytes(n->in(1))
#line 20510 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcast_extend_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 5337 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)) &&
            (Matcher::vector_length_in_bytes(n) == 8 || Matcher::vector_length_in_bytes(n) == 16)
#line 20523 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG];
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vmaskcast_same_esize_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorTest(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 6116 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::overflow
#line 20537 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(RFLAGSREG, vtest_alltrue_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6099 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::overflow
#line 20547 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, vtest_alltrue_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 6085 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::ne
#line 20559 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, vtest_anytrue_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6068 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            static_cast<const VectorTestNode*>(n)->get_predicate() == BoolTest::ne
#line 20571 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(RFLAGSREG) || _cost[RFLAGSREG] > c) {
        DFA_PRODUCTION(RFLAGSREG, vtest_anytrue_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorBlend(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 5970 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20584 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vblend_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 5957 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20593 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vblend_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorRearrange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6217 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_BYTE || UseSVE > 0
#line 20606 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, rearrange_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], VREG) &&
        (
#line 6185 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            (Matcher::vector_element_basic_type(n) == T_SHORT ||
             (type2aelembytes(Matcher::vector_element_basic_type(n)) == 4 &&
              Matcher::vector_length_in_bytes(n) == 16))
#line 20618 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, rearrange_HS_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorLoadMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADVECTORMASKED_VMEMA_PREGGOV) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 4992 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) > 1
#line 20632 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADVECTORMASKED_VMEMA_PREGGOV]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(PREG, vloadmask_loadVMasked_masked_rule, c)
        DFA_PRODUCTION(PREGGOV, vloadmask_loadVMasked_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADVECTORMASKED_VMEMA_PREGGOV) && _kids[1] == nullptr &&
        (
#line 4964 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) > 1
#line 20643 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADVECTORMASKED_VMEMA_PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmask_loadVMasked_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmask_loadVMasked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADVECTOR_INDIRECT_) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 4944 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) > 1
#line 20658 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADVECTOR_INDIRECT_]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmask_loadV_masked_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmask_loadV_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADVECTOR_INDIRECT_) && _kids[1] == nullptr &&
        (
#line 4921 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            type2aelembytes(Matcher::vector_element_basic_type(n)) > 1
#line 20673 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADVECTOR_INDIRECT_] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmask_loadV_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmask_loadV_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 4840 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) != T_BYTE
#line 20687 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmask_extend_masked_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmask_extend_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 4828 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 20701 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmaskB_masked_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmaskB_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr &&
        (
#line 4814 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) != T_BYTE
#line 20715 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmask_extend_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmask_extend_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr &&
        (
#line 4802 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE
#line 20729 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vloadmaskB_sve_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vloadmaskB_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && _kids[1] == nullptr &&
        (
#line 4776 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 &&
            (Matcher::vector_length_in_bytes(n) == 8 ||
             Matcher::vector_length_in_bytes(n) == 16)
#line 20745 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vloadmask_neon_rule, c)
    }
}
void  State::_sub_Op_VectorLoadShuffle(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, loadshuffle_rule, c)
    }
}
void  State::_sub_Op_VectorLoadConst(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI0) ) {
      unsigned int c = _kids[0]->_cost[IMMI0] + INSN_COST;
        DFA_PRODUCTION(VREG, vloadcon_rule, c)
    }
}
void  State::_sub_Op_VectorStoreMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI_GT_1) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI_GT_1];
        DFA_PRODUCTION(_VECTORSTOREMASK_VREG_IMMI_GT_1, _VectorStoreMask_vReg_immI_gt_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], IMMI_GT_1) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[IMMI_GT_1];
        DFA_PRODUCTION(_VECTORSTOREMASK_PREG_IMMI_GT_1, _VectorStoreMask_pReg_immI_gt_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], IMMI_GT_1) &&
        (
#line 4904 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20776 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[IMMI_GT_1] + INSN_COST;
        DFA_PRODUCTION(VREG, vstoremask_narrow_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 4894 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 20785 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[IMMI_1] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vstoremaskB_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI_GT_1) &&
        (
#line 4870 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20796 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI_GT_1] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vstoremask_narrow_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 4857 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0
#line 20807 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG]+_kids[1]->_cost[IMMI_1] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vstoremaskB_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorReinterpret(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5448 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length(n) != Matcher::vector_length(n->in(1)) &&
            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))
#line 20822 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_reinterpret_diff_esize_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_reinterpret_diff_esize_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) &&
        (
#line 5437 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            Matcher::vector_length(n) == Matcher::vector_length(n->in(1)) &&
            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))
#line 20834 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG];
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_reinterpret_same_esize_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_reinterpret_same_esize_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3723 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) != Matcher::vector_length_in_bytes(n->in(1)) &&
            (Matcher::vector_length_in_bytes(n) > 16 ||
             Matcher::vector_length_in_bytes(n->in(1)) > 16)
#line 20850 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, reinterpret_resize_gt128b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3693 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) != Matcher::vector_length_in_bytes(n->in(1)) &&
            Matcher::vector_length_in_bytes(n) <= 16 &&
            Matcher::vector_length_in_bytes(n->in(1)) <= 16
#line 20861 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, reinterpret_resize_le128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3684 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))
#line 20872 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG];
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, reinterpret_same_size_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastB2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtBtoX_rule, c)
    }
}
void  State::_sub_Op_VectorCastS2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3867 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4
#line 20891 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtStoX_extend_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3853 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_BYTE &&
            !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 20901 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtStoB_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3839 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_BYTE &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 20913 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtStoB_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastI2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3928 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4
#line 20926 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtItoX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3912 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
(Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT) &&
            !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 20937 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtItoX_narrow_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3895 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
(Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT) &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 20950 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtItoX_narrow_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastL2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4026 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_DOUBLE
#line 20963 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtLtoD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4013 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_FLOAT
#line 20972 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtLtoF_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3997 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n) == T_FLOAT
#line 20983 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtLtoF_neon_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3980 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
(Matcher::vector_element_basic_type(n) == T_INT &&
             !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))) ||
            Matcher::vector_element_basic_type(n) == T_BYTE ||
            Matcher::vector_element_basic_type(n) == T_SHORT
#line 20997 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtLtoI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 3966 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_INT &&
            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 21009 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtLtoI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastF2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4080 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4
#line 21022 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtFtoX_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4063 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))) &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT)
#line 21033 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtFtoX_narrow_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4045 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))) &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT)
#line 21046 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtFtoX_narrow_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastD2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4185 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_FLOAT &&
            Matcher::vector_length_in_bytes(n) > 8
#line 21060 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtDtoF_gt64b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4173 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_FLOAT &&
            Matcher::vector_length_in_bytes(n) == 8
#line 21070 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtDtoF_64b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4156 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_element_basic_type(n) == T_LONG
#line 21081 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtDtoL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4139 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0 &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT ||
             Matcher::vector_element_basic_type(n) == T_INT)
#line 21095 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtDtoI_sve_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4121 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE == 0 && Matcher::vector_element_basic_type(n) == T_INT
#line 21106 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtDtoI_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastF2HF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4232 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 21119 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtFtoHF_sve_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], VREG) &&
        (
#line 4221 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1)))
#line 21128 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, vcvtFtoHF_neon_rule, c)
      }
    }
}
void  State::_sub_Op_VectorCastHF2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vcvtHFtoF_rule, c)
    }
}
void  State::_sub_Op_VectorUCastB2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vzeroExtBtoX_rule, c)
    }
}
void  State::_sub_Op_VectorUCastS2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vzeroExtStoX_rule, c)
    }
}
void  State::_sub_Op_VectorUCastI2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], VREG) ) {
      unsigned int c = _kids[0]->_cost[VREG] + INSN_COST;
        DFA_PRODUCTION(VREG, vzeroExtItoX_rule, c)
    }
}
void  State::_sub_Op_VectorInsert(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREGD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4563 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16 &&
            Matcher::vector_element_basic_type(n) == T_DOUBLE
#line 21166 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREGD]+_kids[1]->_cost[IMMI] + INSN_COST;
        DFA_PRODUCTION(VREG, insertD_gt128b_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREGD) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4547 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) == 16 &&
            Matcher::vector_element_basic_type(n) == T_DOUBLE
#line 21176 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREGD]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertD_128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREGF) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4527 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 32 &&
            Matcher::vector_element_basic_type(n) == T_FLOAT
#line 21188 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREGF]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertF_index_ge32_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREGF) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4508 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 32 &&
            Matcher::vector_length_in_bytes(n) > 16 &&
            Matcher::vector_element_basic_type(n) == T_FLOAT
#line 21201 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREGF]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertF_index_lt32_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_VREGF) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4490 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16 &&
            Matcher::vector_element_basic_type(n) == T_FLOAT
#line 21213 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_VREGF]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertF_le128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4469 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) > 16 &&
            Matcher::vector_element_basic_type(n) == T_LONG
#line 21225 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertL_gt128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4454 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) == 16 &&
            Matcher::vector_element_basic_type(n) == T_LONG
#line 21237 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_IREGL]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertL_128b_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4428 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() >= 32 &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT ||
             Matcher::vector_element_basic_type(n) == T_INT)
#line 21251 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertI_index_ge32_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4403 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
n->in(2)->get_int() < 32 &&
            Matcher::vector_length_in_bytes(n) > 16 &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT ||
             Matcher::vector_element_basic_type(n) == T_INT)
#line 21266 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertI_index_lt32_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_VREG_IREGIORL2I) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 4382 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
Matcher::vector_length_in_bytes(n) <= 16 &&
            (Matcher::vector_element_basic_type(n) == T_BYTE ||
             Matcher::vector_element_basic_type(n) == T_SHORT ||
             Matcher::vector_element_basic_type(n) == T_INT)
#line 21280 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_VREG_IREGIORL2I]+_kids[1]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(VREG) || _cost[VREG] > c) {
        DFA_PRODUCTION(VREG, insertI_le128b_rule, c)
      }
    }
}
void  State::_sub_Op_MaskAll(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 5808 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21293 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[PREGGOV] + INSN_COST;
        DFA_PRODUCTION(PREG, vmaskAllL_masked_rule, c)
        DFA_PRODUCTION(PREGGOV, vmaskAllL_masked_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && _kids[1] == nullptr &&
        (
#line 5792 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21303 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskAllL_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskAllL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) && _kids[1] == nullptr &&
        (
#line 5774 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21317 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMML] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskAll_immL_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskAll_immL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && STATE__VALID_CHILD(_kids[1], PREGGOV) &&
        (
#line 5759 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21331 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I]+_kids[1]->_cost[PREGGOV] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskAllI_masked_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskAllI_masked_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGIORL2I) && _kids[1] == nullptr &&
        (
#line 5743 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21345 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGIORL2I] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskAllI_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskAllI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI) && _kids[1] == nullptr &&
        (
#line 5725 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21359 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmaskAll_immI_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmaskAll_immI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_M1) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[IMML_M1];
        DFA_PRODUCTION(_MASKALL_IMML_M1_, _MaskAll_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_M1) && _kids[1] == nullptr ) {
      unsigned int c = _kids[0]->_cost[IMMI_M1];
        DFA_PRODUCTION(_MASKALL_IMMI_M1_, _MaskAll_immI_M1__rule, c)
    }
}
void  State::_sub_Op_AndVMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], _XORVMASK_PREG__MASKALL_IMML_M1_) &&
        (
#line 5160 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21383 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[_XORVMASK_PREG__MASKALL_IMML_M1_] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_and_notL_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_and_notL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], _XORVMASK_PREG__MASKALL_IMMI_M1_) &&
        (
#line 5150 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21393 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[_XORVMASK_PREG__MASKALL_IMMI_M1_] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_and_notI_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_and_notI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 5120 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21407 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
      if (STATE__NOT_YET_VALID(PREG) || _cost[PREG] > c) {
        DFA_PRODUCTION(PREG, vmask_and_rule, c)
      }
      if (STATE__NOT_YET_VALID(PREGGOV) || _cost[PREGGOV] > c) {
        DFA_PRODUCTION(PREGGOV, vmask_and_rule, c)
      }
    }
}
void  State::_sub_Op_OrVMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 5130 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21423 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_or_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_or_rule, c)
    }
}
void  State::_sub_Op_XorVMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], _MASKALL_IMML_M1_) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[_MASKALL_IMML_M1_];
        DFA_PRODUCTION(_XORVMASK_PREG__MASKALL_IMML_M1_, _XorVMask_pReg__MaskAll_immL_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], _MASKALL_IMMI_M1_) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[_MASKALL_IMMI_M1_];
        DFA_PRODUCTION(_XORVMASK_PREG__MASKALL_IMMI_M1_, _XorVMask_pReg__MaskAll_immI_M1__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], PREG) && STATE__VALID_CHILD(_kids[1], PREG) &&
        (
#line 5140 "/opt/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_vector.ad"
UseSVE > 0
#line 21443 "dfa_aarch64.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[PREG]+_kids[1]->_cost[PREG] + INSN_COST;
        DFA_PRODUCTION(PREG, vmask_xor_rule, c)
        DFA_PRODUCTION(PREGGOV, vmask_xor_rule, c)
    }
}
bool State::DFA(int opcode, const Node *n) {
  switch(opcode) {
  case Op_RegN: { _sub_Op_RegN(n);
    break;
  }
  case Op_RegI: { _sub_Op_RegI(n);
    break;
  }
  case Op_RegP: { _sub_Op_RegP(n);
    break;
  }
  case Op_RegF: { _sub_Op_RegF(n);
    break;
  }
  case Op_RegD: { _sub_Op_RegD(n);
    break;
  }
  case Op_RegL: { _sub_Op_RegL(n);
    break;
  }
  case Op_VecA: { _sub_Op_VecA(n);
    break;
  }
  case Op_VecD: { _sub_Op_VecD(n);
    break;
  }
  case Op_VecX: { _sub_Op_VecX(n);
    break;
  }
  case Op_RegVectMask: { _sub_Op_RegVectMask(n);
    break;
  }
  case Op_RegFlags: { _sub_Op_RegFlags(n);
    break;
  }
  case Op_AbsD: { _sub_Op_AbsD(n);
    break;
  }
  case Op_AbsF: { _sub_Op_AbsF(n);
    break;
  }
  case Op_AbsI: { _sub_Op_AbsI(n);
    break;
  }
  case Op_AbsL: { _sub_Op_AbsL(n);
    break;
  }
  case Op_AddD: { _sub_Op_AddD(n);
    break;
  }
  case Op_AddF: { _sub_Op_AddF(n);
    break;
  }
  case Op_AddI: { _sub_Op_AddI(n);
    break;
  }
  case Op_AddL: { _sub_Op_AddL(n);
    break;
  }
  case Op_AddP: { _sub_Op_AddP(n);
    break;
  }
  case Op_AndI: { _sub_Op_AndI(n);
    break;
  }
  case Op_AndL: { _sub_Op_AndL(n);
    break;
  }
  case Op_AryEq: { _sub_Op_AryEq(n);
    break;
  }
  case Op_Binary: { _sub_Op_Binary(n);
    break;
  }
  case Op_Bool: { _sub_Op_Bool(n);
    break;
  }
  case Op_ReverseBytesI: { _sub_Op_ReverseBytesI(n);
    break;
  }
  case Op_ReverseBytesL: { _sub_Op_ReverseBytesL(n);
    break;
  }
  case Op_ReverseBytesUS: { _sub_Op_ReverseBytesUS(n);
    break;
  }
  case Op_ReverseBytesS: { _sub_Op_ReverseBytesS(n);
    break;
  }
  case Op_ReverseBytesV: { _sub_Op_ReverseBytesV(n);
    break;
  }
  case Op_CacheWB: { _sub_Op_CacheWB(n);
    break;
  }
  case Op_CacheWBPreSync: { _sub_Op_CacheWBPreSync(n);
    break;
  }
  case Op_CacheWBPostSync: { _sub_Op_CacheWBPostSync(n);
    break;
  }
  case Op_CallDynamicJava: { _sub_Op_CallDynamicJava(n);
    break;
  }
  case Op_CallLeaf: { _sub_Op_CallLeaf(n);
    break;
  }
  case Op_CallLeafNoFP: { _sub_Op_CallLeafNoFP(n);
    break;
  }
  case Op_CallRuntime: { _sub_Op_CallRuntime(n);
    break;
  }
  case Op_CallStaticJava: { _sub_Op_CallStaticJava(n);
    break;
  }
  case Op_CastDD: { _sub_Op_CastDD(n);
    break;
  }
  case Op_CastFF: { _sub_Op_CastFF(n);
    break;
  }
  case Op_CastII: { _sub_Op_CastII(n);
    break;
  }
  case Op_CastLL: { _sub_Op_CastLL(n);
    break;
  }
  case Op_CastVV: { _sub_Op_CastVV(n);
    break;
  }
  case Op_CastX2P: { _sub_Op_CastX2P(n);
    break;
  }
  case Op_CastP2X: { _sub_Op_CastP2X(n);
    break;
  }
  case Op_CastPP: { _sub_Op_CastPP(n);
    break;
  }
  case Op_CheckCastPP: { _sub_Op_CheckCastPP(n);
    break;
  }
  case Op_ClearArray: { _sub_Op_ClearArray(n);
    break;
  }
  case Op_CompressBits: { _sub_Op_CompressBits(n);
    break;
  }
  case Op_ExpandBits: { _sub_Op_ExpandBits(n);
    break;
  }
  case Op_CompressBitsV: { _sub_Op_CompressBitsV(n);
    break;
  }
  case Op_ExpandBitsV: { _sub_Op_ExpandBitsV(n);
    break;
  }
  case Op_CMoveD: { _sub_Op_CMoveD(n);
    break;
  }
  case Op_CMoveF: { _sub_Op_CMoveF(n);
    break;
  }
  case Op_CMoveI: { _sub_Op_CMoveI(n);
    break;
  }
  case Op_CMoveL: { _sub_Op_CMoveL(n);
    break;
  }
  case Op_CMoveP: { _sub_Op_CMoveP(n);
    break;
  }
  case Op_CMoveN: { _sub_Op_CMoveN(n);
    break;
  }
  case Op_CmpN: { _sub_Op_CmpN(n);
    break;
  }
  case Op_CmpD: { _sub_Op_CmpD(n);
    break;
  }
  case Op_CmpD3: { _sub_Op_CmpD3(n);
    break;
  }
  case Op_CmpF: { _sub_Op_CmpF(n);
    break;
  }
  case Op_CmpF3: { _sub_Op_CmpF3(n);
    break;
  }
  case Op_CmpI: { _sub_Op_CmpI(n);
    break;
  }
  case Op_CmpL: { _sub_Op_CmpL(n);
    break;
  }
  case Op_CmpL3: { _sub_Op_CmpL3(n);
    break;
  }
  case Op_CmpLTMask: { _sub_Op_CmpLTMask(n);
    break;
  }
  case Op_CmpP: { _sub_Op_CmpP(n);
    break;
  }
  case Op_CmpU: { _sub_Op_CmpU(n);
    break;
  }
  case Op_CmpU3: { _sub_Op_CmpU3(n);
    break;
  }
  case Op_CmpUL: { _sub_Op_CmpUL(n);
    break;
  }
  case Op_CmpUL3: { _sub_Op_CmpUL3(n);
    break;
  }
  case Op_CompareAndSwapB: { _sub_Op_CompareAndSwapB(n);
    break;
  }
  case Op_CompareAndSwapS: { _sub_Op_CompareAndSwapS(n);
    break;
  }
  case Op_CompareAndSwapI: { _sub_Op_CompareAndSwapI(n);
    break;
  }
  case Op_CompareAndSwapL: { _sub_Op_CompareAndSwapL(n);
    break;
  }
  case Op_CompareAndSwapP: { _sub_Op_CompareAndSwapP(n);
    break;
  }
  case Op_CompareAndSwapN: { _sub_Op_CompareAndSwapN(n);
    break;
  }
  case Op_WeakCompareAndSwapB: { _sub_Op_WeakCompareAndSwapB(n);
    break;
  }
  case Op_WeakCompareAndSwapS: { _sub_Op_WeakCompareAndSwapS(n);
    break;
  }
  case Op_WeakCompareAndSwapI: { _sub_Op_WeakCompareAndSwapI(n);
    break;
  }
  case Op_WeakCompareAndSwapL: { _sub_Op_WeakCompareAndSwapL(n);
    break;
  }
  case Op_WeakCompareAndSwapP: { _sub_Op_WeakCompareAndSwapP(n);
    break;
  }
  case Op_WeakCompareAndSwapN: { _sub_Op_WeakCompareAndSwapN(n);
    break;
  }
  case Op_CompareAndExchangeB: { _sub_Op_CompareAndExchangeB(n);
    break;
  }
  case Op_CompareAndExchangeS: { _sub_Op_CompareAndExchangeS(n);
    break;
  }
  case Op_CompareAndExchangeI: { _sub_Op_CompareAndExchangeI(n);
    break;
  }
  case Op_CompareAndExchangeL: { _sub_Op_CompareAndExchangeL(n);
    break;
  }
  case Op_CompareAndExchangeP: { _sub_Op_CompareAndExchangeP(n);
    break;
  }
  case Op_CompareAndExchangeN: { _sub_Op_CompareAndExchangeN(n);
    break;
  }
  case Op_GetAndAddI: { _sub_Op_GetAndAddI(n);
    break;
  }
  case Op_GetAndAddL: { _sub_Op_GetAndAddL(n);
    break;
  }
  case Op_GetAndSetI: { _sub_Op_GetAndSetI(n);
    break;
  }
  case Op_GetAndSetL: { _sub_Op_GetAndSetL(n);
    break;
  }
  case Op_GetAndSetP: { _sub_Op_GetAndSetP(n);
    break;
  }
  case Op_GetAndSetN: { _sub_Op_GetAndSetN(n);
    break;
  }
  case Op_ConN: { _sub_Op_ConN(n);
    break;
  }
  case Op_ConNKlass: { _sub_Op_ConNKlass(n);
    break;
  }
  case Op_ConD: { _sub_Op_ConD(n);
    break;
  }
  case Op_ConF: { _sub_Op_ConF(n);
    break;
  }
  case Op_ConI: { _sub_Op_ConI(n);
    break;
  }
  case Op_ConL: { _sub_Op_ConL(n);
    break;
  }
  case Op_ConP: { _sub_Op_ConP(n);
    break;
  }
  case Op_ConvD2F: { _sub_Op_ConvD2F(n);
    break;
  }
  case Op_ConvD2I: { _sub_Op_ConvD2I(n);
    break;
  }
  case Op_ConvD2L: { _sub_Op_ConvD2L(n);
    break;
  }
  case Op_ConvF2D: { _sub_Op_ConvF2D(n);
    break;
  }
  case Op_ConvF2I: { _sub_Op_ConvF2I(n);
    break;
  }
  case Op_ConvF2L: { _sub_Op_ConvF2L(n);
    break;
  }
  case Op_ConvI2D: { _sub_Op_ConvI2D(n);
    break;
  }
  case Op_ConvI2F: { _sub_Op_ConvI2F(n);
    break;
  }
  case Op_ConvI2L: { _sub_Op_ConvI2L(n);
    break;
  }
  case Op_ConvL2D: { _sub_Op_ConvL2D(n);
    break;
  }
  case Op_ConvL2F: { _sub_Op_ConvL2F(n);
    break;
  }
  case Op_ConvL2I: { _sub_Op_ConvL2I(n);
    break;
  }
  case Op_ConvF2HF: { _sub_Op_ConvF2HF(n);
    break;
  }
  case Op_ConvHF2F: { _sub_Op_ConvHF2F(n);
    break;
  }
  case Op_CountedLoopEnd: { _sub_Op_CountedLoopEnd(n);
    break;
  }
  case Op_CountLeadingZerosI: { _sub_Op_CountLeadingZerosI(n);
    break;
  }
  case Op_CountLeadingZerosL: { _sub_Op_CountLeadingZerosL(n);
    break;
  }
  case Op_CountLeadingZerosV: { _sub_Op_CountLeadingZerosV(n);
    break;
  }
  case Op_CountTrailingZerosI: { _sub_Op_CountTrailingZerosI(n);
    break;
  }
  case Op_CountTrailingZerosL: { _sub_Op_CountTrailingZerosL(n);
    break;
  }
  case Op_CountTrailingZerosV: { _sub_Op_CountTrailingZerosV(n);
    break;
  }
  case Op_CreateEx: { _sub_Op_CreateEx(n);
    break;
  }
  case Op_DecodeN: { _sub_Op_DecodeN(n);
    break;
  }
  case Op_DecodeNKlass: { _sub_Op_DecodeNKlass(n);
    break;
  }
  case Op_DivD: { _sub_Op_DivD(n);
    break;
  }
  case Op_DivF: { _sub_Op_DivF(n);
    break;
  }
  case Op_DivI: { _sub_Op_DivI(n);
    break;
  }
  case Op_DivL: { _sub_Op_DivL(n);
    break;
  }
  case Op_UDivI: { _sub_Op_UDivI(n);
    break;
  }
  case Op_UDivL: { _sub_Op_UDivL(n);
    break;
  }
  case Op_EncodeISOArray: { _sub_Op_EncodeISOArray(n);
    break;
  }
  case Op_EncodeP: { _sub_Op_EncodeP(n);
    break;
  }
  case Op_EncodePKlass: { _sub_Op_EncodePKlass(n);
    break;
  }
  case Op_FastLock: { _sub_Op_FastLock(n);
    break;
  }
  case Op_FastUnlock: { _sub_Op_FastUnlock(n);
    break;
  }
  case Op_FmaD: { _sub_Op_FmaD(n);
    break;
  }
  case Op_FmaF: { _sub_Op_FmaF(n);
    break;
  }
  case Op_Goto: { _sub_Op_Goto(n);
    break;
  }
  case Op_Halt: { _sub_Op_Halt(n);
    break;
  }
  case Op_CountPositives: { _sub_Op_CountPositives(n);
    break;
  }
  case Op_If: { _sub_Op_If(n);
    break;
  }
  case Op_LShiftI: { _sub_Op_LShiftI(n);
    break;
  }
  case Op_LShiftL: { _sub_Op_LShiftL(n);
    break;
  }
  case Op_LoadB: { _sub_Op_LoadB(n);
    break;
  }
  case Op_LoadUB: { _sub_Op_LoadUB(n);
    break;
  }
  case Op_LoadUS: { _sub_Op_LoadUS(n);
    break;
  }
  case Op_LoadD: { _sub_Op_LoadD(n);
    break;
  }
  case Op_LoadF: { _sub_Op_LoadF(n);
    break;
  }
  case Op_LoadI: { _sub_Op_LoadI(n);
    break;
  }
  case Op_LoadKlass: { _sub_Op_LoadKlass(n);
    break;
  }
  case Op_LoadNKlass: { _sub_Op_LoadNKlass(n);
    break;
  }
  case Op_LoadL: { _sub_Op_LoadL(n);
    break;
  }
  case Op_LoadP: { _sub_Op_LoadP(n);
    break;
  }
  case Op_LoadN: { _sub_Op_LoadN(n);
    break;
  }
  case Op_LoadRange: { _sub_Op_LoadRange(n);
    break;
  }
  case Op_LoadS: { _sub_Op_LoadS(n);
    break;
  }
  case Op_MulAddS2I: { _sub_Op_MulAddS2I(n);
    break;
  }
  case Op_MaxI: { _sub_Op_MaxI(n);
    break;
  }
  case Op_MaxD: { _sub_Op_MaxD(n);
    break;
  }
  case Op_MaxF: { _sub_Op_MaxF(n);
    break;
  }
  case Op_MemBarAcquire: { _sub_Op_MemBarAcquire(n);
    break;
  }
  case Op_LoadFence: { _sub_Op_LoadFence(n);
    break;
  }
  case Op_MemBarAcquireLock: { _sub_Op_MemBarAcquireLock(n);
    break;
  }
  case Op_MemBarRelease: { _sub_Op_MemBarRelease(n);
    break;
  }
  case Op_StoreFence: { _sub_Op_StoreFence(n);
    break;
  }
  case Op_StoreStoreFence: { _sub_Op_StoreStoreFence(n);
    break;
  }
  case Op_MemBarReleaseLock: { _sub_Op_MemBarReleaseLock(n);
    break;
  }
  case Op_MemBarVolatile: { _sub_Op_MemBarVolatile(n);
    break;
  }
  case Op_MemBarStoreStore: { _sub_Op_MemBarStoreStore(n);
    break;
  }
  case Op_MinI: { _sub_Op_MinI(n);
    break;
  }
  case Op_MinF: { _sub_Op_MinF(n);
    break;
  }
  case Op_MinD: { _sub_Op_MinD(n);
    break;
  }
  case Op_ModI: { _sub_Op_ModI(n);
    break;
  }
  case Op_ModL: { _sub_Op_ModL(n);
    break;
  }
  case Op_UModI: { _sub_Op_UModI(n);
    break;
  }
  case Op_UModL: { _sub_Op_UModL(n);
    break;
  }
  case Op_MoveI2F: { _sub_Op_MoveI2F(n);
    break;
  }
  case Op_MoveF2I: { _sub_Op_MoveF2I(n);
    break;
  }
  case Op_MoveL2D: { _sub_Op_MoveL2D(n);
    break;
  }
  case Op_MoveD2L: { _sub_Op_MoveD2L(n);
    break;
  }
  case Op_MulD: { _sub_Op_MulD(n);
    break;
  }
  case Op_MulF: { _sub_Op_MulF(n);
    break;
  }
  case Op_MulHiL: { _sub_Op_MulHiL(n);
    break;
  }
  case Op_UMulHiL: { _sub_Op_UMulHiL(n);
    break;
  }
  case Op_MulI: { _sub_Op_MulI(n);
    break;
  }
  case Op_MulL: { _sub_Op_MulL(n);
    break;
  }
  case Op_NegD: { _sub_Op_NegD(n);
    break;
  }
  case Op_NegF: { _sub_Op_NegF(n);
    break;
  }
  case Op_OnSpinWait: { _sub_Op_OnSpinWait(n);
    break;
  }
  case Op_OrI: { _sub_Op_OrI(n);
    break;
  }
  case Op_OrL: { _sub_Op_OrL(n);
    break;
  }
  case Op_OverflowAddI: { _sub_Op_OverflowAddI(n);
    break;
  }
  case Op_OverflowSubI: { _sub_Op_OverflowSubI(n);
    break;
  }
  case Op_OverflowMulI: { _sub_Op_OverflowMulI(n);
    break;
  }
  case Op_OverflowAddL: { _sub_Op_OverflowAddL(n);
    break;
  }
  case Op_OverflowSubL: { _sub_Op_OverflowSubL(n);
    break;
  }
  case Op_OverflowMulL: { _sub_Op_OverflowMulL(n);
    break;
  }
  case Op_PartialSubtypeCheck: { _sub_Op_PartialSubtypeCheck(n);
    break;
  }
  case Op_PopCountI: { _sub_Op_PopCountI(n);
    break;
  }
  case Op_PopCountL: { _sub_Op_PopCountL(n);
    break;
  }
  case Op_PopCountVI: { _sub_Op_PopCountVI(n);
    break;
  }
  case Op_PopCountVL: { _sub_Op_PopCountVL(n);
    break;
  }
  case Op_PopulateIndex: { _sub_Op_PopulateIndex(n);
    break;
  }
  case Op_PrefetchAllocation: { _sub_Op_PrefetchAllocation(n);
    break;
  }
  case Op_RShiftI: { _sub_Op_RShiftI(n);
    break;
  }
  case Op_RShiftL: { _sub_Op_RShiftL(n);
    break;
  }
  case Op_Rethrow: { _sub_Op_Rethrow(n);
    break;
  }
  case Op_Return: { _sub_Op_Return(n);
    break;
  }
  case Op_ReverseI: { _sub_Op_ReverseI(n);
    break;
  }
  case Op_ReverseL: { _sub_Op_ReverseL(n);
    break;
  }
  case Op_ReverseV: { _sub_Op_ReverseV(n);
    break;
  }
  case Op_RoundDoubleMode: { _sub_Op_RoundDoubleMode(n);
    break;
  }
  case Op_RoundDoubleModeV: { _sub_Op_RoundDoubleModeV(n);
    break;
  }
  case Op_RotateLeft: { _sub_Op_RotateLeft(n);
    break;
  }
  case Op_RotateRight: { _sub_Op_RotateRight(n);
    break;
  }
  case Op_SafePoint: { _sub_Op_SafePoint(n);
    break;
  }
  case Op_ShenandoahCompareAndExchangeP: { _sub_Op_ShenandoahCompareAndExchangeP(n);
    break;
  }
  case Op_ShenandoahCompareAndExchangeN: { _sub_Op_ShenandoahCompareAndExchangeN(n);
    break;
  }
  case Op_ShenandoahCompareAndSwapN: { _sub_Op_ShenandoahCompareAndSwapN(n);
    break;
  }
  case Op_ShenandoahCompareAndSwapP: { _sub_Op_ShenandoahCompareAndSwapP(n);
    break;
  }
  case Op_ShenandoahWeakCompareAndSwapN: { _sub_Op_ShenandoahWeakCompareAndSwapN(n);
    break;
  }
  case Op_ShenandoahWeakCompareAndSwapP: { _sub_Op_ShenandoahWeakCompareAndSwapP(n);
    break;
  }
  case Op_CopySignD: { _sub_Op_CopySignD(n);
    break;
  }
  case Op_CopySignF: { _sub_Op_CopySignF(n);
    break;
  }
  case Op_SignumD: { _sub_Op_SignumD(n);
    break;
  }
  case Op_SignumF: { _sub_Op_SignumF(n);
    break;
  }
  case Op_SignumVF: { _sub_Op_SignumVF(n);
    break;
  }
  case Op_SignumVD: { _sub_Op_SignumVD(n);
    break;
  }
  case Op_SqrtD: { _sub_Op_SqrtD(n);
    break;
  }
  case Op_SqrtF: { _sub_Op_SqrtF(n);
    break;
  }
  case Op_RoundF: { _sub_Op_RoundF(n);
    break;
  }
  case Op_RoundD: { _sub_Op_RoundD(n);
    break;
  }
  case Op_StoreB: { _sub_Op_StoreB(n);
    break;
  }
  case Op_StoreC: { _sub_Op_StoreC(n);
    break;
  }
  case Op_StoreCM: { _sub_Op_StoreCM(n);
    break;
  }
  case Op_StoreD: { _sub_Op_StoreD(n);
    break;
  }
  case Op_StoreF: { _sub_Op_StoreF(n);
    break;
  }
  case Op_StoreI: { _sub_Op_StoreI(n);
    break;
  }
  case Op_StoreL: { _sub_Op_StoreL(n);
    break;
  }
  case Op_StoreP: { _sub_Op_StoreP(n);
    break;
  }
  case Op_StoreN: { _sub_Op_StoreN(n);
    break;
  }
  case Op_StoreNKlass: { _sub_Op_StoreNKlass(n);
    break;
  }
  case Op_StrComp: { _sub_Op_StrComp(n);
    break;
  }
  case Op_StrCompressedCopy: { _sub_Op_StrCompressedCopy(n);
    break;
  }
  case Op_StrEquals: { _sub_Op_StrEquals(n);
    break;
  }
  case Op_StrIndexOf: { _sub_Op_StrIndexOf(n);
    break;
  }
  case Op_StrIndexOfChar: { _sub_Op_StrIndexOfChar(n);
    break;
  }
  case Op_StrInflatedCopy: { _sub_Op_StrInflatedCopy(n);
    break;
  }
  case Op_SubD: { _sub_Op_SubD(n);
    break;
  }
  case Op_SubF: { _sub_Op_SubF(n);
    break;
  }
  case Op_SubI: { _sub_Op_SubI(n);
    break;
  }
  case Op_SubL: { _sub_Op_SubL(n);
    break;
  }
  case Op_TailCall: { _sub_Op_TailCall(n);
    break;
  }
  case Op_TailJump: { _sub_Op_TailJump(n);
    break;
  }
  case Op_ThreadLocal: { _sub_Op_ThreadLocal(n);
    break;
  }
  case Op_URShiftI: { _sub_Op_URShiftI(n);
    break;
  }
  case Op_URShiftL: { _sub_Op_URShiftL(n);
    break;
  }
  case Op_XorI: { _sub_Op_XorI(n);
    break;
  }
  case Op_XorL: { _sub_Op_XorL(n);
    break;
  }
  case Op_AddVB: { _sub_Op_AddVB(n);
    break;
  }
  case Op_AddVS: { _sub_Op_AddVS(n);
    break;
  }
  case Op_AddVI: { _sub_Op_AddVI(n);
    break;
  }
  case Op_AddReductionVI: { _sub_Op_AddReductionVI(n);
    break;
  }
  case Op_AddVL: { _sub_Op_AddVL(n);
    break;
  }
  case Op_AddReductionVL: { _sub_Op_AddReductionVL(n);
    break;
  }
  case Op_AddVF: { _sub_Op_AddVF(n);
    break;
  }
  case Op_AddReductionVF: { _sub_Op_AddReductionVF(n);
    break;
  }
  case Op_AddVD: { _sub_Op_AddVD(n);
    break;
  }
  case Op_AddReductionVD: { _sub_Op_AddReductionVD(n);
    break;
  }
  case Op_SubVB: { _sub_Op_SubVB(n);
    break;
  }
  case Op_SubVS: { _sub_Op_SubVS(n);
    break;
  }
  case Op_SubVI: { _sub_Op_SubVI(n);
    break;
  }
  case Op_SubVL: { _sub_Op_SubVL(n);
    break;
  }
  case Op_SubVF: { _sub_Op_SubVF(n);
    break;
  }
  case Op_SubVD: { _sub_Op_SubVD(n);
    break;
  }
  case Op_MulVB: { _sub_Op_MulVB(n);
    break;
  }
  case Op_MulVS: { _sub_Op_MulVS(n);
    break;
  }
  case Op_MulVI: { _sub_Op_MulVI(n);
    break;
  }
  case Op_MulReductionVI: { _sub_Op_MulReductionVI(n);
    break;
  }
  case Op_MulVL: { _sub_Op_MulVL(n);
    break;
  }
  case Op_MulReductionVL: { _sub_Op_MulReductionVL(n);
    break;
  }
  case Op_MulVF: { _sub_Op_MulVF(n);
    break;
  }
  case Op_MulReductionVF: { _sub_Op_MulReductionVF(n);
    break;
  }
  case Op_MulVD: { _sub_Op_MulVD(n);
    break;
  }
  case Op_MulReductionVD: { _sub_Op_MulReductionVD(n);
    break;
  }
  case Op_MulAddVS2VI: { _sub_Op_MulAddVS2VI(n);
    break;
  }
  case Op_FmaVD: { _sub_Op_FmaVD(n);
    break;
  }
  case Op_FmaVF: { _sub_Op_FmaVF(n);
    break;
  }
  case Op_DivVF: { _sub_Op_DivVF(n);
    break;
  }
  case Op_DivVD: { _sub_Op_DivVD(n);
    break;
  }
  case Op_AbsVB: { _sub_Op_AbsVB(n);
    break;
  }
  case Op_AbsVS: { _sub_Op_AbsVS(n);
    break;
  }
  case Op_AbsVI: { _sub_Op_AbsVI(n);
    break;
  }
  case Op_AbsVL: { _sub_Op_AbsVL(n);
    break;
  }
  case Op_AbsVF: { _sub_Op_AbsVF(n);
    break;
  }
  case Op_AbsVD: { _sub_Op_AbsVD(n);
    break;
  }
  case Op_NegVI: { _sub_Op_NegVI(n);
    break;
  }
  case Op_NegVL: { _sub_Op_NegVL(n);
    break;
  }
  case Op_NegVF: { _sub_Op_NegVF(n);
    break;
  }
  case Op_NegVD: { _sub_Op_NegVD(n);
    break;
  }
  case Op_SqrtVD: { _sub_Op_SqrtVD(n);
    break;
  }
  case Op_SqrtVF: { _sub_Op_SqrtVF(n);
    break;
  }
  case Op_LShiftCntV: { _sub_Op_LShiftCntV(n);
    break;
  }
  case Op_RShiftCntV: { _sub_Op_RShiftCntV(n);
    break;
  }
  case Op_LShiftVB: { _sub_Op_LShiftVB(n);
    break;
  }
  case Op_LShiftVS: { _sub_Op_LShiftVS(n);
    break;
  }
  case Op_LShiftVI: { _sub_Op_LShiftVI(n);
    break;
  }
  case Op_LShiftVL: { _sub_Op_LShiftVL(n);
    break;
  }
  case Op_RShiftVB: { _sub_Op_RShiftVB(n);
    break;
  }
  case Op_RShiftVS: { _sub_Op_RShiftVS(n);
    break;
  }
  case Op_RShiftVI: { _sub_Op_RShiftVI(n);
    break;
  }
  case Op_RShiftVL: { _sub_Op_RShiftVL(n);
    break;
  }
  case Op_URShiftVB: { _sub_Op_URShiftVB(n);
    break;
  }
  case Op_URShiftVS: { _sub_Op_URShiftVS(n);
    break;
  }
  case Op_URShiftVI: { _sub_Op_URShiftVI(n);
    break;
  }
  case Op_URShiftVL: { _sub_Op_URShiftVL(n);
    break;
  }
  case Op_AndV: { _sub_Op_AndV(n);
    break;
  }
  case Op_AndReductionV: { _sub_Op_AndReductionV(n);
    break;
  }
  case Op_OrV: { _sub_Op_OrV(n);
    break;
  }
  case Op_OrReductionV: { _sub_Op_OrReductionV(n);
    break;
  }
  case Op_XorV: { _sub_Op_XorV(n);
    break;
  }
  case Op_XorReductionV: { _sub_Op_XorReductionV(n);
    break;
  }
  case Op_MinV: { _sub_Op_MinV(n);
    break;
  }
  case Op_MaxV: { _sub_Op_MaxV(n);
    break;
  }
  case Op_MinReductionV: { _sub_Op_MinReductionV(n);
    break;
  }
  case Op_MaxReductionV: { _sub_Op_MaxReductionV(n);
    break;
  }
  case Op_CompressV: { _sub_Op_CompressV(n);
    break;
  }
  case Op_CompressM: { _sub_Op_CompressM(n);
    break;
  }
  case Op_ExpandV: { _sub_Op_ExpandV(n);
    break;
  }
  case Op_LoadVector: { _sub_Op_LoadVector(n);
    break;
  }
  case Op_LoadVectorGather: { _sub_Op_LoadVectorGather(n);
    break;
  }
  case Op_LoadVectorGatherMasked: { _sub_Op_LoadVectorGatherMasked(n);
    break;
  }
  case Op_StoreVector: { _sub_Op_StoreVector(n);
    break;
  }
  case Op_StoreVectorScatter: { _sub_Op_StoreVectorScatter(n);
    break;
  }
  case Op_StoreVectorScatterMasked: { _sub_Op_StoreVectorScatterMasked(n);
    break;
  }
  case Op_LoadVectorMasked: { _sub_Op_LoadVectorMasked(n);
    break;
  }
  case Op_StoreVectorMasked: { _sub_Op_StoreVectorMasked(n);
    break;
  }
  case Op_VerifyVectorAlignment: { _sub_Op_VerifyVectorAlignment(n);
    break;
  }
  case Op_VectorMaskGen: { _sub_Op_VectorMaskGen(n);
    break;
  }
  case Op_VectorMaskTrueCount: { _sub_Op_VectorMaskTrueCount(n);
    break;
  }
  case Op_VectorMaskFirstTrue: { _sub_Op_VectorMaskFirstTrue(n);
    break;
  }
  case Op_VectorMaskLastTrue: { _sub_Op_VectorMaskLastTrue(n);
    break;
  }
  case Op_VectorMaskToLong: { _sub_Op_VectorMaskToLong(n);
    break;
  }
  case Op_VectorLongToMask: { _sub_Op_VectorLongToMask(n);
    break;
  }
  case Op_Replicate: { _sub_Op_Replicate(n);
    break;
  }
  case Op_RoundVF: { _sub_Op_RoundVF(n);
    break;
  }
  case Op_RoundVD: { _sub_Op_RoundVD(n);
    break;
  }
  case Op_ExtractB: { _sub_Op_ExtractB(n);
    break;
  }
  case Op_ExtractUB: { _sub_Op_ExtractUB(n);
    break;
  }
  case Op_ExtractS: { _sub_Op_ExtractS(n);
    break;
  }
  case Op_ExtractI: { _sub_Op_ExtractI(n);
    break;
  }
  case Op_ExtractL: { _sub_Op_ExtractL(n);
    break;
  }
  case Op_ExtractF: { _sub_Op_ExtractF(n);
    break;
  }
  case Op_ExtractD: { _sub_Op_ExtractD(n);
    break;
  }
  case Op_VectorMaskCmp: { _sub_Op_VectorMaskCmp(n);
    break;
  }
  case Op_VectorMaskCast: { _sub_Op_VectorMaskCast(n);
    break;
  }
  case Op_VectorTest: { _sub_Op_VectorTest(n);
    break;
  }
  case Op_VectorBlend: { _sub_Op_VectorBlend(n);
    break;
  }
  case Op_VectorRearrange: { _sub_Op_VectorRearrange(n);
    break;
  }
  case Op_VectorLoadMask: { _sub_Op_VectorLoadMask(n);
    break;
  }
  case Op_VectorLoadShuffle: { _sub_Op_VectorLoadShuffle(n);
    break;
  }
  case Op_VectorLoadConst: { _sub_Op_VectorLoadConst(n);
    break;
  }
  case Op_VectorStoreMask: { _sub_Op_VectorStoreMask(n);
    break;
  }
  case Op_VectorReinterpret: { _sub_Op_VectorReinterpret(n);
    break;
  }
  case Op_VectorCastB2X: { _sub_Op_VectorCastB2X(n);
    break;
  }
  case Op_VectorCastS2X: { _sub_Op_VectorCastS2X(n);
    break;
  }
  case Op_VectorCastI2X: { _sub_Op_VectorCastI2X(n);
    break;
  }
  case Op_VectorCastL2X: { _sub_Op_VectorCastL2X(n);
    break;
  }
  case Op_VectorCastF2X: { _sub_Op_VectorCastF2X(n);
    break;
  }
  case Op_VectorCastD2X: { _sub_Op_VectorCastD2X(n);
    break;
  }
  case Op_VectorCastF2HF: { _sub_Op_VectorCastF2HF(n);
    break;
  }
  case Op_VectorCastHF2F: { _sub_Op_VectorCastHF2F(n);
    break;
  }
  case Op_VectorUCastB2X: { _sub_Op_VectorUCastB2X(n);
    break;
  }
  case Op_VectorUCastS2X: { _sub_Op_VectorUCastS2X(n);
    break;
  }
  case Op_VectorUCastI2X: { _sub_Op_VectorUCastI2X(n);
    break;
  }
  case Op_VectorInsert: { _sub_Op_VectorInsert(n);
    break;
  }
  case Op_MaskAll: { _sub_Op_MaskAll(n);
    break;
  }
  case Op_AndVMask: { _sub_Op_AndVMask(n);
    break;
  }
  case Op_OrVMask: { _sub_Op_OrVMask(n);
    break;
  }
  case Op_XorVMask: { _sub_Op_XorVMask(n);
    break;
  }
  
  default:
    tty->print("Default case invoked for: \n");
    tty->print("   opcode  = %d, \"%s\"\n", opcode, NodeClassNames[opcode]);
    return false;
  }
  return true;
}
