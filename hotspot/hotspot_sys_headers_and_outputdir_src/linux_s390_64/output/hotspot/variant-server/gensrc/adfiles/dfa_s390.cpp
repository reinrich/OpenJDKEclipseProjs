#line 1 "dfa_s390.cpp"
//
// Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2017, SAP SE. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_s390.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/matcher.hpp"
#include "opto/narrowptrnode.hpp"
#include "opto/opcodes.hpp"
#include "opto/convertnode.hpp"

//------------------------- Source -----------------------------------------

//------------------------- Attributes -------------------------------------

// AttributeForm 
static const int op_cost = 1;

// AttributeForm 
static const int ins_cost = DEFAULT_COST;

// AttributeForm 
static const int ins_short_branch = 0;

// AttributeForm 
static const int ins_is_TrapBasedCheckNode = true;

// AttributeForm 
static const int ins_num_consts = 0;

// AttributeForm 
static const int ins_alignment = 1;

// AttributeForm 
static const int ins_cannot_rematerialize = false;

// AttributeForm 
static const int ins_should_rematerialize = false;

//------------------------- Macros -----------------------------------------
#define DFA_PRODUCTION(result, rule, cost)\
  _cost[ (result) ] = cost; _rule[ (result) ] = rule;

#define DFA_PRODUCTION__SET_VALID(result, rule, cost)\
  DFA_PRODUCTION( (result), (rule), (cost) ); STATE__SET_VALID( (result) );

//------------------------- DFA --------------------------------------------
// DFA is a large switch with case statements for each ideal opcode encountered
// in any match rule in the ad file.  Each case has a series of if's to handle
// the match or fail decisions.  The matches test the cost function of that
// rule, and prune any cases which are higher cost for the same reduction.
// In order to generate the DFA we walk the table of ideal opcode/MatchList
// pairs generated by the ADLC front end to build the contents of the case
// statements (a series of if statements).


void  State::_sub_Op_RegN(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGN, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, noArg_iRegN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, rarg1RegN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, rarg2RegN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, rarg3RegN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, rarg4RegN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, rarg5RegN_rule, c+1)
    }
}
void  State::_sub_Op_RegI(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, noOdd_iRegI_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, iRegI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, revenRegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, roddRegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rarg1RegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rarg2RegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rarg3RegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rarg4RegI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, rarg5RegI_rule, c+1+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(NOARG_IREGI, noArg_iRegI_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION(IREGI, iRegI_rule, c)	  // overwrites higher cost rule
        DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)	  // overwrites higher cost rule
        DFA_PRODUCTION(REVENREGI, revenRegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RODDREGI, roddRegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG1REGI, rarg1RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG2REGI, rarg2RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG3REGI, rarg3RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG4REGI, rarg4RegI_rule, c+1)	  // overwrites higher cost rule
        DFA_PRODUCTION(RARG5REGI, rarg5RegI_rule, c+1)	  // overwrites higher cost rule
    }
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegP(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(RSCRATCH2REGP, rscratch2RegP_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(LOCK_PTR_REGP, lock_ptr_RegP_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, memoryRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(INDIRECT, indirect_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(THREADREGP, threadRegP_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGP, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, noArg_iRegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, rarg1RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, rarg2RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, rarg3RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, rarg4RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, rarg5RegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, revenRegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, roddRegP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, inline_cache_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, compiler_method_oop_regP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, interpreter_method_oop_regP_rule, c+1)
    }
     DFA_PRODUCTION(STACKSLOTP, regP_to_stkP_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegF(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(RSCRATCHREGF, rscratchRegF_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGF, regF_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(STACKSLOTF, regF_to_stkF_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegD(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(RSCRATCHREGD, rscratchRegD_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(REGD, regD_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
     DFA_PRODUCTION(STACKSLOTD, regD_to_stkD_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegL(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IREGL, iRegL_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, revenRegL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, roddRegL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, rarg1RegL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, rarg5RegL_rule, c+1)
    }
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_RegFlags(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(TD_FLAGSREG, TD_flagsReg_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, flagsReg_rule, c)
    }
}
void  State::_sub_Op_AbsD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_ABSD_REGD_, _AbsD_regD__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, absD_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_AbsF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_ABSF_REGF_, _AbsF_regF__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, absF_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_AbsI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ABSI_IREGI_, _AbsI_iRegI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST_LOW;
        DFA_PRODUCTION__SET_VALID(IREGI, absI_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, absI_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, absI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, absI_reg_rule, c+1)
    }
}
void  State::_sub_Op_AddD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADD_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[_LOADD_MEMORYRX_]+_kids[1]->_cost[REGD] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, addD_reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, addD_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, addD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AddF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADF_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[_LOADF_MEMORYRX_]+_kids[1]->_cost[REGF] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGF, addF_reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, addF_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, addF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_AddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORYRSY_) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORYRSY_]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_ADDI__LOADI_MEMORYRSY__IMMI8, _AddI__LoadI_memoryRSY__immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, addI_Reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_Reg_mem_0_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_Reg_mem_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], IMMI20) &&
        (
#line 5874 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 361 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGI_IREGI]+_kids[1]->_cost[IMMI20] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_reg_imm20_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_reg_imm20_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_reg_imm20_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDI_IREGI_IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI12) &&
        (
#line 5863 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 399 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDI_IREGI_IREGI]+_kids[1]->_cost[UIMMI12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_reg_imm12_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_ADDI_IREGI_IREGI, _AddI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI20) &&
        (
#line 5852 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 441 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI20] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_imm20_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_imm20_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_imm20_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI12) &&
        (
#line 5840 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 479 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_imm12_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST_HIGH;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) &&
        (
#line 5816 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 VM_Version::has_DistinctOpnds()
#line 550 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_imm16_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_imm16_RISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_imm16_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_imm16_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_imm16_CISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_imm16_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 5787 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_DistinctOpnds()
#line 621 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_reg_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_reg_RISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_reg_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_reg_reg_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_reg_reg_CISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_reg_reg_CISC_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORYRSY_) && STATE__VALID_CHILD(_kids[1], IMML8) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORYRSY_]+_kids[1]->_cost[IMML8];
        DFA_PRODUCTION__SET_VALID(_ADDL__LOADL_MEMORYRSY__IMML8, _AddL__LoadL_memoryRSY__immL8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGL_IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        (
#line 6046 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 698 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGL_IREGL]+_kids[1]->_cost[IMML20] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_reg_imm20_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_reg_imm20_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDL_IREGL_IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        (
#line 6035 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 712 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDL_IREGL_IREGL]+_kids[1]->_cost[UIMML12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_ADDL_IREGL_IREGL, _AddL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY_]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_Reg_memI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_Reg_memI_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L__LOADI_MEMORY__) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L__LOADI_MEMORY__] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_Reg_memI_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_Reg_memI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        (
#line 6000 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 VM_Version::has_DistinctOpnds()
#line 826 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_imm16_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_imm16_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_imm16_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_imm16_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML32] + DEFAULT_COST_HIGH;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        (
#line 5964 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 894 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML20] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_imm20_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_imm20_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        (
#line 5953 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 920 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 5940 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_DistinctOpnds()
#line 946 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_reg_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_reg_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_reg_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_reg_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_regI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_regI_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGI_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_reg_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_reg_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_AddP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADP_MEMORYRSY_) && STATE__VALID_CHILD(_kids[1], IMML8) ) {
      unsigned int c = _kids[0]->_cost[_LOADP_MEMORYRSY_]+_kids[1]->_cost[IMML8];
        DFA_PRODUCTION__SET_VALID(_ADDP__LOADP_MEMORYRSY__IMML8, _AddP__LoadP_memoryRSY__immL8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_IREGP_N2P_IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        (
#line 6212 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD && Universe::narrow_oop_base() == NULL && Universe::narrow_oop_shift() == 0
#line 1041 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_IREGP_N2P_IREGL]+_kids[1]->_cost[IMML20] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, addP_regN_reg_imm20_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_regN_reg_imm20_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_regN_reg_imm20_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_regN_reg_imm20_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_MEMORYREGP_IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        (
#line 6201 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 1070 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_MEMORYREGP_IREGL]+_kids[1]->_cost[IMML20] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_imm20_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_imm20_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_imm20_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_IREGP_N2P_IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        (
#line 6190 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD && Universe::narrow_oop_base() == NULL && Universe::narrow_oop_shift() == 0
#line 1141 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_IREGP_N2P_IREGL]+_kids[1]->_cost[UIMML12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_regN_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_regN_reg_imm12_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_regN_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_regN_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_ADDP_IREGP_N2P_IREGL, _AddP_iRegP_N2P_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_MEMORYREGP_IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        (
#line 6179 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 1216 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_MEMORYREGP_IREGL]+_kids[1]->_cost[UIMML12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_imm12_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMML32] + DEFAULT_COST_HIGH;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYREGP) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        (
#line 6154 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 1353 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYREGP]+_kids[1]->_cost[IMML20] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_imm20_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm20_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm20_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm20_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        (
#line 6143 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!PreferLAoverADD && VM_Version::has_DistinctOpnds()
#line 1424 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_imm16_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm16_RISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm16_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm16_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMML16) &&
        (
#line 6130 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!PreferLAoverADD && !VM_Version::has_DistinctOpnds()
#line 1495 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_imm16_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm16_CISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm16_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm16_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        (
#line 6117 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 1566 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[UIMML12] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_imm12_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_imm12_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_imm12_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_imm12_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 6104 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!PreferLAoverADD && VM_Version::has_DistinctOpnds()
#line 1637 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_RISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 6090 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!PreferLAoverADD && !VM_Version::has_DistinctOpnds()
#line 1708 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_CISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 6076 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
 PreferLAoverADD
#line 1779 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, addP_reg_reg_LA_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, addP_reg_reg_LA_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, addP_reg_reg_LA_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, addP_reg_reg_LA_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP__DECODEN_IREGN__IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        
#line 3634 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Matcher::narrow_oop_use_complex_address()
#line 1850 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_ADDP__DECODEN_IREGN__IREGL]+_kids[1]->_cost[UIMML12]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12INDEXNARROW, indOffset12indexNarrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indOffset12indexNarrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_MEMORYREGP_IREGL) && STATE__VALID_CHILD(_kids[1], UIMML12) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_MEMORYREGP_IREGL]+_kids[1]->_cost[UIMML12]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12INDEX, indOffset12index_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indOffset12index_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP__DECODEN_IREGN__IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        
#line 3606 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Matcher::narrow_oop_use_complex_address()
#line 1869 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_ADDP__DECODEN_IREGN__IREGL]+_kids[1]->_cost[IMML20]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET20INDEXNARROW, indOffset20indexNarrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset20indexNarrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indOffset20indexNarrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_ADDP__DECODEN_IREGN__IREGL, _AddP__DecodeN_iRegN__iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _ADDP_MEMORYREGP_IREGL) && STATE__VALID_CHILD(_kids[1], IMML20) ) {
      unsigned int c = _kids[0]->_cost[_ADDP_MEMORYREGP_IREGL]+_kids[1]->_cost[IMML20]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET20INDEX, indOffset20index_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset20index_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indOffset20index_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYREGP) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORYREGP]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_ADDP_MEMORYREGP_IREGL, _AddP_memoryRegP_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYREGP) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORYREGP]+_kids[1]->_cost[IREGL]+1;
        DFA_PRODUCTION__SET_VALID(INDINDEX, indIndex_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indIndex_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indIndex_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], UIMML12) &&
        
#line 3564 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Matcher::narrow_oop_use_complex_address()
#line 1915 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[UIMML12]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12NARROW, indOffset12Narrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indOffset12Narrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indOffset12Narrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYREGP) && STATE__VALID_CHILD(_kids[1], UIMML12) ) {
      unsigned int c = _kids[0]->_cost[MEMORYREGP]+_kids[1]->_cost[UIMML12]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET12, indOffset12_rule, c)
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indOffset12_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indOffset12_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMML20) &&
        
#line 3536 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Matcher::narrow_oop_use_complex_address()
#line 1940 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMML20]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET20NARROW, indOffset20Narrow_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset20Narrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indOffset20Narrow_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indOffset20Narrow_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYREGP) && STATE__VALID_CHILD(_kids[1], IMML20) ) {
      unsigned int c = _kids[0]->_cost[MEMORYREGP]+_kids[1]->_cost[IMML20]+1;
        DFA_PRODUCTION__SET_VALID(INDOFFSET20, indOffset20_rule, c)
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indOffset20_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indOffset20_rule, c)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indOffset20_rule, c)
      }
    }
}
void  State::_sub_Op_AndI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI_LL1) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI_LL1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_uimmI_LL1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_reg_uimmI_LL1_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_uimmI_LL1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_reg_uimmI_LL1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI_LH1) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI_LH1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_uimmI_LH1_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_reg_uimmI_LH1_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_uimmI_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_reg_uimmI_LH1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI] + DEFAULT_COST_HIGH;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_uimm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_reg_uimm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_reg_uimm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_Reg_mem_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, andI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, andI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, andI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, andI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_AndL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, zeroExtend_long_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, zeroExtend_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, zeroExtend_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, zeroExtend_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, zeroExtend_long_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, convI2L_mem_zex_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, convI2L_mem_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, convI2L_mem_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convI2L_mem_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, convI2L_mem_zex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IMML_32BITS) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IMML_32BITS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, convI2L_reg_zex_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, convI2L_reg_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, convI2L_reg_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convI2L_reg_zex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, convI2L_reg_zex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML_HH1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML_HH1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_uimmL_HH1_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_reg_uimmL_HH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_reg_uimmL_HH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_uimmL_HH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_reg_uimmL_HH1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML_HL1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML_HL1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_uimmL_HL1_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_reg_uimmL_HL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_reg_uimmL_HL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_uimmL_HL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_reg_uimmL_HL1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML_LH1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML_LH1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_uimmL_LH1_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_reg_uimmL_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_reg_uimmL_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_uimmL_LH1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_reg_uimmL_LH1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML_LL1) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML_LL1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_uimmL_LL1_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_reg_uimmL_LL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_reg_uimmL_LL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_uimmL_LL1_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_reg_uimmL_LL1_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY_]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, andL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, andL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, andL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IMML_FFFFFFFF) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IMML_FFFFFFFF] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadUI2L_rule, c+1)
      }
    }
}
void  State::_sub_Op_AryEq(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 10022 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU
#line 2374 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, array_equalsC_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, array_equalsC_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, array_equalsC_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, array_equalsC_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) &&
        (
#line 10008 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL
#line 2392 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, array_equalsB_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, array_equalsB_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, array_equalsB_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, array_equalsB_rule, c+1)
      }
    }
}
void  State::_sub_Op_Binary(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IMMI, _Binary_iRegP_immI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMI16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IMMI16, _Binary_iRegP_immI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMP) && STATE__VALID_CHILD(_kids[1], IMMI_1) ) {
      unsigned int c = _kids[0]->_cost[IMMP]+_kids[1]->_cost[IMMI_1];
        DFA_PRODUCTION__SET_VALID(_BINARY_IMMP_IMMI_1, _Binary_immP_immI_1_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IREGI, _Binary_iRegP_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], RARG5REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[RARG5REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_RARG5REGI, _Binary_iRegP_rarg5RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], RARG2REGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[RARG2REGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_RARG2REGI, _Binary_iRegP_rarg2RegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IREGP, _Binary_iRegP_iRegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADD_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[_LOADD_MEMORYRX_]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_BINARY__LOADD_MEMORYRX__REGD, _Binary__LoadD_memoryRX__regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADF_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[_LOADF_MEMORYRX_]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_BINARY__LOADF_MEMORYRX__REGF, _Binary__LoadF_memoryRX__regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGD__LOADD_MEMORYRX_, _Binary_regD__LoadD_memoryRX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGF__LOADF_MEMORYRX_, _Binary_regF__LoadF_memoryRX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG5REGN) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[RARG5REGN]+_kids[1]->_cost[IREGN_P2N];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG5REGN_IREGN_P2N, _Binary_rarg5RegN_iRegN_P2N_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG5REGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[RARG5REGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG5REGI_IREGI, _Binary_rarg5RegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG5REGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[RARG5REGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG5REGL_IREGL, _Binary_rarg5RegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG5REGP) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[RARG5REGP]+_kids[1]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_BINARY_RARG5REGP_IREGP_N2P, _Binary_rarg5RegP_iRegP_N2P_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IMML16, _Binary_iRegL_immL16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IREGL, _Binary_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGD_REGD, _Binary_regD_regD_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_BINARY_REGF_REGF, _Binary_regF_regF_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPF) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOPF]+_kids[1]->_cost[FLAGSREG];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOPF_FLAGSREG, _Binary_cmpOpF_flagsReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IMMP0, _Binary_iRegP_immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGP_IREGP_N2P, _Binary_iRegP_iRegP_N2P_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGI_IMMI16, _Binary_iRegI_immI16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGI_IREGI, _Binary_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IMMN0];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGN_IMMN0, _Binary_iRegN_immN0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IREGN_P2N];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGN_IREGN_P2N, _Binary_iRegN_iRegN_P2N_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG];
        DFA_PRODUCTION__SET_VALID(_BINARY_CMPOP_FLAGSREG, _Binary_cmpOp_flagsReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGN];
        DFA_PRODUCTION__SET_VALID(_BINARY_IREGL_IREGN, _Binary_iRegL_iRegN_rule, c)
    }
}
void  State::_sub_Op_Bool(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOP, cmpOp_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPF, cmpOpF_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(CMPOPT, cmpOpT_rule, c)
    }
}
void  State::_sub_Op_ReverseBytesI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 10768 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
UseByteReverseInstruction
#line 2560 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, bytes_reverse_int_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, bytes_reverse_int_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, bytes_reverse_int_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, bytes_reverse_int_rule, c+1)
    }
}
void  State::_sub_Op_ReverseBytesL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 10779 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
UseByteReverseInstruction
#line 2580 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, bytes_reverse_long_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, bytes_reverse_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, bytes_reverse_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, bytes_reverse_long_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, bytes_reverse_long_rule, c+1)
    }
}
void  State::_sub_Op_CallDynamicJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallDynamicJavaDirect_dynTOC_rule, c)
    }
}
void  State::_sub_Op_CallLeaf(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafDirect_rule, c)
    }
}
void  State::_sub_Op_CallLeafNoFP(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallLeafNoFPDirect_rule, c)
    }
}
void  State::_sub_Op_CallRuntime(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallRuntimeDirect_rule, c)
    }
}
void  State::_sub_Op_CallStaticJava(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, CallStaticJavaDirect_dynTOC_rule, c)
    }
}
void  State::_sub_Op_CastII(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, castII_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, castII_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, castII_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, castII_rule, c+1)
    }
}
void  State::_sub_Op_CastX2P(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, castX2P_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, castX2P_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, castX2P_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castX2P_rule, c+1)
    }
}
void  State::_sub_Op_CastP2X(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P];
        DFA_PRODUCTION__SET_VALID(_CASTP2X_IREGP_N2P_, _CastP2X_iRegP_N2P__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, castP2X_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, castP2X_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, castP2X_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADP_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADP_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, castP2X_loadP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, castP2X_loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, castP2X_loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, castP2X_loadP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, castP2X_loadP_rule, c+1)
      }
    }
}
void  State::_sub_Op_CastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, castPP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, castPP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, castPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, castPP_rule, c+1)
    }
}
void  State::_sub_Op_CheckCastPP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, checkCastPP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, checkCastPP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, checkCastPP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, checkCastPP_rule, c+1)
    }
}
void  State::_sub_Op_ClearArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGP_N2P]+300;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArray_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IMML) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IMML]+_kids[1]->_cost[IREGP_N2P]+200;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArrayConstBig_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], SSLENDW) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[SSLENDW]+_kids[1]->_cost[IREGP_N2P]+100;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, inlineCallClearArrayConst_rule, c)
      }
    }
}
void  State::_sub_Op_CMoveD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPF_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPF_FLAGSREG]+_kids[1]->_cost[_BINARY_REGD_REGD]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(REGD, cmovD_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_CMoveF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOPF_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOPF_FLAGSREG]+_kids[1]->_cost[_BINARY_REGF_REGF]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(REGF, cmovF_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_CMoveI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IMMI16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGI_IMMI16]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmovI_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmovI_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmovI_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmovI_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGI_IREGI]+DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmovI_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmovI_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmovI_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmovI_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IMML16) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IMML16]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, cmovL_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, cmovL_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, cmovL_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGL_IREGL]+DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, cmovL_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, cmovL_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, cmovL_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IMMP0]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, cmovP_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovP_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cmovP_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovP_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGP_IREGP_N2P]+DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, cmovP_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, cmovP_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, cmovP_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, cmovP_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CMoveN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IMMN0) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGN_IMMN0]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, cmovN_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, cmovN_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, cmovN_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_CMPOP_FLAGSREG) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGN_IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_CMPOP_FLAGSREG]+_kids[1]->_cost[_BINARY_IREGN_IREGN_P2N]+DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, cmovN_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, cmovN_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, cmovN_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGN_P2N) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN_P2N]+_kids[1]->_cost[IMMN0];
        DFA_PRODUCTION__SET_VALID(_CMPN_IREGN_P2N_IMMN0, _CmpN_iRegN_P2N_immN0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN_P2N) && STATE__VALID_CHILD(_kids[1], IMMN0) ) {
      unsigned int c = _kids[0]->_cost[IREGN_P2N]+_kids[1]->_cost[IMMN0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compN_iRegN_immN0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IMMNKLASS) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IMMNKLASS] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compNKlass_iRegN_immN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN_P2N) && STATE__VALID_CHILD(_kids[1], IMMN) ) {
      unsigned int c = _kids[0]->_cost[IREGN_P2N]+_kids[1]->_cost[IMMN] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compN_iRegN_immN_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN_P2N) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[IREGN_P2N]+_kids[1]->_cost[IREGN_P2N] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compN_iRegN_rule, c)
      }
    }
}
void  State::_sub_Op_CmpD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], IMMDPM0) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[IMMDPM0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD0_cc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD_cc_mem_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpD_cc_rule, c)
      }
    }
}
void  State::_sub_Op_CmpD3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD]+DEFAULT_COST * 5 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpD_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmpD_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpD_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmpD_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], IMMFPM0) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[IMMFPM0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF0_cc_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF_cc_mem_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpF_cc_rule, c)
      }
    }
}
void  State::_sub_Op_CmpF3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF]+DEFAULT_COST * 5 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpF_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmpF_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpF_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmpF_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _PARTIALSUBTYPECHECK_RARG2REGP_RARG3REGP) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_PARTIALSUBTYPECHECK_RARG2REGP_RARG3REGP]+_kids[1]->_cost[IMMP0]+10 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, partialSubtypeCheck_vs_zero_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_CMPI_IREGI_IMMI8, _CmpI_iRegI_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_CMPI_IREGI_IREGI, _CmpI_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_reg_mem_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_reg_imm16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML8) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML8];
        DFA_PRODUCTION__SET_VALID(_CMPL_IREGL_IMML8, _CmpL_iRegL_immL8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL];
        DFA_PRODUCTION__SET_VALID(_CMPL_IREGL_IREGL, _CmpL_iRegL_iRegL_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L__LOADI_MEMORY__) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L__LOADI_MEMORY__] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_memI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_mem_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IMML_0] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_conv_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML_0) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML_0] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_imm16_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML32] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_imm32_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGI_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_regI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CmpL3(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL]+DEFAULT_COST * 5 + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpL3_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmpL3_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpL3_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmpL3_reg_reg_rule, c+1)
    }
}
void  State::_sub_Op_CmpLTMask(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, cmpLTMask_reg_zero_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmpLTMask_reg_zero_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpLTMask_reg_zero_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmpLTMask_reg_zero_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, cmpLTMask_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, cmpLTMask_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, cmpLTMask_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, cmpLTMask_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CmpP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], _DECODEN_IMMN8_) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[_DECODEN_IMMN8_];
        DFA_PRODUCTION__SET_VALID(_CMPP__DECODEN_IREGN___DECODEN_IMMN8_, _CmpP__DecodeN_iRegN___DecodeN_immN8__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION__SET_VALID(_CMPP__DECODEN_IREGN__IMMP0, _CmpP__DecodeN_iRegN__immP0_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IMMP8) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IMMP8];
        DFA_PRODUCTION__SET_VALID(_CMPP_IREGP_IMMP8, _CmpP_iRegP_immP8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], _DECODEN_IREGN_) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[_DECODEN_IREGN_];
        DFA_PRODUCTION__SET_VALID(_CMPP__DECODEN_IREGN___DECODEN_IREGN_, _CmpP__DecodeN_iRegN___DecodeN_iRegN__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGP];
        DFA_PRODUCTION__SET_VALID(_CMPP_IREGP_IREGP, _CmpP_iRegP_iRegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _LOADP_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_LOADP_MEMORY_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compP_reg_mem_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _DECODEN_IREGN_) && STATE__VALID_CHILD(_kids[1], IMMP0) &&
        (
#line 8536 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Universe::narrow_oop_base() == NULL && Universe::narrow_oop_shift() == 0
#line 3280 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_DECODEN_IREGN_]+_kids[1]->_cost[IMMP0] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compP_decode_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP0] + DEFAULT_COST_LOW;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compP_reg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compP_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IMMP0) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IMMP0];
        DFA_PRODUCTION__SET_VALID(_CMPP_IREGP_N2P_IMMP0, _CmpP_iRegP_N2P_immP0_rule, c)
    }
}
void  State::_sub_Op_CmpU(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI8];
        DFA_PRODUCTION__SET_VALID(_CMPU_IREGI_UIMMI8, _CmpU_iRegI_uimmI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compU_reg_mem_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compU_reg_uimm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compU_reg_reg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_CMPU_IREGI_IREGI, _CmpU_iRegI_iRegI_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI16];
        DFA_PRODUCTION__SET_VALID(_CMPU_IREGI_UIMMI16, _CmpU_iRegI_uimmI16_rule, c)
    }
}
void  State::_sub_Op_CmpUL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML32] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compUL_reg_imm32_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, compUL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_CompareAndSwapI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGI_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_RARG5REGI_IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapI_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, compareAndSwapI_bool_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapI_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, compareAndSwapI_bool_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_RARG5REGL_IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapL_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, compareAndSwapL_bool_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapL_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, compareAndSwapL_bool_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGP_IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_RARG5REGP_IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapP_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, compareAndSwapP_bool_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapP_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, compareAndSwapP_bool_rule, c+1)
    }
}
void  State::_sub_Op_CompareAndSwapN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGN_IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_RARG5REGN_IREGN_P2N] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, compareAndSwapN_bool_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, compareAndSwapN_bool_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, compareAndSwapN_bool_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, compareAndSwapN_bool_rule, c+1)
    }
}
void  State::_sub_Op_GetAndAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 5707 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadAndALUAtomicV1()
#line 3411 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGI]+MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, addI_mem_reg_atomic_z196_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_mem_reg_atomic_z196_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_mem_reg_atomic_z196_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGI]+MEMORY_REF_COST+100*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_mem_reg_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_mem_reg_atomic_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_mem_reg_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMMI]+MEMORY_REF_COST+200*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_mem_imm32_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_mem_imm32_atomic_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_mem_imm32_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMMI16]+MEMORY_REF_COST+100*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, addI_mem_imm16_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, addI_mem_imm16_atomic_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, addI_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, addI_mem_imm16_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMMI8) &&
        (
#line 5476 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_AtomicMemWithImmALUOps() && n->as_LoadStore()->result_not_used()
#line 3528 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMMI8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, addI_mem_imm8_atomic_no_res_rule, c)
    }
}
void  State::_sub_Op_GetAndAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 5718 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadAndALUAtomicV1()
#line 3539 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGL]+MEMORY_REF_COST + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, addL_mem_reg_atomic_z196_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_mem_reg_atomic_z196_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_mem_reg_atomic_z196_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGL]+MEMORY_REF_COST+100*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_mem_reg_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_mem_reg_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_mem_reg_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMML32) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMML32]+MEMORY_REF_COST+100*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_mem_imm32_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_mem_imm32_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_mem_imm32_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMML16]+MEMORY_REF_COST+100*DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, addL_mem_imm16_atomic_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, addL_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, addL_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, addL_mem_imm16_atomic_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, addL_mem_imm16_atomic_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMML8) &&
        (
#line 5596 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_AtomicMemWithImmALUOps() && n->as_LoadStore()->result_not_used()
#line 3616 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMML8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, addL_mem_imm8_atomic_no_res_rule, c)
    }
}
void  State::_sub_Op_GetAndSetI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, xchgI_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, xchgI_reg_mem_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xchgI_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, xchgI_reg_mem_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, xchgL_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, xchgL_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, xchgL_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xchgL_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, xchgL_reg_mem_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGP) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, xchgP_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, xchgP_reg_mem_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, xchgP_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, xchgP_reg_mem_rule, c+1)
    }
}
void  State::_sub_Op_GetAndSetN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IREGN] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, xchgN_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, xchgN_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, xchgN_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, xchgN_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, xchgN_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, xchgN_reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, xchgN_reg_mem_rule, c+1)
    }
}
void  State::_sub_Op_ConN(const Node *n){
    if(         
#line 3068 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->get_narrowcon() == 0
#line 3691 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMN0, immN0_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN, loadConN0_rule, c+DEFAULT_COST_LOW)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, loadConN0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c+DEFAULT_COST_LOW)
    }
    if(         
#line 3059 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm8(n->get_narrowcon())
#line 3707 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMN8, immN8_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMN, immN_rule, c)
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGN, loadConN_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, loadConN_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c+DEFAULT_COST)
      }
    }
   if ( /* IREGN KNOWN_VALID || */ _cost[IREGN] > DEFAULT_COST) {
     DFA_PRODUCTION(IREGN, loadConN_rule, DEFAULT_COST)
   }
   if ( /* NOARG_IREGN KNOWN_VALID || */ _cost[NOARG_IREGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(NOARG_IREGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* RARG1REGN KNOWN_VALID || */ _cost[RARG1REGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG1REGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* RARG2REGN KNOWN_VALID || */ _cost[RARG2REGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG2REGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* RARG3REGN KNOWN_VALID || */ _cost[RARG3REGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG3REGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* RARG4REGN KNOWN_VALID || */ _cost[RARG4REGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG4REGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* RARG5REGN KNOWN_VALID || */ _cost[RARG5REGN] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG5REGN, loadConN_rule, DEFAULT_COST+1)
   }
   if ( /* IREGN_P2N KNOWN_VALID || */ _cost[IREGN_P2N] > DEFAULT_COST) {
     DFA_PRODUCTION(IREGN_P2N, iRegN_rule, DEFAULT_COST)
   }
}
void  State::_sub_Op_ConNKlass(const Node *n){
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMNKLASS, immNKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN, loadConNKlass_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, loadConNKlass_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c+DEFAULT_COST)
    }
     DFA_PRODUCTION(IREGN, loadConNKlass_rule, DEFAULT_COST)	  // overwrites higher cost rule
     DFA_PRODUCTION(NOARG_IREGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(RARG1REGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(RARG2REGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(RARG3REGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(RARG4REGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(RARG5REGN, loadConNKlass_rule, DEFAULT_COST+1)	  // overwrites higher cost rule
     DFA_PRODUCTION(IREGN_P2N, iRegN_rule, DEFAULT_COST)	  // overwrites higher cost rule
}
void  State::_sub_Op_ConD(const Node *n){
    if(         
#line 3096 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
jlong_cast(n->getd()) == 0
#line 3791 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMDP0, immDp0_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, loadConD0_rule, c+DEFAULT_COST_LOW)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
    }
    if(         
#line 3087 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->getd() == 0
#line 3801 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMDPM0, immDpm0_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMD, immD_rule, c)
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(REGD, loadConD_dynTOC_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST+MEMORY_REF_COST)
      }
    }
   if ( /* REGD KNOWN_VALID || */ _cost[REGD] > MEMORY_REF_COST) {
     DFA_PRODUCTION(REGD, loadConD_dynTOC_rule, MEMORY_REF_COST)
   }
   if ( /* STACKSLOTD KNOWN_VALID || */ _cost[STACKSLOTD] > MEMORY_REF_COST+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTD, regD_to_stkD_rule, MEMORY_REF_COST+MEMORY_REF_COST)
   }
}
void  State::_sub_Op_ConF(const Node *n){
    if(         
#line 3122 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
jint_cast(n->getf()) == 0
#line 3827 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMFP0, immFp0_rule, c)
        DFA_PRODUCTION__SET_VALID(REGF, loadConF0_rule, c+DEFAULT_COST_LOW)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
    }
    if(         
#line 3113 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->getf() == 0
#line 3837 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMFPM0, immFpm0_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMF, immF_rule, c)
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(REGF, loadConF_dynTOC_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST+MEMORY_REF_COST)
      }
    }
   if ( /* REGF KNOWN_VALID || */ _cost[REGF] > MEMORY_REF_COST) {
     DFA_PRODUCTION(REGF, loadConF_dynTOC_rule, MEMORY_REF_COST)
   }
   if ( /* STACKSLOTF KNOWN_VALID || */ _cost[STACKSLOTF] > MEMORY_REF_COST+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTF, regF_to_stkF_rule, MEMORY_REF_COST+MEMORY_REF_COST)
   }
}
void  State::_sub_Op_ConI(const Node *n){
    int _n_get_int__ = n->get_int();
    if(         
#line 2809 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_int__ & 0xFFFF) == 0xFFFF
#line 3864 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI_LH1, uimmI_LH1_rule, c)
    }
    if(         
#line 2800 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_int__ & 0xFFFF0000) == 0xFFFF0000
#line 3872 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI_LL1, uimmI_LL1_rule, c)
    }
    if(         
#line 2791 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ >= 32 && _n_get_int__ <= 63
#line 3880 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_32_63, immI_32_63_rule, c)
    }
    if(         
#line 2782 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == 255
#line 3888 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_255, immI_255_rule, c)
    }
    if(         
#line 2773 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == 24
#line 3896 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_24, immI_24_rule, c)
    }
    if(         
#line 2764 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == 16
#line 3904 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_16, immI_16_rule, c)
    }
    if(         
#line 2755 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == 1
#line 3912 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_1, immI_1_rule, c)
    }
    if(         
#line 2729 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm(_n_get_int__, 5)
#line 3920 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI5, uimmI5_rule, c)
    }
    if(         
#line 2720 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm(_n_get_int__, 6)
#line 3928 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI6, uimmI6_rule, c)
    }
    if(         
#line 2711 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm8(_n_get_int__)
#line 3936 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI8, uimmI8_rule, c)
    }
    if(         
#line 2702 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm12(_n_get_int__)
#line 3944 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI12, uimmI12_rule, c)
    }
    if(         
#line 2693 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm16(_n_get_int__)
#line 3952 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI16, uimmI16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, loadConUI16_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadConUI16_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConUI16_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadConUI16_rule, c+DEFAULT_COST+1)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMMI, uimmI_rule, c)
    }
    if(         
#line 2672 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ != 0 && _n_get_int__ != -1
#line 3974 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_N0M1, immI_n0m1_rule, c)
    }
    if(         
#line 2663 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == -1
#line 3982 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_MINUS1, immI_minus1_rule, c)
    }
    if(         
#line 2654 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ == 0
#line 3990 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI_0, immI_0_rule, c)
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+DEFAULT_COST_LOW) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadConI_0_rule, c+DEFAULT_COST_LOW)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST_LOW+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+DEFAULT_COST_LOW+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadConI_0_rule, c+DEFAULT_COST_LOW+1)
      }
    }
    if(         
#line 2645 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm8(_n_get_int__)
#line 4028 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI8, immI8_rule, c)
    }
    if(         
#line 2636 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm16(_n_get_int__)
#line 4036 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI16, immI16_rule, c)
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+DEFAULT_COST_LOW) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadConI16_rule, c+DEFAULT_COST_LOW)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST_LOW+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+DEFAULT_COST_LOW+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadConI16_rule, c+DEFAULT_COST_LOW+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadConI16_rule, c+DEFAULT_COST_LOW+1)
      }
    }
    if(         
#line 2627 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm20(_n_get_int__)
#line 4074 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI20, immI20_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMI, immI_rule, c)
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGI, loadConI_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+DEFAULT_COST+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+DEFAULT_COST+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+DEFAULT_COST+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadConI_rule, c+DEFAULT_COST+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadConI_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadConI_rule, c+DEFAULT_COST+1)
      }
    }
    if(         
#line 2606 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ != 0 && _n_get_int__ != -1 && (_n_get_int__&0x0000ffff) != 0x0000ffff
#line 4116 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMS_N0M1, immS_n0m1_rule, c)
    }
    if(         
#line 2596 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_int__ == -1) || ((_n_get_int__&0x0000ffff) == 0x0000ffff)
#line 4124 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMS_MINUS1, immS_minus1_rule, c)
    }
    if(         
#line 2586 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_int__ != 0 && _n_get_int__ != -1 && (_n_get_int__&0x000000ff) != 0x000000ff
#line 4132 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMB_N0M1, immB_n0m1_rule, c)
    }
    if(         
#line 2576 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_int__ == -1) || ((_n_get_int__&0x000000ff) == 0x000000ff)
#line 4140 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMB_MINUS1, immB_minus1_rule, c)
    }
   if ( /* IREGI KNOWN_VALID || */ _cost[IREGI] > DEFAULT_COST) {
     DFA_PRODUCTION(IREGI, loadConI_rule, DEFAULT_COST)
   }
   if ( /* STACKSLOTI KNOWN_VALID || */ _cost[STACKSLOTI] > DEFAULT_COST+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTI, regI_to_stkI_rule, DEFAULT_COST+MEMORY_REF_COST)
   }
   if ( /* REVENREGI KNOWN_VALID || */ _cost[REVENREGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(REVENREGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* NOODD_IREGI KNOWN_VALID || */ _cost[NOODD_IREGI] > DEFAULT_COST+1+1) {
     DFA_PRODUCTION(NOODD_IREGI, loadConI_rule, DEFAULT_COST+1+1)
   }
   if ( /* RODDREGI KNOWN_VALID || */ _cost[RODDREGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RODDREGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* RARG1REGI KNOWN_VALID || */ _cost[RARG1REGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG1REGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* RARG2REGI KNOWN_VALID || */ _cost[RARG2REGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG2REGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* RARG3REGI KNOWN_VALID || */ _cost[RARG3REGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG3REGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* RARG4REGI KNOWN_VALID || */ _cost[RARG4REGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG4REGI, loadConI_rule, DEFAULT_COST+1)
   }
   if ( /* RARG5REGI KNOWN_VALID || */ _cost[RARG5REGI] > DEFAULT_COST+1) {
     DFA_PRODUCTION(RARG5REGI, loadConI_rule, DEFAULT_COST+1)
   }
}
void  State::_sub_Op_ConL(const Node *n){
    jlong _n_get_long__ = n->get_long();
    if(         
#line 2979 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 4181 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML_32BITS, immL_32bits_rule, c)
    }
    if(         
#line 2970 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_long__ & 0xFFFFFFFFFFFFL) == 0xFFFFFFFFFFFFL
#line 4189 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML_HH1, uimmL_HH1_rule, c)
    }
    if(         
#line 2961 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_long__ & 0xFFFF0000FFFFFFFFL) == 0xFFFF0000FFFFFFFFL
#line 4197 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML_HL1, uimmL_HL1_rule, c)
    }
    if(         
#line 2952 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_long__ & 0xFFFFFFFF0000FFFFL) == 0xFFFFFFFF0000FFFFL
#line 4205 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML_LH1, uimmL_LH1_rule, c)
    }
    if(         
#line 2943 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(_n_get_long__ & 0xFFFFFFFFFFFF0000L) == 0xFFFFFFFFFFFF0000L
#line 4213 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML_LL1, uimmL_LL1_rule, c)
    }
    if(         
#line 2934 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_long__ == 0L
#line 4221 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML_0, immL_0_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL_0_rule, c+DEFAULT_COST_LOW)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadConL_0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadConL_0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL_0_rule, c+DEFAULT_COST_LOW+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadConL_0_rule, c+DEFAULT_COST_LOW+1)
    }
    if(         
#line 2926 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_long__ == 0xFFFFFFFFL
#line 4235 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML_FFFFFFFF, immL_FFFFFFFF_rule, c)
    }
    if(         
#line 2917 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_long__ == 0xFFFFL
#line 4243 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML_FFFF, immL_FFFF_rule, c)
    }
    if(         
#line 2908 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
_n_get_long__ == 0xFFL
#line 4251 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML_FF, immL_FF_rule, c)
    }
    if(         
#line 2895 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm8(_n_get_long__)
#line 4259 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML8, uimmL8_rule, c)
    }
    if(         
#line 2886 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm12(_n_get_long__)
#line 4267 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML12, uimmL12_rule, c)
    }
    if(         
#line 2877 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm16(_n_get_long__)
#line 4275 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML16, uimmL16_rule, c)
    }
    if(         
#line 2868 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm32(_n_get_long__)
#line 4283 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(UIMML32, uimmL32_rule, c)
    }
    if(         
#line 2856 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm8(_n_get_long__)
#line 4291 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML8, immL8_rule, c)
    }
    if(         
#line 2847 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm16(_n_get_long__)
#line 4299 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML16, immL16_rule, c)
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+DEFAULT_COST_LOW) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL16_rule, c+DEFAULT_COST_LOW)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST_LOW+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST_LOW+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadConL16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadConL16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL16_rule, c+DEFAULT_COST_LOW+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+DEFAULT_COST_LOW+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadConL16_rule, c+DEFAULT_COST_LOW+1)
      }
    }
    if(         
#line 2838 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm20(_n_get_long__)
#line 4325 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML20, immL20_rule, c)
    }
    if(         
#line 2829 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_simm32(_n_get_long__)
#line 4333 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML32, immL32_rule, c)
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+DEFAULT_COST) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL32_rule, c+DEFAULT_COST)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+DEFAULT_COST+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+DEFAULT_COST+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadConL32_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadConL32_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL32_rule, c+DEFAULT_COST+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+DEFAULT_COST+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadConL32_rule, c+DEFAULT_COST+1)
      }
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMML, immL_rule, c)
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+MEMORY_REF_COST_LO) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadConL_pcrelTOC_rule, c+MEMORY_REF_COST_LO)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST_LO+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST_LO+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadConL_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadConL_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadConL_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadConL_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
    }
    if(         
#line 2742 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm8(_n_get_long__-1)
#line 4381 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(SSLENDW, SSlenDW_rule, c)
    }
   if ( /* IREGL KNOWN_VALID || */ _cost[IREGL] > MEMORY_REF_COST_LO) {
     DFA_PRODUCTION(IREGL, loadConL_pcrelTOC_rule, MEMORY_REF_COST_LO)
   }
   if ( /* STACKSLOTL KNOWN_VALID || */ _cost[STACKSLOTL] > MEMORY_REF_COST_LO+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTL, regL_to_stkL_rule, MEMORY_REF_COST_LO+MEMORY_REF_COST)
   }
   if ( /* REVENREGL KNOWN_VALID || */ _cost[REVENREGL] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(REVENREGL, loadConL_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RODDREGL KNOWN_VALID || */ _cost[RODDREGL] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RODDREGL, loadConL_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG1REGL KNOWN_VALID || */ _cost[RARG1REGL] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG1REGL, loadConL_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG5REGL KNOWN_VALID || */ _cost[RARG5REGL] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG5REGL, loadConL_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
}
void  State::_sub_Op_ConP(const Node *n){
    if(         
#line 3031 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->get_ptr() == 0
#line 4409 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP0, immP0_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, loadConP0_rule, c+DEFAULT_COST)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+DEFAULT_COST+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP0_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+DEFAULT_COST+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP0_rule, c+DEFAULT_COST+1)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c+DEFAULT_COST)
    }
    if(         
#line 3018 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm8(n->get_ptr())
#line 4438 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP8, immP8_rule, c)
    }
    if(         
#line 3009 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm16(n->get_ptr())
#line 4446 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP16, immP16_rule, c)
    }
    if(         
#line 3000 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Immediate::is_uimm32(n->get_ptr())
#line 4454 "dfa_s390.cpp"
 ) {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP32, immP32_rule, c)
    }
    {
      unsigned int c = 1;
        DFA_PRODUCTION__SET_VALID(IMMP, immP_rule, c)
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c+MEMORY_REF_COST_LO) {
        DFA_PRODUCTION__SET_VALID(IREGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST_LO+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST_LO+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+MEMORY_REF_COST_LO+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+MEMORY_REF_COST_LO+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+MEMORY_REF_COST_LO+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadConP_pcrelTOC_rule, c+MEMORY_REF_COST_LO+1)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c+MEMORY_REF_COST_LO) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c+MEMORY_REF_COST_LO)
      }
    }
   if ( /* IREGP KNOWN_VALID || */ _cost[IREGP] > MEMORY_REF_COST_LO) {
     DFA_PRODUCTION(IREGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO)
   }
   if ( /* STACKSLOTP KNOWN_VALID || */ _cost[STACKSLOTP] > MEMORY_REF_COST_LO+MEMORY_REF_COST) {
     DFA_PRODUCTION(STACKSLOTP, regP_to_stkP_rule, MEMORY_REF_COST_LO+MEMORY_REF_COST)
   }
   if ( /* NOARG_IREGP KNOWN_VALID || */ _cost[NOARG_IREGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(NOARG_IREGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG1REGP KNOWN_VALID || */ _cost[RARG1REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG1REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG2REGP KNOWN_VALID || */ _cost[RARG2REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG2REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG3REGP KNOWN_VALID || */ _cost[RARG3REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG3REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG4REGP KNOWN_VALID || */ _cost[RARG4REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG4REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RARG5REGP KNOWN_VALID || */ _cost[RARG5REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RARG5REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* MEMORYREGP KNOWN_VALID || */ _cost[MEMORYREGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(MEMORYREGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* INDIRECT KNOWN_VALID || */ _cost[INDIRECT] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(INDIRECT, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* MEMORY KNOWN_VALID || */ _cost[MEMORY] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(MEMORY, indirect_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* MEMORYRXY KNOWN_VALID || */ _cost[MEMORYRXY] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(MEMORYRXY, indirect_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* MEMORYRX KNOWN_VALID || */ _cost[MEMORYRX] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(MEMORYRX, indirect_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* MEMORYRSY KNOWN_VALID || */ _cost[MEMORYRSY] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(MEMORYRSY, indirect_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* MEMORYRS KNOWN_VALID || */ _cost[MEMORYRS] > MEMORY_REF_COST_LO+1+1) {
     DFA_PRODUCTION(MEMORYRS, indirect_rule, MEMORY_REF_COST_LO+1+1)
   }
   if ( /* REVENREGP KNOWN_VALID || */ _cost[REVENREGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(REVENREGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* RODDREGP KNOWN_VALID || */ _cost[RODDREGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(RODDREGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* INLINE_CACHE_REGP KNOWN_VALID || */ _cost[INLINE_CACHE_REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(INLINE_CACHE_REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* COMPILER_METHOD_OOP_REGP KNOWN_VALID || */ _cost[COMPILER_METHOD_OOP_REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(COMPILER_METHOD_OOP_REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* INTERPRETER_METHOD_OOP_REGP KNOWN_VALID || */ _cost[INTERPRETER_METHOD_OOP_REGP] > MEMORY_REF_COST_LO+1) {
     DFA_PRODUCTION(INTERPRETER_METHOD_OOP_REGP, loadConP_pcrelTOC_rule, MEMORY_REF_COST_LO+1)
   }
   if ( /* IREGP_N2P KNOWN_VALID || */ _cost[IREGP_N2P] > MEMORY_REF_COST_LO) {
     DFA_PRODUCTION(IREGP_N2P, iRegP_rule, MEMORY_REF_COST_LO)
   }
}
void  State::_sub_Op_Conv2B(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, convP2B_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, convP2B_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convP2B_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, convP2B_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, convI2B_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, convI2B_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convI2B_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, convI2B_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvD2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convD2F_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _SQRTD__CONVF2D_MEMORYRX__) ) {
      unsigned int c = _kids[0]->_cost[_SQRTD__CONVF2D_MEMORYRX__] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, sqrtF_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _SQRTD__CONVF2D_REGF__) ) {
      unsigned int c = _kids[0]->_cost[_SQRTD__CONVF2D_REGF__] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, sqrtF_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_ConvD2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, convD2I_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, convD2I_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convD2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, convD2I_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, convD2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, convD2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, convD2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convD2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, convD2L_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvF2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRX] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convF2D_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, convF2D_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRX];
        DFA_PRODUCTION__SET_VALID(_CONVF2D_MEMORYRX_, _ConvF2D_memoryRX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_CONVF2D_REGF_, _ConvF2D_regF__rule, c)
    }
}
void  State::_sub_Op_ConvF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, convF2I_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, convF2I_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convF2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, convF2I_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvF2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, convF2L_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, convF2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, convF2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convF2L_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, convF2L_reg_rule, c+1)
    }
}
void  State::_sub_Op_ConvI2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convI2D_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_ConvI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convI2F_ireg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_ConvI2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 10492 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false
#line 4758 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, expand_Repl2I_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, expand_Repl2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, expand_Repl2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, expand_Repl2I_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, expand_Repl2I_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, convI2L_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, convI2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, convI2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, convI2L_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, convI2L_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI];
        DFA_PRODUCTION__SET_VALID(_CONVI2L_IREGI_, _ConvI2L_iRegI__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_];
        DFA_PRODUCTION__SET_VALID(_CONVI2L__LOADI_MEMORY__, _ConvI2L__LoadI_memory___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadI2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadI2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadI2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUS_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadUS2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADS_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadS2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadS2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadS2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADUB_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADUB_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadUB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadUB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadUB2L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADB_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[_LOADB_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, loadB2L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadB2L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadB2L_rule, c+1)
      }
    }
}
void  State::_sub_Op_ConvL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, convL2D_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_ConvL2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, convL2F_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_ConvL2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _RSHIFTL_IREGL_IMMI_32_63) ) {
      unsigned int c = _kids[0]->_cost[_RSHIFTL_IREGL_IMMI_32_63] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, shrL_reg_imm6_L2I_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, shrL_reg_imm6_L2I_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, shrL_reg_imm6_L2I_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, shrL_reg_imm6_L2I_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, convL2I_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, convL2I_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, convL2I_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, convL2I_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_CountedLoopEnd(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGI_IMMI8) &&
        (
#line 9515 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 4970 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPI_IREGI_IMMI8]+BRANCH_COST+DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, testAndBranchLoopEnd_ImmFar_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGI_IREGI) &&
        (
#line 9427 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 4979 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPI_IREGI_IREGI]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, testAndBranchLoopEnd_RegFar_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG] + BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchLoopEndFar_rule, c)
      }
    }
}
void  State::_sub_Op_CountLeadingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGI, countLeadingZerosI_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, countLeadingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, countLeadingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, countLeadingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountLeadingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGI, countLeadingZerosL_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, countLeadingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, countLeadingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, countLeadingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+8 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGI, countTrailingZerosI_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, countTrailingZerosI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, countTrailingZerosI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, countTrailingZerosI_rule, c+1)
    }
}
void  State::_sub_Op_CountTrailingZerosL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+8 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGI, countTrailingZerosL_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, countTrailingZerosL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, countTrailingZerosL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, countTrailingZerosL_rule, c+1)
    }
}
void  State::_sub_Op_CreateEx(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(RARG1REGP, CreateException_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, CreateException_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, CreateException_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, CreateException_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c+1)
    }
}
void  State::_sub_Op_DecodeN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMN8) ) {
      unsigned int c = _kids[0]->_cost[IMMN8];
        DFA_PRODUCTION__SET_VALID(_DECODEN_IMMN8_, _DecodeN_immN8__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 4893 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            Universe::narrow_oop_base() != NULL && ExpandLoadingBaseDecode_NN
#line 5090 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+MEMORY_REF_COST+2 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, decodeN_NN_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_NN_Ex_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_NN_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 4879 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Universe::narrow_oop_base() != NULL && ExpandLoadingBaseDecode
#line 5119 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+MEMORY_REF_COST+3 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeN_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_Ex_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 4852 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false
#line 5190 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeN_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_base_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 4826 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull ||
             n->bottom_type()->is_oopptr()->ptr() == TypePtr::Constant) &&
            (Universe::narrow_oop_base()== NULL || !ExpandLoadingBaseDecode_NN)
#line 5263 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+MEMORY_REF_COST+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeN_NN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_NN_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_NN_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        (
#line 4804 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Universe::narrow_oop_base() == NULL || !ExpandLoadingBaseDecode
#line 5334 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+MEMORY_REF_COST+3 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeN_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeN_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADN_MEMORY_) &&
        (
#line 4765 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false && (Universe::narrow_oop_base()==NULL)&&(Universe::narrow_oop_shift()==0)
#line 5405 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADN_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeLoadN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeLoadN_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeLoadN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeLoadN_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN];
        DFA_PRODUCTION__SET_VALID(_DECODEN_IREGN_, _DecodeN_iRegN__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGN) &&
        
#line 3496 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Universe::narrow_oop_base() == NULL && Universe::narrow_oop_shift() == 0 &&
            _leaf->as_DecodeN()->in(0) == NULL
#line 5481 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGN]+1;
        DFA_PRODUCTION__SET_VALID(IREGN2P, iRegN2P_rule, c)
    }
}
void  State::_sub_Op_DecodeNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGN) ) {
      unsigned int c = _kids[0]->_cost[IREGN]+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, decodeKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeKlass_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeKlass_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMNKLASS) ) {
      unsigned int c = _kids[0]->_cost[IMMNKLASS]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeLoadConNKlass_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeLoadConNKlass_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeLoadConNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeLoadConNKlass_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADNKLASS_MEMORY_) &&
        (
#line 4776 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false && (Universe::narrow_klass_base()==NULL)&&(Universe::narrow_klass_shift()==0)
#line 5582 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_LOADNKLASS_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGP) || _cost[IREGP] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP, decodeLoadNKlass_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGP_N2P) || _cost[IREGP_N2P] > c) {
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTP) || _cost[STACKSLOTP] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGP) || _cost[NOARG_IREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGP) || _cost[RARG1REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGP) || _cost[RARG2REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGP) || _cost[RARG3REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGP) || _cost[RARG4REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGP) || _cost[RARG5REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYREGP) || _cost[MEMORYREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INDIRECT) || _cost[INDIRECT] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(INDIRECT, decodeLoadNKlass_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORY) || _cost[MEMORY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRXY) || _cost[MEMORYRXY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRX) || _cost[MEMORYRX] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRSY) || _cost[MEMORYRSY] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(MEMORYRS) || _cost[MEMORYRS] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(REVENREGP) || _cost[REVENREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGP) || _cost[RODDREGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INLINE_CACHE_REGP) || _cost[INLINE_CACHE_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(COMPILER_METHOD_OOP_REGP) || _cost[COMPILER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, decodeLoadNKlass_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(INTERPRETER_METHOD_OOP_REGP) || _cost[INTERPRETER_METHOD_OOP_REGP] > c+1) {
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, decodeLoadNKlass_rule, c+1)
      }
    }
}
void  State::_sub_Op_DivD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, divD_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, divD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_DivF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGF, divF_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, divF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_DivI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+2 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(RODDREGI, divI_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, divI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, divI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, divI_reg_imm16_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, divI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, divI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, divI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, divI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, divI_reg_imm16_rule, c+1+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], NOODD_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[NOODD_IREGI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, divI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGI, divI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, divI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, divI_reg_reg_rule, c+1+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, divI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, divI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, divI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, divI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, divI_reg_reg_rule, c+1+1)
      }
    }
}
void  State::_sub_Op_DivL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16]+2 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(RODDREGL, divL_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, divL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, divL_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, divL_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, divL_reg_imm16_rule, c+1+1)
    }
    if( STATE__VALID_CHILD(_kids[0], RODDREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[RODDREGL]+_kids[1]->_cost[IREGL]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, divL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGL, divL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, divL_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, divL_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, divL_reg_reg_rule, c+1+1)
      }
    }
}
void  State::_sub_Op_DivModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RODDREGI) && STATE__VALID_CHILD(_kids[1], NOODD_IREGI) ) {
      unsigned int c = _kids[0]->_cost[RODDREGI]+_kids[1]->_cost[NOODD_IREGI]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, divModI_reg_divmod_rule, c)
    }
}
void  State::_sub_Op_DivModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RODDREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[RODDREGL]+_kids[1]->_cost[IREGL]+2 * DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, divModL_reg_divmod_rule, c)
    }
}
void  State::_sub_Op_EncodeISOArray(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_IREGP_IREGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, encode_iso_array_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, encode_iso_array_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, encode_iso_array_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, encode_iso_array_rule, c+1)
    }
}
void  State::_sub_Op_EncodeP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 4998 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull) &&
            (Universe::narrow_oop_base_overlaps() && ExpandLoadingBaseEncode_NN)
#line 5795 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+MEMORY_REF_COST+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_NN_Ex_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_NN_Ex_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_NN_Ex_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 4978 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() != TypePtr::NotNull) &&
            (Universe::narrow_oop_base_overlaps() && ExpandLoadingBaseEncode)
#line 5812 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+MEMORY_REF_COST+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_Ex_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_Ex_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_Ex_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 4966 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false
#line 5844 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[IREGL]+MEMORY_REF_COST+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_NN_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_NN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_NN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_NN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_NN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_NN_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_NN_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGL_IREGN) &&
        (
#line 4950 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false
#line 5876 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_IREGL_IREGN]+MEMORY_REF_COST+2 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_base_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_base_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_base_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 4935 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() == TypePtr::NotNull) &&
            (Universe::narrow_oop_base() == 0 ||
             Universe::narrow_oop_base_disjoint() ||
             !ExpandLoadingBaseEncode_NN)
#line 5911 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+MEMORY_REF_COST+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_NN_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_NN_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_NN_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        (
#line 4912 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->bottom_type()->make_ptr()->ptr() != TypePtr::NotNull) &&
            (Universe::narrow_oop_base() == 0 ||
             Universe::narrow_oop_base_disjoint() ||
             !ExpandLoadingBaseEncode)
#line 5946 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+MEMORY_REF_COST+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGN) || _cost[IREGN] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN, encodeP_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGN_P2N) || _cost[IREGN_P2N] > c) {
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
      }
      if (STATE__NOT_YET_VALID(NOARG_IREGN) || _cost[NOARG_IREGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGN) || _cost[RARG1REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGN) || _cost[RARG2REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGN) || _cost[RARG3REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGN) || _cost[RARG4REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeP_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGN) || _cost[RARG5REGN] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeP_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) &&
        
#line 3488 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Universe::narrow_oop_shift() == 0 && _leaf->as_EncodeP()->in(0) == NULL
#line 5978 "dfa_s390.cpp"
 ) {
      unsigned int c = _kids[0]->_cost[IREGP]+1;
        DFA_PRODUCTION__SET_VALID(IREGP2N, iRegP2N_rule, c)
    }
}
void  State::_sub_Op_EncodePKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, encodeKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, encodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, encodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, encodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, encodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, encodeKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, encodeKlass_rule, c+1)
    }
}
void  State::_sub_Op_FastLock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P]+100;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastLock_rule, c)
    }
}
void  State::_sub_Op_FastUnlock(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP_N2P) && STATE__VALID_CHILD(_kids[1], IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[IREGP_N2P]+_kids[1]->_cost[IREGP_N2P]+100;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, cmpFastUnlock_rule, c)
    }
}
void  State::_sub_Op_FmaD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY__LOADD_MEMORYRX__REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY__LOADD_MEMORYRX__REGD] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, msubD_mem_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY__LOADD_MEMORYRX__REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY__LOADD_MEMORYRX__REGD] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, maddD_mem_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD__LOADD_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, msubD_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD__LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD__LOADD_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, maddD_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGD_REGD_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[_NEGD_REGD_]+_kids[1]->_cost[_BINARY_REGD_REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, msubD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _BINARY_REGD_REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_BINARY_REGD_REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, maddD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_FmaF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY__LOADF_MEMORYRX__REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY__LOADF_MEMORYRX__REGF] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGF, msubF_mem_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY__LOADF_MEMORYRX__REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY__LOADF_MEMORYRX__REGF] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, maddF_mem_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF__LOADF_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, msubF_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF__LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF__LOADF_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, maddF_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _NEGF_REGF_) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[_NEGF_REGF_]+_kids[1]->_cost[_BINARY_REGF_REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, msubF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _BINARY_REGF_REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_BINARY_REGF_REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, maddF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_Goto(const Node *n){
    {
      unsigned int c = BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchFar_rule, c)
    }
}
void  State::_sub_Op_Halt(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, ShouldNotReachHere_rule, c)
    }
}
void  State::_sub_Op_HasNegatives(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG5REGP) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[RARG5REGP]+_kids[1]->_cost[IREGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, has_negatives_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, has_negatives_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, has_negatives_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, has_negatives_rule, c+1)
    }
}
void  State::_sub_Op_If(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP__DECODEN_IREGN___DECODEN_IMMN8_) &&
        (
#line 9603 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6145 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP__DECODEN_IREGN___DECODEN_IMMN8_]+BRANCH_COST+DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegN_immN_Far_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP__DECODEN_IREGN__IMMP0) &&
        (
#line 9590 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6154 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP__DECODEN_IREGN__IMMP0]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegN_immP0_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_IMMP8) &&
        (
#line 9576 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6165 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP_IREGP_IMMP8]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegP_immP_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPL_IREGL_IMML8) &&
        (
#line 9557 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6176 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPL_IREGL_IMML8]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegL_imm_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGI_UIMMI8) &&
        (
#line 9543 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6187 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPU_IREGI_UIMMI8]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpbU_RegI_imm_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGI_IMMI8) &&
        (
#line 9529 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6198 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPI_IREGI_IMMI8]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegI_imm_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP__DECODEN_IREGN___DECODEN_IREGN_) &&
        (
#line 9501 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6209 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP__DECODEN_IREGN___DECODEN_IREGN_]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegNN_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_IREGP) &&
        (
#line 9488 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6220 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP_IREGP_IREGP]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegPP_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPL_IREGL_IREGL) &&
        (
#line 9469 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6231 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPL_IREGL_IREGL]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegL_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGI_IREGI) &&
        (
#line 9455 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6242 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPU_IREGI_IREGI]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpbU_RegI_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPI_IREGI_IREGI) &&
        (
#line 9441 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6253 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPI_IREGI_IREGI]+BRANCH_COST+DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, cmpb_RegI_Far_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOP) && STATE__VALID_CHILD(_kids[1], FLAGSREG) ) {
      unsigned int c = _kids[0]->_cost[CMPOP]+_kids[1]->_cost[FLAGSREG]+2 * BRANCH_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, branchConFar_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPN_IREGN_P2N_IMMN0) &&
        (
#line 8319 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If ()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 6273 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPN_IREGN_P2N_IMMN0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, zeroCheckN_iReg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPP_IREGP_N2P_IMMP0) &&
        (
#line 8302 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
TrapBasedNullChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne &&
            _leaf->as_If ()->_prob >= PROB_LIKELY_MAG(4) &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 6287 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPP_IREGP_N2P_IMMP0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, zeroCheckP_iReg_imm0_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGI_UIMMI16) &&
        (
#line 8284 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If ()->_prob >= PROB_ALWAYS &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 6301 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPU_IREGI_UIMMI16]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_uimmI16_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGI_IREGI) &&
        (
#line 8266 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt &&
            _leaf->as_If ()->_prob >= PROB_ALWAYS &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 6315 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPU_IREGI_IREGI]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_iReg_iReg_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], CMPOPT) && STATE__VALID_CHILD(_kids[1], _CMPU_IREGI_UIMMI16) &&
        (
#line 8248 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
TrapBasedRangeChecks &&
            _kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le &&
            PROB_UNLIKELY(_leaf->as_If ()->_prob) >= PROB_ALWAYS &&
            Matcher::branches_to_uncommon_trap(_leaf)
#line 6329 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[CMPOPT]+_kids[1]->_cost[_CMPU_IREGI_UIMMI16]+1;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, rangeCheck_iReg_uimmI16_rule, c)
      }
    }
}
void  State::_sub_Op_LShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_24) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_24];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGI_IMMI_24, _LShiftI_iRegI_immI_24_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_16];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGI_IMMI_16, _LShiftI_iRegI_immI_16_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_LSHIFTI_IREGI_IMMI8, _LShiftI_iRegI_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 6802 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 6354 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST_LOW;
        DFA_PRODUCTION__SET_VALID(IREGI, sllI_reg_imm_1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, sllI_reg_imm_1_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sllI_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, sllI_reg_imm_1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, sllI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, sllI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sllI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, sllI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, sllI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, sllI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sllI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, sllI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_LShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_LSHIFTL_IREGL_IMMI8, _LShiftL_iRegL_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_1) &&
        (
#line 6833 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
PreferLAoverADD
#line 6444 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_1] + DEFAULT_COST_LOW;
        DFA_PRODUCTION__SET_VALID(IREGL, sllL_reg_imm_1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, sllL_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, sllL_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sllL_reg_imm_1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, sllL_reg_imm_1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, sllL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, sllL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, sllL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sllL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, sllL_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, sllL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, sllL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, sllL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sllL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, sllL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADB_MEMORY_, _LoadB_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadB_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadB_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadB_rule, c+1)
    }
}
void  State::_sub_Op_LoadUB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADUB_MEMORY_, _LoadUB_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadUB_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadUB_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUB_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadUB_rule, c+1)
    }
}
void  State::_sub_Op_LoadUS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADUS_MEMORY_, _LoadUS_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadUS_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadUS_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadUS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadUS_rule, c+1)
    }
}
void  State::_sub_Op_LoadD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRX];
        DFA_PRODUCTION__SET_VALID(_LOADD_MEMORYRX_, _LoadD_memoryRX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, loadD_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_LoadD_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGD, loadD_unaligned_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_LoadF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRX];
        DFA_PRODUCTION__SET_VALID(_LOADF_MEMORYRX_, _LoadF_memoryRX__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(REGF, loadF_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_LoadI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORYRSY_, _LoadI_memoryRSY__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADI_MEMORY_, _LoadI_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadI_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadI_rule, c+1)
    }
}
void  State::_sub_Op_LoadKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadKlass_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadKlass_rule, c+1)
    }
}
void  State::_sub_Op_LoadNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADNKLASS_MEMORY_, _LoadNKlass_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, loadNKlass_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, loadNKlass_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, loadNKlass_rule, c+1)
    }
}
void  State::_sub_Op_LoadL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY];
        DFA_PRODUCTION__SET_VALID(_LOADL_MEMORYRSY_, _LoadL_memoryRSY__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADL_MEMORY_, _LoadL_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadL_rule, c+1)
    }
}
void  State::_sub_Op_LoadL_unaligned(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, loadL_unaligned_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadL_unaligned_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadL_unaligned_rule, c+1)
    }
}
void  State::_sub_Op_LoadPLocked(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadPLocked_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadPLocked_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadPLocked_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadPLocked_rule, c+1)
    }
}
void  State::_sub_Op_LoadP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY];
        DFA_PRODUCTION__SET_VALID(_LOADP_MEMORYRSY_, _LoadP_memoryRSY__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADP_MEMORY_, _LoadP_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGP, loadP_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, loadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, loadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, loadP_rule, c+1)
    }
}
void  State::_sub_Op_LoadN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADN_MEMORY_, _LoadN_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGN, loadN_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGN_P2N, iRegN_rule, c)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGN, loadN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGN, loadN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGN, loadN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGN, loadN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGN, loadN_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGN, loadN_rule, c+1)
    }
}
void  State::_sub_Op_LoadRange(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadRange_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadRange_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadRange_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadRange_rule, c+1)
    }
}
void  State::_sub_Op_LoadS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY];
        DFA_PRODUCTION__SET_VALID(_LOADS_MEMORY_, _LoadS_memory__rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, loadS_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, loadS_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, loadS_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, loadS_rule, c+1)
    }
}
void  State::_sub_Op_MaxI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI8) &&
        (
#line 8961 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6795 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI8]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, z10_maxI_reg_imm8_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z10_maxI_reg_imm8_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z10_maxI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z10_maxI_reg_imm8_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, maxI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, maxI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, maxI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) &&
        (
#line 8918 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 6846 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_maxI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_maxI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_maxI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_maxI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, maxI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, maxI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, maxI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 8874 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 6917 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_maxI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_maxI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_maxI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_maxI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8836 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!VM_Version::has_CompareBranch()
#line 6955 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, maxI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, maxI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, maxI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8803 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 6993 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z10_maxI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z10_maxI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z10_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z10_maxI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8771 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 7031 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_maxI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_maxI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_maxI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_maxI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MemBarAcquire(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_rule, c)
    }
}
void  State::_sub_Op_LoadFence(const Node *n){
    {
      unsigned int c = 4*MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_0_rule, c)
    }
}
void  State::_sub_Op_MemBarAcquireLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_acquire_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarCPUOrder(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_CPUOrder_rule, c)
    }
}
void  State::_sub_Op_MemBarRelease(const Node *n){
    {
      unsigned int c = 4 * MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_rule, c)
    }
}
void  State::_sub_Op_StoreFence(const Node *n){
    {
      unsigned int c = 4 * MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_0_rule, c)
    }
}
void  State::_sub_Op_MemBarReleaseLock(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_release_lock_rule, c)
    }
}
void  State::_sub_Op_MemBarVolatile(const Node *n){
    if(         (
#line 5141 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
Matcher::post_store_load_barrier(n)
#line 7112 "dfa_s390.cpp"
) ) {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, unnecessary_membar_volatile_rule, c)
    }
    {
      unsigned int c = 4 * MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_volatile_rule, c)
      }
    }
}
void  State::_sub_Op_MemBarStoreStore(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, membar_storestore_rule, c)
    }
}
void  State::_sub_Op_MinI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI8) &&
        (
#line 8751 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 7135 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI8]+DEFAULT_COST + BRANCH_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, z10_minI_reg_imm8_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z10_minI_reg_imm8_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z10_minI_reg_imm8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z10_minI_reg_imm8_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, minI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, minI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, minI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) &&
        (
#line 8707 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 7186 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_minI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_minI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_minI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_minI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, minI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, minI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, minI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) &&
        (
#line 8663 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 7257 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_minI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_minI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_minI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_minI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8627 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!VM_Version::has_CompareBranch()
#line 7295 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, minI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, minI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, minI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8594 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_CompareBranch()
#line 7333 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z10_minI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z10_minI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z10_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z10_minI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 8561 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_LoadStoreConditional()
#line 7371 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, z196_minI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, z196_minI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, z196_minI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, z196_minI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_ModI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16]+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGI, modI_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGI, modI_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, modI_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, modI_reg_imm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], NOODD_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[NOODD_IREGI]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, modI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGI, modI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, modI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, modI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_ModL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16]+3 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGL, modL_reg_imm16_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, modL_reg_imm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGL, modL_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, modL_reg_imm16_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, modL_reg_imm16_rule, c+1+1)
    }
    if( STATE__VALID_CHILD(_kids[0], RODDREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[RODDREGL]+_kids[1]->_cost[IREGL]+2 * DEFAULT_COST + BRANCH_COST;
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, modL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(IREGL, modL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+1+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, modL_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, modL_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, modL_reg_reg_rule, c+1+1)
      }
    }
}
void  State::_sub_Op_MoveI2F(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, MoveI2F_reg_stack_rule, c)
        DFA_PRODUCTION__SET_VALID(REGF, stkF_to_regF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTI) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, MoveI2F_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MoveF2I(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTF) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, MoveF2I_stack_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, MoveF2I_stack_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, MoveF2I_stack_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, MoveF2I_stack_reg_rule, c+1)
    }
}
void  State::_sub_Op_MoveL2D(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, MoveL2D_reg_stack_rule, c)
        DFA_PRODUCTION__SET_VALID(REGD, stkD_to_regD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTL) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, MoveL2D_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MoveD2L(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, MoveD2L_reg_stack_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, stkL_to_regL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, stkL_to_regL_rule, c+MEMORY_REF_COST+1)
    }
    if( STATE__VALID_CHILD(_kids[0], STACKSLOTD) ) {
      unsigned int c = _kids[0]->_cost[STACKSLOTD] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, MoveD2L_stack_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, MoveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, MoveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, MoveD2L_stack_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, MoveD2L_stack_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MulD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADD_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[_LOADD_MEMORYRX_]+_kids[1]->_cost[REGD] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, mulD_reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mulD_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, mulD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MulF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADF_MEMORYRX_) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[_LOADF_MEMORYRX_]+_kids[1]->_cost[REGF] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGF, mulF_reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_] + ALU_MEMORY_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mulF_reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, mulF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_MulHiL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RODDREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[RODDREGL]+_kids[1]->_cost[IREGL]+7*DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulHiL_reg_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGL, mulHiL_reg_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulHiL_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulHiL_reg_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulHiL_reg_reg_rule, c+1+1)
    }
}
void  State::_sub_Op_MulI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_Reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, mulI_Reg_mem_0_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, mulI_Reg_mem_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, mulI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, mulI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, mulI_reg_imm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, mulI_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, mulI_reg_imm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, mulI_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, mulI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, mulI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, mulI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, mulI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_MulL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY_]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_Reg_mem_0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_Reg_mem_0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_Reg_mem_0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L__LOADI_MEMORY__) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L__LOADI_MEMORY__]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_Reg_memI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_Reg_memI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_Reg_memI_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L__LOADI_MEMORY__) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L__LOADI_MEMORY__] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_Reg_memI_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_Reg_memI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML32] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_imm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_imm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_reg_imm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_imm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_imm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_reg_imm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVI2L_IREGI_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_CONVI2L_IREGI_]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_regI_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_regI_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_reg_regI_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGI_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, mulL_reg_regI_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, mulL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, mulL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, mulL_reg_regI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, mulL_reg_regI_rule, c+1)
      }
    }
}
void  State::_sub_Op_NegD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGD, negD_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSD_REGD_) ) {
      unsigned int c = _kids[0]->_cost[_ABSD_REGD_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, nabsD_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(_NEGD_REGD_, _NegD_regD__rule, c)
    }
}
void  State::_sub_Op_NegF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(REGF, negF_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _ABSF_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_ABSF_REGF_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, nabsF_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(_NEGF_REGF_, _NegF_regF__rule, c)
    }
}
void  State::_sub_Op_OrI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMML32] + DEFAULT_COST_HIGH;
        DFA_PRODUCTION__SET_VALID(IREGI, orL_reg_uimm32_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orL_reg_uimm32_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orL_reg_uimm32_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI] + DEFAULT_COST_HIGH;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_reg_uimm32_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orI_reg_uimm32_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_reg_uimm32_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orI_reg_uimm32_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI16) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_reg_uimm16_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orI_reg_uimm16_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_reg_uimm16_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orI_reg_uimm16_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orI_Reg_mem_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orI_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, orI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, orI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, orI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, orI_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTI_IREGI_IMMI8) && STATE__VALID_CHILD(_kids[1], _LSHIFTI_IREGI_IMMI8) &&
        (
#line 6961 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 8175 "dfa_s390.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTI_IREGI_IMMI8]+_kids[1]->_cost[_LSHIFTI_IREGI_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rotlI_reg_immI8_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, rotlI_reg_immI8_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rotlI_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, rotlI_reg_immI8_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMI8) && STATE__VALID_CHILD(_kids[1], _URSHIFTI_IREGI_IMMI8) &&
        (
#line 6961 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x1f)
#line 8213 "dfa_s390.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMI8]+_kids[1]->_cost[_URSHIFTI_IREGI_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rotlI_reg_immI8_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, rotlI_reg_immI8_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rotlI_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, rotlI_reg_immI8_rule, c+1)
      }
    }
}
void  State::_sub_Op_OrL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML16) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML16] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, orL_reg_uimm16_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_reg_uimm16_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, orL_reg_uimm16_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY_]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, orL_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, orL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, orL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, orL_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, orL_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, orL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, orL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, orL_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, orL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, orL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, orL_reg_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _URSHIFTL_IREGL_IMMI8) && STATE__VALID_CHILD(_kids[1], _LSHIFTL_IREGL_IMMI8) &&
        (
#line 6972 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x3f)
#line 8325 "dfa_s390.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_URSHIFTL_IREGL_IMMI8]+_kids[1]->_cost[_LSHIFTL_IREGL_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, rotlL_reg_immI8_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, rotlL_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, rotlL_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, rotlL_reg_immI8_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, rotlL_reg_immI8_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTL_IREGL_IMMI8) && STATE__VALID_CHILD(_kids[1], _URSHIFTL_IREGL_IMMI8) &&
        (
#line 6972 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
0 == ((n->in(1)->in(2)->get_int() + n->in(2)->in(2)->get_int()) & 0x3f)
#line 8351 "dfa_s390.cpp"
) && /*src*/(_kids[0]->_kids[0]->_leaf == _kids[1]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTL_IREGL_IMMI8]+_kids[1]->_cost[_URSHIFTL_IREGL_IMMI8] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, rotlL_reg_immI8_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, rotlL_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, rotlL_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, rotlL_reg_immI8_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, rotlL_reg_immI8_rule, c+1)
      }
    }
}
void  State::_sub_Op_OverflowAddI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowAddI_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowAddI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowSubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowNegI_rReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowSubI_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowSubI_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowAddL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowAddL_reg_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowAddL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_OverflowSubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowNegL_rReg_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMML) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMML] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowSubL_reg_imm_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(FLAGSREG) || _cost[FLAGSREG] > c) {
        DFA_PRODUCTION__SET_VALID(FLAGSREG, overflowSubL_reg_reg_rule, c)
      }
    }
}
void  State::_sub_Op_PartialSubtypeCheck(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[RARG3REGP];
        DFA_PRODUCTION__SET_VALID(_PARTIALSUBTYPECHECK_RARG2REGP_RARG3REGP, _PartialSubtypeCheck_rarg2RegP_rarg3RegP_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], RARG2REGP) && STATE__VALID_CHILD(_kids[1], RARG3REGP) ) {
      unsigned int c = _kids[0]->_cost[RARG2REGP]+_kids[1]->_cost[RARG3REGP]+10 * DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(RARG1REGP, partialSubtypeCheck_rule, c)
        DFA_PRODUCTION__SET_VALID(IREGP, partialSubtypeCheck_rule, c+1)
        DFA_PRODUCTION__SET_VALID(STACKSLOTP, regP_to_stkP_rule, c+1+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(NOARG_IREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, partialSubtypeCheck_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1+1)
        DFA_PRODUCTION__SET_VALID(REVENREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INLINE_CACHE_REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(COMPILER_METHOD_OOP_REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(INTERPRETER_METHOD_OOP_REGP, partialSubtypeCheck_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(IREGP_N2P, iRegP_rule, c+1)
    }
}
void  State::_sub_Op_PopCountI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 10947 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
UsePopCountInstruction && VM_Version::has_PopCount()
#line 8469 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, popCountI_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, popCountI_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, popCountI_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, popCountI_rule, c+1)
    }
}
void  State::_sub_Op_PopCountL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) &&
        (
#line 10974 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
UsePopCountInstruction && VM_Version::has_PopCount()
#line 8489 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, popCountL_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, popCountL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, popCountL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, popCountL_rule, c+1)
    }
}
void  State::_sub_Op_PrefetchAllocation(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 4611 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_Prefetch()
#line 8509 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, prefetchAlloc_rule, c)
    }
}
void  State::_sub_Op_RShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMI_24) && STATE__VALID_CHILD(_kids[1], IMMI_24) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMI_24]+_kids[1]->_cost[IMMI_24] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, rShiftI24_lShiftI24_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, rShiftI24_lShiftI24_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rShiftI24_lShiftI24_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, rShiftI24_lShiftI24_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LSHIFTI_IREGI_IMMI_16) && STATE__VALID_CHILD(_kids[1], IMMI_16) &&
        /*amount*/(_kids[0]->_kids[1]->_leaf == _kids[1]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[_LSHIFTI_IREGI_IMMI_16]+_kids[1]->_cost[IMMI_16] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, rShiftI16_lShiftI16_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, rShiftI16_lShiftI16_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, rShiftI16_lShiftI16_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, sraI_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, sraI_reg_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sraI_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, sraI_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, sraI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, sraI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, sraI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, sraI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_RShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI_32_63) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI_32_63];
        DFA_PRODUCTION__SET_VALID(_RSHIFTL_IREGL_IMMI_32_63, _RShiftL_iRegL_immI_32_63_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, sraL_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, sraL_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, sraL_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sraL_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, sraL_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, sraL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, sraL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, sraL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, sraL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, sraL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_Rethrow(const Node *n){
    {
      unsigned int c = CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, RethrowException_rule, c)
    }
}
void  State::_sub_Op_Return(const Node *n){
    {
      unsigned int c = DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, Ret_rule, c)
    }
}
void  State::_sub_Op_RoundDouble(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD];
        DFA_PRODUCTION__SET_VALID(REGD, roundDouble_nop_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_RoundFloat(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF];
        DFA_PRODUCTION__SET_VALID(REGF, roundFloat_nop_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
}
void  State::_sub_Op_SafePoint(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, safePoint_poll_rule, c)
    }
    if(         (
#line 9667 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
false
#line 8701 "dfa_s390.cpp"
) ) {
      unsigned int c = DEFAULT_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, safePoint_rule, c)
      }
    }
}
void  State::_sub_Op_SqrtD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRX) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRX] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, sqrtD_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVF2D_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[_CONVF2D_MEMORYRX_];
        DFA_PRODUCTION__SET_VALID(_SQRTD__CONVF2D_MEMORYRX__, _SqrtD__ConvF2D_memoryRX___rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, sqrtD_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _CONVF2D_REGF_) ) {
      unsigned int c = _kids[0]->_cost[_CONVF2D_REGF_];
        DFA_PRODUCTION__SET_VALID(_SQRTD__CONVF2D_REGF__, _SqrtD__ConvF2D_regF___rule, c)
    }
}
void  State::_sub_Op_StoreB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[IMMI8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, memInitB_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeB_rule, c)
      }
    }
}
void  State::_sub_Op_StoreC(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRS) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRS]+_kids[1]->_cost[IMMI16] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, memInitC_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeC_rule, c)
      }
    }
}
void  State::_sub_Op_StoreCM(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IMMI_0) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IMMI_0] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeCM_rule, c)
    }
}
void  State::_sub_Op_StorePConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGP_IREGP_N2P) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_RARG5REGP_IREGP_N2P] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, storePConditional_rule, c)
    }
}
void  State::_sub_Op_StoreLConditional(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], INDIRECT) && STATE__VALID_CHILD(_kids[1], _BINARY_RARG5REGL_IREGL) ) {
      unsigned int c = _kids[0]->_cost[INDIRECT]+_kids[1]->_cost[_BINARY_RARG5REGL_IREGL] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(FLAGSREG, storeLConditional_rule, c)
    }
}
void  State::_sub_Op_StoreD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGD] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeD_rule, c)
    }
}
void  State::_sub_Op_StoreF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[REGF] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeF_rule, c)
    }
}
void  State::_sub_Op_StoreI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], _ADDI__LOADI_MEMORYRSY__IMMI8) &&
        (
#line 5902 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_MemWithImmALUOps()
#line 8792 "dfa_s390.cpp"
) && /*mem*/(_kids[0]->_leaf == _kids[1]->_kids[0]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[_ADDI__LOADI_MEMORYRSY__IMMI8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, addI_mem_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRS) && STATE__VALID_CHILD(_kids[1], IMMI16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRS]+_kids[1]->_cost[IMMI16] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, memInitI_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeI_rule, c)
      }
    }
}
void  State::_sub_Op_StoreL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], _ADDL__LOADL_MEMORYRSY__IMML8) &&
        (
#line 6061 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_MemWithImmALUOps()
#line 8815 "dfa_s390.cpp"
) && /*mem*/(_kids[0]->_leaf == _kids[1]->_kids[0]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[_ADDL__LOADL_MEMORYRSY__IMML8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, addL_mem_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRS) && STATE__VALID_CHILD(_kids[1], IMML16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRS]+_kids[1]->_cost[IMML16] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, memInitL_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeL_rule, c)
      }
    }
}
void  State::_sub_Op_StoreP(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORYRSY) && STATE__VALID_CHILD(_kids[1], _ADDP__LOADP_MEMORYRSY__IMML8) &&
        (
#line 6227 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_MemWithImmALUOps()
#line 8838 "dfa_s390.cpp"
) && /*mem*/(_kids[0]->_leaf == _kids[1]->_kids[0]->_kids[0]->_leaf) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRSY]+_kids[1]->_cost[_ADDP__LOADP_MEMORYRSY__IMML8] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, addP_mem_imm_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORYRS) && STATE__VALID_CHILD(_kids[1], IMMP16) ) {
      unsigned int c = _kids[0]->_cost[MEMORYRS]+_kids[1]->_cost[IMMP16] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, memInitP_rule, c)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], MEMORYREGP) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[MEMORYREGP] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeP_rule, c)
      }
    }
}
void  State::_sub_Op_StoreN(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN_P2N) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN_P2N] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeN_rule, c)
    }
}
void  State::_sub_Op_StoreNKlass(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGN) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGN] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeNKlass_rule, c)
    }
}
void  State::_sub_Op_StrComp(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10082 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL
#line 8873 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, string_compareUL_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_compareUL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareUL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_compareUL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10067 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU
#line 8891 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_compareLU_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_compareLU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareLU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_compareLU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10052 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrCompNode*)n)->encoding() == StrIntrinsicNode::none
#line 8929 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_compareU_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_compareU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_compareU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10037 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL
#line 8967 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_compareL_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_compareL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compareL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_compareL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrCompressedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_IREGP_IREGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, string_compress_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_compress_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_compress_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_compress_rule, c+1)
    }
}
void  State::_sub_Op_StrEquals(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGP) && STATE__VALID_CHILD(_kids[1], IMMI8) &&
        (
#line 9982 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::none
#line 9022 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGP]+_kids[1]->_cost[IMMI8]+100;
        DFA_PRODUCTION__SET_VALID(IREGI, string_equalsC_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_equalsC_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equalsC_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_equalsC_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGP) && STATE__VALID_CHILD(_kids[1], UIMMI8) &&
        (
#line 9957 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL || ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU
#line 9040 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGP]+_kids[1]->_cost[UIMMI8]+100;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_equals_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_equals_imm_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equals_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_equals_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGP) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 9943 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::none
#line 9078 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGP]+_kids[1]->_cost[IREGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_equalsU_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_equalsU_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equalsU_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_equalsU_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGP) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 9929 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL
#line 9116 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGP]+_kids[1]->_cost[IREGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, string_equalsL_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, string_equalsL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, string_equalsL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, string_equalsL_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOf(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10251 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 9156 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_UL_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_UL_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_UL_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_UL_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10236 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 9174 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_RARG5REGI) &&
        (
#line 10221 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::none
#line 9212 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_RARG5REGI]+300;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMI16) &&
        (
#line 10206 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 9250 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_IMMI16]+250;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMI16) &&
        (
#line 10191 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 9288 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_IMMI16]+250;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_RARG2REGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMI16) &&
        (
#line 10176 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::none
#line 9326 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_RARG2REGI]+_kids[1]->_cost[_BINARY_IREGP_IMMI16]+250;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm_U_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMP_IMMI_1) &&
        (
#line 10156 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UL
#line 9364 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGI]+_kids[1]->_cost[_BINARY_IMMP_IMMI_1]+200;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm1_UL_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm1_UL_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_UL_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm1_UL_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMP_IMMI_1) &&
        (
#line 10137 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::LL
#line 9402 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGI]+_kids[1]->_cost[_BINARY_IMMP_IMMI_1]+200;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm1_L_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm1_L_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_L_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm1_L_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGI) && STATE__VALID_CHILD(_kids[1], _BINARY_IMMP_IMMI_1) &&
        (
#line 10112 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrIndexOfNode*)n)->encoding() == StrIntrinsicNode::none
#line 9440 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGI]+_kids[1]->_cost[_BINARY_IMMP_IMMI_1]+200;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, indexOf_imm1_U_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOf_imm1_U_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOf_imm1_U_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOf_imm1_U_rule, c+1)
      }
    }
}
void  State::_sub_Op_StrIndexOfChar(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], _BINARY_IREGP_IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_BINARY_IREGP_IREGI]+_kids[1]->_cost[IREGI]+200;
        DFA_PRODUCTION__SET_VALID(IREGI, indexOfChar_U_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, indexOfChar_U_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, indexOfChar_U_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, indexOfChar_U_rule, c+1)
    }
}
void  State::_sub_Op_StrInflatedCopy(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_IREGP_IMMI]+300;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, string_inflate_const_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], _BINARY_IREGP_IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[_BINARY_IREGP_IREGI]+300;
      if (STATE__NOT_YET_VALID(UNIVERSE) || _cost[UNIVERSE] > c) {
        DFA_PRODUCTION__SET_VALID(UNIVERSE, string_inflate_rule, c)
      }
    }
}
void  State::_sub_Op_SubD(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], _LOADD_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[_LOADD_MEMORYRX_] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGD, subD_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGD) && STATE__VALID_CHILD(_kids[1], REGD) ) {
      unsigned int c = _kids[0]->_cost[REGD]+_kids[1]->_cost[REGD] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGD) || _cost[REGD] > c) {
        DFA_PRODUCTION__SET_VALID(REGD, subD_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTD) || _cost[STACKSLOTD] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTD, regD_to_stkD_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_SubF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], _LOADF_MEMORYRX_) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[_LOADF_MEMORYRX_] + ALU_MEMORY_COST;
        DFA_PRODUCTION__SET_VALID(REGF, subF_reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) && STATE__VALID_CHILD(_kids[1], REGF) ) {
      unsigned int c = _kids[0]->_cost[REGF]+_kids[1]->_cost[REGF] + ALU_REG_COST;
      if (STATE__NOT_YET_VALID(REGF) || _cost[REGF] > c) {
        DFA_PRODUCTION__SET_VALID(REGF, subF_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTF) || _cost[STACKSLOTF] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTF, regF_to_stkF_rule, c+MEMORY_REF_COST)
      }
    }
}
void  State::_sub_Op_SubI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) && STATE__VALID_CHILD(_kids[1], _ABSI_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0]+_kids[1]->_cost[_ABSI_IREGI_] + DEFAULT_COST_LOW;
        DFA_PRODUCTION__SET_VALID(IREGI, negabsI_reg_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, negabsI_reg_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, negabsI_reg_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, negabsI_reg_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_zero_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, subI_zero_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_zero_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, subI_zero_reg_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, subI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, subI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) &&
        (
#line 6252 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_DistinctOpnds()
#line 9618 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_reg_reg_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, subI_reg_reg_RISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, subI_reg_reg_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, subI_reg_reg_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, subI_reg_reg_CISC_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, subI_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, subI_reg_reg_CISC_rule, c+1)
      }
    }
}
void  State::_sub_Op_SubL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, subL_Reg_mem_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, subL_Reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, subL_Reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_Reg_mem_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, subL_Reg_mem_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L__LOADI_MEMORY__) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L__LOADI_MEMORY__] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_Reg_memI_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, subL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, subL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_Reg_memI_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, subL_Reg_memI_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _CONVI2L_IREGI_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_CONVI2L_IREGI_] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_reg_regI_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, subL_reg_regI_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, subL_reg_regI_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_reg_regI_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, subL_reg_regI_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 6298 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_DistinctOpnds()
#line 9742 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_reg_reg_RISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, subL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, subL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_reg_reg_RISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, subL_reg_reg_RISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, subL_reg_reg_CISC_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, subL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, subL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, subL_reg_reg_CISC_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, subL_reg_reg_CISC_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMML_0) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IMML_0]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, negL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, negL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, negL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_TailCall(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], INLINE_CACHE_REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[INLINE_CACHE_REGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, TailCalljmpInd_rule, c)
    }
}
void  State::_sub_Op_TailJump(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGP) && STATE__VALID_CHILD(_kids[1], RARG1REGP) ) {
      unsigned int c = _kids[0]->_cost[IREGP]+_kids[1]->_cost[RARG1REGP] + CALL_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, tailjmpInd_rule, c)
    }
}
void  State::_sub_Op_ThreadLocal(const Node *n){
    {
      unsigned int c = 0;
        DFA_PRODUCTION__SET_VALID(THREADREGP, tlsLoadP_rule, c)
        DFA_PRODUCTION__SET_VALID(MEMORYREGP, tlsLoadP_rule, c+1)
        DFA_PRODUCTION__SET_VALID(INDIRECT, tlsLoadP_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRXY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRX, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRSY, indirect_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(MEMORYRS, indirect_rule, c+1+1)
    }
}
void  State::_sub_Op_URShiftI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_URSHIFTI_IREGI_IMMI8, _URShiftI_iRegI_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGI, srlI_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, srlI_reg_imm_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, srlI_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, srlI_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI]+3 * DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, srlI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, srlI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, srlI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, srlI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_URShiftL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI8) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI8];
        DFA_PRODUCTION__SET_VALID(_URSHIFTL_IREGL_IMMI8, _URShiftL_iRegL_immI8_rule, c)
    }
    if( STATE__VALID_CHILD(_kids[0], _CASTP2X_IREGP_N2P_) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[_CASTP2X_IREGP_N2P_]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, srlP_reg_imm_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, srlP_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, srlP_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, srlP_reg_imm_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, srlP_reg_imm_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IMMI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, srlL_reg_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, srlL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, srlL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, srlL_reg_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, srlL_reg_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, srlL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, srlL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, srlL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, srlL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, srlL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], UIMMI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[UIMMI] + DEFAULT_COST_HIGH;
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_reg_uimm32_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, xorI_reg_uimm32_rule, c+1+1)
        DFA_PRODUCTION__SET_VALID(RODDREGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGI, xorI_reg_uimm32_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADI_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[_LOADI_MEMORY_]+_kids[1]->_cost[IREGI] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, xorI_Reg_mem_0_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, xorI_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], _LOADI_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[_LOADI_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, xorI_Reg_mem_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, xorI_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) && STATE__VALID_CHILD(_kids[1], IREGI) ) {
      unsigned int c = _kids[0]->_cost[IREGI]+_kids[1]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGI) || _cost[IREGI] > c) {
        DFA_PRODUCTION__SET_VALID(IREGI, xorI_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTI) || _cost[STACKSLOTI] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTI, regI_to_stkI_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGI) || _cost[REVENREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(NOODD_IREGI) || _cost[NOODD_IREGI] > c+1+1) {
        DFA_PRODUCTION__SET_VALID(NOODD_IREGI, xorI_reg_reg_rule, c+1+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGI) || _cost[RODDREGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGI) || _cost[RARG1REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG2REGI) || _cost[RARG2REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG2REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG3REGI) || _cost[RARG3REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG3REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG4REGI) || _cost[RARG4REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG4REGI, xorI_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGI) || _cost[RARG5REGI] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGI, xorI_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_XorL(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], UIMML32) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[UIMML32] + DEFAULT_COST_HIGH;
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_reg_uimm32_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, xorL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, xorL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_reg_uimm32_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, xorL_reg_uimm32_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], _LOADL_MEMORY_) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[_LOADL_MEMORY_]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_Reg_mem_0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, xorL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, xorL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_Reg_mem_0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, xorL_Reg_mem_0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], _LOADL_MEMORY_) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[_LOADL_MEMORY_] + MEMORY_REF_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_Reg_mem_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, xorL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, xorL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_Reg_mem_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, xorL_Reg_mem_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGL) && STATE__VALID_CHILD(_kids[1], IREGL) ) {
      unsigned int c = _kids[0]->_cost[IREGL]+_kids[1]->_cost[IREGL] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, xorL_reg_reg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, xorL_reg_reg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, xorL_reg_reg_rule, c+1)
      }
    }
}
void  State::_sub_Op_LoadVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) &&
        (
#line 10753 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_LoadVector()->memory_size() == 8
#line 10134 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, loadV8_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, loadV8_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, loadV8_rule, c+1)
    }
}
void  State::_sub_Op_StoreVector(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], MEMORY) && STATE__VALID_CHILD(_kids[1], IREGL) &&
        (
#line 10740 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_StoreVector()->memory_size() == 8
#line 10150 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[MEMORY]+_kids[1]->_cost[IREGL] + MEMORY_REF_COST;
        DFA_PRODUCTION__SET_VALID(UNIVERSE, storeA8B_rule, c)
    }
}
void  State::_sub_Op_ReplicateB(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMB_MINUS1) &&
        (
#line 10559 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 8
#line 10161 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMB_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, Repl8B_immm1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl8B_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl8B_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl8B_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl8B_immm1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 10549 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 8
#line 10175 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl8B_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl8B_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl8B_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl8B_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl8B_imm0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMB_N0M1) &&
        (
#line 10531 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 8
#line 10201 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMB_N0M1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl8B_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl8B_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl8B_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl8B_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl8B_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 10515 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->as_Vector()->length() == 8)
#line 10227 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl8B_reg_risbg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl8B_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl8B_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl8B_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl8B_reg_risbg_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReplicateS(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMS_MINUS1) &&
        (
#line 10614 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 4
#line 10255 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMS_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, Repl4S_immm1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl4S_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl4S_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl4S_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl4S_immm1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 10604 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 4
#line 10269 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl4S_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl4S_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl4S_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl4S_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl4S_imm0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMS_N0M1) &&
        (
#line 10586 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 4
#line 10295 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMS_N0M1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl4S_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl4S_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl4S_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl4S_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl4S_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 10571 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->as_Vector()->length() == 4)
#line 10321 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl4S_reg_risbg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl4S_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl4S_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl4S_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl4S_reg_risbg_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReplicateI(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMI_MINUS1) &&
        (
#line 10666 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 2
#line 10349 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_MINUS1] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2I_immm1_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2I_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2I_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2I_immm1_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2I_immm1_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_0) &&
        (
#line 10656 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 2
#line 10363 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_0] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2I_imm0_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2I_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2I_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2I_imm0_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2I_imm0_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IMMI_N0M1) &&
        (
#line 10640 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 2
#line 10389 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMI_N0M1] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2I_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2I_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2I_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2I_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2I_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], IREGI) &&
        (
#line 10626 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
(n->as_Vector()->length() == 2)
#line 10415 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IREGI] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2I_reg_risbg_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2I_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2I_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2I_reg_risbg_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2I_reg_risbg_rule, c+1)
      }
    }
}
void  State::_sub_Op_ReplicateF(const Node *n){
    if( STATE__VALID_CHILD(_kids[0], IMMFP0) &&
        (
#line 10728 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 2
#line 10443 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMFP0] + DEFAULT_COST;
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2F_imm0_rule, c)
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2F_imm0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2F_imm0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2F_imm0_rule, c+1)
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2F_imm0_rule, c+1)
    }
    if( STATE__VALID_CHILD(_kids[0], IMMF) &&
        (
#line 10709 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
n->as_Vector()->length() == 2
#line 10457 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[IMMF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2F_imm_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2F_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2F_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2F_imm_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2F_imm_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 10693 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2
#line 10483 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2F_reg_direct_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2F_reg_direct_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2F_reg_direct_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2F_reg_direct_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2F_reg_direct_rule, c+1)
      }
    }
    if( STATE__VALID_CHILD(_kids[0], REGF) &&
        (
#line 10678 "/usr/work/d038402/hg/jdk/src/hotspot/cpu/s390/s390.ad"
!VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2
#line 10509 "dfa_s390.cpp"
) ) {
      unsigned int c = _kids[0]->_cost[REGF] + DEFAULT_COST;
      if (STATE__NOT_YET_VALID(IREGL) || _cost[IREGL] > c) {
        DFA_PRODUCTION__SET_VALID(IREGL, Repl2F_reg_indirect_rule, c)
      }
      if (STATE__NOT_YET_VALID(STACKSLOTL) || _cost[STACKSLOTL] > c+MEMORY_REF_COST) {
        DFA_PRODUCTION__SET_VALID(STACKSLOTL, regL_to_stkL_rule, c+MEMORY_REF_COST)
      }
      if (STATE__NOT_YET_VALID(REVENREGL) || _cost[REVENREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(REVENREGL, Repl2F_reg_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RODDREGL) || _cost[RODDREGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RODDREGL, Repl2F_reg_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG1REGL) || _cost[RARG1REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG1REGL, Repl2F_reg_indirect_rule, c+1)
      }
      if (STATE__NOT_YET_VALID(RARG5REGL) || _cost[RARG5REGL] > c+1) {
        DFA_PRODUCTION__SET_VALID(RARG5REGL, Repl2F_reg_indirect_rule, c+1)
      }
    }
}
bool State::DFA(int opcode, const Node *n) {
  switch(opcode) {
  case Op_RegN: { _sub_Op_RegN(n);
    break;
  }
  case Op_RegI: { _sub_Op_RegI(n);
    break;
  }
  case Op_RegP: { _sub_Op_RegP(n);
    break;
  }
  case Op_RegF: { _sub_Op_RegF(n);
    break;
  }
  case Op_RegD: { _sub_Op_RegD(n);
    break;
  }
  case Op_RegL: { _sub_Op_RegL(n);
    break;
  }
  case Op_RegFlags: { _sub_Op_RegFlags(n);
    break;
  }
  case Op_AbsD: { _sub_Op_AbsD(n);
    break;
  }
  case Op_AbsF: { _sub_Op_AbsF(n);
    break;
  }
  case Op_AbsI: { _sub_Op_AbsI(n);
    break;
  }
  case Op_AddD: { _sub_Op_AddD(n);
    break;
  }
  case Op_AddF: { _sub_Op_AddF(n);
    break;
  }
  case Op_AddI: { _sub_Op_AddI(n);
    break;
  }
  case Op_AddL: { _sub_Op_AddL(n);
    break;
  }
  case Op_AddP: { _sub_Op_AddP(n);
    break;
  }
  case Op_AndI: { _sub_Op_AndI(n);
    break;
  }
  case Op_AndL: { _sub_Op_AndL(n);
    break;
  }
  case Op_AryEq: { _sub_Op_AryEq(n);
    break;
  }
  case Op_Binary: { _sub_Op_Binary(n);
    break;
  }
  case Op_Bool: { _sub_Op_Bool(n);
    break;
  }
  case Op_ReverseBytesI: { _sub_Op_ReverseBytesI(n);
    break;
  }
  case Op_ReverseBytesL: { _sub_Op_ReverseBytesL(n);
    break;
  }
  case Op_CallDynamicJava: { _sub_Op_CallDynamicJava(n);
    break;
  }
  case Op_CallLeaf: { _sub_Op_CallLeaf(n);
    break;
  }
  case Op_CallLeafNoFP: { _sub_Op_CallLeafNoFP(n);
    break;
  }
  case Op_CallRuntime: { _sub_Op_CallRuntime(n);
    break;
  }
  case Op_CallStaticJava: { _sub_Op_CallStaticJava(n);
    break;
  }
  case Op_CastII: { _sub_Op_CastII(n);
    break;
  }
  case Op_CastX2P: { _sub_Op_CastX2P(n);
    break;
  }
  case Op_CastP2X: { _sub_Op_CastP2X(n);
    break;
  }
  case Op_CastPP: { _sub_Op_CastPP(n);
    break;
  }
  case Op_CheckCastPP: { _sub_Op_CheckCastPP(n);
    break;
  }
  case Op_ClearArray: { _sub_Op_ClearArray(n);
    break;
  }
  case Op_CMoveD: { _sub_Op_CMoveD(n);
    break;
  }
  case Op_CMoveF: { _sub_Op_CMoveF(n);
    break;
  }
  case Op_CMoveI: { _sub_Op_CMoveI(n);
    break;
  }
  case Op_CMoveL: { _sub_Op_CMoveL(n);
    break;
  }
  case Op_CMoveP: { _sub_Op_CMoveP(n);
    break;
  }
  case Op_CMoveN: { _sub_Op_CMoveN(n);
    break;
  }
  case Op_CmpN: { _sub_Op_CmpN(n);
    break;
  }
  case Op_CmpD: { _sub_Op_CmpD(n);
    break;
  }
  case Op_CmpD3: { _sub_Op_CmpD3(n);
    break;
  }
  case Op_CmpF: { _sub_Op_CmpF(n);
    break;
  }
  case Op_CmpF3: { _sub_Op_CmpF3(n);
    break;
  }
  case Op_CmpI: { _sub_Op_CmpI(n);
    break;
  }
  case Op_CmpL: { _sub_Op_CmpL(n);
    break;
  }
  case Op_CmpL3: { _sub_Op_CmpL3(n);
    break;
  }
  case Op_CmpLTMask: { _sub_Op_CmpLTMask(n);
    break;
  }
  case Op_CmpP: { _sub_Op_CmpP(n);
    break;
  }
  case Op_CmpU: { _sub_Op_CmpU(n);
    break;
  }
  case Op_CmpUL: { _sub_Op_CmpUL(n);
    break;
  }
  case Op_CompareAndSwapI: { _sub_Op_CompareAndSwapI(n);
    break;
  }
  case Op_CompareAndSwapL: { _sub_Op_CompareAndSwapL(n);
    break;
  }
  case Op_CompareAndSwapP: { _sub_Op_CompareAndSwapP(n);
    break;
  }
  case Op_CompareAndSwapN: { _sub_Op_CompareAndSwapN(n);
    break;
  }
  case Op_GetAndAddI: { _sub_Op_GetAndAddI(n);
    break;
  }
  case Op_GetAndAddL: { _sub_Op_GetAndAddL(n);
    break;
  }
  case Op_GetAndSetI: { _sub_Op_GetAndSetI(n);
    break;
  }
  case Op_GetAndSetL: { _sub_Op_GetAndSetL(n);
    break;
  }
  case Op_GetAndSetP: { _sub_Op_GetAndSetP(n);
    break;
  }
  case Op_GetAndSetN: { _sub_Op_GetAndSetN(n);
    break;
  }
  case Op_ConN: { _sub_Op_ConN(n);
    break;
  }
  case Op_ConNKlass: { _sub_Op_ConNKlass(n);
    break;
  }
  case Op_ConD: { _sub_Op_ConD(n);
    break;
  }
  case Op_ConF: { _sub_Op_ConF(n);
    break;
  }
  case Op_ConI: { _sub_Op_ConI(n);
    break;
  }
  case Op_ConL: { _sub_Op_ConL(n);
    break;
  }
  case Op_ConP: { _sub_Op_ConP(n);
    break;
  }
  case Op_Conv2B: { _sub_Op_Conv2B(n);
    break;
  }
  case Op_ConvD2F: { _sub_Op_ConvD2F(n);
    break;
  }
  case Op_ConvD2I: { _sub_Op_ConvD2I(n);
    break;
  }
  case Op_ConvD2L: { _sub_Op_ConvD2L(n);
    break;
  }
  case Op_ConvF2D: { _sub_Op_ConvF2D(n);
    break;
  }
  case Op_ConvF2I: { _sub_Op_ConvF2I(n);
    break;
  }
  case Op_ConvF2L: { _sub_Op_ConvF2L(n);
    break;
  }
  case Op_ConvI2D: { _sub_Op_ConvI2D(n);
    break;
  }
  case Op_ConvI2F: { _sub_Op_ConvI2F(n);
    break;
  }
  case Op_ConvI2L: { _sub_Op_ConvI2L(n);
    break;
  }
  case Op_ConvL2D: { _sub_Op_ConvL2D(n);
    break;
  }
  case Op_ConvL2F: { _sub_Op_ConvL2F(n);
    break;
  }
  case Op_ConvL2I: { _sub_Op_ConvL2I(n);
    break;
  }
  case Op_CountedLoopEnd: { _sub_Op_CountedLoopEnd(n);
    break;
  }
  case Op_CountLeadingZerosI: { _sub_Op_CountLeadingZerosI(n);
    break;
  }
  case Op_CountLeadingZerosL: { _sub_Op_CountLeadingZerosL(n);
    break;
  }
  case Op_CountTrailingZerosI: { _sub_Op_CountTrailingZerosI(n);
    break;
  }
  case Op_CountTrailingZerosL: { _sub_Op_CountTrailingZerosL(n);
    break;
  }
  case Op_CreateEx: { _sub_Op_CreateEx(n);
    break;
  }
  case Op_DecodeN: { _sub_Op_DecodeN(n);
    break;
  }
  case Op_DecodeNKlass: { _sub_Op_DecodeNKlass(n);
    break;
  }
  case Op_DivD: { _sub_Op_DivD(n);
    break;
  }
  case Op_DivF: { _sub_Op_DivF(n);
    break;
  }
  case Op_DivI: { _sub_Op_DivI(n);
    break;
  }
  case Op_DivL: { _sub_Op_DivL(n);
    break;
  }
  case Op_DivModI: { _sub_Op_DivModI(n);
    break;
  }
  case Op_DivModL: { _sub_Op_DivModL(n);
    break;
  }
  case Op_EncodeISOArray: { _sub_Op_EncodeISOArray(n);
    break;
  }
  case Op_EncodeP: { _sub_Op_EncodeP(n);
    break;
  }
  case Op_EncodePKlass: { _sub_Op_EncodePKlass(n);
    break;
  }
  case Op_FastLock: { _sub_Op_FastLock(n);
    break;
  }
  case Op_FastUnlock: { _sub_Op_FastUnlock(n);
    break;
  }
  case Op_FmaD: { _sub_Op_FmaD(n);
    break;
  }
  case Op_FmaF: { _sub_Op_FmaF(n);
    break;
  }
  case Op_Goto: { _sub_Op_Goto(n);
    break;
  }
  case Op_Halt: { _sub_Op_Halt(n);
    break;
  }
  case Op_HasNegatives: { _sub_Op_HasNegatives(n);
    break;
  }
  case Op_If: { _sub_Op_If(n);
    break;
  }
  case Op_LShiftI: { _sub_Op_LShiftI(n);
    break;
  }
  case Op_LShiftL: { _sub_Op_LShiftL(n);
    break;
  }
  case Op_LoadB: { _sub_Op_LoadB(n);
    break;
  }
  case Op_LoadUB: { _sub_Op_LoadUB(n);
    break;
  }
  case Op_LoadUS: { _sub_Op_LoadUS(n);
    break;
  }
  case Op_LoadD: { _sub_Op_LoadD(n);
    break;
  }
  case Op_LoadD_unaligned: { _sub_Op_LoadD_unaligned(n);
    break;
  }
  case Op_LoadF: { _sub_Op_LoadF(n);
    break;
  }
  case Op_LoadI: { _sub_Op_LoadI(n);
    break;
  }
  case Op_LoadKlass: { _sub_Op_LoadKlass(n);
    break;
  }
  case Op_LoadNKlass: { _sub_Op_LoadNKlass(n);
    break;
  }
  case Op_LoadL: { _sub_Op_LoadL(n);
    break;
  }
  case Op_LoadL_unaligned: { _sub_Op_LoadL_unaligned(n);
    break;
  }
  case Op_LoadPLocked: { _sub_Op_LoadPLocked(n);
    break;
  }
  case Op_LoadP: { _sub_Op_LoadP(n);
    break;
  }
  case Op_LoadN: { _sub_Op_LoadN(n);
    break;
  }
  case Op_LoadRange: { _sub_Op_LoadRange(n);
    break;
  }
  case Op_LoadS: { _sub_Op_LoadS(n);
    break;
  }
  case Op_MaxI: { _sub_Op_MaxI(n);
    break;
  }
  case Op_MemBarAcquire: { _sub_Op_MemBarAcquire(n);
    break;
  }
  case Op_LoadFence: { _sub_Op_LoadFence(n);
    break;
  }
  case Op_MemBarAcquireLock: { _sub_Op_MemBarAcquireLock(n);
    break;
  }
  case Op_MemBarCPUOrder: { _sub_Op_MemBarCPUOrder(n);
    break;
  }
  case Op_MemBarRelease: { _sub_Op_MemBarRelease(n);
    break;
  }
  case Op_StoreFence: { _sub_Op_StoreFence(n);
    break;
  }
  case Op_MemBarReleaseLock: { _sub_Op_MemBarReleaseLock(n);
    break;
  }
  case Op_MemBarVolatile: { _sub_Op_MemBarVolatile(n);
    break;
  }
  case Op_MemBarStoreStore: { _sub_Op_MemBarStoreStore(n);
    break;
  }
  case Op_MinI: { _sub_Op_MinI(n);
    break;
  }
  case Op_ModI: { _sub_Op_ModI(n);
    break;
  }
  case Op_ModL: { _sub_Op_ModL(n);
    break;
  }
  case Op_MoveI2F: { _sub_Op_MoveI2F(n);
    break;
  }
  case Op_MoveF2I: { _sub_Op_MoveF2I(n);
    break;
  }
  case Op_MoveL2D: { _sub_Op_MoveL2D(n);
    break;
  }
  case Op_MoveD2L: { _sub_Op_MoveD2L(n);
    break;
  }
  case Op_MulD: { _sub_Op_MulD(n);
    break;
  }
  case Op_MulF: { _sub_Op_MulF(n);
    break;
  }
  case Op_MulHiL: { _sub_Op_MulHiL(n);
    break;
  }
  case Op_MulI: { _sub_Op_MulI(n);
    break;
  }
  case Op_MulL: { _sub_Op_MulL(n);
    break;
  }
  case Op_NegD: { _sub_Op_NegD(n);
    break;
  }
  case Op_NegF: { _sub_Op_NegF(n);
    break;
  }
  case Op_OrI: { _sub_Op_OrI(n);
    break;
  }
  case Op_OrL: { _sub_Op_OrL(n);
    break;
  }
  case Op_OverflowAddI: { _sub_Op_OverflowAddI(n);
    break;
  }
  case Op_OverflowSubI: { _sub_Op_OverflowSubI(n);
    break;
  }
  case Op_OverflowAddL: { _sub_Op_OverflowAddL(n);
    break;
  }
  case Op_OverflowSubL: { _sub_Op_OverflowSubL(n);
    break;
  }
  case Op_PartialSubtypeCheck: { _sub_Op_PartialSubtypeCheck(n);
    break;
  }
  case Op_PopCountI: { _sub_Op_PopCountI(n);
    break;
  }
  case Op_PopCountL: { _sub_Op_PopCountL(n);
    break;
  }
  case Op_PrefetchAllocation: { _sub_Op_PrefetchAllocation(n);
    break;
  }
  case Op_RShiftI: { _sub_Op_RShiftI(n);
    break;
  }
  case Op_RShiftL: { _sub_Op_RShiftL(n);
    break;
  }
  case Op_Rethrow: { _sub_Op_Rethrow(n);
    break;
  }
  case Op_Return: { _sub_Op_Return(n);
    break;
  }
  case Op_RoundDouble: { _sub_Op_RoundDouble(n);
    break;
  }
  case Op_RoundFloat: { _sub_Op_RoundFloat(n);
    break;
  }
  case Op_SafePoint: { _sub_Op_SafePoint(n);
    break;
  }
  case Op_SqrtD: { _sub_Op_SqrtD(n);
    break;
  }
  case Op_StoreB: { _sub_Op_StoreB(n);
    break;
  }
  case Op_StoreC: { _sub_Op_StoreC(n);
    break;
  }
  case Op_StoreCM: { _sub_Op_StoreCM(n);
    break;
  }
  case Op_StorePConditional: { _sub_Op_StorePConditional(n);
    break;
  }
  case Op_StoreLConditional: { _sub_Op_StoreLConditional(n);
    break;
  }
  case Op_StoreD: { _sub_Op_StoreD(n);
    break;
  }
  case Op_StoreF: { _sub_Op_StoreF(n);
    break;
  }
  case Op_StoreI: { _sub_Op_StoreI(n);
    break;
  }
  case Op_StoreL: { _sub_Op_StoreL(n);
    break;
  }
  case Op_StoreP: { _sub_Op_StoreP(n);
    break;
  }
  case Op_StoreN: { _sub_Op_StoreN(n);
    break;
  }
  case Op_StoreNKlass: { _sub_Op_StoreNKlass(n);
    break;
  }
  case Op_StrComp: { _sub_Op_StrComp(n);
    break;
  }
  case Op_StrCompressedCopy: { _sub_Op_StrCompressedCopy(n);
    break;
  }
  case Op_StrEquals: { _sub_Op_StrEquals(n);
    break;
  }
  case Op_StrIndexOf: { _sub_Op_StrIndexOf(n);
    break;
  }
  case Op_StrIndexOfChar: { _sub_Op_StrIndexOfChar(n);
    break;
  }
  case Op_StrInflatedCopy: { _sub_Op_StrInflatedCopy(n);
    break;
  }
  case Op_SubD: { _sub_Op_SubD(n);
    break;
  }
  case Op_SubF: { _sub_Op_SubF(n);
    break;
  }
  case Op_SubI: { _sub_Op_SubI(n);
    break;
  }
  case Op_SubL: { _sub_Op_SubL(n);
    break;
  }
  case Op_TailCall: { _sub_Op_TailCall(n);
    break;
  }
  case Op_TailJump: { _sub_Op_TailJump(n);
    break;
  }
  case Op_ThreadLocal: { _sub_Op_ThreadLocal(n);
    break;
  }
  case Op_URShiftI: { _sub_Op_URShiftI(n);
    break;
  }
  case Op_URShiftL: { _sub_Op_URShiftL(n);
    break;
  }
  case Op_XorI: { _sub_Op_XorI(n);
    break;
  }
  case Op_XorL: { _sub_Op_XorL(n);
    break;
  }
  case Op_LoadVector: { _sub_Op_LoadVector(n);
    break;
  }
  case Op_StoreVector: { _sub_Op_StoreVector(n);
    break;
  }
  case Op_ReplicateB: { _sub_Op_ReplicateB(n);
    break;
  }
  case Op_ReplicateS: { _sub_Op_ReplicateS(n);
    break;
  }
  case Op_ReplicateI: { _sub_Op_ReplicateI(n);
    break;
  }
  case Op_ReplicateF: { _sub_Op_ReplicateF(n);
    break;
  }
  
  default:
    tty->print("Default case invoked for: \n");
    tty->print("   opcode  = %d, \"%s\"\n", opcode, NodeClassNames[opcode]);
    return false;
  }
  return true;
}
