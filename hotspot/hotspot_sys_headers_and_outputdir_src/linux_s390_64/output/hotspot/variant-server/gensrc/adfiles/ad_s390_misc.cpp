#line 1 "ad_s390_misc.cpp"
//
// Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2017, SAP SE. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/ad_s390.hpp"
const RegMask &stkI_to_regINode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &regI_to_stkINode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stkL_to_regLNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &regL_to_stkLNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stkP_to_regPNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &regP_to_stkPNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stkF_to_regFNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &regF_to_stkFNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stkD_to_regDNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &regD_to_stkDNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &loadBNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadB2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadUBNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadUB2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadSNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadS2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadUSNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadUS2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadINode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadI2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadUI2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadRangeNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadLNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadL_unalignedNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadPNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &castP2X_loadPNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadKlassNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &loadTOCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadFNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &loadDNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &loadD_unalignedNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &loadConINode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConI16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConI_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConUI16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConL_pcrelTOCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadConL32Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadConL16Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadConL_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadConP_pcrelTOCNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &loadConP0Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &loadConF_dynTOCNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &loadConD_dynTOCNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &loadConF0Node::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &loadConD0Node::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &storeBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCMNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchAllocNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &memInitBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &memInitCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &memInitINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &memInitLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &memInitPNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &negL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &loadNNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadNKlassNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConNNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConN0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadConNKlassNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &decodeLoadNNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeLoadNKlassNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeLoadConNKlassNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeNNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeKlassNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeN_NNNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &loadBaseNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &decodeN_baseNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeN_NN_baseNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeN_ExNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &decodeN_NN_ExNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &encodePNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeKlassNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeP_NNNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeP_baseNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeP_NN_baseNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeP_ExNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encodeP_NN_ExNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &storeNNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeNKlassNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &compN_iRegNNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compN_iRegN_immNNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compNKlass_iRegN_immNNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compN_iRegN_immN0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_CPUOrderNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_storestoreNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &roundDouble_nopNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &roundFloat_nopNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &castX2PNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &castP2XNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &stfSSDNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &stfSSFNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &cmovN_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmovN_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmovI_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmovI_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmovP_regNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &cmovP_immNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &cmovF_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &cmovD_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &cmovL_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &cmovL_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &tlsLoadPNode::out_RegMask() const { return (Z_THREAD_PTR_REG_mask()); }
const RegMask &checkCastPPNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &castPPNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &castIINode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &loadPLockedNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &storePConditionalNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &storeLConditionalNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compareAndSwapI_boolNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &compareAndSwapL_boolNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &compareAndSwapP_boolNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &compareAndSwapN_boolNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_mem_imm8_atomic_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addI_mem_imm16_atomicNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_mem_imm32_atomicNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_mem_reg_atomicNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addL_mem_imm8_atomic_no_resNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addL_mem_imm16_atomicNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_mem_imm32_atomicNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_mem_reg_atomicNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addI_mem_reg_atomic_z196Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addL_mem_reg_atomic_z196Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &xchgI_reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xchgL_reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &xchgN_reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xchgP_reg_memNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addI_reg_reg_CISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_reg_RISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_imm16_CISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_imm16_RISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_imm12Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_imm20Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_reg_imm12Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_reg_reg_imm20Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_Reg_mem_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &addI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addL_reg_regINode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_regI_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_reg_CISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_reg_RISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_imm12Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_imm20Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_imm32Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_imm16_CISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_imm16_RISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_Reg_memINode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_Reg_memI_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_Reg_mem_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_reg_imm12Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_reg_reg_imm20Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &addL_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addP_reg_reg_LANode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_reg_CISCNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_reg_RISCNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_imm12Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_imm16_CISCNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_imm16_RISCNode::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_imm20Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_imm32Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_reg_imm12Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_regN_reg_imm12Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_reg_reg_imm20Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_regN_reg_imm20Node::out_RegMask() const { return (Z_PTR_REG_mask()); }
const RegMask &addP_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &subI_reg_reg_CISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &subI_reg_reg_RISCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &subI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &subI_zero_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &subL_reg_reg_CISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &subL_reg_reg_RISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &subL_reg_regI_CISCNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &subL_Reg_memINode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &subL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &mulI_reg_imm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &mulI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &mulI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &mulI_Reg_mem_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &mulL_reg_regINode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_reg_regI_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_reg_imm16Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_reg_imm32Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_Reg_memINode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_Reg_memI_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulL_Reg_mem_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &mulHiL_reg_regNode::out_RegMask() const { return (Z_RARG3_LONG_REG_mask()); }
const RegMask &divModI_reg_divmodNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &divI_reg_regNode::out_RegMask() const { return (Z_RARG4_INT_REG_mask()); }
const RegMask &divI_reg_imm16Node::out_RegMask() const { return (Z_RARG4_INT_REG_mask()); }
const RegMask &divModL_reg_divmodNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &divL_reg_regNode::out_RegMask() const { return (Z_RARG4_LONG_REG_mask()); }
const RegMask &divL_reg_imm16Node::out_RegMask() const { return (Z_RARG4_LONG_REG_mask()); }
const RegMask &modI_reg_regNode::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &modI_reg_imm16Node::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &modL_reg_regNode::out_RegMask() const { return (Z_RARG3_LONG_REG_mask()); }
const RegMask &modL_reg_imm16Node::out_RegMask() const { return (Z_RARG3_LONG_REG_mask()); }
const RegMask &sllI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &sllI_reg_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &sllI_reg_imm_1Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &sllL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &sllL_reg_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &sllL_reg_imm_1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &sraI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &sraI_reg_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &sraL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &sraL_reg_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &srlI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &srlI_reg_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &srlL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &srlL_reg_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &srlP_reg_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &rotlI_reg_immI8Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rotlI_reg_immI8_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rotlL_reg_immI8Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &rotlL_reg_immI8_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &rotrI_reg_immI8Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rotrI_reg_immI8_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rotrL_reg_immI8Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &rotrL_reg_immI8_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &overflowAddI_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowAddI_reg_immNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowAddL_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowAddL_reg_immNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowSubI_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowSubI_reg_immNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowSubL_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowSubL_reg_immNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowNegI_rRegNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &overflowNegL_rRegNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &addF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &addF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &addF_reg_mem_0Node::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &addD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &addD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &addD_reg_mem_0Node::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &subF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &subF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &subD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &subD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &mulF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &mulF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &mulF_reg_mem_0Node::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &mulD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &mulD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &mulD_reg_mem_0Node::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &maddF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &maddD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &msubF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &msubD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &maddF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &maddD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &msubF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &msubD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &maddF_mem_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &maddD_mem_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &msubF_mem_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &msubD_mem_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &divF_reg_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &divF_reg_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &divD_reg_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &divD_reg_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &absF_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &absD_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &nabsF_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &nabsD_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &negF_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &negD_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &sqrtF_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &sqrtD_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &sqrtF_memNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &sqrtD_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &andI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andI_Reg_mem_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andI_reg_uimm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andI_reg_uimmI_LH1Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andI_reg_uimmI_LL1Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &andL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_Reg_mem_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_reg_uimmL_LL1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_reg_uimmL_LH1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_reg_uimmL_HL1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &andL_reg_uimmL_HH1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &orI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &orI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &orI_Reg_mem_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &orI_reg_uimm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &orI_reg_uimm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &orL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &orL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &orL_Reg_mem_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &orL_reg_uimm16Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &orL_reg_uimm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xorI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xorI_Reg_memNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xorI_Reg_mem_0Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xorI_reg_uimm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &xorL_reg_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &xorL_Reg_memNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &xorL_Reg_mem_0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &xorL_reg_uimm32Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &convI2BNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &convP2BNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmpLTMask_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmpLTMask_reg_zeroNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &convD2F_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &convF2I_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &convD2I_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &convF2L_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &convD2L_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &convF2D_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &convF2D_memNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &convI2D_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &convI2F_iregNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &convI2L_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &convI2L_reg_zexNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &convI2L_mem_zexNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &zeroExtend_longNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &rShiftI16_lShiftI16_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rShiftI24_lShiftI24_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &MoveF2I_stack_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &MoveI2F_stack_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &MoveD2L_stack_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &MoveL2D_stack_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &MoveI2F_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveD2L_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveL2D_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convL2F_regNode::out_RegMask() const { return (Z_FLT_REG_mask()); }
const RegMask &convL2D_regNode::out_RegMask() const { return (Z_DBL_REG_mask()); }
const RegMask &convL2I_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &shrL_reg_imm6_L2INode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &rangeCheck_iReg_uimmI16Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &rangeCheck_iReg_iRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &rangeCheck_uimmI16_iRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &zeroCheckP_iReg_imm0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &zeroCheckN_iReg_imm0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &compI_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compI_reg_immNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compI_reg_imm16Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compI_reg_imm0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compI_reg_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compU_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compU_reg_uimmNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compU_reg_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_regINode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_imm32Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_imm16Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_imm0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_conv_reg_imm0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compL_reg_memINode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compUL_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compUL_reg_imm32Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compP_reg_regNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compP_reg_imm0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compP_decode_reg_imm0Node::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &compP_reg_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &z196_minI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z10_minI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &minI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z196_minI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &minI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z196_minI_reg_imm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &minI_reg_imm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z10_minI_reg_imm8Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z196_maxI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z10_maxI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &maxI_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z196_maxI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &maxI_reg_imm32Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z196_maxI_reg_imm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &maxI_reg_imm16Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &z10_maxI_reg_imm8Node::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &absI_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &negabsI_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmpF_ccNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpD_ccNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpF_cc_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpD_cc_memNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpF0_ccNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpD0_ccNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpF_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &cmpD_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &branchNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchConFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &branchLoopEndFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &testAndBranchLoopEnd_RegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpbU_RegINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegPPNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegNNNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &testAndBranchLoopEnd_ImmNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegI_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpbU_RegI_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegL_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegP_immPNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegN_immP0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegN_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &testAndBranchLoopEnd_RegFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegI_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpbU_RegI_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegL_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegPP_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegNN_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &testAndBranchLoopEnd_ImmFarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegI_imm_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpbU_RegI_imm_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegL_imm_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegP_immP_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegN_immP0_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpb_RegN_immN_FarNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL3_reg_regNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &safePointNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &safePoint_pollNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaDirect_dynTOCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirect_dynTOCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallRuntimeDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafNoFPDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailCalljmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &RetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tailjmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CreateExceptionNode::out_RegMask() const { return (Z_RARG1_PTR_REG_mask()); }
const RegMask &RethrowExceptionNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &ShouldNotReachHereNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &partialSubtypeCheckNode::out_RegMask() const { return (Z_RARG1_PTR_REG_mask()); }
const RegMask &partialSubtypeCheck_vs_zeroNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpFastLockNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &cmpFastUnlockNode::out_RegMask() const { return (Z_CONDITION_REG_mask()); }
const RegMask &inlineCallClearArrayConstNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &inlineCallClearArrayConstBigNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &inlineCallClearArrayNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &string_equalsLNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_equalsUNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_equals_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_equalsC_immNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &array_equalsBNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &array_equalsCNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_compareLNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_compareUNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_compareLUNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_compareULNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOfChar_UNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm1_UNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm1_LNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm1_ULNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm_UNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm_LNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_imm_ULNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_UNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_LNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &indexOf_ULNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_compressNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &string_inflateNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &string_inflate_constNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &has_negativesNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &encode_iso_arrayNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &expand_storeFNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &expand_LoadLogical_I2LNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &expand_Repl2I_regNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl8B_reg_risbgNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl8B_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl8B_imm0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl8B_immm1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl4S_reg_risbgNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl4S_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl4S_imm0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl4S_immm1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2I_reg_risbgNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2I_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2I_imm0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2I_immm1Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2F_reg_indirectNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2F_reg_directNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2F_immNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &Repl2F_imm0Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &storeA8BNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &loadV8Node::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &bytes_reverse_intNode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &bytes_reverse_longNode::out_RegMask() const { return (Z_LONG_REG_mask()); }
const RegMask &countLeadingZerosINode::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &countLeadingZerosLNode::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &countTrailingZerosINode::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &countTrailingZerosLNode::out_RegMask() const { return (Z_RARG3_INT_REG_mask()); }
const RegMask &popCountINode::out_RegMask() const { return (Z_INT_REG_mask()); }
const RegMask &popCountLNode::out_RegMask() const { return (Z_INT_REG_mask()); }
// Check consistency of C++ compilation with ADLC options:
// Check adlc -DLINUX=1
#ifndef LINUX
#  error "LINUX must be defined"
#endif // LINUX
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DS390=1
#ifndef S390
#  error "S390 must be defined"
#endif // S390
// Check adlc -D_LP64=1
#ifndef _LP64
#  error "_LP64 must be defined"
#endif // _LP64
