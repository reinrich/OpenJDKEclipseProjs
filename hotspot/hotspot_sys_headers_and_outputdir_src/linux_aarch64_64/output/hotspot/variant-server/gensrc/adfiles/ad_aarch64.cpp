#line 1 "ad_aarch64.cpp"
//
// Copyright (c) 2003, 2021, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2014, 2021, Red Hat, Inc. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/adGlobals_aarch64.hpp"
#include "adfiles/ad_aarch64.hpp"
#include "memory/allocation.inline.hpp"
#include "code/codeCache.hpp"
#include "code/compiledIC.hpp"
#include "code/nativeInst.hpp"
#include "code/vmreg.inline.hpp"
#include "gc/shared/collectedHeap.inline.hpp"
#include "oops/compiledICHolder.hpp"
#include "oops/compressedOops.hpp"
#include "oops/markWord.hpp"
#include "oops/method.hpp"
#include "oops/oop.inline.hpp"
#include "opto/c2_MacroAssembler.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/locknode.hpp"
#include "opto/opcodes.hpp"
#include "opto/regalloc.hpp"
#include "opto/regmask.hpp"
#include "opto/runtime.hpp"
#include "runtime/safepointMechanism.hpp"
#include "runtime/sharedRuntime.hpp"
#include "runtime/stubRoutines.hpp"
#include "utilities/growableArray.hpp"
#include "utilities/powerOfTwo.hpp"

//SourceForm

#line 1321 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"


  // Derived RegMask with conditionally allocatable registers

  void PhaseOutput::pd_perform_mach_node_analysis() {
  }

  int MachNode::pd_alignment_required() const {
    return 1;
  }

  int MachNode::compute_padding(int current_offset) const {
    return 0;
  }

  RegMask _ANY_REG32_mask;
  RegMask _ANY_REG_mask;
  RegMask _PTR_REG_mask;
  RegMask _NO_SPECIAL_REG32_mask;
  RegMask _NO_SPECIAL_REG_mask;
  RegMask _NO_SPECIAL_PTR_REG_mask;

  void reg_mask_init() {
    // We derive below RegMask(s) from the ones which are auto-generated from
    // adlc register classes to make AArch64 rheapbase (r27) and rfp (r29)
    // registers conditionally reserved.

    _ANY_REG32_mask = _ALL_REG32_mask;
    _ANY_REG32_mask.Remove(OptoReg::as_OptoReg(r31_sp->as_VMReg()));

    _ANY_REG_mask = _ALL_REG_mask;

    _PTR_REG_mask = _ALL_REG_mask;

    _NO_SPECIAL_REG32_mask = _ALL_REG32_mask;
    _NO_SPECIAL_REG32_mask.SUBTRACT(_NON_ALLOCATABLE_REG32_mask);

    _NO_SPECIAL_REG_mask = _ALL_REG_mask;
    _NO_SPECIAL_REG_mask.SUBTRACT(_NON_ALLOCATABLE_REG_mask);

    _NO_SPECIAL_PTR_REG_mask = _ALL_REG_mask;
    _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_NON_ALLOCATABLE_REG_mask);

    // r27 is not allocatable when compressed oops is on and heapbase is not
    // zero, compressed klass pointers doesn't use r27 after JDK-8234794
    if (UseCompressedOops && (CompressedOops::ptrs_base() != NULL)) {
      _NO_SPECIAL_REG32_mask.Remove(OptoReg::as_OptoReg(r27->as_VMReg()));
      _NO_SPECIAL_REG_mask.SUBTRACT(_HEAPBASE_REG_mask);
      _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_HEAPBASE_REG_mask);
    }

    // r29 is not allocatable when PreserveFramePointer is on
    if (PreserveFramePointer) {
      _NO_SPECIAL_REG32_mask.Remove(OptoReg::as_OptoReg(r29->as_VMReg()));
      _NO_SPECIAL_REG_mask.SUBTRACT(_FP_REG_mask);
      _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_FP_REG_mask);
    }
  }

  // Optimizaton of volatile gets and puts
  // -------------------------------------
  //
  // AArch64 has ldar<x> and stlr<x> instructions which we can safely
  // use to implement volatile reads and writes. For a volatile read
  // we simply need
  //
  //   ldar<x>
  //
  // and for a volatile write we need
  //
  //   stlr<x>
  //
  // Alternatively, we can implement them by pairing a normal
  // load/store with a memory barrier. For a volatile read we need
  //
  //   ldr<x>
  //   dmb ishld
  //
  // for a volatile write
  //
  //   dmb ish
  //   str<x>
  //   dmb ish
  //
  // We can also use ldaxr and stlxr to implement compare and swap CAS
  // sequences. These are normally translated to an instruction
  // sequence like the following
  //
  //   dmb      ish
  // retry:
  //   ldxr<x>   rval raddr
  //   cmp       rval rold
  //   b.ne done
  //   stlxr<x>  rval, rnew, rold
  //   cbnz      rval retry
  // done:
  //   cset      r0, eq
  //   dmb ishld
  //
  // Note that the exclusive store is already using an stlxr
  // instruction. That is required to ensure visibility to other
  // threads of the exclusive write (assuming it succeeds) before that
  // of any subsequent writes.
  //
  // The following instruction sequence is an improvement on the above
  //
  // retry:
  //   ldaxr<x>  rval raddr
  //   cmp       rval rold
  //   b.ne done
  //   stlxr<x>  rval, rnew, rold
  //   cbnz      rval retry
  // done:
  //   cset      r0, eq
  //
  // We don't need the leading dmb ish since the stlxr guarantees
  // visibility of prior writes in the case that the swap is
  // successful. Crucially we don't have to worry about the case where
  // the swap is not successful since no valid program should be
  // relying on visibility of prior changes by the attempting thread
  // in the case where the CAS fails.
  //
  // Similarly, we don't need the trailing dmb ishld if we substitute
  // an ldaxr instruction since that will provide all the guarantees we
  // require regarding observation of changes made by other threads
  // before any change to the CAS address observed by the load.
  //
  // In order to generate the desired instruction sequence we need to
  // be able to identify specific 'signature' ideal graph node
  // sequences which i) occur as a translation of a volatile reads or
  // writes or CAS operations and ii) do not occur through any other
  // translation or graph transformation. We can then provide
  // alternative aldc matching rules which translate these node
  // sequences to the desired machine code sequences. Selection of the
  // alternative rules can be implemented by predicates which identify
  // the relevant node sequences.
  //
  // The ideal graph generator translates a volatile read to the node
  // sequence
  //
  //   LoadX[mo_acquire]
  //   MemBarAcquire
  //
  // As a special case when using the compressed oops optimization we
  // may also see this variant
  //
  //   LoadN[mo_acquire]
  //   DecodeN
  //   MemBarAcquire
  //
  // A volatile write is translated to the node sequence
  //
  //   MemBarRelease
  //   StoreX[mo_release] {CardMark}-optional
  //   MemBarVolatile
  //
  // n.b. the above node patterns are generated with a strict
  // 'signature' configuration of input and output dependencies (see
  // the predicates below for exact details). The card mark may be as
  // simple as a few extra nodes or, in a few GC configurations, may
  // include more complex control flow between the leading and
  // trailing memory barriers. However, whatever the card mark
  // configuration these signatures are unique to translated volatile
  // reads/stores -- they will not appear as a result of any other
  // bytecode translation or inlining nor as a consequence of
  // optimizing transforms.
  //
  // We also want to catch inlined unsafe volatile gets and puts and
  // be able to implement them using either ldar<x>/stlr<x> or some
  // combination of ldr<x>/stlr<x> and dmb instructions.
  //
  // Inlined unsafe volatiles puts manifest as a minor variant of the
  // normal volatile put node sequence containing an extra cpuorder
  // membar
  //
  //   MemBarRelease
  //   MemBarCPUOrder
  //   StoreX[mo_release] {CardMark}-optional
  //   MemBarCPUOrder
  //   MemBarVolatile
  //
  // n.b. as an aside, a cpuorder membar is not itself subject to
  // matching and translation by adlc rules.  However, the rule
  // predicates need to detect its presence in order to correctly
  // select the desired adlc rules.
  //
  // Inlined unsafe volatile gets manifest as a slightly different
  // node sequence to a normal volatile get because of the
  // introduction of some CPUOrder memory barriers to bracket the
  // Load. However, but the same basic skeleton of a LoadX feeding a
  // MemBarAcquire, possibly thorugh an optional DecodeN, is still
  // present
  //
  //   MemBarCPUOrder
  //        ||       \\
  //   MemBarCPUOrder LoadX[mo_acquire]
  //        ||            |
  //        ||       {DecodeN} optional
  //        ||       /
  //     MemBarAcquire
  //
  // In this case the acquire membar does not directly depend on the
  // load. However, we can be sure that the load is generated from an
  // inlined unsafe volatile get if we see it dependent on this unique
  // sequence of membar nodes. Similarly, given an acquire membar we
  // can know that it was added because of an inlined unsafe volatile
  // get if it is fed and feeds a cpuorder membar and if its feed
  // membar also feeds an acquiring load.
  //
  // Finally an inlined (Unsafe) CAS operation is translated to the
  // following ideal graph
  //
  //   MemBarRelease
  //   MemBarCPUOrder
  //   CompareAndSwapX {CardMark}-optional
  //   MemBarCPUOrder
  //   MemBarAcquire
  //
  // So, where we can identify these volatile read and write
  // signatures we can choose to plant either of the above two code
  // sequences. For a volatile read we can simply plant a normal
  // ldr<x> and translate the MemBarAcquire to a dmb. However, we can
  // also choose to inhibit translation of the MemBarAcquire and
  // inhibit planting of the ldr<x>, instead planting an ldar<x>.
  //
  // When we recognise a volatile store signature we can choose to
  // plant at a dmb ish as a translation for the MemBarRelease, a
  // normal str<x> and then a dmb ish for the MemBarVolatile.
  // Alternatively, we can inhibit translation of the MemBarRelease
  // and MemBarVolatile and instead plant a simple stlr<x>
  // instruction.
  //
  // when we recognise a CAS signature we can choose to plant a dmb
  // ish as a translation for the MemBarRelease, the conventional
  // macro-instruction sequence for the CompareAndSwap node (which
  // uses ldxr<x>) and then a dmb ishld for the MemBarAcquire.
  // Alternatively, we can elide generation of the dmb instructions
  // and plant the alternative CompareAndSwap macro-instruction
  // sequence (which uses ldaxr<x>).
  //
  // Of course, the above only applies when we see these signature
  // configurations. We still want to plant dmb instructions in any
  // other cases where we may see a MemBarAcquire, MemBarRelease or
  // MemBarVolatile. For example, at the end of a constructor which
  // writes final/volatile fields we will see a MemBarRelease
  // instruction and this needs a 'dmb ish' lest we risk the
  // constructed object being visible without making the
  // final/volatile field writes visible.
  //
  // n.b. the translation rules below which rely on detection of the
  // volatile signatures and insert ldar<x> or stlr<x> are failsafe.
  // If we see anything other than the signature configurations we
  // always just translate the loads and stores to ldr<x> and str<x>
  // and translate acquire, release and volatile membars to the
  // relevant dmb instructions.
  //

  // is_CAS(int opcode, bool maybe_volatile)
  //
  // return true if opcode is one of the possible CompareAndSwapX
  // values otherwise false.

  bool is_CAS(int opcode, bool maybe_volatile)
  {
    switch(opcode) {
      // We handle these
    case Op_CompareAndSwapI:
    case Op_CompareAndSwapL:
    case Op_CompareAndSwapP:
    case Op_CompareAndSwapN:
    case Op_ShenandoahCompareAndSwapP:
    case Op_ShenandoahCompareAndSwapN:
    case Op_CompareAndSwapB:
    case Op_CompareAndSwapS:
    case Op_GetAndSetI:
    case Op_GetAndSetL:
    case Op_GetAndSetP:
    case Op_GetAndSetN:
    case Op_GetAndAddI:
    case Op_GetAndAddL:
      return true;
    case Op_CompareAndExchangeI:
    case Op_CompareAndExchangeN:
    case Op_CompareAndExchangeB:
    case Op_CompareAndExchangeS:
    case Op_CompareAndExchangeL:
    case Op_CompareAndExchangeP:
    case Op_WeakCompareAndSwapB:
    case Op_WeakCompareAndSwapS:
    case Op_WeakCompareAndSwapI:
    case Op_WeakCompareAndSwapL:
    case Op_WeakCompareAndSwapP:
    case Op_WeakCompareAndSwapN:
    case Op_ShenandoahWeakCompareAndSwapP:
    case Op_ShenandoahWeakCompareAndSwapN:
    case Op_ShenandoahCompareAndExchangeP:
    case Op_ShenandoahCompareAndExchangeN:
      return maybe_volatile;
    default:
      return false;
    }
  }

  // helper to determine the maximum number of Phi nodes we may need to
  // traverse when searching from a card mark membar for the merge mem
  // feeding a trailing membar or vice versa

// predicates controlling emit of ldr<x>/ldar<x>

bool unnecessary_acquire(const Node *barrier)
{
  assert(barrier->is_MemBar(), "expecting a membar");

  MemBarNode* mb = barrier->as_MemBar();

  if (mb->trailing_load()) {
    return true;
  }

  if (mb->trailing_load_store()) {
    Node* load_store = mb->in(MemBarNode::Precedent);
    assert(load_store->is_LoadStore(), "unexpected graph shape");
    return is_CAS(load_store->Opcode(), true);
  }

  return false;
}

bool needs_acquiring_load(const Node *n)
{
  assert(n->is_Load(), "expecting a load");
  LoadNode *ld = n->as_Load();
  return ld->is_acquire();
}

bool unnecessary_release(const Node *n)
{
  assert((n->is_MemBar() &&
          n->Opcode() == Op_MemBarRelease),
         "expecting a release membar");

  MemBarNode *barrier = n->as_MemBar();
  if (!barrier->leading()) {
    return false;
  } else {
    Node* trailing = barrier->trailing_membar();
    MemBarNode* trailing_mb = trailing->as_MemBar();
    assert(trailing_mb->trailing(), "Not a trailing membar?");
    assert(trailing_mb->leading_membar() == n, "inconsistent leading/trailing membars");

    Node* mem = trailing_mb->in(MemBarNode::Precedent);
    if (mem->is_Store()) {
      assert(mem->as_Store()->is_release(), "");
      assert(trailing_mb->Opcode() == Op_MemBarVolatile, "");
      return true;
    } else {
      assert(mem->is_LoadStore(), "");
      assert(trailing_mb->Opcode() == Op_MemBarAcquire, "");
      return is_CAS(mem->Opcode(), true);
    }
  }
  return false;
}

bool unnecessary_volatile(const Node *n)
{
  // assert n->is_MemBar();
  MemBarNode *mbvol = n->as_MemBar();

  bool release = mbvol->trailing_store();
  assert(!release || (mbvol->in(MemBarNode::Precedent)->is_Store() && mbvol->in(MemBarNode::Precedent)->as_Store()->is_release()), "");
#ifdef ASSERT
  if (release) {
    Node* leading = mbvol->leading_membar();
    assert(leading->Opcode() == Op_MemBarRelease, "");
    assert(leading->as_MemBar()->leading_store(), "");
    assert(leading->as_MemBar()->trailing_membar() == mbvol, "");
  }
#endif

  return release;
}

// predicates controlling emit of str<x>/stlr<x>

bool needs_releasing_store(const Node *n)
{
  // assert n->is_Store();
  StoreNode *st = n->as_Store();
  return st->trailing_membar() != NULL;
}

// predicate controlling translation of CAS
//
// returns true if CAS needs to use an acquiring load otherwise false

bool needs_acquiring_load_exclusive(const Node *n)
{
  assert(is_CAS(n->Opcode(), true), "expecting a compare and swap");
  LoadStoreNode* ldst = n->as_LoadStore();
  if (is_CAS(n->Opcode(), false)) {
    assert(ldst->trailing_membar() != NULL, "expected trailing membar");
  } else {
    return ldst->trailing_membar() != NULL;
  }

  // so we can just return true here
  return true;
}

#define __ _masm.

// advance declarations for helper functions to convert register
// indices to register objects

// the ad file has to provide implementations of certain methods
// expected by the generic code
//
// REQUIRED FUNCTIONALITY

//=============================================================================

// !!!!! Special hack to get all types of calls to specify the byte offset
//       from the start of the call to the point where the return address
//       will point.

int MachCallStaticJavaNode::ret_addr_offset()
{
  // call should be a simple bl
  int off = 4;
  return off;
}

int MachCallDynamicJavaNode::ret_addr_offset()
{
  return 16; // movz, movk, movk, bl
}

int MachCallRuntimeNode::ret_addr_offset() {
  // for generated stubs the call will be
  //   bl(addr)
  // or with far branches
  //   bl(trampoline_stub)
  // for real runtime callouts it will be six instructions
  // see aarch64_enc_java_to_runtime
  //   adr(rscratch2, retaddr)
  //   lea(rscratch1, RuntimeAddress(addr)
  //   stp(zr, rscratch2, Address(__ pre(sp, -2 * wordSize)))
  //   blr(rscratch1)
  CodeBlob *cb = CodeCache::find_blob(_entry_point);
  if (cb) {
    return 1 * NativeInstruction::instruction_size;
  } else {
    return 6 * NativeInstruction::instruction_size;
  }
}

int MachCallNativeNode::ret_addr_offset() {
  // This is implemented using aarch64_enc_java_to_runtime as above.
  CodeBlob *cb = CodeCache::find_blob(_entry_point);
  if (cb) {
    return 1 * NativeInstruction::instruction_size;
  } else {
    return 6 * NativeInstruction::instruction_size;
  }
}

//=============================================================================

#ifndef PRODUCT
void MachBreakpointNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
  st->print("BREAKPOINT");
}
#endif

void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  C2_MacroAssembler _masm(&cbuf);
  __ brk(0);
}

uint MachBreakpointNode::size(PhaseRegAlloc *ra_) const {
  return MachNode::size(ra_);
}

//=============================================================================

#ifndef PRODUCT
  void MachNopNode::format(PhaseRegAlloc*, outputStream* st) const {
    st->print("nop \t# %d bytes pad for loops and calls", _count);
  }
#endif

  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {
    C2_MacroAssembler _masm(&cbuf);
    for (int i = 0; i < _count; i++) {
      __ nop();
    }
  }

  uint MachNopNode::size(PhaseRegAlloc*) const {
    return _count * NativeInstruction::instruction_size;
  }

//=============================================================================
const RegMask& MachConstantBaseNode::_out_RegMask = RegMask::Empty;

int ConstantTable::calculate_table_base_offset() const {
  return 0;  // absolute addressing, no offset
}

bool MachConstantBaseNode::requires_postalloc_expand() const { return false; }
void MachConstantBaseNode::postalloc_expand(GrowableArray <Node *> *nodes, PhaseRegAlloc *ra_) {
  ShouldNotReachHere();
}

void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  // Empty encoding
}

uint MachConstantBaseNode::size(PhaseRegAlloc* ra_) const {
  return 0;
}

#ifndef PRODUCT
void MachConstantBaseNode::format(PhaseRegAlloc* ra_, outputStream* st) const {
  st->print("-- \t// MachConstantBaseNode (empty encoding)");
}
#endif

#ifndef PRODUCT
void MachPrologNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
  Compile* C = ra_->C;

  int framesize = C->output()->frame_slots() << LogBytesPerInt;

  if (C->output()->need_stack_bang(framesize))
    st->print("# stack bang size=%d\n\t", framesize);

  if (framesize < ((1 << 9) + 2 * wordSize)) {
    st->print("sub  sp, sp, #%d\n\t", framesize);
    st->print("stp  rfp, lr, [sp, #%d]", framesize - 2 * wordSize);
    if (PreserveFramePointer) st->print("\n\tadd  rfp, sp, #%d", framesize - 2 * wordSize);
  } else {
    st->print("stp  lr, rfp, [sp, #%d]!\n\t", -(2 * wordSize));
    if (PreserveFramePointer) st->print("mov  rfp, sp\n\t");
    st->print("mov  rscratch1, #%d\n\t", framesize - 2 * wordSize);
    st->print("sub  sp, sp, rscratch1");
  }
  if (C->stub_function() == NULL && BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {
    st->print("\n\t");
    st->print("ldr  rscratch1, [guard]\n\t");
    st->print("dmb ishld\n\t");
    st->print("ldr  rscratch2, [rthread, #thread_disarmed_offset]\n\t");
    st->print("cmp  rscratch1, rscratch2\n\t");
    st->print("b.eq skip");
    st->print("\n\t");
    st->print("blr #nmethod_entry_barrier_stub\n\t");
    st->print("b skip\n\t");
    st->print("guard: int\n\t");
    st->print("\n\t");
    st->print("skip:\n\t");
  }
}
#endif

void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  Compile* C = ra_->C;
  C2_MacroAssembler _masm(&cbuf);

  // n.b. frame size includes space for return pc and rfp
  const int framesize = C->output()->frame_size_in_bytes();

  // insert a nop at the start of the prolog so we can patch in a
  // branch if we need to invalidate the method later
  __ nop();

  if (C->clinit_barrier_on_entry()) {
    assert(!C->method()->holder()->is_not_initialized(), "initialization should have been started");

    Label L_skip_barrier;

    __ mov_metadata(rscratch2, C->method()->holder()->constant_encoding());
    __ clinit_barrier(rscratch2, rscratch1, &L_skip_barrier);
    __ far_jump(RuntimeAddress(SharedRuntime::get_handle_wrong_method_stub()));
    __ bind(L_skip_barrier);
  }

  if (C->max_vector_size() > 0) {
    __ reinitialize_ptrue();
  }

  int bangsize = C->output()->bang_size_in_bytes();
  if (C->output()->need_stack_bang(bangsize))
    __ generate_stack_overflow_check(bangsize);

  __ build_frame(framesize);

  if (C->stub_function() == NULL) {
    BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
    bs->nmethod_entry_barrier(&_masm);
  }

  if (VerifyStackAtCalls) {
    Unimplemented();
  }

  C->output()->set_frame_complete(cbuf.insts_size());

  if (C->has_mach_constant_base_node()) {
    // NOTE: We set the table base offset here because users might be
    // emitted before MachConstantBaseNode.
    ConstantTable& constant_table = C->output()->constant_table();
    constant_table.set_table_base_offset(constant_table.calculate_table_base_offset());
  }
}

uint MachPrologNode::size(PhaseRegAlloc* ra_) const
{
  return MachNode::size(ra_); // too many variables; just compute it
                              // the hard way
}

int MachPrologNode::reloc() const
{
  return 0;
}

//=============================================================================

#ifndef PRODUCT
void MachEpilogNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
  Compile* C = ra_->C;
  int framesize = C->output()->frame_slots() << LogBytesPerInt;

  st->print("# pop frame %d\n\t",framesize);

  if (framesize == 0) {
    st->print("ldp  lr, rfp, [sp],#%d\n\t", (2 * wordSize));
  } else if (framesize < ((1 << 9) + 2 * wordSize)) {
    st->print("ldp  lr, rfp, [sp,#%d]\n\t", framesize - 2 * wordSize);
    st->print("add  sp, sp, #%d\n\t", framesize);
  } else {
    st->print("mov  rscratch1, #%d\n\t", framesize - 2 * wordSize);
    st->print("add  sp, sp, rscratch1\n\t");
    st->print("ldp  lr, rfp, [sp],#%d\n\t", (2 * wordSize));
  }

  if (do_polling() && C->is_method_compilation()) {
    st->print("# test polling word\n\t");
    st->print("ldr  rscratch1, [rthread],#%d\n\t", in_bytes(JavaThread::polling_word_offset()));
    st->print("cmp  sp, rscratch1\n\t");
    st->print("bhi #slow_path");
  }
}
#endif

void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  Compile* C = ra_->C;
  C2_MacroAssembler _masm(&cbuf);
  int framesize = C->output()->frame_slots() << LogBytesPerInt;

  __ remove_frame(framesize);

  if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
    __ reserved_stack_check();
  }

  if (do_polling() && C->is_method_compilation()) {
    Label dummy_label;
    Label* code_stub = &dummy_label;
    if (!C->output()->in_scratch_emit_size()) {
      code_stub = &C->output()->safepoint_poll_table()->add_safepoint(__ offset());
    }
    __ relocate(relocInfo::poll_return_type);
    __ safepoint_poll(*code_stub, true /* at_return */, false /* acquire */, true /* in_nmethod */);
  }
}

uint MachEpilogNode::size(PhaseRegAlloc *ra_) const {
  // Variable size. Determine dynamically.
  return MachNode::size(ra_);
}

int MachEpilogNode::reloc() const {
  // Return number of relocatable values contained in this instruction.
  return 1; // 1 for polling page.
}

const Pipeline * MachEpilogNode::pipeline() const {
  return MachNode::pipeline_class();
}

//=============================================================================

// Figure out which register class each belongs in: rc_int, rc_float or
// rc_stack.
enum RC { rc_bad, rc_int, rc_float, rc_predicate, rc_stack };

static enum RC rc_class(OptoReg::Name reg) {

  if (reg == OptoReg::Bad) {
    return rc_bad;
  }

  // we have 32 int registers * 2 halves
  int slots_of_int_registers = RegisterImpl::max_slots_per_register * RegisterImpl::number_of_registers;

  if (reg < slots_of_int_registers) {
    return rc_int;
  }

  // we have 32 float register * 8 halves
  int slots_of_float_registers = FloatRegisterImpl::max_slots_per_register * FloatRegisterImpl::number_of_registers;
  if (reg < slots_of_int_registers + slots_of_float_registers) {
    return rc_float;
  }

  int slots_of_predicate_registers = PRegisterImpl::max_slots_per_register * PRegisterImpl::number_of_registers;
  if (reg < slots_of_int_registers + slots_of_float_registers + slots_of_predicate_registers) {
    return rc_predicate;
  }

  // Between predicate regs & stack is the flags.
  assert(OptoReg::is_stack(reg), "blow up if spilling flags");

  return rc_stack;
}

uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {
  Compile* C = ra_->C;

  // Get registers to move.
  OptoReg::Name src_hi = ra_->get_reg_second(in(1));
  OptoReg::Name src_lo = ra_->get_reg_first(in(1));
  OptoReg::Name dst_hi = ra_->get_reg_second(this);
  OptoReg::Name dst_lo = ra_->get_reg_first(this);

  enum RC src_hi_rc = rc_class(src_hi);
  enum RC src_lo_rc = rc_class(src_lo);
  enum RC dst_hi_rc = rc_class(dst_hi);
  enum RC dst_lo_rc = rc_class(dst_lo);

  assert(src_lo != OptoReg::Bad && dst_lo != OptoReg::Bad, "must move at least 1 register");

  if (src_hi != OptoReg::Bad && !bottom_type()->isa_vectmask()) {
    assert((src_lo&1)==0 && src_lo+1==src_hi &&
           (dst_lo&1)==0 && dst_lo+1==dst_hi,
           "expected aligned-adjacent pairs");
  }

  if (src_lo == dst_lo && src_hi == dst_hi) {
    return 0;            // Self copy, no move.
  }

  bool is64 = (src_lo & 1) == 0 && src_lo + 1 == src_hi &&
              (dst_lo & 1) == 0 && dst_lo + 1 == dst_hi;
  int src_offset = ra_->reg2offset(src_lo);
  int dst_offset = ra_->reg2offset(dst_lo);

  if (bottom_type()->isa_vect() && !bottom_type()->isa_vectmask()) {
    uint ireg = ideal_reg();
    if (ireg == Op_VecA && cbuf) {
      C2_MacroAssembler _masm(cbuf);
      int sve_vector_reg_size_in_bytes = Matcher::scalable_vector_reg_size(T_BYTE);
      if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {
        // stack->stack
        __ spill_copy_sve_vector_stack_to_stack(src_offset, dst_offset,
                                                sve_vector_reg_size_in_bytes);
      } else if (src_lo_rc == rc_float && dst_lo_rc == rc_stack) {
        __ spill_sve_vector(as_FloatRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),
                            sve_vector_reg_size_in_bytes);
      } else if (src_lo_rc == rc_stack && dst_lo_rc == rc_float) {
        __ unspill_sve_vector(as_FloatRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),
                              sve_vector_reg_size_in_bytes);
      } else if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {
        __ sve_orr(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                   as_FloatRegister(Matcher::_regEncode[src_lo]),
                   as_FloatRegister(Matcher::_regEncode[src_lo]));
      } else {
        ShouldNotReachHere();
      }
    } else if (cbuf) {
      assert(ireg == Op_VecD || ireg == Op_VecX, "must be 64 bit or 128 bit vector");
      C2_MacroAssembler _masm(cbuf);
      assert((src_lo_rc != rc_int && dst_lo_rc != rc_int), "sanity");
      if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {
        // stack->stack
        assert((src_offset & 7) == 0 && (dst_offset & 7) == 0, "unaligned stack offset");
        if (ireg == Op_VecD) {
          __ unspill(rscratch1, true, src_offset);
          __ spill(rscratch1, true, dst_offset);
        } else {
          __ spill_copy128(src_offset, dst_offset);
        }
      } else if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {
        __ mov(as_FloatRegister(Matcher::_regEncode[dst_lo]),
               ireg == Op_VecD ? __ T8B : __ T16B,
               as_FloatRegister(Matcher::_regEncode[src_lo]));
      } else if (src_lo_rc == rc_float && dst_lo_rc == rc_stack) {
        __ spill(as_FloatRegister(Matcher::_regEncode[src_lo]),
                 ireg == Op_VecD ? __ D : __ Q,
                 ra_->reg2offset(dst_lo));
      } else if (src_lo_rc == rc_stack && dst_lo_rc == rc_float) {
        __ unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                   ireg == Op_VecD ? __ D : __ Q,
                   ra_->reg2offset(src_lo));
      } else {
        ShouldNotReachHere();
      }
    }
  } else if (cbuf) {
    C2_MacroAssembler _masm(cbuf);
    switch (src_lo_rc) {
    case rc_int:
      if (dst_lo_rc == rc_int) {  // gpr --> gpr copy
        if (is64) {
            __ mov(as_Register(Matcher::_regEncode[dst_lo]),
                   as_Register(Matcher::_regEncode[src_lo]));
        } else {
            C2_MacroAssembler _masm(cbuf);
            __ movw(as_Register(Matcher::_regEncode[dst_lo]),
                    as_Register(Matcher::_regEncode[src_lo]));
        }
      } else if (dst_lo_rc == rc_float) { // gpr --> fpr copy
        if (is64) {
            __ fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                     as_Register(Matcher::_regEncode[src_lo]));
        } else {
            __ fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                     as_Register(Matcher::_regEncode[src_lo]));
        }
      } else {                    // gpr --> stack spill
        assert(dst_lo_rc == rc_stack, "spill to bad register class");
        __ spill(as_Register(Matcher::_regEncode[src_lo]), is64, dst_offset);
      }
      break;
    case rc_float:
      if (dst_lo_rc == rc_int) {  // fpr --> gpr copy
        if (is64) {
            __ fmovd(as_Register(Matcher::_regEncode[dst_lo]),
                     as_FloatRegister(Matcher::_regEncode[src_lo]));
        } else {
            __ fmovs(as_Register(Matcher::_regEncode[dst_lo]),
                     as_FloatRegister(Matcher::_regEncode[src_lo]));
        }
      } else if (dst_lo_rc == rc_float) { // fpr --> fpr copy
        if (is64) {
            __ fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                     as_FloatRegister(Matcher::_regEncode[src_lo]));
        } else {
            __ fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                     as_FloatRegister(Matcher::_regEncode[src_lo]));
        }
      } else {                    // fpr --> stack spill
        assert(dst_lo_rc == rc_stack, "spill to bad register class");
        __ spill(as_FloatRegister(Matcher::_regEncode[src_lo]),
                 is64 ? __ D : __ S, dst_offset);
      }
      break;
    case rc_stack:
      if (dst_lo_rc == rc_int) {  // stack --> gpr load
        __ unspill(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);
      } else if (dst_lo_rc == rc_float) { // stack --> fpr load
        __ unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),
                   is64 ? __ D : __ S, src_offset);
      } else if (dst_lo_rc == rc_predicate) {
        __ unspill_sve_predicate(as_PRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),
                                 Matcher::scalable_vector_reg_size(T_BYTE) >> 3);
      } else {                    // stack --> stack copy
        assert(dst_lo_rc == rc_stack, "spill to bad register class");
        if (ideal_reg() == Op_RegVectMask) {
          __ spill_copy_sve_predicate_stack_to_stack(src_offset, dst_offset,
                                                     Matcher::scalable_vector_reg_size(T_BYTE) >> 3);
        } else {
          __ unspill(rscratch1, is64, src_offset);
          __ spill(rscratch1, is64, dst_offset);
        }
      }
      break;
    case rc_predicate:
      if (dst_lo_rc == rc_predicate) {
        __ sve_mov(as_PRegister(Matcher::_regEncode[dst_lo]), as_PRegister(Matcher::_regEncode[src_lo]));
      } else if (dst_lo_rc == rc_stack) {
        __ spill_sve_predicate(as_PRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),
                               Matcher::scalable_vector_reg_size(T_BYTE) >> 3);
      } else {
        assert(false, "bad src and dst rc_class combination.");
        ShouldNotReachHere();
      }
      break;
    default:
      assert(false, "bad rc_class for spill");
      ShouldNotReachHere();
    }
  }

  if (st) {
    st->print("spill ");
    if (src_lo_rc == rc_stack) {
      st->print("[sp, #%d] -> ", ra_->reg2offset(src_lo));
    } else {
      st->print("%s -> ", Matcher::regName[src_lo]);
    }
    if (dst_lo_rc == rc_stack) {
      st->print("[sp, #%d]", ra_->reg2offset(dst_lo));
    } else {
      st->print("%s", Matcher::regName[dst_lo]);
    }
    if (bottom_type()->isa_vect() && !bottom_type()->isa_vectmask()) {
      int vsize = 0;
      switch (ideal_reg()) {
      case Op_VecD:
        vsize = 64;
        break;
      case Op_VecX:
        vsize = 128;
        break;
      case Op_VecA:
        vsize = Matcher::scalable_vector_reg_size(T_BYTE) * 8;
        break;
      default:
        assert(false, "bad register type for spill");
        ShouldNotReachHere();
      }
      st->print("\t# vector spill size = %d", vsize);
    } else if (ideal_reg() == Op_RegVectMask) {
      assert(Matcher::supports_scalable_vector(), "bad register type for spill");
      int vsize = Matcher::scalable_predicate_reg_slots() * 32;
      st->print("\t# predicate spill size = %d", vsize);
    } else {
      st->print("\t# spill size = %d", is64 ? 64 : 32);
    }
  }

  return 0;

}

#ifndef PRODUCT
void MachSpillCopyNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
  if (!ra_)
    st->print("N%d = SpillCopy(N%d)", _idx, in(1)->_idx);
  else
    implementation(NULL, ra_, false, st);
}
#endif

void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  implementation(&cbuf, ra_, false, NULL);
}

uint MachSpillCopyNode::size(PhaseRegAlloc *ra_) const {
  return MachNode::size(ra_);
}

//=============================================================================

#ifndef PRODUCT
void BoxLockNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
  int reg = ra_->get_reg_first(this);
  st->print("add %s, rsp, #%d]\t# box lock",
            Matcher::regName[reg], offset);
}
#endif

void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  C2_MacroAssembler _masm(&cbuf);

  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
  int reg    = ra_->get_encode(this);

  // This add will handle any 24-bit signed offset. 24 bits allows an
  // 8 megabyte stack frame.
  __ add(as_Register(reg), sp, offset);
}

uint BoxLockNode::size(PhaseRegAlloc *ra_) const {
  // BoxLockNode is not a MachNode, so we can't just call MachNode::size(ra_).
  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());

  if (Assembler::operand_valid_for_add_sub_immediate(offset)) {
    return NativeInstruction::instruction_size;
  } else {
    return 2 * NativeInstruction::instruction_size;
  }
}

//=============================================================================

#ifndef PRODUCT
void MachUEPNode::format(PhaseRegAlloc* ra_, outputStream* st) const
{
  st->print_cr("# MachUEPNode");
  if (UseCompressedClassPointers) {
    st->print_cr("\tldrw rscratch1, j_rarg0 + oopDesc::klass_offset_in_bytes()]\t# compressed klass");
    if (CompressedKlassPointers::shift() != 0) {
      st->print_cr("\tdecode_klass_not_null rscratch1, rscratch1");
    }
  } else {
   st->print_cr("\tldr rscratch1, j_rarg0 + oopDesc::klass_offset_in_bytes()]\t# compressed klass");
  }
  st->print_cr("\tcmp r0, rscratch1\t # Inline cache check");
  st->print_cr("\tbne, SharedRuntime::_ic_miss_stub");
}
#endif

void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const
{
  // This is the unverified entry point.
  C2_MacroAssembler _masm(&cbuf);

  __ cmp_klass(j_rarg0, rscratch2, rscratch1);
  Label skip;
  // TODO
  // can we avoid this skip and still use a reloc?
  __ br(Assembler::EQ, skip);
  __ far_jump(RuntimeAddress(SharedRuntime::get_ic_miss_stub()));
  __ bind(skip);
}

uint MachUEPNode::size(PhaseRegAlloc* ra_) const
{
  return MachNode::size(ra_);
}

// REQUIRED EMIT CODE

//=============================================================================

// Emit exception handler code.
int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)
{
  // mov rscratch1 #exception_blob_entry_point
  // br rscratch1
  // Note that the code buffer's insts_mark is always relative to insts.
  // That's why we must use the macroassembler to generate a handler.
  C2_MacroAssembler _masm(&cbuf);
  address base = __ start_a_stub(size_exception_handler());
  if (base == NULL) {
    ciEnv::current()->record_failure("CodeCache is full");
    return 0;  // CodeBuffer::expand failed
  }
  int offset = __ offset();
  __ far_jump(RuntimeAddress(OptoRuntime::exception_blob()->entry_point()));
  assert(__ offset() - offset <= (int) size_exception_handler(), "overflow");
  __ end_a_stub();
  return offset;
}

// Emit deopt handler code.
int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)
{
  // Note that the code buffer's insts_mark is always relative to insts.
  // That's why we must use the macroassembler to generate a handler.
  C2_MacroAssembler _masm(&cbuf);
  address base = __ start_a_stub(size_deopt_handler());
  if (base == NULL) {
    ciEnv::current()->record_failure("CodeCache is full");
    return 0;  // CodeBuffer::expand failed
  }
  int offset = __ offset();

  __ adr(lr, __ pc());
  __ far_jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));

  assert(__ offset() - offset <= (int) size_deopt_handler(), "overflow");
  __ end_a_stub();
  return offset;
}

// REQUIRED MATCHER CODE

//=============================================================================

const bool Matcher::match_rule_supported(int opcode) {
  if (!has_match_rule(opcode))
    return false;

  bool ret_value = true;
  switch (opcode) {
    case Op_OnSpinWait:
      return VM_Version::supports_on_spin_wait();
    case Op_CacheWB:
    case Op_CacheWBPreSync:
    case Op_CacheWBPostSync:
      if (!VM_Version::supports_data_cache_line_flush()) {
        ret_value = false;
      }
      break;
    case Op_LoadVectorMasked:
    case Op_StoreVectorMasked:
    case Op_LoadVectorGatherMasked:
    case Op_StoreVectorScatterMasked:
    case Op_MaskAll:
    case Op_AndVMask:
    case Op_OrVMask:
    case Op_XorVMask:
      if (UseSVE == 0) {
        ret_value = false;
      }
      break;
  }

  return ret_value; // Per default match rules are supported.
}

// Identify extra cases that we might want to provide match rules for vector nodes and
// other intrinsics guarded with vector length (vlen) and element type (bt).
const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {
  if (!match_rule_supported(opcode)) {
    return false;
  }
  int bit_size = vlen * type2aelembytes(bt) * 8;
  if (UseSVE == 0 && bit_size > 128) {
    return false;
  }
  if (UseSVE > 0) {
    return op_sve_supported(opcode, vlen, bt);
  } else { // NEON
    // Special cases
    switch (opcode) {
    case Op_VectorMaskCmp:
      if (vlen < 2 || bit_size < 64) {
        return false;
      }
      break;
    case Op_MulAddVS2VI:
      if (bit_size < 128) {
        return false;
      }
      break;
    case Op_MulVL:
      return false;
    case Op_VectorLoadShuffle:
    case Op_VectorRearrange:
      if (vlen < 4) {
        return false;
      }
      break;
    case Op_LoadVectorGather:
    case Op_StoreVectorScatter:
      return false;
    default:
      break;
    }
  }
  return vector_size_supported(bt, vlen);
}

const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {
  // Only SVE supports masked operations.
  if (UseSVE == 0) {
    return false;
  }
  return match_rule_supported(opcode) &&
         masked_op_sve_supported(opcode, vlen, bt);
}

const RegMask* Matcher::predicate_reg_mask(void) {
  return &_PR_REG_mask;
}

const TypeVectMask* Matcher::predicate_reg_type(const Type* elemTy, int length) {
  return new TypeVectMask(elemTy, length);
}

// Vector calling convention not yet implemented.
const bool Matcher::supports_vector_calling_convention(void) {
  return false;
}

OptoRegPair Matcher::vector_return_value(uint ideal_reg) {
  Unimplemented();
  return OptoRegPair(0, 0);
}

// Is this branch offset short enough that a short branch can be used?
//
// NOTE: If the platform does not provide any short branch variants, then
//       this method should return false for offset 0.
bool Matcher::is_short_branch_offset(int rule, int br_size, int offset) {
  // The passed offset is relative to address of the branch.

  return (-32768 <= offset && offset < 32768);
}

// Vector width in bytes.
const int Matcher::vector_width_in_bytes(BasicType bt) {
  // The MaxVectorSize should have been set by detecting SVE max vector register size.
  int size = MIN2((UseSVE > 0) ? 256 : 16, (int)MaxVectorSize);
  // Minimum 2 values in vector
  if (size < 2*type2aelembytes(bt)) size = 0;
  // But never < 4
  if (size < 4) size = 0;
  return size;
}

// Limits on vector size (number of elements) loaded into vector.
const int Matcher::max_vector_size(const BasicType bt) {
  return vector_width_in_bytes(bt)/type2aelembytes(bt);
}

const int Matcher::min_vector_size(const BasicType bt) {
  int max_size = max_vector_size(bt);
  // Limit the min vector size to 8 bytes.
  int size = 8 / type2aelembytes(bt);
  if (bt == T_BYTE) {
    // To support vector api shuffle/rearrange.
    size = 4;
  } else if (bt == T_BOOLEAN) {
    // To support vector api load/store mask.
    size = 2;
  }
  if (size < 2) size = 2;
  return MIN2(size, max_size);
}

// Actual max scalable vector register length.
const int Matcher::scalable_vector_reg_size(const BasicType bt) {
  return Matcher::max_vector_size(bt);
}

// Vector ideal reg.
const uint Matcher::vector_ideal_reg(int len) {
  if (UseSVE > 0 && 2 <= len && len <= 256) {
    return Op_VecA;
  }
  switch(len) {
    // For 16-bit/32-bit mask vector, reuse VecD.
    case  2:
    case  4:
    case  8: return Op_VecD;
    case 16: return Op_VecX;
  }
  ShouldNotReachHere();
  return 0;
}

MachOper* Matcher::pd_specialize_generic_vector_operand(MachOper* original_opnd, uint ideal_reg, bool is_temp) {
  ShouldNotReachHere(); // generic vector operands not supported
  return NULL;
}

bool Matcher::is_reg2reg_move(MachNode* m) {
  ShouldNotReachHere();  // generic vector operands not supported
  return false;
}

bool Matcher::is_generic_vector(MachOper* opnd)  {
  ShouldNotReachHere();  // generic vector operands not supported
  return false;
}

// Return whether or not this register is ever used as an argument.
// This function is used on startup to build the trampoline stubs in
// generateOptoStub.  Registers not mentioned will be killed by the VM
// call in the trampoline, and arguments in those registers not be
// available to the callee.
bool Matcher::can_be_java_arg(int reg)
{
  return
    reg ==  R0_num || reg == R0_H_num ||
    reg ==  R1_num || reg == R1_H_num ||
    reg ==  R2_num || reg == R2_H_num ||
    reg ==  R3_num || reg == R3_H_num ||
    reg ==  R4_num || reg == R4_H_num ||
    reg ==  R5_num || reg == R5_H_num ||
    reg ==  R6_num || reg == R6_H_num ||
    reg ==  R7_num || reg == R7_H_num ||
    reg ==  V0_num || reg == V0_H_num ||
    reg ==  V1_num || reg == V1_H_num ||
    reg ==  V2_num || reg == V2_H_num ||
    reg ==  V3_num || reg == V3_H_num ||
    reg ==  V4_num || reg == V4_H_num ||
    reg ==  V5_num || reg == V5_H_num ||
    reg ==  V6_num || reg == V6_H_num ||
    reg ==  V7_num || reg == V7_H_num;
}

bool Matcher::is_spillable_arg(int reg)
{
  return can_be_java_arg(reg);
}

uint Matcher::int_pressure_limit()
{
  // JDK-8183543: When taking the number of available registers as int
  // register pressure threshold, the jtreg test:
  // test/hotspot/jtreg/compiler/regalloc/TestC2IntPressure.java
  // failed due to C2 compilation failure with
  // "COMPILE SKIPPED: failed spill-split-recycle sanity check".
  //
  // A derived pointer is live at CallNode and then is flagged by RA
  // as a spilled LRG. Spilling heuristics(Spill-USE) explicitly skip
  // derived pointers and lastly fail to spill after reaching maximum
  // number of iterations. Lowering the default pressure threshold to
  // (_NO_SPECIAL_REG32_mask.Size() minus 1) forces CallNode to become
  // a high register pressure area of the code so that split_DEF can
  // generate DefinitionSpillCopy for the derived pointer.
  uint default_int_pressure_threshold = _NO_SPECIAL_REG32_mask.Size() - 1;
  if (!PreserveFramePointer) {
    // When PreserveFramePointer is off, frame pointer is allocatable,
    // but different from other SOC registers, it is excluded from
    // fatproj's mask because its save type is No-Save. Decrease 1 to
    // ensure high pressure at fatproj when PreserveFramePointer is off.
    // See check_pressure_at_fatproj().
    default_int_pressure_threshold--;
  }
  return (INTPRESSURE == -1) ? default_int_pressure_threshold : INTPRESSURE;
}

uint Matcher::float_pressure_limit()
{
  // _FLOAT_REG_mask is generated by adlc from the float_reg register class.
  return (FLOATPRESSURE == -1) ? _FLOAT_REG_mask.Size() : FLOATPRESSURE;
}

bool Matcher::use_asm_for_ldiv_by_con(jlong divisor) {
  return false;
}

RegMask Matcher::divI_proj_mask() {
  ShouldNotReachHere();
  return RegMask();
}

// Register for MODI projection of divmodI.
RegMask Matcher::modI_proj_mask() {
  ShouldNotReachHere();
  return RegMask();
}

// Register for DIVL projection of divmodL.
RegMask Matcher::divL_proj_mask() {
  ShouldNotReachHere();
  return RegMask();
}

// Register for MODL projection of divmodL.
RegMask Matcher::modL_proj_mask() {
  ShouldNotReachHere();
  return RegMask();
}

const RegMask Matcher::method_handle_invoke_SP_save_mask() {
  return FP_REG_mask();
}

bool size_fits_all_mem_uses(AddPNode* addp, int shift) {
  for (DUIterator_Fast imax, i = addp->fast_outs(imax); i < imax; i++) {
    Node* u = addp->fast_out(i);
    if (u->is_LoadStore()) {
      // On AArch64, LoadStoreNodes (i.e. compare and swap
      // instructions) only take register indirect as an operand, so
      // any attempt to use an AddPNode as an input to a LoadStoreNode
      // must fail.
      return false;
    }
    if (u->is_Mem()) {
      int opsize = u->as_Mem()->memory_size();
      assert(opsize > 0, "unexpected memory operand size");
      if (u->as_Mem()->memory_size() != (1<<shift)) {
        return false;
      }
    }
  }
  return true;
}

bool can_combine_with_imm(Node* binary_node, Node* replicate_node) {
  if (UseSVE == 0 || !VectorNode::is_invariant_vector(replicate_node)){
    return false;
  }
  Node* imm_node = replicate_node->in(1);
  if (!imm_node->is_Con()) {
    return false;
  }

  const Type* t = imm_node->bottom_type();
  if (!(t->isa_int() || t->isa_long())) {
    return false;
  }

  switch (binary_node->Opcode()) {
  case Op_AndV:
  case Op_OrV:
  case Op_XorV: {
    Assembler::SIMD_RegVariant T = Assembler::elemType_to_regVariant(Matcher::vector_element_basic_type(binary_node));
    uint64_t value = t->isa_long() ? (uint64_t)imm_node->get_long() : (uint64_t)imm_node->get_int();
    return Assembler::operand_valid_for_sve_logical_immediate(Assembler::regVariant_to_elemBits(T), value);
  }
  case Op_AddVB:
    return (imm_node->get_int() <= 255 && imm_node->get_int() >= -255);
  case Op_AddVS:
  case Op_AddVI:
    return Assembler::operand_valid_for_sve_add_sub_immediate((int64_t)imm_node->get_int());
  case Op_AddVL:
    return Assembler::operand_valid_for_sve_add_sub_immediate(imm_node->get_long());
  default:
    return false;
  }
}

bool is_vector_arith_imm_pattern(Node* n, Node* m) {
  if (n != NULL && m != NULL) {
    return can_combine_with_imm(n, m);
  }
  return false;
}

// Should the matcher clone input 'm' of node 'n'?
bool Matcher::pd_clone_node(Node* n, Node* m, Matcher::MStack& mstack) {
  // ShiftV src (ShiftCntV con)
  // StoreVector (VectorStoreMask src)
  // Binary src (Replicate con)
  if (is_vshift_con_pattern(n, m) ||
      (UseSVE > 0 && m->Opcode() == Op_VectorStoreMask && n->Opcode() == Op_StoreVector) ||
      is_vector_arith_imm_pattern(n, m)) {
    mstack.push(m, Visit);
    return true;
  }

  return false;
}

// Should the Matcher clone shifts on addressing modes, expecting them
// to be subsumed into complex addressing expressions or compute them
// into registers?
bool Matcher::pd_clone_address_expressions(AddPNode* m, Matcher::MStack& mstack, VectorSet& address_visited) {
  if (clone_base_plus_offset_address(m, mstack, address_visited)) {
    return true;
  }

  Node *off = m->in(AddPNode::Offset);
  if (off->Opcode() == Op_LShiftL && off->in(2)->is_Con() &&
      size_fits_all_mem_uses(m, off->in(2)->get_int()) &&
      // Are there other uses besides address expressions?
      !is_visited(off)) {
    address_visited.set(off->_idx); // Flag as address_visited
    mstack.push(off->in(2), Visit);
    Node *conv = off->in(1);
    if (conv->Opcode() == Op_ConvI2L &&
        // Are there other uses besides address expressions?
        !is_visited(conv)) {
      address_visited.set(conv->_idx); // Flag as address_visited
      mstack.push(conv->in(1), Pre_Visit);
    } else {
      mstack.push(conv, Pre_Visit);
    }
    address_visited.test_set(m->_idx); // Flag as address_visited
    mstack.push(m->in(AddPNode::Address), Pre_Visit);
    mstack.push(m->in(AddPNode::Base), Pre_Visit);
    return true;
  } else if (off->Opcode() == Op_ConvI2L &&
             // Are there other uses besides address expressions?
             !is_visited(off)) {
    address_visited.test_set(m->_idx); // Flag as address_visited
    address_visited.set(off->_idx); // Flag as address_visited
    mstack.push(off->in(1), Pre_Visit);
    mstack.push(m->in(AddPNode::Address), Pre_Visit);
    mstack.push(m->in(AddPNode::Base), Pre_Visit);
    return true;
  }
  return false;
}

#define MOV_VOLATILE(REG, BASE, INDEX, SCALE, DISP, SCRATCH, INSN)      \
  C2_MacroAssembler _masm(&cbuf);                                       \
  {                                                                     \
    guarantee(INDEX == -1, "mode not permitted for volatile");          \
    guarantee(DISP == 0, "mode not permitted for volatile");            \
    guarantee(SCALE == 0, "mode not permitted for volatile");           \
    __ INSN(REG, as_Register(BASE));                                    \
  }


static Address mem2address(int opcode, Register base, int index, int size, int disp)
  {
    Address::extend scale;

    // Hooboy, this is fugly.  We need a way to communicate to the
    // encoder that the index needs to be sign extended, so we have to
    // enumerate all the cases.
    switch (opcode) {
    case INDINDEXSCALEDI2L:
    case INDINDEXSCALEDI2LN:
    case INDINDEXI2L:
    case INDINDEXI2LN:
      scale = Address::sxtw(size);
      break;
    default:
      scale = Address::lsl(size);
    }

    if (index == -1) {
      return Address(base, disp);
    } else {
      assert(disp == 0, "unsupported address mode: disp = %d", disp);
      return Address(base, as_Register(index), scale);
    }
  }


typedef void (MacroAssembler::* mem_insn)(Register Rt, const Address &adr);
typedef void (MacroAssembler::* mem_insn2)(Register Rt, Register adr);
typedef void (MacroAssembler::* mem_float_insn)(FloatRegister Rt, const Address &adr);
typedef void (MacroAssembler::* mem_vector_insn)(FloatRegister Rt,
                                  MacroAssembler::SIMD_RegVariant T, const Address &adr);

  // Used for all non-volatile memory accesses.  The use of
  // $mem->opcode() to discover whether this pattern uses sign-extended
  // offsets is something of a kludge.
  static void loadStore(C2_MacroAssembler masm, mem_insn insn,
                        Register reg, int opcode,
                        Register base, int index, int scale, int disp,
                        int size_in_memory)
  {
    Address addr = mem2address(opcode, base, index, scale, disp);
    if (addr.getMode() == Address::base_plus_offset) {
      /* If we get an out-of-range offset it is a bug in the compiler,
         so we assert here. */
      assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory)),
             "c2 compiler bug");
      /* Fix up any out-of-range offsets. */
      assert_different_registers(rscratch1, base);
      assert_different_registers(rscratch1, reg);
      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);
    }
    (masm.*insn)(reg, addr);
  }

  static void loadStore(C2_MacroAssembler masm, mem_float_insn insn,
                        FloatRegister reg, int opcode,
                        Register base, int index, int size, int disp,
                        int size_in_memory)
  {
    Address::extend scale;

    switch (opcode) {
    case INDINDEXSCALEDI2L:
    case INDINDEXSCALEDI2LN:
      scale = Address::sxtw(size);
      break;
    default:
      scale = Address::lsl(size);
    }

    if (index == -1) {
      /* If we get an out-of-range offset it is a bug in the compiler,
         so we assert here. */
      assert(Address::offset_ok_for_immed(disp, exact_log2(size_in_memory)), "c2 compiler bug");
      /* Fix up any out-of-range offsets. */
      assert_different_registers(rscratch1, base);
      Address addr = Address(base, disp);
      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);
      (masm.*insn)(reg, addr);
    } else {
      assert(disp == 0, "unsupported address mode: disp = %d", disp);
      (masm.*insn)(reg, Address(base, as_Register(index), scale));
    }
  }

  static void loadStore(C2_MacroAssembler masm, mem_vector_insn insn,
                        FloatRegister reg, MacroAssembler::SIMD_RegVariant T,
                        int opcode, Register base, int index, int size, int disp)
  {
    if (index == -1) {
      (masm.*insn)(reg, T, Address(base, disp));
    } else {
      assert(disp == 0, "unsupported address mode");
      (masm.*insn)(reg, T, Address(base, as_Register(index), Address::lsl(size)));
    }
  }


#line 1636 "ad_aarch64.cpp"


//SourceForm

#line 94 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"


  typedef void (C2_MacroAssembler::* sve_mem_insn_predicate)(FloatRegister Rt, Assembler::SIMD_RegVariant T,
                                                             PRegister Pg, const Address &adr);

  // Predicated load/store, with optional ptrue to all elements of given predicate register.
  static void loadStoreA_predicated(C2_MacroAssembler masm, bool is_store, FloatRegister reg,
                                    PRegister pg, BasicType mem_elem_bt, BasicType vector_elem_bt,
                                    int opcode, Register base, int index, int size, int disp) {
    sve_mem_insn_predicate insn;
    int mesize = type2aelembytes(mem_elem_bt);
    if (index == -1) {
      assert(size == 0, "unsupported address mode: scale size = %d", size);
      switch(mesize) {
      case 1:
        insn = is_store ? &C2_MacroAssembler::sve_st1b : &C2_MacroAssembler::sve_ld1b;
        break;
      case 2:
        insn = is_store ? &C2_MacroAssembler::sve_st1h : &C2_MacroAssembler::sve_ld1h;
        break;
      case 4:
        insn = is_store ? &C2_MacroAssembler::sve_st1w : &C2_MacroAssembler::sve_ld1w;
        break;
      case 8:
        insn = is_store ? &C2_MacroAssembler::sve_st1d : &C2_MacroAssembler::sve_ld1d;
        break;
      default:
        assert(false, "unsupported");
        ShouldNotReachHere();
      }
      int imm4 = disp / mesize / Matcher::scalable_vector_reg_size(vector_elem_bt);
      (masm.*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));
    } else {
      assert(false, "unimplemented");
      ShouldNotReachHere();
    }
  }

  bool op_sve_supported(int opcode, int vlen, BasicType bt) {
    int length_in_bytes = vlen * type2aelembytes(bt);
    switch (opcode) {
      case Op_MulAddVS2VI:
      // No multiply reduction instructions
      case Op_MulReductionVD:
      case Op_MulReductionVF:
      case Op_MulReductionVI:
      case Op_MulReductionVL:
      // Others
      case Op_ExtractC:
      case Op_ExtractUB:
        return false;
      // Vector API specific
      case Op_VectorLoadShuffle:
      case Op_VectorRearrange:
        return vlen >= 4 && length_in_bytes <= MaxVectorSize;
      case Op_LoadVector:
      case Op_StoreVector:
        return Matcher::vector_size_supported(bt, vlen);
      default:
        break;
    }
    // By default, we only support vector operations with no less than 8 bytes and 2 elements.
    return 8 <= length_in_bytes && length_in_bytes <= MaxVectorSize && vlen >= 2;
  }

  bool masked_op_sve_supported(int opcode, int vlen, BasicType bt) {
    if (opcode == Op_VectorRearrange) {
      return false;
    }
    return op_sve_supported(opcode, vlen, bt);
  }


#line 1715 "ad_aarch64.cpp"


//SourceForm

#line 32 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"


static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {
  if (barrier_data == ZLoadBarrierElided) {
    return;
  }
  ZLoadBarrierStubC2* const stub = ZLoadBarrierStubC2::create(node, ref_addr, ref, tmp, barrier_data);
  __ ldr(tmp, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
  __ andr(tmp, tmp, ref);
  __ cbnz(tmp, *stub->entry());
  __ bind(*stub->continuation());
}

static void z_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {
  ZLoadBarrierStubC2* const stub = ZLoadBarrierStubC2::create(node, ref_addr, ref, tmp, ZLoadBarrierStrong);
  __ b(*stub->entry());
  __ bind(*stub->continuation());
}


#line 1741 "ad_aarch64.cpp"


#ifndef PRODUCT
void Compile::adlc_verification() {

  // Following assertions generated from definition section
  assert( INSN_COST == 100, "Expect (100) to equal 100");
  assert( BRANCH_COST == 200, "Expect (2 * INSN_COST) to equal 200");
  assert( CALL_COST == 200, "Expect (2 * INSN_COST) to equal 200");
  assert( VOLATILE_REF_COST == 1000, "Expect (10 * INSN_COST) to equal 1000");
  assert( SVE_COST == 200, "Expect (200) to equal 200");
}
#endif

// Map from machine-independent register number to register_save_policy
const        char register_save_policy[] = {
  'C', // R10
  'C', // R10_H
  'C', // R11
  'C', // R11_H
  'C', // R12
  'C', // R12_H
  'C', // R13
  'C', // R13_H
  'C', // R14
  'C', // R14_H
  'C', // R15
  'C', // R15_H
  'C', // R16
  'C', // R16_H
  'C', // R17
  'C', // R17_H
  'C', // R18
  'C', // R18_H
  'C', // R0
  'C', // R0_H
  'C', // R1
  'C', // R1_H
  'C', // R2
  'C', // R2_H
  'C', // R3
  'C', // R3_H
  'C', // R4
  'C', // R4_H
  'C', // R5
  'C', // R5_H
  'C', // R6
  'C', // R6_H
  'C', // R7
  'C', // R7_H
  'C', // R19
  'C', // R19_H
  'C', // R20
  'C', // R20_H
  'C', // R21
  'C', // R21_H
  'C', // R22
  'C', // R22_H
  'C', // R23
  'C', // R23_H
  'C', // R24
  'C', // R24_H
  'C', // R25
  'C', // R25_H
  'C', // R26
  'C', // R26_H
  'C', // R27
  'C', // R27_H
  'N', // R28
  'N', // R28_H
  'N', // R29
  'N', // R29_H
  'N', // R30
  'N', // R30_H
  'N', // R31
  'N', // R31_H
  'N', // R8
  'N', // R8_H
  'N', // R9
  'N', // R9_H
  'C', // V16
  'C', // V16_H
  'C', // V16_J
  'C', // V16_K
  'C', // V16_L
  'C', // V16_M
  'C', // V16_N
  'C', // V16_O
  'C', // V17
  'C', // V17_H
  'C', // V17_J
  'C', // V17_K
  'C', // V17_L
  'C', // V17_M
  'C', // V17_N
  'C', // V17_O
  'C', // V18
  'C', // V18_H
  'C', // V18_J
  'C', // V18_K
  'C', // V18_L
  'C', // V18_M
  'C', // V18_N
  'C', // V18_O
  'C', // V19
  'C', // V19_H
  'C', // V19_J
  'C', // V19_K
  'C', // V19_L
  'C', // V19_M
  'C', // V19_N
  'C', // V19_O
  'C', // V20
  'C', // V20_H
  'C', // V20_J
  'C', // V20_K
  'C', // V20_L
  'C', // V20_M
  'C', // V20_N
  'C', // V20_O
  'C', // V21
  'C', // V21_H
  'C', // V21_J
  'C', // V21_K
  'C', // V21_L
  'C', // V21_M
  'C', // V21_N
  'C', // V21_O
  'C', // V22
  'C', // V22_H
  'C', // V22_J
  'C', // V22_K
  'C', // V22_L
  'C', // V22_M
  'C', // V22_N
  'C', // V22_O
  'C', // V23
  'C', // V23_H
  'C', // V23_J
  'C', // V23_K
  'C', // V23_L
  'C', // V23_M
  'C', // V23_N
  'C', // V23_O
  'C', // V24
  'C', // V24_H
  'C', // V24_J
  'C', // V24_K
  'C', // V24_L
  'C', // V24_M
  'C', // V24_N
  'C', // V24_O
  'C', // V25
  'C', // V25_H
  'C', // V25_J
  'C', // V25_K
  'C', // V25_L
  'C', // V25_M
  'C', // V25_N
  'C', // V25_O
  'C', // V26
  'C', // V26_H
  'C', // V26_J
  'C', // V26_K
  'C', // V26_L
  'C', // V26_M
  'C', // V26_N
  'C', // V26_O
  'C', // V27
  'C', // V27_H
  'C', // V27_J
  'C', // V27_K
  'C', // V27_L
  'C', // V27_M
  'C', // V27_N
  'C', // V27_O
  'C', // V28
  'C', // V28_H
  'C', // V28_J
  'C', // V28_K
  'C', // V28_L
  'C', // V28_M
  'C', // V28_N
  'C', // V28_O
  'C', // V29
  'C', // V29_H
  'C', // V29_J
  'C', // V29_K
  'C', // V29_L
  'C', // V29_M
  'C', // V29_N
  'C', // V29_O
  'C', // V30
  'C', // V30_H
  'C', // V30_J
  'C', // V30_K
  'C', // V30_L
  'C', // V30_M
  'C', // V30_N
  'C', // V30_O
  'C', // V31
  'C', // V31_H
  'C', // V31_J
  'C', // V31_K
  'C', // V31_L
  'C', // V31_M
  'C', // V31_N
  'C', // V31_O
  'C', // V0
  'C', // V0_H
  'C', // V0_J
  'C', // V0_K
  'C', // V0_L
  'C', // V0_M
  'C', // V0_N
  'C', // V0_O
  'C', // V1
  'C', // V1_H
  'C', // V1_J
  'C', // V1_K
  'C', // V1_L
  'C', // V1_M
  'C', // V1_N
  'C', // V1_O
  'C', // V2
  'C', // V2_H
  'C', // V2_J
  'C', // V2_K
  'C', // V2_L
  'C', // V2_M
  'C', // V2_N
  'C', // V2_O
  'C', // V3
  'C', // V3_H
  'C', // V3_J
  'C', // V3_K
  'C', // V3_L
  'C', // V3_M
  'C', // V3_N
  'C', // V3_O
  'C', // V4
  'C', // V4_H
  'C', // V4_J
  'C', // V4_K
  'C', // V4_L
  'C', // V4_M
  'C', // V4_N
  'C', // V4_O
  'C', // V5
  'C', // V5_H
  'C', // V5_J
  'C', // V5_K
  'C', // V5_L
  'C', // V5_M
  'C', // V5_N
  'C', // V5_O
  'C', // V6
  'C', // V6_H
  'C', // V6_J
  'C', // V6_K
  'C', // V6_L
  'C', // V6_M
  'C', // V6_N
  'C', // V6_O
  'C', // V7
  'C', // V7_H
  'C', // V7_J
  'C', // V7_K
  'C', // V7_L
  'C', // V7_M
  'C', // V7_N
  'C', // V7_O
  'C', // V8
  'C', // V8_H
  'C', // V8_J
  'C', // V8_K
  'C', // V8_L
  'C', // V8_M
  'C', // V8_N
  'C', // V8_O
  'C', // V9
  'C', // V9_H
  'C', // V9_J
  'C', // V9_K
  'C', // V9_L
  'C', // V9_M
  'C', // V9_N
  'C', // V9_O
  'C', // V10
  'C', // V10_H
  'C', // V10_J
  'C', // V10_K
  'C', // V10_L
  'C', // V10_M
  'C', // V10_N
  'C', // V10_O
  'C', // V11
  'C', // V11_H
  'C', // V11_J
  'C', // V11_K
  'C', // V11_L
  'C', // V11_M
  'C', // V11_N
  'C', // V11_O
  'C', // V12
  'C', // V12_H
  'C', // V12_J
  'C', // V12_K
  'C', // V12_L
  'C', // V12_M
  'C', // V12_N
  'C', // V12_O
  'C', // V13
  'C', // V13_H
  'C', // V13_J
  'C', // V13_K
  'C', // V13_L
  'C', // V13_M
  'C', // V13_N
  'C', // V13_O
  'C', // V14
  'C', // V14_H
  'C', // V14_J
  'C', // V14_K
  'C', // V14_L
  'C', // V14_M
  'C', // V14_N
  'C', // V14_O
  'C', // V15
  'C', // V15_H
  'C', // V15_J
  'C', // V15_K
  'C', // V15_L
  'C', // V15_M
  'C', // V15_N
  'C', // V15_O
  'C', // P0
  'C', // P1
  'C', // P2
  'C', // P3
  'C', // P4
  'C', // P5
  'C', // P6
  'C', // P7
  'C', // P8
  'C', // P9
  'C', // P10
  'C', // P11
  'C', // P12
  'C', // P13
  'C', // P14
  'C', // P15
  'C' // no trailing comma // RFLAGS
};

// Map from machine-independent register number to c_reg_save_policy
const        char c_reg_save_policy[] = {
  'C', // R10
  'C', // R10_H
  'C', // R11
  'C', // R11_H
  'C', // R12
  'C', // R12_H
  'C', // R13
  'C', // R13_H
  'C', // R14
  'C', // R14_H
  'C', // R15
  'C', // R15_H
  'C', // R16
  'C', // R16_H
  'C', // R17
  'C', // R17_H
  'C', // R18
  'C', // R18_H
  'C', // R0
  'C', // R0_H
  'C', // R1
  'C', // R1_H
  'C', // R2
  'C', // R2_H
  'C', // R3
  'C', // R3_H
  'C', // R4
  'C', // R4_H
  'C', // R5
  'C', // R5_H
  'C', // R6
  'C', // R6_H
  'C', // R7
  'C', // R7_H
  'E', // R19
  'E', // R19_H
  'E', // R20
  'E', // R20_H
  'E', // R21
  'E', // R21_H
  'E', // R22
  'E', // R22_H
  'E', // R23
  'E', // R23_H
  'E', // R24
  'E', // R24_H
  'E', // R25
  'E', // R25_H
  'E', // R26
  'E', // R26_H
  'E', // R27
  'E', // R27_H
  'E', // R28
  'E', // R28_H
  'N', // R29
  'N', // R29_H
  'N', // R30
  'N', // R30_H
  'N', // R31
  'N', // R31_H
  'C', // R8
  'C', // R8_H
  'C', // R9
  'C', // R9_H
  'C', // V16
  'C', // V16_H
  'C', // V16_J
  'C', // V16_K
  'C', // V16_L
  'C', // V16_M
  'C', // V16_N
  'C', // V16_O
  'C', // V17
  'C', // V17_H
  'C', // V17_J
  'C', // V17_K
  'C', // V17_L
  'C', // V17_M
  'C', // V17_N
  'C', // V17_O
  'C', // V18
  'C', // V18_H
  'C', // V18_J
  'C', // V18_K
  'C', // V18_L
  'C', // V18_M
  'C', // V18_N
  'C', // V18_O
  'C', // V19
  'C', // V19_H
  'C', // V19_J
  'C', // V19_K
  'C', // V19_L
  'C', // V19_M
  'C', // V19_N
  'C', // V19_O
  'C', // V20
  'C', // V20_H
  'C', // V20_J
  'C', // V20_K
  'C', // V20_L
  'C', // V20_M
  'C', // V20_N
  'C', // V20_O
  'C', // V21
  'C', // V21_H
  'C', // V21_J
  'C', // V21_K
  'C', // V21_L
  'C', // V21_M
  'C', // V21_N
  'C', // V21_O
  'C', // V22
  'C', // V22_H
  'C', // V22_J
  'C', // V22_K
  'C', // V22_L
  'C', // V22_M
  'C', // V22_N
  'C', // V22_O
  'C', // V23
  'C', // V23_H
  'C', // V23_J
  'C', // V23_K
  'C', // V23_L
  'C', // V23_M
  'C', // V23_N
  'C', // V23_O
  'C', // V24
  'C', // V24_H
  'C', // V24_J
  'C', // V24_K
  'C', // V24_L
  'C', // V24_M
  'C', // V24_N
  'C', // V24_O
  'C', // V25
  'C', // V25_H
  'C', // V25_J
  'C', // V25_K
  'C', // V25_L
  'C', // V25_M
  'C', // V25_N
  'C', // V25_O
  'C', // V26
  'C', // V26_H
  'C', // V26_J
  'C', // V26_K
  'C', // V26_L
  'C', // V26_M
  'C', // V26_N
  'C', // V26_O
  'C', // V27
  'C', // V27_H
  'C', // V27_J
  'C', // V27_K
  'C', // V27_L
  'C', // V27_M
  'C', // V27_N
  'C', // V27_O
  'C', // V28
  'C', // V28_H
  'C', // V28_J
  'C', // V28_K
  'C', // V28_L
  'C', // V28_M
  'C', // V28_N
  'C', // V28_O
  'C', // V29
  'C', // V29_H
  'C', // V29_J
  'C', // V29_K
  'C', // V29_L
  'C', // V29_M
  'C', // V29_N
  'C', // V29_O
  'C', // V30
  'C', // V30_H
  'C', // V30_J
  'C', // V30_K
  'C', // V30_L
  'C', // V30_M
  'C', // V30_N
  'C', // V30_O
  'C', // V31
  'C', // V31_H
  'C', // V31_J
  'C', // V31_K
  'C', // V31_L
  'C', // V31_M
  'C', // V31_N
  'C', // V31_O
  'C', // V0
  'C', // V0_H
  'C', // V0_J
  'C', // V0_K
  'C', // V0_L
  'C', // V0_M
  'C', // V0_N
  'C', // V0_O
  'C', // V1
  'C', // V1_H
  'C', // V1_J
  'C', // V1_K
  'C', // V1_L
  'C', // V1_M
  'C', // V1_N
  'C', // V1_O
  'C', // V2
  'C', // V2_H
  'C', // V2_J
  'C', // V2_K
  'C', // V2_L
  'C', // V2_M
  'C', // V2_N
  'C', // V2_O
  'C', // V3
  'C', // V3_H
  'C', // V3_J
  'C', // V3_K
  'C', // V3_L
  'C', // V3_M
  'C', // V3_N
  'C', // V3_O
  'C', // V4
  'C', // V4_H
  'C', // V4_J
  'C', // V4_K
  'C', // V4_L
  'C', // V4_M
  'C', // V4_N
  'C', // V4_O
  'C', // V5
  'C', // V5_H
  'C', // V5_J
  'C', // V5_K
  'C', // V5_L
  'C', // V5_M
  'C', // V5_N
  'C', // V5_O
  'C', // V6
  'C', // V6_H
  'C', // V6_J
  'C', // V6_K
  'C', // V6_L
  'C', // V6_M
  'C', // V6_N
  'C', // V6_O
  'C', // V7
  'C', // V7_H
  'C', // V7_J
  'C', // V7_K
  'C', // V7_L
  'C', // V7_M
  'C', // V7_N
  'C', // V7_O
  'E', // V8
  'E', // V8_H
  'C', // V8_J
  'C', // V8_K
  'C', // V8_L
  'C', // V8_M
  'C', // V8_N
  'C', // V8_O
  'E', // V9
  'E', // V9_H
  'C', // V9_J
  'C', // V9_K
  'C', // V9_L
  'C', // V9_M
  'C', // V9_N
  'C', // V9_O
  'E', // V10
  'E', // V10_H
  'C', // V10_J
  'C', // V10_K
  'C', // V10_L
  'C', // V10_M
  'C', // V10_N
  'C', // V10_O
  'E', // V11
  'E', // V11_H
  'C', // V11_J
  'C', // V11_K
  'C', // V11_L
  'C', // V11_M
  'C', // V11_N
  'C', // V11_O
  'E', // V12
  'E', // V12_H
  'C', // V12_J
  'C', // V12_K
  'C', // V12_L
  'C', // V12_M
  'C', // V12_N
  'C', // V12_O
  'E', // V13
  'E', // V13_H
  'C', // V13_J
  'C', // V13_K
  'C', // V13_L
  'C', // V13_M
  'C', // V13_N
  'C', // V13_O
  'E', // V14
  'E', // V14_H
  'C', // V14_J
  'C', // V14_K
  'C', // V14_L
  'C', // V14_M
  'C', // V14_N
  'C', // V14_O
  'E', // V15
  'E', // V15_H
  'C', // V15_J
  'C', // V15_K
  'C', // V15_L
  'C', // V15_M
  'C', // V15_N
  'C', // V15_O
  'C', // P0
  'C', // P1
  'C', // P2
  'C', // P3
  'C', // P4
  'C', // P5
  'C', // P6
  'C', // P7
  'C', // P8
  'C', // P9
  'C', // P10
  'C', // P11
  'C', // P12
  'C', // P13
  'C', // P14
  'C', // P15
  'C' // no trailing comma // RFLAGS
};

// Map from machine-independent register number to register_save_type
const        int register_save_type[] = {
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  Op_RegVectMask,
  0 // no trailing comma
};


const        int   reduceOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  immI_rule,
  /*    9 */  immI0_rule,
  /*   10 */  immI_1_rule,
  /*   11 */  immI_M1_rule,
  /*   12 */  immIExt_rule,
  /*   13 */  immI_gt_1_rule,
  /*   14 */  immI_le_4_rule,
  /*   15 */  immI_31_rule,
  /*   16 */  immI_2_rule,
  /*   17 */  immI_4_rule,
  /*   18 */  immI_8_rule,
  /*   19 */  immI_16_rule,
  /*   20 */  immI_24_rule,
  /*   21 */  immI_32_rule,
  /*   22 */  immI_48_rule,
  /*   23 */  immI_56_rule,
  /*   24 */  immI_63_rule,
  /*   25 */  immI_64_rule,
  /*   26 */  immI_255_rule,
  /*   27 */  immI_65535_rule,
  /*   28 */  immL_255_rule,
  /*   29 */  immL_65535_rule,
  /*   30 */  immL_4294967295_rule,
  /*   31 */  immL_bitmask_rule,
  /*   32 */  immI_bitmask_rule,
  /*   33 */  immL_positive_bitmaskI_rule,
  /*   34 */  immIScale_rule,
  /*   35 */  immI26_rule,
  /*   36 */  immI19_rule,
  /*   37 */  immIU12_rule,
  /*   38 */  immLU12_rule,
  /*   39 */  immIOffset_rule,
  /*   40 */  immIOffset1_rule,
  /*   41 */  immIOffset2_rule,
  /*   42 */  immIOffset4_rule,
  /*   43 */  immIOffset8_rule,
  /*   44 */  immIOffset16_rule,
  /*   45 */  immLoffset_rule,
  /*   46 */  immLoffset1_rule,
  /*   47 */  immLoffset2_rule,
  /*   48 */  immLoffset4_rule,
  /*   49 */  immLoffset8_rule,
  /*   50 */  immLoffset16_rule,
  /*   51 */  immI8_rule,
  /*   52 */  immI8_shift8_rule,
  /*   53 */  immL8_shift8_rule,
  /*   54 */  immBAddSubV_rule,
  /*   55 */  immIAddSub_rule,
  /*   56 */  immIAddSubV_rule,
  /*   57 */  immBLog_rule,
  /*   58 */  immSLog_rule,
  /*   59 */  immILog_rule,
  /*   60 */  immL_rule,
  /*   61 */  immL0_rule,
  /*   62 */  immL_1_rule,
  /*   63 */  immL_M1_rule,
  /*   64 */  immL_pc_off_rule,
  /*   65 */  immLAddSub_rule,
  /*   66 */  immLAddSubV_rule,
  /*   67 */  immLLog_rule,
  /*   68 */  immL_32bits_rule,
  /*   69 */  immP_rule,
  /*   70 */  immP0_rule,
  /*   71 */  immP_1_rule,
  /*   72 */  immByteMapBase_rule,
  /*   73 */  immP_M1_rule,
  /*   74 */  immP_M2_rule,
  /*   75 */  immD_rule,
  /*   76 */  immD0_rule,
  /*   77 */  immDPacked_rule,
  /*   78 */  immF_rule,
  /*   79 */  immF0_rule,
  /*   80 */  immFPacked_rule,
  /*   81 */  immN_rule,
  /*   82 */  immN0_rule,
  /*   83 */  immNKlass_rule,
  /*   84 */  iRegI_rule,
  /*   85 */  iRegINoSp_rule,
  /*   86 */  iRegL_rule,
  /*   87 */  iRegLNoSp_rule,
  /*   88 */  iRegP_rule,
  /*   89 */  iRegPNoSp_rule,
  /*   90 */  iRegP_R0_rule,
  /*   91 */  iRegP_R1_rule,
  /*   92 */  iRegP_R2_rule,
  /*   93 */  iRegP_R3_rule,
  /*   94 */  iRegP_R4_rule,
  /*   95 */  iRegP_R5_rule,
  /*   96 */  iRegP_R10_rule,
  /*   97 */  iRegL_R0_rule,
  /*   98 */  iRegL_R2_rule,
  /*   99 */  iRegL_R3_rule,
  /*  100 */  iRegL_R11_rule,
  /*  101 */  iRegP_FP_rule,
  /*  102 */  iRegI_R0_rule,
  /*  103 */  iRegI_R2_rule,
  /*  104 */  iRegI_R3_rule,
  /*  105 */  iRegI_R4_rule,
  /*  106 */  iRegN_rule,
  /*  107 */  iRegN_R0_rule,
  /*  108 */  iRegN_R2_rule,
  /*  109 */  iRegN_R3_rule,
  /*  110 */  iRegNNoSp_rule,
  /*  111 */  iRegIHeapbase_rule,
  /*  112 */  vRegF_rule,
  /*  113 */  vRegD_rule,
  /*  114 */  vReg_rule,
  /*  115 */  vecD_rule,
  /*  116 */  vecX_rule,
  /*  117 */  vRegD_V0_rule,
  /*  118 */  vRegD_V1_rule,
  /*  119 */  vRegD_V2_rule,
  /*  120 */  vRegD_V3_rule,
  /*  121 */  vRegD_V4_rule,
  /*  122 */  vRegD_V5_rule,
  /*  123 */  vRegD_V6_rule,
  /*  124 */  vRegD_V7_rule,
  /*  125 */  vRegD_V8_rule,
  /*  126 */  vRegD_V9_rule,
  /*  127 */  vRegD_V10_rule,
  /*  128 */  vRegD_V11_rule,
  /*  129 */  vRegD_V12_rule,
  /*  130 */  vRegD_V13_rule,
  /*  131 */  vRegD_V14_rule,
  /*  132 */  vRegD_V15_rule,
  /*  133 */  vRegD_V16_rule,
  /*  134 */  vRegD_V17_rule,
  /*  135 */  vRegD_V18_rule,
  /*  136 */  vRegD_V19_rule,
  /*  137 */  vRegD_V20_rule,
  /*  138 */  vRegD_V21_rule,
  /*  139 */  vRegD_V22_rule,
  /*  140 */  vRegD_V23_rule,
  /*  141 */  vRegD_V24_rule,
  /*  142 */  vRegD_V25_rule,
  /*  143 */  vRegD_V26_rule,
  /*  144 */  vRegD_V27_rule,
  /*  145 */  vRegD_V28_rule,
  /*  146 */  vRegD_V29_rule,
  /*  147 */  vRegD_V30_rule,
  /*  148 */  vRegD_V31_rule,
  /*  149 */  pReg_rule,
  /*  150 */  pRegGov_rule,
  /*  151 */  pRegGov_P0_rule,
  /*  152 */  pRegGov_P1_rule,
  /*  153 */  rFlagsReg_rule,
  /*  154 */  rFlagsRegU_rule,
  /*  155 */  inline_cache_RegP_rule,
  /*  156 */  thread_RegP_rule,
  /*  157 */  lr_RegP_rule,
  /*  158 */  indirect_rule,
  /*  159 */  indIndexScaledI2L_rule,
  /*  160 */  indIndexScaled_rule,
  /*  161 */  indIndexI2L_rule,
  /*  162 */  indIndex_rule,
  /*  163 */  indOffI_rule,
  /*  164 */  indOffI1_rule,
  /*  165 */  indOffI2_rule,
  /*  166 */  indOffI4_rule,
  /*  167 */  indOffI8_rule,
  /*  168 */  indOffI16_rule,
  /*  169 */  indOffL_rule,
  /*  170 */  indOffL1_rule,
  /*  171 */  indOffL2_rule,
  /*  172 */  indOffL4_rule,
  /*  173 */  indOffL8_rule,
  /*  174 */  indOffL16_rule,
  /*  175 */  indirectN_rule,
  /*  176 */  indIndexScaledI2LN_rule,
  /*  177 */  indIndexScaledN_rule,
  /*  178 */  indIndexI2LN_rule,
  /*  179 */  indIndexN_rule,
  /*  180 */  indOffIN_rule,
  /*  181 */  indOffLN_rule,
  /*  182 */  thread_anchor_pc_rule,
  /*  183 */  stackSlotP_rule,
  /*  184 */  stackSlotI_rule,
  /*  185 */  stackSlotF_rule,
  /*  186 */  stackSlotD_rule,
  /*  187 */  stackSlotL_rule,
  /*  188 */  cmpOp_rule,
  /*  189 */  cmpOpU_rule,
  /*  190 */  cmpOpEqNe_rule,
  /*  191 */  cmpOpLtGe_rule,
  /*  192 */  cmpOpUEqNeLtGe_rule,
  /*  193 */  iRegL2I_rule,
  /*  194 */  vmemA_immIOffset4_rule,
  /*  195 */  vmemA_immLOffset4_rule,
  /*  196 */  vmemA_indOffI4_rule,
  /*  197 */  vmemA_indOffL4_rule,
  // last operand
  /*  198 */  vmem2_rule,
  /*  199 */  vmem4_rule,
  /*  200 */  vmem8_rule,
  /*  201 */  vmem16_rule,
  /*  202 */  memory1_rule,
  /*  203 */  memory2_rule,
  /*  204 */  memory4_rule,
  /*  205 */  memory8_rule,
  /*  206 */  memory_rule,
  /*  207 */  iRegIorL2I_rule,
  /*  208 */  vmemA_rule,
  // last operand class
  /*  209 */  _ConvI2L_iRegI__rule,
  /*  210 */  _LShiftL__ConvI2L_iRegI__immIScale_rule,
  /*  211 */  _LShiftL_iRegL_immIScale_rule,
  /*  212 */  _DecodeN_iRegN__rule,
  /*  213 */  _LoadB_memory1__rule,
  /*  214 */  _LoadUB_memory1__rule,
  /*  215 */  _LoadS_memory2__rule,
  /*  216 */  _LoadUS_memory2__rule,
  /*  217 */  _LoadI_memory4__rule,
  /*  218 */  _ConvI2L__LoadI_memory4___rule,
  /*  219 */  _LoadB_indirect__rule,
  /*  220 */  _LoadUB_indirect__rule,
  /*  221 */  _LoadUS_indirect__rule,
  /*  222 */  _LoadS_indirect__rule,
  /*  223 */  _LoadI_indirect__rule,
  /*  224 */  _ConvI2L__LoadI_indirect___rule,
  /*  225 */  _LoadL_memory8__rule,
  /*  226 */  _CastP2X_iRegP__rule,
  /*  227 */  _CastP2X__DecodeN_iRegN___rule,
  /*  228 */  _Binary_iRegP_iRegP_rule,
  /*  229 */  _Binary_iRegLNoSp_iRegLNoSp_rule,
  /*  230 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  231 */  _Binary_iRegNNoSp_iRegNNoSp_rule,
  /*  232 */  _Binary_iRegI_iRegI_rule,
  /*  233 */  _Binary_iRegL_iRegL_rule,
  /*  234 */  _Binary_iRegN_iRegN_rule,
  /*  235 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  236 */  _Binary_iRegIorL2I_iRegIorL2I_rule,
  /*  237 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  238 */  _Binary_immI0_iRegIorL2I_rule,
  /*  239 */  _Binary_iRegIorL2I_immI0_rule,
  /*  240 */  _Binary_immI_1_immI0_rule,
  /*  241 */  _Binary_iRegL_immL0_rule,
  /*  242 */  _Binary_immL0_iRegL_rule,
  /*  243 */  _Binary_iRegP_immP0_rule,
  /*  244 */  _Binary_immP0_iRegP_rule,
  /*  245 */  _Binary_iRegN_immN0_rule,
  /*  246 */  _Binary_immN0_iRegN_rule,
  /*  247 */  _Binary_vRegF_vRegF_rule,
  /*  248 */  _Binary_vRegD_vRegD_rule,
  /*  249 */  _ConvL2I_iRegL__rule,
  /*  250 */  _ConvI2L_iRegIorL2I__rule,
  /*  251 */  _LShiftL__ConvI2L_iRegIorL2I__immIScale_rule,
  /*  252 */  _MulI_iRegIorL2I_iRegIorL2I_rule,
  /*  253 */  _SubI_immI0_iRegIorL2I_rule,
  /*  254 */  _MulL_iRegL_iRegL_rule,
  /*  255 */  _SubL_immL0_iRegL_rule,
  /*  256 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  257 */  _SubL_immL0__ConvI2L_iRegIorL2I__rule,
  /*  258 */  _XorI_iRegIorL2I_immI_M1_rule,
  /*  259 */  _XorL_iRegL_immL_M1_rule,
  /*  260 */  _XorI_iRegIorL2I_iRegIorL2I_rule,
  /*  261 */  _XorL_iRegL_iRegL_rule,
  /*  262 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  263 */  _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  264 */  _URShiftL_iRegL_immI_rule,
  /*  265 */  _XorL__URShiftL_iRegL_immI_immL_M1_rule,
  /*  266 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  267 */  _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  268 */  _RShiftL_iRegL_immI_rule,
  /*  269 */  _XorL__RShiftL_iRegL_immI_immL_M1_rule,
  /*  270 */  _RotateRight_iRegIorL2I_immI_rule,
  /*  271 */  _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule,
  /*  272 */  _RotateRight_iRegL_immI_rule,
  /*  273 */  _XorL__RotateRight_iRegL_immI_immL_M1_rule,
  /*  274 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  275 */  _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  276 */  _LShiftL_iRegL_immI_rule,
  /*  277 */  _XorL__LShiftL_iRegL_immI_immL_M1_rule,
  /*  278 */  _XorI__URShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  279 */  _XorI_iRegIorL2I__URShiftI_iRegIorL2I_immI_rule,
  /*  280 */  _XorL__URShiftL_iRegL_immI_iRegL_rule,
  /*  281 */  _XorL_iRegL__URShiftL_iRegL_immI_rule,
  /*  282 */  _XorI__RShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  283 */  _XorI_iRegIorL2I__RShiftI_iRegIorL2I_immI_rule,
  /*  284 */  _XorL__RShiftL_iRegL_immI_iRegL_rule,
  /*  285 */  _XorL_iRegL__RShiftL_iRegL_immI_rule,
  /*  286 */  _XorI__RotateRight_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  287 */  _XorI_iRegIorL2I__RotateRight_iRegIorL2I_immI_rule,
  /*  288 */  _XorL__RotateRight_iRegL_immI_iRegL_rule,
  /*  289 */  _XorL_iRegL__RotateRight_iRegL_immI_rule,
  /*  290 */  _XorI__LShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  291 */  _XorI_iRegIorL2I__LShiftI_iRegIorL2I_immI_rule,
  /*  292 */  _XorL__LShiftL_iRegL_immI_iRegL_rule,
  /*  293 */  _XorL_iRegL__LShiftL_iRegL_immI_rule,
  /*  294 */  _AndI__URShiftI_iRegIorL2I_immI_immI_bitmask_rule,
  /*  295 */  _AndI_iRegIorL2I_immI_bitmask_rule,
  /*  296 */  _AndL_iRegL_immL_bitmask_rule,
  /*  297 */  _LShiftI__AndI_iRegIorL2I_immI_bitmask_immI_rule,
  /*  298 */  _AndL_iRegL_immL_positive_bitmaskI_rule,
  /*  299 */  _LShiftL__AndL_iRegL_immL_positive_bitmaskI_immI_rule,
  /*  300 */  _ConvI2L__AndI_iRegIorL2I_immI_bitmask__rule,
  /*  301 */  _ConvL2I__AndL_iRegL_immL_positive_bitmaskI__rule,
  /*  302 */  _AndI_iRegI_immI_bitmask_rule,
  /*  303 */  _LShiftI_iRegIorL2I_immI_16_rule,
  /*  304 */  _RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_rule,
  /*  305 */  _LShiftI_iRegIorL2I_immI_24_rule,
  /*  306 */  _RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /*  307 */  _URShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /*  308 */  _LShiftL_iRegL_immI_48_rule,
  /*  309 */  _RShiftL__LShiftL_iRegL_immI_48_immI_48_rule,
  /*  310 */  _LShiftL_iRegL_immI_32_rule,
  /*  311 */  _RShiftL__LShiftL_iRegL_immI_32_immI_32_rule,
  /*  312 */  _LShiftL_iRegL_immI_56_rule,
  /*  313 */  _RShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /*  314 */  _URShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /*  315 */  _AndI_iRegIorL2I_immI_255_rule,
  /*  316 */  _AndI_iRegIorL2I_immI_65535_rule,
  /*  317 */  _AndL_iRegL_immL_255_rule,
  /*  318 */  _AndL_iRegL_immL_65535_rule,
  /*  319 */  _AndL_iRegL_immL_4294967295_rule,
  /*  320 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt_rule,
  /*  321 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt_rule,
  /*  322 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt_rule,
  /*  323 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt_rule,
  /*  324 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt_rule,
  /*  325 */  _LShiftL__ConvI2L_iRegIorL2I__immIExt_rule,
  /*  326 */  _LShiftL__AndL_iRegL_immL_255_immIExt_rule,
  /*  327 */  _LShiftL__AndL_iRegL_immL_65535_immIExt_rule,
  /*  328 */  _LShiftL__AndL_iRegL_immL_4294967295_immIExt_rule,
  /*  329 */  _LShiftI__AndI_iRegIorL2I_immI_255_immIExt_rule,
  /*  330 */  _LShiftI__AndI_iRegIorL2I_immI_65535_immIExt_rule,
  /*  331 */  _NegF_vRegF__rule,
  /*  332 */  _Binary__NegF_vRegF__vRegF_rule,
  /*  333 */  _Binary_vRegF__NegF_vRegF__rule,
  /*  334 */  _NegD_vRegD__rule,
  /*  335 */  _Binary__NegD_vRegD__vRegD_rule,
  /*  336 */  _Binary_vRegD__NegD_vRegD__rule,
  /*  337 */  _SubF_vRegF_vRegF_rule,
  /*  338 */  _SubD_vRegD_vRegD_rule,
  /*  339 */  _OverflowMulI_iRegIorL2I_iRegIorL2I_rule,
  /*  340 */  _OverflowMulL_iRegL_iRegL_rule,
  /*  341 */  _CmpI_iRegIorL2I_immI0_rule,
  /*  342 */  _CmpL_iRegL_immL0_rule,
  /*  343 */  _CmpP_iRegP_immP0_rule,
  /*  344 */  _CmpN_iRegN_immN0_rule,
  /*  345 */  _CmpP__DecodeN_iRegN__immP0_rule,
  /*  346 */  _CmpU_iRegIorL2I_immI0_rule,
  /*  347 */  _CmpUL_iRegL_immL0_rule,
  /*  348 */  _AndL_iRegL_immL_rule,
  /*  349 */  _CmpL__AndL_iRegL_immL_immL0_rule,
  /*  350 */  _AndI_iRegIorL2I_immI_rule,
  /*  351 */  _CmpI__AndI_iRegIorL2I_immI_immI0_rule,
  /*  352 */  _AndL_iRegL_iRegL_rule,
  /*  353 */  _AndI_iRegIorL2I_iRegIorL2I_rule,
  /*  354 */  _PartialSubtypeCheck_iRegP_R4_iRegP_R0_rule,
  /*  355 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /*  356 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /*  357 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /*  358 */  _Binary_iRegP_R3_iRegI_R2_rule,
  /*  359 */  _Binary_iRegP_R3_immI_le_4_rule,
  /*  360 */  _Binary_iRegP_R3_immI_1_rule,
  /*  361 */  _Binary_iRegP_R1_iRegP_R3_rule,
  /*  362 */  _Binary_iRegP_R1_iRegI_R3_rule,
  /*  363 */  _Binary_vecD_iRegIorL2I_rule,
  /*  364 */  _Binary_vecX_iRegIorL2I_rule,
  /*  365 */  _Binary_vecX_iRegL_rule,
  /*  366 */  _Binary_vecD_vRegF_rule,
  /*  367 */  _Binary_vecX_vRegF_rule,
  /*  368 */  _Binary_vecX_vRegD_rule,
  /*  369 */  _Binary_vecD_vecD_rule,
  /*  370 */  _Binary_vecX_vecX_rule,
  /*  371 */  _ReplicateB_immI_M1__rule,
  /*  372 */  _ReplicateS_immI_M1__rule,
  /*  373 */  _ReplicateI_immI_M1__rule,
  /*  374 */  _ReplicateL_immL_M1__rule,
  /*  375 */  _XorV_vecD__ReplicateB_immI_M1__rule,
  /*  376 */  _XorV__ReplicateB_immI_M1__vecD_rule,
  /*  377 */  _XorV_vecD__ReplicateS_immI_M1__rule,
  /*  378 */  _XorV__ReplicateS_immI_M1__vecD_rule,
  /*  379 */  _XorV_vecD__ReplicateI_immI_M1__rule,
  /*  380 */  _XorV__ReplicateI_immI_M1__vecD_rule,
  /*  381 */  _XorV_vecX__ReplicateB_immI_M1__rule,
  /*  382 */  _XorV__ReplicateB_immI_M1__vecX_rule,
  /*  383 */  _XorV_vecX__ReplicateS_immI_M1__rule,
  /*  384 */  _XorV__ReplicateS_immI_M1__vecX_rule,
  /*  385 */  _XorV_vecX__ReplicateI_immI_M1__rule,
  /*  386 */  _XorV__ReplicateI_immI_M1__vecX_rule,
  /*  387 */  _XorV_vecX__ReplicateL_immL_M1__rule,
  /*  388 */  _XorV__ReplicateL_immL_M1__vecX_rule,
  /*  389 */  _SubVF_vecD_vecD_rule,
  /*  390 */  _SubVF_vecX_vecX_rule,
  /*  391 */  _SubVD_vecX_vecX_rule,
  /*  392 */  _MulVS_vecD_vecD_rule,
  /*  393 */  _MulVS_vecX_vecX_rule,
  /*  394 */  _MulVI_vecD_vecD_rule,
  /*  395 */  _MulVI_vecX_vecX_rule,
  /*  396 */  _NegVF_vecD__rule,
  /*  397 */  _Binary__NegVF_vecD__vecD_rule,
  /*  398 */  _Binary_vecD__NegVF_vecD__rule,
  /*  399 */  _NegVF_vecX__rule,
  /*  400 */  _Binary__NegVF_vecX__vecX_rule,
  /*  401 */  _Binary_vecX__NegVF_vecX__rule,
  /*  402 */  _NegVD_vecX__rule,
  /*  403 */  _Binary__NegVD_vecX__vecX_rule,
  /*  404 */  _Binary_vecX__NegVD_vecX__rule,
  /*  405 */  _LShiftCntV_immI__rule,
  /*  406 */  _RShiftCntV_immI__rule,
  /*  407 */  _RShiftVB_vecD__RShiftCntV_immI__rule,
  /*  408 */  _RShiftVB_vecX__RShiftCntV_immI__rule,
  /*  409 */  _RShiftVS_vecD__RShiftCntV_immI__rule,
  /*  410 */  _RShiftVS_vecX__RShiftCntV_immI__rule,
  /*  411 */  _RShiftVI_vecD__RShiftCntV_immI__rule,
  /*  412 */  _RShiftVI_vecX__RShiftCntV_immI__rule,
  /*  413 */  _RShiftVL_vecX__RShiftCntV_immI__rule,
  /*  414 */  _URShiftVB_vecD__RShiftCntV_immI__rule,
  /*  415 */  _URShiftVB_vecX__RShiftCntV_immI__rule,
  /*  416 */  _URShiftVS_vecD__RShiftCntV_immI__rule,
  /*  417 */  _URShiftVS_vecX__RShiftCntV_immI__rule,
  /*  418 */  _URShiftVI_vecD__RShiftCntV_immI__rule,
  /*  419 */  _URShiftVI_vecX__RShiftCntV_immI__rule,
  /*  420 */  _URShiftVL_vecX__RShiftCntV_immI__rule,
  /*  421 */  _Binary_vReg_pRegGov_rule,
  /*  422 */  _MaskAll_immI_M1__rule,
  /*  423 */  _XorVMask_pRegGov__MaskAll_immI_M1__rule,
  /*  424 */  _MaskAll_immL_M1__rule,
  /*  425 */  _XorVMask_pRegGov__MaskAll_immL_M1__rule,
  /*  426 */  _Binary_vReg_vReg_rule,
  /*  427 */  _ReplicateB_immBAddSubV__rule,
  /*  428 */  _ReplicateS_immIAddSubV__rule,
  /*  429 */  _ReplicateI_immIAddSubV__rule,
  /*  430 */  _ReplicateL_immLAddSubV__rule,
  /*  431 */  _ReplicateB_immBLog__rule,
  /*  432 */  _ReplicateS_immSLog__rule,
  /*  433 */  _ReplicateI_immILog__rule,
  /*  434 */  _ReplicateL_immLLog__rule,
  /*  435 */  _XorV_vReg__ReplicateB_immI_M1__rule,
  /*  436 */  _XorV__ReplicateB_immI_M1__vReg_rule,
  /*  437 */  _XorV_vReg__ReplicateS_immI_M1__rule,
  /*  438 */  _XorV__ReplicateS_immI_M1__vReg_rule,
  /*  439 */  _XorV_vReg__ReplicateI_immI_M1__rule,
  /*  440 */  _XorV__ReplicateI_immI_M1__vReg_rule,
  /*  441 */  _XorV_vReg__ReplicateL_immL_M1__rule,
  /*  442 */  _XorV__ReplicateL_immL_M1__vReg_rule,
  /*  443 */  _NegVF_vReg__rule,
  /*  444 */  _Binary__NegVF_vReg__vReg_rule,
  /*  445 */  _Binary_vReg__NegVF_vReg__rule,
  /*  446 */  _NegVD_vReg__rule,
  /*  447 */  _Binary__NegVD_vReg__vReg_rule,
  /*  448 */  _Binary_vReg__NegVD_vReg__rule,
  /*  449 */  _MulVB_vReg_vReg_rule,
  /*  450 */  _MulVS_vReg_vReg_rule,
  /*  451 */  _MulVI_vReg_vReg_rule,
  /*  452 */  _MulVL_vReg_vReg_rule,
  /*  453 */  _Binary_immI_pRegGov_rule,
  /*  454 */  _LoadVector_indirect__rule,
  /*  455 */  _VectorStoreMask_pRegGov_immI_gt_1_rule,
  /*  456 */  _Binary_iRegIorL2I_vReg_rule,
  /*  457 */  _Binary_iRegL_vReg_rule,
  /*  458 */  _Binary_vRegF_vReg_rule,
  /*  459 */  _Binary_vRegD_vReg_rule,
  /*  460 */  _Binary_vReg__RShiftCntV_immI__rule,
  /*  461 */  _Binary_vReg__LShiftCntV_immI__rule,
  /*  462 */  _Binary_vReg_iRegIorL2I_rule,
  /*  463 */  _Binary_vReg_vRegF_rule,
  /*  464 */  _Binary_vReg_iRegL_rule,
  /*  465 */  _Binary_vReg_vRegD_rule,
  /*  466 */  _Binary_vReg__Binary_vReg_pRegGov_rule,
  // last internally defined operand
  /*  467 */  iRegINoSp_rule,
  /*  468 */  iRegLNoSp_rule,
  /*  469 */  iRegPNoSp_rule,
  /*  470 */  iRegPNoSp_rule,
  /*  471 */  iRegPNoSp_rule,
  /*  472 */  iRegPNoSp_rule,
  /*  473 */  iRegNNoSp_rule,
  /*  474 */  iRegNNoSp_rule,
  /*  475 */  iRegNNoSp_rule,
  /*  476 */  vRegF_rule,
  /*  477 */  vRegF_rule,
  /*  478 */  vRegD_rule,
  /*  479 */  vRegD_rule,
  /*  480 */  iRegINoSp_rule,
  /*  481 */  iRegINoSp_rule,
  /*  482 */  iRegINoSp_rule,
  /*  483 */  iRegINoSp_rule,
  /*  484 */  iRegPNoSp_rule,
  /*  485 */  iRegLNoSp_rule,
  /*  486 */  iRegPNoSp_rule,
  /*  487 */  iRegPNoSp_rule,
  /*  488 */  iRegI_rule,
  /*  489 */  iRegL_rule,
  /*  490 */  vRegF_rule,
  /*  491 */  vRegD_rule,
  /*  492 */  vecD_rule,
  /*  493 */  vecX_rule,
  /*  494 */  vReg_rule,
  /*  495 */  pRegGov_rule,
  /*  496 */  rFlagsReg_rule,
  /*  497 */  rFlagsReg_rule,
  /*  498 */  rFlagsReg_rule,
  /*  499 */  vRegF_rule,
  /*  500 */  vRegD_rule,
  /*  501 */  vRegF_rule,
  /*  502 */  vRegD_rule,
  /*  503 */  iRegINoSp_rule,
  /*  504 */  vRegF_rule,
  /*  505 */  iRegLNoSp_rule,
  /*  506 */  vRegD_rule,
  /*  507 */  iRegINoSp_rule,
  /*  508 */  vRegF_rule,
  /*  509 */  iRegLNoSp_rule,
  /*  510 */  vRegD_rule,
  /*  511 */  rFlagsReg_rule,
  /*  512 */  rFlagsReg_rule,
  /*  513 */  rFlagsReg_rule,
  /*  514 */  rFlagsReg_rule,
  /*  515 */  rFlagsReg_rule,
  /*  516 */  rFlagsReg_rule,
  /*  517 */  rFlagsReg_rule,
  /*  518 */  rFlagsReg_rule,
  /*  519 */  rFlagsReg_rule,
  /*  520 */  rFlagsReg_rule,
  /*  521 */  rFlagsReg_rule,
  /*  522 */  rFlagsReg_rule,
  /*  523 */  rFlagsReg_rule,
  /*  524 */  rFlagsReg_rule,
  /*  525 */  rFlagsReg_rule,
  /*  526 */  rFlagsReg_rule,
  /*  527 */  rFlagsRegU_rule,
  /*  528 */  rFlagsRegU_rule,
  /*  529 */  rFlagsRegU_rule,
  /*  530 */  rFlagsRegU_rule,
  /*  531 */  rFlagsReg_rule,
  /*  532 */  rFlagsReg_rule,
  /*  533 */  rFlagsReg_rule,
  /*  534 */  rFlagsReg_rule,
  /*  535 */  rFlagsRegU_rule,
  /*  536 */  rFlagsRegU_rule,
  /*  537 */  rFlagsRegU_rule,
  /*  538 */  rFlagsRegU_rule,
  /*  539 */  rFlagsRegU_rule,
  /*  540 */  rFlagsRegU_rule,
  /*  541 */  rFlagsRegU_rule,
  /*  542 */  rFlagsRegU_rule,
  /*  543 */  rFlagsReg_rule,
  /*  544 */  rFlagsReg_rule,
  /*  545 */  rFlagsReg_rule,
  /*  546 */  rFlagsReg_rule,
  /*  547 */  rFlagsReg_rule,
  /*  548 */  rFlagsReg_rule,
  /*  549 */  rFlagsReg_rule,
  /*  550 */  rFlagsReg_rule,
  /*  551 */  rFlagsReg_rule,
  /*  552 */  rFlagsReg_rule,
  /*  553 */  rFlagsReg_rule,
  /*  554 */  thread_RegP_rule,
  /*  555 */  vecD_rule,
  /*  556 */  vecX_rule,
  /*  557 */  vecX_rule,
  /*  558 */  vecD_rule,
  /*  559 */  vecX_rule,
  /*  560 */  vecD_rule,
  /*  561 */  vecD_rule,
  /*  562 */  vecD_rule,
  /*  563 */  vecX_rule,
  /*  564 */  vecD_rule,
  /*  565 */  vecD_rule,
  /*  566 */  vecD_rule,
  /*  567 */  vecX_rule,
  /*  568 */  vecD_rule,
  /*  569 */  vecX_rule,
  /*  570 */  vecD_rule,
  /*  571 */  vecD_rule,
  /*  572 */  vecX_rule,
  /*  573 */  vecD_rule,
  /*  574 */  vecD_rule,
  /*  575 */  vecX_rule,
  /*  576 */  vecX_rule,
  /*  577 */  vecX_rule,
  /*  578 */  vecX_rule,
  /*  579 */  vecX_rule,
  /*  580 */  vecX_rule,
  /*  581 */  vecD_rule,
  /*  582 */  vecX_rule,
  /*  583 */  vecX_rule,
  /*  584 */  vecD_rule,
  /*  585 */  vecD_rule,
  /*  586 */  vecX_rule,
  /*  587 */  vecD_rule,
  /*  588 */  vecD_rule,
  /*  589 */  vecX_rule,
  /*  590 */  vecD_rule,
  /*  591 */  vecX_rule,
  /*  592 */  vecD_rule,
  /*  593 */  vecX_rule,
  /*  594 */  vecX_rule,
  /*  595 */  vecD_rule,
  /*  596 */  vecX_rule,
  /*  597 */  vecD_rule,
  /*  598 */  vecX_rule,
  /*  599 */  vecD_rule,
  /*  600 */  vecX_rule,
  /*  601 */  vecD_rule,
  /*  602 */  vecX_rule,
  /*  603 */  vecX_rule,
  /*  604 */  vecD_rule,
  /*  605 */  vecX_rule,
  /*  606 */  vecD_rule,
  /*  607 */  vecX_rule,
  /*  608 */  vecD_rule,
  /*  609 */  vecX_rule,
  /*  610 */  vecX_rule,
  /*  611 */  vecD_rule,
  /*  612 */  vecX_rule,
  /*  613 */  vecX_rule,
  /*  614 */  vecD_rule,
  /*  615 */  vecX_rule,
  /*  616 */  vecX_rule,
  /*  617 */  vecD_rule,
  /*  618 */  vecX_rule,
  /*  619 */  vecX_rule,
  /*  620 */  vecD_rule,
  /*  621 */  vecD_rule,
  /*  622 */  vecX_rule,
  /*  623 */  vecX_rule,
  /*  624 */  vecX_rule,
  /*  625 */  vecD_rule,
  /*  626 */  iRegINoSp_rule,
  /*  627 */  iRegINoSp_rule,
  /*  628 */  iRegINoSp_rule,
  /*  629 */  iRegINoSp_rule,
  /*  630 */  iRegLNoSp_rule,
  /*  631 */  iRegLNoSp_rule,
  /*  632 */  vReg_rule,
  /*  633 */  pRegGov_rule,
  /*  634 */  vReg_rule,
  /*  635 */  vReg_rule,
  /*  636 */  vReg_rule,
  /*  637 */  vReg_rule,
  /*  638 */  vReg_rule,
  /*  639 */  vReg_rule,
  /*  640 */  vReg_rule,
  /*  641 */  vReg_rule,
  /*  642 */  vReg_rule,
  /*  643 */  vReg_rule,
  /*  644 */  vReg_rule,
  /*  645 */  vReg_rule,
  /*  646 */  vReg_rule,
  /*  647 */  vReg_rule,
  /*  648 */  vReg_rule,
  /*  649 */  vReg_rule,
  /*  650 */  vReg_rule,
  /*  651 */  vReg_rule,
  /*  652 */  vReg_rule,
  /*  653 */  pRegGov_rule,
  /*  654 */  pRegGov_rule,
  /*  655 */  pRegGov_rule,
  /*  656 */  vReg_rule,
  /*  657 */  vReg_rule,
  /*  658 */  vReg_rule,
  /*  659 */  vReg_rule,
  /*  660 */  vReg_rule,
  /*  661 */  vReg_rule,
  /*  662 */  vReg_rule,
  /*  663 */  vReg_rule,
  /*  664 */  vReg_rule,
  /*  665 */  vReg_rule,
  /*  666 */  vReg_rule,
  /*  667 */  vReg_rule,
  /*  668 */  iRegINoSp_rule,
  /*  669 */  iRegINoSp_rule,
  /*  670 */  iRegLNoSp_rule,
  /*  671 */  iRegINoSp_rule,
  /*  672 */  iRegLNoSp_rule,
  /*  673 */  iRegINoSp_rule,
  /*  674 */  iRegLNoSp_rule,
  /*  675 */  iRegINoSp_rule,
  /*  676 */  iRegLNoSp_rule,
  /*  677 */  iRegINoSp_rule,
  /*  678 */  iRegLNoSp_rule,
  /*  679 */  iRegLNoSp_rule,
  /*  680 */  iRegLNoSp_rule,
  /*  681 */  iRegINoSp_rule,
  /*  682 */  iRegPNoSp_rule,
  /*  683 */  iRegNNoSp_rule,
  /*  684 */  iRegPNoSp_rule,
  /*  685 */  iRegNNoSp_rule,
  /*  686 */  vRegF_rule,
  /*  687 */  vRegD_rule,
  /*  688 */  Universe_rule,
  /*  689 */  Universe_rule,
  /*  690 */  Universe_rule,
  /*  691 */  Universe_rule,
  /*  692 */  Universe_rule,
  /*  693 */  Universe_rule,
  /*  694 */  Universe_rule,
  /*  695 */  Universe_rule,
  /*  696 */  Universe_rule,
  /*  697 */  Universe_rule,
  /*  698 */  Universe_rule,
  /*  699 */  Universe_rule,
  /*  700 */  Universe_rule,
  /*  701 */  Universe_rule,
  /*  702 */  Universe_rule,
  /*  703 */  Universe_rule,
  /*  704 */  Universe_rule,
  /*  705 */  Universe_rule,
  /*  706 */  iRegINoSp_rule,
  /*  707 */  iRegLNoSp_rule,
  /*  708 */  iRegINoSp_rule,
  /*  709 */  iRegLNoSp_rule,
  /*  710 */  iRegINoSp_rule,
  /*  711 */  iRegINoSp_rule,
  /*  712 */  iRegLNoSp_rule,
  /*  713 */  iRegLNoSp_rule,
  /*  714 */  iRegINoSp_rule,
  /*  715 */  iRegLNoSp_rule,
  /*  716 */  iRegLNoSp_rule,
  /*  717 */  iRegPNoSp_rule,
  /*  718 */  iRegNNoSp_rule,
  /*  719 */  vRegF_rule,
  /*  720 */  vRegD_rule,
  /*  721 */  Universe_rule,
  /*  722 */  Universe_rule,
  /*  723 */  Universe_rule,
  /*  724 */  Universe_rule,
  /*  725 */  Universe_rule,
  /*  726 */  Universe_rule,
  /*  727 */  Universe_rule,
  /*  728 */  Universe_rule,
  /*  729 */  Universe_rule,
  /*  730 */  Universe_rule,
  /*  731 */  Universe_rule,
  /*  732 */  iRegINoSp_rule,
  /*  733 */  iRegLNoSp_rule,
  /*  734 */  iRegINoSp_rule,
  /*  735 */  iRegINoSp_rule,
  /*  736 */  iRegINoSp_rule,
  /*  737 */  iRegINoSp_rule,
  /*  738 */  iRegINoSp_rule,
  /*  739 */  iRegINoSp_rule,
  /*  740 */  Universe_rule,
  /*  741 */  Universe_rule,
  /*  742 */  Universe_rule,
  /*  743 */  Universe_rule,
  /*  744 */  Universe_rule,
  /*  745 */  Universe_rule,
  /*  746 */  Universe_rule,
  /*  747 */  Universe_rule,
  /*  748 */  Universe_rule,
  /*  749 */  Universe_rule,
  /*  750 */  Universe_rule,
  /*  751 */  Universe_rule,
  /*  752 */  iRegINoSp_rule,
  /*  753 */  iRegINoSp_rule,
  /*  754 */  iRegNNoSp_rule,
  /*  755 */  iRegNNoSp_rule,
  /*  756 */  iRegPNoSp_rule,
  /*  757 */  iRegPNoSp_rule,
  /*  758 */  iRegNNoSp_rule,
  /*  759 */  iRegPNoSp_rule,
  /*  760 */  iRegPNoSp_rule,
  /*  761 */  iRegINoSp_rule,
  /*  762 */  iRegINoSp_rule,
  /*  763 */  iRegINoSp_rule,
  /*  764 */  iRegINoSp_rule,
  /*  765 */  iRegINoSp_rule,
  /*  766 */  iRegINoSp_rule,
  /*  767 */  iRegINoSp_rule,
  /*  768 */  iRegINoSp_rule,
  /*  769 */  iRegINoSp_rule,
  /*  770 */  iRegINoSp_rule,
  /*  771 */  iRegINoSp_rule,
  /*  772 */  iRegINoSp_rule,
  /*  773 */  iRegINoSp_rule,
  /*  774 */  iRegINoSp_rule,
  /*  775 */  iRegINoSp_rule,
  /*  776 */  iRegLNoSp_rule,
  /*  777 */  iRegNNoSp_rule,
  /*  778 */  iRegPNoSp_rule,
  /*  779 */  iRegINoSp_rule,
  /*  780 */  iRegINoSp_rule,
  /*  781 */  iRegINoSp_rule,
  /*  782 */  iRegLNoSp_rule,
  /*  783 */  iRegNNoSp_rule,
  /*  784 */  iRegPNoSp_rule,
  /*  785 */  iRegINoSp_rule,
  /*  786 */  iRegINoSp_rule,
  /*  787 */  iRegINoSp_rule,
  /*  788 */  iRegINoSp_rule,
  /*  789 */  iRegINoSp_rule,
  /*  790 */  iRegINoSp_rule,
  /*  791 */  iRegINoSp_rule,
  /*  792 */  iRegINoSp_rule,
  /*  793 */  iRegINoSp_rule,
  /*  794 */  iRegINoSp_rule,
  /*  795 */  iRegINoSp_rule,
  /*  796 */  iRegINoSp_rule,
  /*  797 */  iRegINoSp_rule,
  /*  798 */  iRegLNoSp_rule,
  /*  799 */  iRegINoSp_rule,
  /*  800 */  iRegPNoSp_rule,
  /*  801 */  iRegINoSp_rule,
  /*  802 */  iRegLNoSp_rule,
  /*  803 */  iRegINoSp_rule,
  /*  804 */  iRegPNoSp_rule,
  /*  805 */  iRegLNoSp_rule,
  /*  806 */  Universe_rule,
  /*  807 */  iRegLNoSp_rule,
  /*  808 */  Universe_rule,
  /*  809 */  iRegINoSp_rule,
  /*  810 */  Universe_rule,
  /*  811 */  iRegINoSp_rule,
  /*  812 */  Universe_rule,
  /*  813 */  iRegLNoSp_rule,
  /*  814 */  Universe_rule,
  /*  815 */  iRegLNoSp_rule,
  /*  816 */  Universe_rule,
  /*  817 */  iRegINoSp_rule,
  /*  818 */  Universe_rule,
  /*  819 */  iRegINoSp_rule,
  /*  820 */  Universe_rule,
  /*  821 */  iRegINoSp_rule,
  /*  822 */  iRegINoSp_rule,
  /*  823 */  iRegINoSp_rule,
  /*  824 */  iRegINoSp_rule,
  /*  825 */  iRegINoSp_rule,
  /*  826 */  iRegINoSp_rule,
  /*  827 */  iRegINoSp_rule,
  /*  828 */  iRegINoSp_rule,
  /*  829 */  iRegINoSp_rule,
  /*  830 */  iRegINoSp_rule,
  /*  831 */  iRegLNoSp_rule,
  /*  832 */  iRegLNoSp_rule,
  /*  833 */  iRegLNoSp_rule,
  /*  834 */  iRegLNoSp_rule,
  /*  835 */  iRegLNoSp_rule,
  /*  836 */  iRegLNoSp_rule,
  /*  837 */  iRegPNoSp_rule,
  /*  838 */  iRegPNoSp_rule,
  /*  839 */  iRegPNoSp_rule,
  /*  840 */  iRegPNoSp_rule,
  /*  841 */  iRegPNoSp_rule,
  /*  842 */  iRegPNoSp_rule,
  /*  843 */  iRegNNoSp_rule,
  /*  844 */  iRegNNoSp_rule,
  /*  845 */  iRegNNoSp_rule,
  /*  846 */  iRegNNoSp_rule,
  /*  847 */  iRegNNoSp_rule,
  /*  848 */  iRegNNoSp_rule,
  /*  849 */  vRegF_rule,
  /*  850 */  vRegF_rule,
  /*  851 */  vRegD_rule,
  /*  852 */  vRegD_rule,
  /*  853 */  iRegINoSp_rule,
  /*  854 */  iRegINoSp_rule,
  /*  855 */  iRegINoSp_rule,
  /*  856 */  iRegPNoSp_rule,
  /*  857 */  iRegPNoSp_rule,
  /*  858 */  iRegPNoSp_rule,
  /*  859 */  iRegPNoSp_rule,
  /*  860 */  iRegLNoSp_rule,
  /*  861 */  iRegPNoSp_rule,
  /*  862 */  iRegLNoSp_rule,
  /*  863 */  iRegLNoSp_rule,
  /*  864 */  iRegINoSp_rule,
  /*  865 */  iRegINoSp_rule,
  /*  866 */  iRegLNoSp_rule,
  /*  867 */  iRegLNoSp_rule,
  /*  868 */  iRegINoSp_rule,
  /*  869 */  iRegLNoSp_rule,
  /*  870 */  iRegINoSp_rule,
  /*  871 */  iRegLNoSp_rule,
  /*  872 */  iRegLNoSp_rule,
  /*  873 */  iRegLNoSp_rule,
  /*  874 */  iRegLNoSp_rule,
  /*  875 */  iRegINoSp_rule,
  /*  876 */  iRegINoSp_rule,
  /*  877 */  iRegINoSp_rule,
  /*  878 */  iRegINoSp_rule,
  /*  879 */  iRegINoSp_rule,
  /*  880 */  iRegLNoSp_rule,
  /*  881 */  iRegLNoSp_rule,
  /*  882 */  iRegLNoSp_rule,
  /*  883 */  iRegLNoSp_rule,
  /*  884 */  iRegLNoSp_rule,
  /*  885 */  iRegLNoSp_rule,
  /*  886 */  iRegLNoSp_rule,
  /*  887 */  iRegLNoSp_rule,
  /*  888 */  iRegLNoSp_rule,
  /*  889 */  iRegLNoSp_rule,
  /*  890 */  iRegLNoSp_rule,
  /*  891 */  iRegLNoSp_rule,
  /*  892 */  iRegLNoSp_rule,
  /*  893 */  iRegINoSp_rule,
  /*  894 */  iRegINoSp_rule,
  /*  895 */  iRegLNoSp_rule,
  /*  896 */  iRegINoSp_rule,
  /*  897 */  iRegLNoSp_rule,
  /*  898 */  iRegINoSp_rule,
  /*  899 */  iRegINoSp_rule,
  /*  900 */  iRegINoSp_rule,
  /*  901 */  iRegINoSp_rule,
  /*  902 */  iRegINoSp_rule,
  /*  903 */  iRegINoSp_rule,
  /*  904 */  iRegLNoSp_rule,
  /*  905 */  iRegLNoSp_rule,
  /*  906 */  iRegLNoSp_rule,
  /*  907 */  iRegLNoSp_rule,
  /*  908 */  iRegLNoSp_rule,
  /*  909 */  iRegLNoSp_rule,
  /*  910 */  iRegLNoSp_rule,
  /*  911 */  iRegLNoSp_rule,
  /*  912 */  iRegINoSp_rule,
  /*  913 */  iRegINoSp_rule,
  /*  914 */  iRegINoSp_rule,
  /*  915 */  iRegLNoSp_rule,
  /*  916 */  iRegLNoSp_rule,
  /*  917 */  iRegINoSp_rule,
  /*  918 */  iRegINoSp_rule,
  /*  919 */  iRegLNoSp_rule,
  /*  920 */  iRegLNoSp_rule,
  /*  921 */  iRegINoSp_rule,
  /*  922 */  iRegINoSp_rule,
  /*  923 */  iRegLNoSp_rule,
  /*  924 */  iRegLNoSp_rule,
  /*  925 */  iRegINoSp_rule,
  /*  926 */  iRegINoSp_rule,
  /*  927 */  iRegLNoSp_rule,
  /*  928 */  iRegLNoSp_rule,
  /*  929 */  iRegINoSp_rule,
  /*  930 */  iRegINoSp_rule,
  /*  931 */  iRegLNoSp_rule,
  /*  932 */  iRegLNoSp_rule,
  /*  933 */  iRegINoSp_rule,
  /*  934 */  iRegINoSp_rule,
  /*  935 */  iRegLNoSp_rule,
  /*  936 */  iRegLNoSp_rule,
  /*  937 */  iRegINoSp_rule,
  /*  938 */  iRegINoSp_rule,
  /*  939 */  iRegLNoSp_rule,
  /*  940 */  iRegLNoSp_rule,
  /*  941 */  iRegINoSp_rule,
  /*  942 */  iRegINoSp_rule,
  /*  943 */  iRegINoSp_rule,
  /*  944 */  iRegINoSp_rule,
  /*  945 */  iRegLNoSp_rule,
  /*  946 */  iRegLNoSp_rule,
  /*  947 */  iRegLNoSp_rule,
  /*  948 */  iRegLNoSp_rule,
  /*  949 */  iRegINoSp_rule,
  /*  950 */  iRegINoSp_rule,
  /*  951 */  iRegINoSp_rule,
  /*  952 */  iRegINoSp_rule,
  /*  953 */  iRegLNoSp_rule,
  /*  954 */  iRegLNoSp_rule,
  /*  955 */  iRegLNoSp_rule,
  /*  956 */  iRegLNoSp_rule,
  /*  957 */  iRegINoSp_rule,
  /*  958 */  iRegINoSp_rule,
  /*  959 */  iRegINoSp_rule,
  /*  960 */  iRegINoSp_rule,
  /*  961 */  iRegLNoSp_rule,
  /*  962 */  iRegLNoSp_rule,
  /*  963 */  iRegLNoSp_rule,
  /*  964 */  iRegLNoSp_rule,
  /*  965 */  iRegINoSp_rule,
  /*  966 */  iRegINoSp_rule,
  /*  967 */  iRegINoSp_rule,
  /*  968 */  iRegINoSp_rule,
  /*  969 */  iRegLNoSp_rule,
  /*  970 */  iRegLNoSp_rule,
  /*  971 */  iRegLNoSp_rule,
  /*  972 */  iRegLNoSp_rule,
  /*  973 */  iRegINoSp_rule,
  /*  974 */  iRegINoSp_rule,
  /*  975 */  iRegLNoSp_rule,
  /*  976 */  iRegLNoSp_rule,
  /*  977 */  iRegINoSp_rule,
  /*  978 */  iRegINoSp_rule,
  /*  979 */  iRegLNoSp_rule,
  /*  980 */  iRegLNoSp_rule,
  /*  981 */  iRegINoSp_rule,
  /*  982 */  iRegINoSp_rule,
  /*  983 */  iRegLNoSp_rule,
  /*  984 */  iRegLNoSp_rule,
  /*  985 */  iRegINoSp_rule,
  /*  986 */  iRegINoSp_rule,
  /*  987 */  iRegLNoSp_rule,
  /*  988 */  iRegLNoSp_rule,
  /*  989 */  iRegINoSp_rule,
  /*  990 */  iRegINoSp_rule,
  /*  991 */  iRegLNoSp_rule,
  /*  992 */  iRegLNoSp_rule,
  /*  993 */  iRegINoSp_rule,
  /*  994 */  iRegINoSp_rule,
  /*  995 */  iRegLNoSp_rule,
  /*  996 */  iRegLNoSp_rule,
  /*  997 */  iRegINoSp_rule,
  /*  998 */  iRegINoSp_rule,
  /*  999 */  iRegLNoSp_rule,
  /* 1000 */  iRegLNoSp_rule,
  /* 1001 */  iRegINoSp_rule,
  /* 1002 */  iRegINoSp_rule,
  /* 1003 */  iRegLNoSp_rule,
  /* 1004 */  iRegLNoSp_rule,
  /* 1005 */  iRegINoSp_rule,
  /* 1006 */  iRegINoSp_rule,
  /* 1007 */  iRegLNoSp_rule,
  /* 1008 */  iRegLNoSp_rule,
  /* 1009 */  iRegINoSp_rule,
  /* 1010 */  iRegINoSp_rule,
  /* 1011 */  iRegLNoSp_rule,
  /* 1012 */  iRegLNoSp_rule,
  /* 1013 */  iRegINoSp_rule,
  /* 1014 */  iRegINoSp_rule,
  /* 1015 */  iRegLNoSp_rule,
  /* 1016 */  iRegLNoSp_rule,
  /* 1017 */  iRegINoSp_rule,
  /* 1018 */  iRegINoSp_rule,
  /* 1019 */  iRegLNoSp_rule,
  /* 1020 */  iRegLNoSp_rule,
  /* 1021 */  iRegINoSp_rule,
  /* 1022 */  iRegINoSp_rule,
  /* 1023 */  iRegLNoSp_rule,
  /* 1024 */  iRegLNoSp_rule,
  /* 1025 */  iRegINoSp_rule,
  /* 1026 */  iRegINoSp_rule,
  /* 1027 */  iRegLNoSp_rule,
  /* 1028 */  iRegLNoSp_rule,
  /* 1029 */  iRegINoSp_rule,
  /* 1030 */  iRegINoSp_rule,
  /* 1031 */  iRegLNoSp_rule,
  /* 1032 */  iRegLNoSp_rule,
  /* 1033 */  iRegINoSp_rule,
  /* 1034 */  iRegINoSp_rule,
  /* 1035 */  iRegLNoSp_rule,
  /* 1036 */  iRegLNoSp_rule,
  /* 1037 */  iRegINoSp_rule,
  /* 1038 */  iRegINoSp_rule,
  /* 1039 */  iRegLNoSp_rule,
  /* 1040 */  iRegLNoSp_rule,
  /* 1041 */  iRegINoSp_rule,
  /* 1042 */  iRegINoSp_rule,
  /* 1043 */  iRegLNoSp_rule,
  /* 1044 */  iRegLNoSp_rule,
  /* 1045 */  iRegINoSp_rule,
  /* 1046 */  iRegINoSp_rule,
  /* 1047 */  iRegLNoSp_rule,
  /* 1048 */  iRegLNoSp_rule,
  /* 1049 */  iRegINoSp_rule,
  /* 1050 */  iRegLNoSp_rule,
  /* 1051 */  iRegINoSp_rule,
  /* 1052 */  iRegLNoSp_rule,
  /* 1053 */  iRegINoSp_rule,
  /* 1054 */  iRegLNoSp_rule,
  /* 1055 */  iRegLNoSp_rule,
  /* 1056 */  iRegINoSp_rule,
  /* 1057 */  iRegLNoSp_rule,
  /* 1058 */  iRegINoSp_rule,
  /* 1059 */  iRegINoSp_rule,
  /* 1060 */  iRegLNoSp_rule,
  /* 1061 */  iRegLNoSp_rule,
  /* 1062 */  iRegINoSp_rule,
  /* 1063 */  iRegLNoSp_rule,
  /* 1064 */  iRegLNoSp_rule,
  /* 1065 */  iRegINoSp_rule,
  /* 1066 */  iRegLNoSp_rule,
  /* 1067 */  iRegINoSp_rule,
  /* 1068 */  iRegLNoSp_rule,
  /* 1069 */  iRegLNoSp_rule,
  /* 1070 */  iRegLNoSp_rule,
  /* 1071 */  iRegINoSp_rule,
  /* 1072 */  iRegINoSp_rule,
  /* 1073 */  iRegLNoSp_rule,
  /* 1074 */  iRegLNoSp_rule,
  /* 1075 */  iRegINoSp_rule,
  /* 1076 */  iRegINoSp_rule,
  /* 1077 */  iRegINoSp_rule,
  /* 1078 */  iRegLNoSp_rule,
  /* 1079 */  iRegINoSp_rule,
  /* 1080 */  iRegLNoSp_rule,
  /* 1081 */  iRegINoSp_rule,
  /* 1082 */  iRegLNoSp_rule,
  /* 1083 */  iRegLNoSp_rule,
  /* 1084 */  iRegLNoSp_rule,
  /* 1085 */  iRegLNoSp_rule,
  /* 1086 */  iRegINoSp_rule,
  /* 1087 */  iRegINoSp_rule,
  /* 1088 */  iRegINoSp_rule,
  /* 1089 */  iRegINoSp_rule,
  /* 1090 */  iRegINoSp_rule,
  /* 1091 */  iRegINoSp_rule,
  /* 1092 */  iRegLNoSp_rule,
  /* 1093 */  iRegLNoSp_rule,
  /* 1094 */  iRegLNoSp_rule,
  /* 1095 */  iRegLNoSp_rule,
  /* 1096 */  iRegLNoSp_rule,
  /* 1097 */  iRegLNoSp_rule,
  /* 1098 */  iRegLNoSp_rule,
  /* 1099 */  iRegLNoSp_rule,
  /* 1100 */  iRegINoSp_rule,
  /* 1101 */  iRegINoSp_rule,
  /* 1102 */  iRegINoSp_rule,
  /* 1103 */  iRegINoSp_rule,
  /* 1104 */  iRegLNoSp_rule,
  /* 1105 */  iRegLNoSp_rule,
  /* 1106 */  iRegLNoSp_rule,
  /* 1107 */  iRegLNoSp_rule,
  /* 1108 */  iRegLNoSp_rule,
  /* 1109 */  iRegLNoSp_rule,
  /* 1110 */  iRegINoSp_rule,
  /* 1111 */  iRegINoSp_rule,
  /* 1112 */  iRegLNoSp_rule,
  /* 1113 */  iRegLNoSp_rule,
  /* 1114 */  iRegLNoSp_rule,
  /* 1115 */  iRegLNoSp_rule,
  /* 1116 */  iRegLNoSp_rule,
  /* 1117 */  iRegLNoSp_rule,
  /* 1118 */  iRegLNoSp_rule,
  /* 1119 */  iRegLNoSp_rule,
  /* 1120 */  iRegLNoSp_rule,
  /* 1121 */  iRegLNoSp_rule,
  /* 1122 */  iRegLNoSp_rule,
  /* 1123 */  iRegLNoSp_rule,
  /* 1124 */  iRegINoSp_rule,
  /* 1125 */  iRegINoSp_rule,
  /* 1126 */  iRegINoSp_rule,
  /* 1127 */  iRegINoSp_rule,
  /* 1128 */  iRegINoSp_rule,
  /* 1129 */  iRegINoSp_rule,
  /* 1130 */  iRegLNoSp_rule,
  /* 1131 */  iRegLNoSp_rule,
  /* 1132 */  iRegLNoSp_rule,
  /* 1133 */  iRegLNoSp_rule,
  /* 1134 */  iRegLNoSp_rule,
  /* 1135 */  iRegLNoSp_rule,
  /* 1136 */  iRegLNoSp_rule,
  /* 1137 */  iRegLNoSp_rule,
  /* 1138 */  iRegLNoSp_rule,
  /* 1139 */  iRegLNoSp_rule,
  /* 1140 */  iRegLNoSp_rule,
  /* 1141 */  iRegLNoSp_rule,
  /* 1142 */  iRegINoSp_rule,
  /* 1143 */  iRegINoSp_rule,
  /* 1144 */  iRegINoSp_rule,
  /* 1145 */  iRegINoSp_rule,
  /* 1146 */  iRegINoSp_rule,
  /* 1147 */  iRegINoSp_rule,
  /* 1148 */  vRegF_rule,
  /* 1149 */  vRegD_rule,
  /* 1150 */  vRegF_rule,
  /* 1151 */  vRegD_rule,
  /* 1152 */  vRegF_rule,
  /* 1153 */  vRegD_rule,
  /* 1154 */  vRegF_rule,
  /* 1155 */  vRegD_rule,
  /* 1156 */  vRegF_rule,
  /* 1157 */  vRegF_rule,
  /* 1158 */  vRegD_rule,
  /* 1159 */  vRegD_rule,
  /* 1160 */  vRegF_rule,
  /* 1161 */  vRegF_rule,
  /* 1162 */  vRegD_rule,
  /* 1163 */  vRegD_rule,
  /* 1164 */  vRegF_rule,
  /* 1165 */  vRegD_rule,
  /* 1166 */  vRegF_rule,
  /* 1167 */  vRegF_rule,
  /* 1168 */  vRegD_rule,
  /* 1169 */  vRegD_rule,
  /* 1170 */  vRegF_rule,
  /* 1171 */  vRegD_rule,
  /* 1172 */  iRegINoSp_rule,
  /* 1173 */  iRegLNoSp_rule,
  /* 1174 */  vRegF_rule,
  /* 1175 */  vRegD_rule,
  /* 1176 */  vRegD_rule,
  /* 1177 */  vRegF_rule,
  /* 1178 */  vRegD_rule,
  /* 1179 */  vRegD_rule,
  /* 1180 */  vRegF_rule,
  /* 1181 */  vRegD_rule,
  /* 1182 */  vRegF_rule,
  /* 1183 */  Universe_rule,
  /* 1184 */  iRegINoSp_rule,
  /* 1185 */  iRegINoSp_rule,
  /* 1186 */  iRegINoSp_rule,
  /* 1187 */  iRegINoSp_rule,
  /* 1188 */  iRegINoSp_rule,
  /* 1189 */  iRegINoSp_rule,
  /* 1190 */  iRegLNoSp_rule,
  /* 1191 */  iRegLNoSp_rule,
  /* 1192 */  iRegLNoSp_rule,
  /* 1193 */  iRegLNoSp_rule,
  /* 1194 */  iRegLNoSp_rule,
  /* 1195 */  iRegLNoSp_rule,
  /* 1196 */  iRegLNoSp_rule,
  /* 1197 */  iRegLNoSp_rule,
  /* 1198 */  iRegINoSp_rule,
  /* 1199 */  iRegINoSp_rule,
  /* 1200 */  iRegINoSp_rule,
  /* 1201 */  vRegF_rule,
  /* 1202 */  vRegD_rule,
  /* 1203 */  iRegINoSp_rule,
  /* 1204 */  iRegLNoSp_rule,
  /* 1205 */  vRegF_rule,
  /* 1206 */  vRegF_rule,
  /* 1207 */  iRegINoSp_rule,
  /* 1208 */  iRegLNoSp_rule,
  /* 1209 */  vRegD_rule,
  /* 1210 */  vRegD_rule,
  /* 1211 */  stackSlotI_rule,
  /* 1212 */  stackSlotF_rule,
  /* 1213 */  stackSlotL_rule,
  /* 1214 */  stackSlotD_rule,
  /* 1215 */  Universe_rule,
  /* 1216 */  Universe_rule,
  /* 1217 */  Universe_rule,
  /* 1218 */  Universe_rule,
  /* 1219 */  iRegINoSp_rule,
  /* 1220 */  iRegINoSp_rule,
  /* 1221 */  iRegINoSp_rule,
  /* 1222 */  iRegINoSp_rule,
  /* 1223 */  iRegINoSp_rule,
  /* 1224 */  iRegINoSp_rule,
  /* 1225 */  0,
  /* 1226 */  iRegINoSp_rule,
  /* 1227 */  0,
  /* 1228 */  iRegINoSp_rule,
  /* 1229 */  Universe_rule,
  /* 1230 */  Universe_rule,
  /* 1231 */  Universe_rule,
  /* 1232 */  Universe_rule,
  /* 1233 */  Universe_rule,
  /* 1234 */  Universe_rule,
  /* 1235 */  Universe_rule,
  /* 1236 */  Universe_rule,
  /* 1237 */  Universe_rule,
  /* 1238 */  Universe_rule,
  /* 1239 */  Universe_rule,
  /* 1240 */  Universe_rule,
  /* 1241 */  Universe_rule,
  /* 1242 */  Universe_rule,
  /* 1243 */  Universe_rule,
  /* 1244 */  Universe_rule,
  /* 1245 */  Universe_rule,
  /* 1246 */  Universe_rule,
  /* 1247 */  Universe_rule,
  /* 1248 */  Universe_rule,
  /* 1249 */  Universe_rule,
  /* 1250 */  Universe_rule,
  /* 1251 */  Universe_rule,
  /* 1252 */  Universe_rule,
  /* 1253 */  Universe_rule,
  /* 1254 */  Universe_rule,
  /* 1255 */  Universe_rule,
  /* 1256 */  Universe_rule,
  /* 1257 */  Universe_rule,
  /* 1258 */  iRegP_R0_rule,
  /* 1259 */  Universe_rule,
  /* 1260 */  Universe_rule,
  /* 1261 */  Universe_rule,
  /* 1262 */  iRegP_R5_rule,
  /* 1263 */  iRegI_R0_rule,
  /* 1264 */  iRegI_R0_rule,
  /* 1265 */  iRegI_R0_rule,
  /* 1266 */  iRegI_R0_rule,
  /* 1267 */  iRegI_R0_rule,
  /* 1268 */  iRegI_R0_rule,
  /* 1269 */  iRegI_R0_rule,
  /* 1270 */  iRegI_R0_rule,
  /* 1271 */  iRegI_R0_rule,
  /* 1272 */  iRegI_R0_rule,
  /* 1273 */  iRegI_R0_rule,
  /* 1274 */  iRegI_R0_rule,
  /* 1275 */  iRegI_R0_rule,
  /* 1276 */  iRegI_R0_rule,
  /* 1277 */  iRegI_R0_rule,
  /* 1278 */  iRegI_R0_rule,
  /* 1279 */  iRegI_R0_rule,
  /* 1280 */  iRegI_R0_rule,
  /* 1281 */  Universe_rule,
  /* 1282 */  iRegI_R0_rule,
  /* 1283 */  vecD_rule,
  /* 1284 */  vecD_rule,
  /* 1285 */  vecD_rule,
  /* 1286 */  vecX_rule,
  /* 1287 */  Universe_rule,
  /* 1288 */  Universe_rule,
  /* 1289 */  Universe_rule,
  /* 1290 */  Universe_rule,
  /* 1291 */  vecD_rule,
  /* 1292 */  iRegINoSp_rule,
  /* 1293 */  iRegINoSp_rule,
  /* 1294 */  iRegINoSp_rule,
  /* 1295 */  iRegINoSp_rule,
  /* 1296 */  iRegLNoSp_rule,
  /* 1297 */  iRegINoSp_rule,
  /* 1298 */  iRegINoSp_rule,
  /* 1299 */  iRegINoSp_rule,
  /* 1300 */  iRegINoSp_rule,
  /* 1301 */  iRegLNoSp_rule,
  /* 1302 */  iRegINoSp_rule,
  /* 1303 */  iRegINoSp_rule,
  /* 1304 */  iRegINoSp_rule,
  /* 1305 */  iRegINoSp_rule,
  /* 1306 */  iRegINoSp_rule,
  /* 1307 */  iRegINoSp_rule,
  /* 1308 */  iRegINoSp_rule,
  /* 1309 */  iRegINoSp_rule,
  /* 1310 */  iRegINoSp_rule,
  /* 1311 */  iRegINoSp_rule,
  /* 1312 */  iRegINoSp_rule,
  /* 1313 */  iRegINoSp_rule,
  /* 1314 */  iRegLNoSp_rule,
  /* 1315 */  iRegLNoSp_rule,
  /* 1316 */  vRegF_rule,
  /* 1317 */  vRegF_rule,
  /* 1318 */  vRegD_rule,
  /* 1319 */  vRegF_rule,
  /* 1320 */  vRegF_rule,
  /* 1321 */  vRegD_rule,
  /* 1322 */  iRegINoSp_rule,
  /* 1323 */  iRegINoSp_rule,
  /* 1324 */  iRegINoSp_rule,
  /* 1325 */  iRegINoSp_rule,
  /* 1326 */  iRegINoSp_rule,
  /* 1327 */  iRegINoSp_rule,
  /* 1328 */  iRegINoSp_rule,
  /* 1329 */  iRegINoSp_rule,
  /* 1330 */  iRegINoSp_rule,
  /* 1331 */  iRegINoSp_rule,
  /* 1332 */  iRegINoSp_rule,
  /* 1333 */  iRegINoSp_rule,
  /* 1334 */  iRegINoSp_rule,
  /* 1335 */  iRegINoSp_rule,
  /* 1336 */  iRegINoSp_rule,
  /* 1337 */  iRegINoSp_rule,
  /* 1338 */  iRegINoSp_rule,
  /* 1339 */  iRegINoSp_rule,
  /* 1340 */  iRegLNoSp_rule,
  /* 1341 */  iRegLNoSp_rule,
  /* 1342 */  iRegLNoSp_rule,
  /* 1343 */  vecD_rule,
  /* 1344 */  vecX_rule,
  /* 1345 */  vecD_rule,
  /* 1346 */  vecX_rule,
  /* 1347 */  vecD_rule,
  /* 1348 */  vecX_rule,
  /* 1349 */  vecX_rule,
  /* 1350 */  vecD_rule,
  /* 1351 */  vecX_rule,
  /* 1352 */  vecX_rule,
  /* 1353 */  iRegINoSp_rule,
  /* 1354 */  iRegINoSp_rule,
  /* 1355 */  iRegINoSp_rule,
  /* 1356 */  iRegINoSp_rule,
  /* 1357 */  iRegINoSp_rule,
  /* 1358 */  iRegINoSp_rule,
  /* 1359 */  iRegLNoSp_rule,
  /* 1360 */  vRegF_rule,
  /* 1361 */  vRegF_rule,
  /* 1362 */  vRegD_rule,
  /* 1363 */  vecD_rule,
  /* 1364 */  vecX_rule,
  /* 1365 */  vecX_rule,
  /* 1366 */  vecD_rule,
  /* 1367 */  vecD_rule,
  /* 1368 */  vecD_rule,
  /* 1369 */  vecD_rule,
  /* 1370 */  vecD_rule,
  /* 1371 */  vecD_rule,
  /* 1372 */  vecX_rule,
  /* 1373 */  vecX_rule,
  /* 1374 */  vecX_rule,
  /* 1375 */  vecX_rule,
  /* 1376 */  vecX_rule,
  /* 1377 */  vecX_rule,
  /* 1378 */  vecX_rule,
  /* 1379 */  vecX_rule,
  /* 1380 */  vecD_rule,
  /* 1381 */  vecD_rule,
  /* 1382 */  vecD_rule,
  /* 1383 */  vecD_rule,
  /* 1384 */  vecD_rule,
  /* 1385 */  vecD_rule,
  /* 1386 */  vecD_rule,
  /* 1387 */  vecD_rule,
  /* 1388 */  vecD_rule,
  /* 1389 */  vecD_rule,
  /* 1390 */  vecD_rule,
  /* 1391 */  vecD_rule,
  /* 1392 */  vecX_rule,
  /* 1393 */  vecX_rule,
  /* 1394 */  vecX_rule,
  /* 1395 */  vecX_rule,
  /* 1396 */  vecX_rule,
  /* 1397 */  vecX_rule,
  /* 1398 */  vecX_rule,
  /* 1399 */  vecX_rule,
  /* 1400 */  vecX_rule,
  /* 1401 */  vecX_rule,
  /* 1402 */  vecX_rule,
  /* 1403 */  vecX_rule,
  /* 1404 */  vecX_rule,
  /* 1405 */  vecX_rule,
  /* 1406 */  vecX_rule,
  /* 1407 */  vecX_rule,
  /* 1408 */  vecD_rule,
  /* 1409 */  vecX_rule,
  /* 1410 */  vecD_rule,
  /* 1411 */  vecX_rule,
  /* 1412 */  vecD_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  vecD_rule,
  /* 1415 */  vecX_rule,
  /* 1416 */  vecD_rule,
  /* 1417 */  vecX_rule,
  /* 1418 */  vecD_rule,
  /* 1419 */  vecX_rule,
  /* 1420 */  vecX_rule,
  /* 1421 */  vecX_rule,
  /* 1422 */  vecD_rule,
  /* 1423 */  vecX_rule,
  /* 1424 */  vecD_rule,
  /* 1425 */  vecX_rule,
  /* 1426 */  vecD_rule,
  /* 1427 */  vecD_rule,
  /* 1428 */  vecD_rule,
  /* 1429 */  vecD_rule,
  /* 1430 */  vecD_rule,
  /* 1431 */  vecD_rule,
  /* 1432 */  vecX_rule,
  /* 1433 */  vecD_rule,
  /* 1434 */  vecX_rule,
  /* 1435 */  vecX_rule,
  /* 1436 */  iRegINoSp_rule,
  /* 1437 */  iRegINoSp_rule,
  /* 1438 */  iRegINoSp_rule,
  /* 1439 */  iRegINoSp_rule,
  /* 1440 */  vecD_rule,
  /* 1441 */  vecX_rule,
  /* 1442 */  vecX_rule,
  /* 1443 */  vecD_rule,
  /* 1444 */  vecX_rule,
  /* 1445 */  vecD_rule,
  /* 1446 */  vecX_rule,
  /* 1447 */  vecD_rule,
  /* 1448 */  vecX_rule,
  /* 1449 */  vecD_rule,
  /* 1450 */  vecX_rule,
  /* 1451 */  vecD_rule,
  /* 1452 */  vecX_rule,
  /* 1453 */  vecD_rule,
  /* 1454 */  vecX_rule,
  /* 1455 */  vecX_rule,
  /* 1456 */  vecX_rule,
  /* 1457 */  vecD_rule,
  /* 1458 */  vecX_rule,
  /* 1459 */  vecX_rule,
  /* 1460 */  iRegINoSp_rule,
  /* 1461 */  iRegINoSp_rule,
  /* 1462 */  iRegINoSp_rule,
  /* 1463 */  iRegINoSp_rule,
  /* 1464 */  vRegF_rule,
  /* 1465 */  vRegF_rule,
  /* 1466 */  vRegF_rule,
  /* 1467 */  vRegF_rule,
  /* 1468 */  vRegD_rule,
  /* 1469 */  vRegD_rule,
  /* 1470 */  vecD_rule,
  /* 1471 */  vecX_rule,
  /* 1472 */  vecD_rule,
  /* 1473 */  vecX_rule,
  /* 1474 */  vecD_rule,
  /* 1475 */  vecX_rule,
  /* 1476 */  vecX_rule,
  /* 1477 */  vecD_rule,
  /* 1478 */  vecX_rule,
  /* 1479 */  vecX_rule,
  /* 1480 */  vecD_rule,
  /* 1481 */  vecX_rule,
  /* 1482 */  vecD_rule,
  /* 1483 */  vecX_rule,
  /* 1484 */  vecD_rule,
  /* 1485 */  vecX_rule,
  /* 1486 */  vecX_rule,
  /* 1487 */  vecD_rule,
  /* 1488 */  vecX_rule,
  /* 1489 */  vecX_rule,
  /* 1490 */  vecD_rule,
  /* 1491 */  vecX_rule,
  /* 1492 */  vecD_rule,
  /* 1493 */  vecX_rule,
  /* 1494 */  vecD_rule,
  /* 1495 */  vecX_rule,
  /* 1496 */  vecD_rule,
  /* 1497 */  vecX_rule,
  /* 1498 */  vecX_rule,
  /* 1499 */  vecD_rule,
  /* 1500 */  vecD_rule,
  /* 1501 */  vecX_rule,
  /* 1502 */  vecX_rule,
  /* 1503 */  vecD_rule,
  /* 1504 */  vecD_rule,
  /* 1505 */  vecX_rule,
  /* 1506 */  vecX_rule,
  /* 1507 */  vecD_rule,
  /* 1508 */  vecX_rule,
  /* 1509 */  vecX_rule,
  /* 1510 */  vecD_rule,
  /* 1511 */  vecX_rule,
  /* 1512 */  vecD_rule,
  /* 1513 */  vecX_rule,
  /* 1514 */  vecD_rule,
  /* 1515 */  vecD_rule,
  /* 1516 */  vecX_rule,
  /* 1517 */  vecX_rule,
  /* 1518 */  vecX_rule,
  /* 1519 */  vecX_rule,
  /* 1520 */  vecX_rule,
  /* 1521 */  vecD_rule,
  /* 1522 */  vecX_rule,
  /* 1523 */  vecX_rule,
  /* 1524 */  vecD_rule,
  /* 1525 */  vecX_rule,
  /* 1526 */  vecD_rule,
  /* 1527 */  vecX_rule,
  /* 1528 */  vecD_rule,
  /* 1529 */  vecX_rule,
  /* 1530 */  vecD_rule,
  /* 1531 */  vecX_rule,
  /* 1532 */  vecD_rule,
  /* 1533 */  vecX_rule,
  /* 1534 */  vecD_rule,
  /* 1535 */  vecX_rule,
  /* 1536 */  vecD_rule,
  /* 1537 */  vecX_rule,
  /* 1538 */  vecD_rule,
  /* 1539 */  vecX_rule,
  /* 1540 */  vecD_rule,
  /* 1541 */  vecX_rule,
  /* 1542 */  vecD_rule,
  /* 1543 */  vecX_rule,
  /* 1544 */  vecD_rule,
  /* 1545 */  vecX_rule,
  /* 1546 */  vecD_rule,
  /* 1547 */  vecX_rule,
  /* 1548 */  vecD_rule,
  /* 1549 */  vecX_rule,
  /* 1550 */  vecD_rule,
  /* 1551 */  vecX_rule,
  /* 1552 */  vecD_rule,
  /* 1553 */  vecX_rule,
  /* 1554 */  vecD_rule,
  /* 1555 */  vecX_rule,
  /* 1556 */  vecD_rule,
  /* 1557 */  vecX_rule,
  /* 1558 */  vecD_rule,
  /* 1559 */  vecX_rule,
  /* 1560 */  vecD_rule,
  /* 1561 */  vecX_rule,
  /* 1562 */  vecD_rule,
  /* 1563 */  vecX_rule,
  /* 1564 */  vecD_rule,
  /* 1565 */  vecX_rule,
  /* 1566 */  vecX_rule,
  /* 1567 */  vecX_rule,
  /* 1568 */  vecX_rule,
  /* 1569 */  vecX_rule,
  /* 1570 */  vecX_rule,
  /* 1571 */  vecX_rule,
  /* 1572 */  vecD_rule,
  /* 1573 */  vecD_rule,
  /* 1574 */  vecX_rule,
  /* 1575 */  vecX_rule,
  /* 1576 */  vecD_rule,
  /* 1577 */  vecD_rule,
  /* 1578 */  vecX_rule,
  /* 1579 */  vecX_rule,
  /* 1580 */  vecD_rule,
  /* 1581 */  vecD_rule,
  /* 1582 */  vecX_rule,
  /* 1583 */  vecX_rule,
  /* 1584 */  vecX_rule,
  /* 1585 */  vecX_rule,
  /* 1586 */  vecD_rule,
  /* 1587 */  vecD_rule,
  /* 1588 */  vecX_rule,
  /* 1589 */  vecX_rule,
  /* 1590 */  vecD_rule,
  /* 1591 */  vecD_rule,
  /* 1592 */  vecX_rule,
  /* 1593 */  vecX_rule,
  /* 1594 */  vecD_rule,
  /* 1595 */  vecD_rule,
  /* 1596 */  vecX_rule,
  /* 1597 */  vecX_rule,
  /* 1598 */  vecX_rule,
  /* 1599 */  vecX_rule,
  /* 1600 */  vecD_rule,
  /* 1601 */  vecX_rule,
  /* 1602 */  vecX_rule,
  /* 1603 */  vecD_rule,
  /* 1604 */  vecX_rule,
  /* 1605 */  vecX_rule,
  /* 1606 */  vecX_rule,
  /* 1607 */  iRegINoSp_rule,
  /* 1608 */  iRegINoSp_rule,
  /* 1609 */  iRegINoSp_rule,
  /* 1610 */  vReg_rule,
  /* 1611 */  Universe_rule,
  /* 1612 */  vReg_rule,
  /* 1613 */  Universe_rule,
  /* 1614 */  vReg_rule,
  /* 1615 */  Universe_rule,
  /* 1616 */  vReg_rule,
  /* 1617 */  Universe_rule,
  /* 1618 */  vReg_rule,
  /* 1619 */  Universe_rule,
  /* 1620 */  vReg_rule,
  /* 1621 */  Universe_rule,
  /* 1622 */  vReg_rule,
  /* 1623 */  vReg_rule,
  /* 1624 */  Universe_rule,
  /* 1625 */  Universe_rule,
  /* 1626 */  pRegGov_rule,
  /* 1627 */  pRegGov_rule,
  /* 1628 */  pRegGov_rule,
  /* 1629 */  pRegGov_rule,
  /* 1630 */  pRegGov_rule,
  /* 1631 */  pRegGov_rule,
  /* 1632 */  pRegGov_rule,
  /* 1633 */  pRegGov_rule,
  /* 1634 */  pRegGov_rule,
  /* 1635 */  vReg_rule,
  /* 1636 */  pRegGov_rule,
  /* 1637 */  vReg_rule,
  /* 1638 */  vReg_rule,
  /* 1639 */  vReg_rule,
  /* 1640 */  vReg_rule,
  /* 1641 */  vReg_rule,
  /* 1642 */  vReg_rule,
  /* 1643 */  vReg_rule,
  /* 1644 */  vReg_rule,
  /* 1645 */  vReg_rule,
  /* 1646 */  vReg_rule,
  /* 1647 */  vReg_rule,
  /* 1648 */  vReg_rule,
  /* 1649 */  vReg_rule,
  /* 1650 */  vReg_rule,
  /* 1651 */  vReg_rule,
  /* 1652 */  vReg_rule,
  /* 1653 */  vReg_rule,
  /* 1654 */  vReg_rule,
  /* 1655 */  vReg_rule,
  /* 1656 */  vReg_rule,
  /* 1657 */  vReg_rule,
  /* 1658 */  vReg_rule,
  /* 1659 */  vReg_rule,
  /* 1660 */  vReg_rule,
  /* 1661 */  vReg_rule,
  /* 1662 */  vReg_rule,
  /* 1663 */  vReg_rule,
  /* 1664 */  vReg_rule,
  /* 1665 */  vReg_rule,
  /* 1666 */  vReg_rule,
  /* 1667 */  vReg_rule,
  /* 1668 */  vReg_rule,
  /* 1669 */  vReg_rule,
  /* 1670 */  vReg_rule,
  /* 1671 */  vReg_rule,
  /* 1672 */  vReg_rule,
  /* 1673 */  vReg_rule,
  /* 1674 */  vReg_rule,
  /* 1675 */  vReg_rule,
  /* 1676 */  vReg_rule,
  /* 1677 */  vReg_rule,
  /* 1678 */  vReg_rule,
  /* 1679 */  vReg_rule,
  /* 1680 */  vReg_rule,
  /* 1681 */  vReg_rule,
  /* 1682 */  vReg_rule,
  /* 1683 */  vReg_rule,
  /* 1684 */  vReg_rule,
  /* 1685 */  vReg_rule,
  /* 1686 */  vReg_rule,
  /* 1687 */  vReg_rule,
  /* 1688 */  vReg_rule,
  /* 1689 */  vReg_rule,
  /* 1690 */  vReg_rule,
  /* 1691 */  vReg_rule,
  /* 1692 */  vReg_rule,
  /* 1693 */  vReg_rule,
  /* 1694 */  vReg_rule,
  /* 1695 */  vReg_rule,
  /* 1696 */  vReg_rule,
  /* 1697 */  vReg_rule,
  /* 1698 */  vReg_rule,
  /* 1699 */  vReg_rule,
  /* 1700 */  vReg_rule,
  /* 1701 */  vReg_rule,
  /* 1702 */  vReg_rule,
  /* 1703 */  vReg_rule,
  /* 1704 */  vReg_rule,
  /* 1705 */  vReg_rule,
  /* 1706 */  vReg_rule,
  /* 1707 */  vReg_rule,
  /* 1708 */  vReg_rule,
  /* 1709 */  vReg_rule,
  /* 1710 */  vReg_rule,
  /* 1711 */  vReg_rule,
  /* 1712 */  vReg_rule,
  /* 1713 */  vReg_rule,
  /* 1714 */  vReg_rule,
  /* 1715 */  vReg_rule,
  /* 1716 */  vReg_rule,
  /* 1717 */  vReg_rule,
  /* 1718 */  vReg_rule,
  /* 1719 */  vReg_rule,
  /* 1720 */  vReg_rule,
  /* 1721 */  vReg_rule,
  /* 1722 */  vReg_rule,
  /* 1723 */  vReg_rule,
  /* 1724 */  vReg_rule,
  /* 1725 */  vReg_rule,
  /* 1726 */  vReg_rule,
  /* 1727 */  vReg_rule,
  /* 1728 */  vReg_rule,
  /* 1729 */  vReg_rule,
  /* 1730 */  vReg_rule,
  /* 1731 */  vReg_rule,
  /* 1732 */  vReg_rule,
  /* 1733 */  vReg_rule,
  /* 1734 */  vReg_rule,
  /* 1735 */  vReg_rule,
  /* 1736 */  vReg_rule,
  /* 1737 */  vReg_rule,
  /* 1738 */  vReg_rule,
  /* 1739 */  vReg_rule,
  /* 1740 */  vReg_rule,
  /* 1741 */  vReg_rule,
  /* 1742 */  vReg_rule,
  /* 1743 */  vReg_rule,
  /* 1744 */  vReg_rule,
  /* 1745 */  vReg_rule,
  /* 1746 */  vReg_rule,
  /* 1747 */  vReg_rule,
  /* 1748 */  vReg_rule,
  /* 1749 */  vReg_rule,
  /* 1750 */  vReg_rule,
  /* 1751 */  vReg_rule,
  /* 1752 */  vReg_rule,
  /* 1753 */  vReg_rule,
  /* 1754 */  vReg_rule,
  /* 1755 */  vReg_rule,
  /* 1756 */  vReg_rule,
  /* 1757 */  vReg_rule,
  /* 1758 */  vReg_rule,
  /* 1759 */  vReg_rule,
  /* 1760 */  vReg_rule,
  /* 1761 */  vReg_rule,
  /* 1762 */  vReg_rule,
  /* 1763 */  vReg_rule,
  /* 1764 */  vReg_rule,
  /* 1765 */  pRegGov_rule,
  /* 1766 */  pRegGov_rule,
  /* 1767 */  vReg_rule,
  /* 1768 */  pRegGov_rule,
  /* 1769 */  pRegGov_rule,
  /* 1770 */  vReg_rule,
  /* 1771 */  vReg_rule,
  /* 1772 */  pRegGov_rule,
  /* 1773 */  pRegGov_rule,
  /* 1774 */  Universe_rule,
  /* 1775 */  Universe_rule,
  /* 1776 */  iRegINoSp_rule,
  /* 1777 */  iRegLNoSp_rule,
  /* 1778 */  vRegF_rule,
  /* 1779 */  vRegD_rule,
  /* 1780 */  iRegINoSp_rule,
  /* 1781 */  iRegLNoSp_rule,
  /* 1782 */  vRegF_rule,
  /* 1783 */  vRegD_rule,
  /* 1784 */  iRegINoSp_rule,
  /* 1785 */  iRegLNoSp_rule,
  /* 1786 */  vRegF_rule,
  /* 1787 */  vRegD_rule,
  /* 1788 */  iRegINoSp_rule,
  /* 1789 */  iRegLNoSp_rule,
  /* 1790 */  vRegF_rule,
  /* 1791 */  vRegD_rule,
  /* 1792 */  iRegINoSp_rule,
  /* 1793 */  iRegLNoSp_rule,
  /* 1794 */  iRegINoSp_rule,
  /* 1795 */  iRegLNoSp_rule,
  /* 1796 */  iRegINoSp_rule,
  /* 1797 */  iRegLNoSp_rule,
  /* 1798 */  iRegINoSp_rule,
  /* 1799 */  iRegLNoSp_rule,
  /* 1800 */  iRegINoSp_rule,
  /* 1801 */  iRegLNoSp_rule,
  /* 1802 */  iRegINoSp_rule,
  /* 1803 */  iRegLNoSp_rule,
  /* 1804 */  iRegINoSp_rule,
  /* 1805 */  iRegLNoSp_rule,
  /* 1806 */  iRegINoSp_rule,
  /* 1807 */  iRegLNoSp_rule,
  /* 1808 */  iRegINoSp_rule,
  /* 1809 */  iRegLNoSp_rule,
  /* 1810 */  iRegINoSp_rule,
  /* 1811 */  iRegLNoSp_rule,
  /* 1812 */  iRegINoSp_rule,
  /* 1813 */  iRegLNoSp_rule,
  /* 1814 */  iRegINoSp_rule,
  /* 1815 */  iRegLNoSp_rule,
  /* 1816 */  iRegINoSp_rule,
  /* 1817 */  iRegLNoSp_rule,
  /* 1818 */  iRegINoSp_rule,
  /* 1819 */  iRegLNoSp_rule,
  /* 1820 */  vRegF_rule,
  /* 1821 */  vRegF_rule,
  /* 1822 */  vRegD_rule,
  /* 1823 */  vRegD_rule,
  /* 1824 */  iRegINoSp_rule,
  /* 1825 */  iRegLNoSp_rule,
  /* 1826 */  iRegINoSp_rule,
  /* 1827 */  iRegLNoSp_rule,
  /* 1828 */  vRegF_rule,
  /* 1829 */  vRegD_rule,
  /* 1830 */  vRegF_rule,
  /* 1831 */  vRegD_rule,
  /* 1832 */  iRegINoSp_rule,
  /* 1833 */  iRegLNoSp_rule,
  /* 1834 */  iRegINoSp_rule,
  /* 1835 */  iRegLNoSp_rule,
  /* 1836 */  vRegF_rule,
  /* 1837 */  vRegF_rule,
  /* 1838 */  vRegD_rule,
  /* 1839 */  vRegD_rule,
  /* 1840 */  iRegINoSp_rule,
  /* 1841 */  iRegLNoSp_rule,
  /* 1842 */  iRegINoSp_rule,
  /* 1843 */  iRegLNoSp_rule,
  /* 1844 */  vRegF_rule,
  /* 1845 */  vRegD_rule,
  /* 1846 */  vRegF_rule,
  /* 1847 */  vRegD_rule,
  /* 1848 */  vReg_rule,
  /* 1849 */  vReg_rule,
  /* 1850 */  vReg_rule,
  /* 1851 */  vReg_rule,
  /* 1852 */  vReg_rule,
  /* 1853 */  vReg_rule,
  /* 1854 */  vReg_rule,
  /* 1855 */  vReg_rule,
  /* 1856 */  vReg_rule,
  /* 1857 */  vReg_rule,
  /* 1858 */  vReg_rule,
  /* 1859 */  vReg_rule,
  /* 1860 */  vReg_rule,
  /* 1861 */  vReg_rule,
  /* 1862 */  vReg_rule,
  /* 1863 */  vReg_rule,
  /* 1864 */  vReg_rule,
  /* 1865 */  vReg_rule,
  /* 1866 */  vReg_rule,
  /* 1867 */  vReg_rule,
  /* 1868 */  vReg_rule,
  /* 1869 */  vReg_rule,
  /* 1870 */  vReg_rule,
  /* 1871 */  vReg_rule,
  /* 1872 */  vReg_rule,
  /* 1873 */  vReg_rule,
  /* 1874 */  vReg_rule,
  /* 1875 */  vReg_rule,
  /* 1876 */  vReg_rule,
  /* 1877 */  vReg_rule,
  /* 1878 */  vReg_rule,
  /* 1879 */  vReg_rule,
  /* 1880 */  vReg_rule,
  /* 1881 */  vReg_rule,
  /* 1882 */  vReg_rule,
  /* 1883 */  vReg_rule,
  /* 1884 */  vReg_rule,
  /* 1885 */  vReg_rule,
  /* 1886 */  vReg_rule,
  /* 1887 */  vReg_rule,
  /* 1888 */  vReg_rule,
  /* 1889 */  vReg_rule,
  /* 1890 */  vReg_rule,
  /* 1891 */  vReg_rule,
  /* 1892 */  vReg_rule,
  /* 1893 */  vReg_rule,
  /* 1894 */  vReg_rule,
  /* 1895 */  vReg_rule,
  /* 1896 */  vReg_rule,
  /* 1897 */  vReg_rule,
  /* 1898 */  vReg_rule,
  /* 1899 */  vReg_rule,
  /* 1900 */  vReg_rule,
  /* 1901 */  vReg_rule,
  /* 1902 */  vReg_rule,
  /* 1903 */  vReg_rule,
  /* 1904 */  vReg_rule,
  /* 1905 */  vReg_rule,
  /* 1906 */  vReg_rule,
  /* 1907 */  vReg_rule,
  /* 1908 */  vReg_rule,
  /* 1909 */  vReg_rule,
  /* 1910 */  vReg_rule,
  /* 1911 */  vReg_rule,
  /* 1912 */  vReg_rule,
  /* 1913 */  vReg_rule,
  /* 1914 */  vReg_rule,
  /* 1915 */  vReg_rule,
  /* 1916 */  vReg_rule,
  /* 1917 */  vReg_rule,
  /* 1918 */  vReg_rule,
  /* 1919 */  vReg_rule,
  /* 1920 */  vReg_rule,
  /* 1921 */  vReg_rule,
  /* 1922 */  vReg_rule,
  /* 1923 */  vReg_rule,
  /* 1924 */  vReg_rule,
  /* 1925 */  vReg_rule,
  /* 1926 */  vReg_rule,
  /* 1927 */  vReg_rule,
  /* 1928 */  vReg_rule,
  /* 1929 */  iRegINoSp_rule,
  /* 1930 */  iRegINoSp_rule,
  /* 1931 */  iRegINoSp_rule,
  /* 1932 */  iRegLNoSp_rule,
  /* 1933 */  vRegF_rule,
  /* 1934 */  vRegD_rule,
  /* 1935 */  iRegINoSp_rule,
  /* 1936 */  iRegINoSp_rule,
  /* 1937 */  iRegINoSp_rule,
  /* 1938 */  iRegINoSp_rule,
  /* 1939 */  vReg_rule,
  /* 1940 */  vReg_rule,
  /* 1941 */  vReg_rule,
  /* 1942 */  vReg_rule,
  /* 1943 */  vReg_rule,
  /* 1944 */  vReg_rule,
  /* 1945 */  vReg_rule,
  /* 1946 */  vReg_rule,
  /* 1947 */  vReg_rule,
  /* 1948 */  vReg_rule,
  /* 1949 */  vReg_rule,
  /* 1950 */  vReg_rule,
  /* 1951 */  vReg_rule,
  /* 1952 */  vReg_rule,
  /* 1953 */  vReg_rule,
  /* 1954 */  Universe_rule,
  /* 1955 */  Universe_rule,
  /* 1956 */  Universe_rule,
  /* 1957 */  Universe_rule,
  /* 1958 */  Universe_rule,
  /* 1959 */  Universe_rule,
  /* 1960 */  Universe_rule,
  /* 1961 */  Universe_rule,
  /* 1962 */  iRegI_R0_rule,
  /* 1963 */  iRegI_R0_rule,
  /* 1964 */  iRegI_R0_rule,
  /* 1965 */  iRegI_R0_rule,
  /* 1966 */  iRegI_R0_rule,
  /* 1967 */  iRegI_R0_rule,
  /* 1968 */  iRegINoSp_rule,
  /* 1969 */  iRegINoSp_rule,
  /* 1970 */  iRegINoSp_rule,
  /* 1971 */  iRegINoSp_rule,
  /* 1972 */  iRegINoSp_rule,
  /* 1973 */  iRegLNoSp_rule,
  /* 1974 */  pRegGov_rule,
  /* 1975 */  iRegINoSp_rule,
  /* 1976 */  iRegINoSp_rule,
  /* 1977 */  iRegINoSp_rule,
  /* 1978 */  iRegINoSp_rule,
  /* 1979 */  iRegNNoSp_rule,
  /* 1980 */  iRegPNoSp_rule,
  /* 1981 */  iRegNNoSp_rule,
  /* 1982 */  iRegPNoSp_rule,
  /* 1983 */  iRegINoSp_rule,
  /* 1984 */  iRegINoSp_rule,
  /* 1985 */  iRegINoSp_rule,
  /* 1986 */  iRegINoSp_rule,
  /* 1987 */  iRegPNoSp_rule,
  /* 1988 */  iRegPNoSp_rule,
  /* 1989 */  iRegINoSp_rule,
  /* 1990 */  iRegINoSp_rule,
  /* 1991 */  iRegINoSp_rule,
  /* 1992 */  iRegINoSp_rule,
  /* 1993 */  iRegPNoSp_rule,
  /* 1994 */  iRegPNoSp_rule,
  /* 1995 */  iRegPNoSp_rule,
  /* 1996 */  iRegPNoSp_rule,
  // last instruction
  0 // no trailing comma
};

const        int   leftOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  0,
  /*    9 */  0,
  /*   10 */  0,
  /*   11 */  0,
  /*   12 */  0,
  /*   13 */  0,
  /*   14 */  0,
  /*   15 */  0,
  /*   16 */  0,
  /*   17 */  0,
  /*   18 */  0,
  /*   19 */  0,
  /*   20 */  0,
  /*   21 */  0,
  /*   22 */  0,
  /*   23 */  0,
  /*   24 */  0,
  /*   25 */  0,
  /*   26 */  0,
  /*   27 */  0,
  /*   28 */  0,
  /*   29 */  0,
  /*   30 */  0,
  /*   31 */  0,
  /*   32 */  0,
  /*   33 */  0,
  /*   34 */  0,
  /*   35 */  0,
  /*   36 */  0,
  /*   37 */  0,
  /*   38 */  0,
  /*   39 */  0,
  /*   40 */  0,
  /*   41 */  0,
  /*   42 */  0,
  /*   43 */  0,
  /*   44 */  0,
  /*   45 */  0,
  /*   46 */  0,
  /*   47 */  0,
  /*   48 */  0,
  /*   49 */  0,
  /*   50 */  0,
  /*   51 */  0,
  /*   52 */  0,
  /*   53 */  0,
  /*   54 */  0,
  /*   55 */  0,
  /*   56 */  0,
  /*   57 */  0,
  /*   58 */  0,
  /*   59 */  0,
  /*   60 */  0,
  /*   61 */  0,
  /*   62 */  0,
  /*   63 */  0,
  /*   64 */  0,
  /*   65 */  0,
  /*   66 */  0,
  /*   67 */  0,
  /*   68 */  0,
  /*   69 */  0,
  /*   70 */  0,
  /*   71 */  0,
  /*   72 */  0,
  /*   73 */  0,
  /*   74 */  0,
  /*   75 */  0,
  /*   76 */  0,
  /*   77 */  0,
  /*   78 */  0,
  /*   79 */  0,
  /*   80 */  0,
  /*   81 */  0,
  /*   82 */  0,
  /*   83 */  0,
  /*   84 */  0,
  /*   85 */  0,
  /*   86 */  0,
  /*   87 */  0,
  /*   88 */  0,
  /*   89 */  0,
  /*   90 */  0,
  /*   91 */  0,
  /*   92 */  0,
  /*   93 */  0,
  /*   94 */  0,
  /*   95 */  0,
  /*   96 */  0,
  /*   97 */  0,
  /*   98 */  0,
  /*   99 */  0,
  /*  100 */  0,
  /*  101 */  0,
  /*  102 */  0,
  /*  103 */  0,
  /*  104 */  0,
  /*  105 */  0,
  /*  106 */  0,
  /*  107 */  0,
  /*  108 */  0,
  /*  109 */  0,
  /*  110 */  0,
  /*  111 */  0,
  /*  112 */  0,
  /*  113 */  0,
  /*  114 */  0,
  /*  115 */  0,
  /*  116 */  0,
  /*  117 */  0,
  /*  118 */  0,
  /*  119 */  0,
  /*  120 */  0,
  /*  121 */  0,
  /*  122 */  0,
  /*  123 */  0,
  /*  124 */  0,
  /*  125 */  0,
  /*  126 */  0,
  /*  127 */  0,
  /*  128 */  0,
  /*  129 */  0,
  /*  130 */  0,
  /*  131 */  0,
  /*  132 */  0,
  /*  133 */  0,
  /*  134 */  0,
  /*  135 */  0,
  /*  136 */  0,
  /*  137 */  0,
  /*  138 */  0,
  /*  139 */  0,
  /*  140 */  0,
  /*  141 */  0,
  /*  142 */  0,
  /*  143 */  0,
  /*  144 */  0,
  /*  145 */  0,
  /*  146 */  0,
  /*  147 */  0,
  /*  148 */  0,
  /*  149 */  0,
  /*  150 */  0,
  /*  151 */  0,
  /*  152 */  0,
  /*  153 */  0,
  /*  154 */  0,
  /*  155 */  0,
  /*  156 */  0,
  /*  157 */  0,
  /*  158 */  0,
  /*  159 */  iRegP_rule,
  /*  160 */  iRegP_rule,
  /*  161 */  iRegP_rule,
  /*  162 */  iRegP_rule,
  /*  163 */  iRegP_rule,
  /*  164 */  iRegP_rule,
  /*  165 */  iRegP_rule,
  /*  166 */  iRegP_rule,
  /*  167 */  iRegP_rule,
  /*  168 */  iRegP_rule,
  /*  169 */  iRegP_rule,
  /*  170 */  iRegP_rule,
  /*  171 */  iRegP_rule,
  /*  172 */  iRegP_rule,
  /*  173 */  iRegP_rule,
  /*  174 */  iRegP_rule,
  /*  175 */  iRegN_rule,
  /*  176 */  _DecodeN_iRegN__rule,
  /*  177 */  _DecodeN_iRegN__rule,
  /*  178 */  _DecodeN_iRegN__rule,
  /*  179 */  _DecodeN_iRegN__rule,
  /*  180 */  _DecodeN_iRegN__rule,
  /*  181 */  _DecodeN_iRegN__rule,
  /*  182 */  thread_RegP_rule,
  /*  183 */  0,
  /*  184 */  0,
  /*  185 */  0,
  /*  186 */  0,
  /*  187 */  0,
  /*  188 */  0,
  /*  189 */  0,
  /*  190 */  0,
  /*  191 */  0,
  /*  192 */  0,
  /*  193 */  iRegL_rule,
  /*  194 */  0,
  /*  195 */  0,
  /*  196 */  iRegP_rule,
  /*  197 */  iRegP_rule,
  // last operand
  /*  198 */  0,
  /*  199 */  0,
  /*  200 */  0,
  /*  201 */  0,
  /*  202 */  0,
  /*  203 */  0,
  /*  204 */  0,
  /*  205 */  0,
  /*  206 */  0,
  /*  207 */  0,
  /*  208 */  0,
  // last operand class
  /*  209 */  iRegI_rule,
  /*  210 */  _ConvI2L_iRegI__rule,
  /*  211 */  iRegL_rule,
  /*  212 */  iRegN_rule,
  /*  213 */  memory1_rule,
  /*  214 */  memory1_rule,
  /*  215 */  memory2_rule,
  /*  216 */  memory2_rule,
  /*  217 */  memory4_rule,
  /*  218 */  _LoadI_memory4__rule,
  /*  219 */  indirect_rule,
  /*  220 */  indirect_rule,
  /*  221 */  indirect_rule,
  /*  222 */  indirect_rule,
  /*  223 */  indirect_rule,
  /*  224 */  _LoadI_indirect__rule,
  /*  225 */  memory8_rule,
  /*  226 */  iRegP_rule,
  /*  227 */  _DecodeN_iRegN__rule,
  /*  228 */  iRegP_rule,
  /*  229 */  iRegLNoSp_rule,
  /*  230 */  iRegINoSp_rule,
  /*  231 */  iRegNNoSp_rule,
  /*  232 */  iRegI_rule,
  /*  233 */  iRegL_rule,
  /*  234 */  iRegN_rule,
  /*  235 */  cmpOp_rule,
  /*  236 */  iRegIorL2I_rule,
  /*  237 */  cmpOpU_rule,
  /*  238 */  immI0_rule,
  /*  239 */  iRegIorL2I_rule,
  /*  240 */  immI_1_rule,
  /*  241 */  iRegL_rule,
  /*  242 */  immL0_rule,
  /*  243 */  iRegP_rule,
  /*  244 */  immP0_rule,
  /*  245 */  iRegN_rule,
  /*  246 */  immN0_rule,
  /*  247 */  vRegF_rule,
  /*  248 */  vRegD_rule,
  /*  249 */  iRegL_rule,
  /*  250 */  iRegIorL2I_rule,
  /*  251 */  _ConvI2L_iRegIorL2I__rule,
  /*  252 */  iRegIorL2I_rule,
  /*  253 */  immI0_rule,
  /*  254 */  iRegL_rule,
  /*  255 */  immL0_rule,
  /*  256 */  _ConvI2L_iRegIorL2I__rule,
  /*  257 */  immL0_rule,
  /*  258 */  iRegIorL2I_rule,
  /*  259 */  iRegL_rule,
  /*  260 */  iRegIorL2I_rule,
  /*  261 */  iRegL_rule,
  /*  262 */  iRegIorL2I_rule,
  /*  263 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  264 */  iRegL_rule,
  /*  265 */  _URShiftL_iRegL_immI_rule,
  /*  266 */  iRegIorL2I_rule,
  /*  267 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  268 */  iRegL_rule,
  /*  269 */  _RShiftL_iRegL_immI_rule,
  /*  270 */  iRegIorL2I_rule,
  /*  271 */  _RotateRight_iRegIorL2I_immI_rule,
  /*  272 */  iRegL_rule,
  /*  273 */  _RotateRight_iRegL_immI_rule,
  /*  274 */  iRegIorL2I_rule,
  /*  275 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  276 */  iRegL_rule,
  /*  277 */  _LShiftL_iRegL_immI_rule,
  /*  278 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  279 */  iRegIorL2I_rule,
  /*  280 */  _URShiftL_iRegL_immI_rule,
  /*  281 */  iRegL_rule,
  /*  282 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  283 */  iRegIorL2I_rule,
  /*  284 */  _RShiftL_iRegL_immI_rule,
  /*  285 */  iRegL_rule,
  /*  286 */  _RotateRight_iRegIorL2I_immI_rule,
  /*  287 */  iRegIorL2I_rule,
  /*  288 */  _RotateRight_iRegL_immI_rule,
  /*  289 */  iRegL_rule,
  /*  290 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  291 */  iRegIorL2I_rule,
  /*  292 */  _LShiftL_iRegL_immI_rule,
  /*  293 */  iRegL_rule,
  /*  294 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  295 */  iRegIorL2I_rule,
  /*  296 */  iRegL_rule,
  /*  297 */  _AndI_iRegIorL2I_immI_bitmask_rule,
  /*  298 */  iRegL_rule,
  /*  299 */  _AndL_iRegL_immL_positive_bitmaskI_rule,
  /*  300 */  _AndI_iRegIorL2I_immI_bitmask_rule,
  /*  301 */  _AndL_iRegL_immL_positive_bitmaskI_rule,
  /*  302 */  iRegI_rule,
  /*  303 */  iRegIorL2I_rule,
  /*  304 */  _LShiftI_iRegIorL2I_immI_16_rule,
  /*  305 */  iRegIorL2I_rule,
  /*  306 */  _LShiftI_iRegIorL2I_immI_24_rule,
  /*  307 */  _LShiftI_iRegIorL2I_immI_24_rule,
  /*  308 */  iRegL_rule,
  /*  309 */  _LShiftL_iRegL_immI_48_rule,
  /*  310 */  iRegL_rule,
  /*  311 */  _LShiftL_iRegL_immI_32_rule,
  /*  312 */  iRegL_rule,
  /*  313 */  _LShiftL_iRegL_immI_56_rule,
  /*  314 */  _LShiftL_iRegL_immI_56_rule,
  /*  315 */  iRegIorL2I_rule,
  /*  316 */  iRegIorL2I_rule,
  /*  317 */  iRegL_rule,
  /*  318 */  iRegL_rule,
  /*  319 */  iRegL_rule,
  /*  320 */  _RShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /*  321 */  _RShiftL__LShiftL_iRegL_immI_48_immI_48_rule,
  /*  322 */  _RShiftL__LShiftL_iRegL_immI_32_immI_32_rule,
  /*  323 */  _RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /*  324 */  _RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_rule,
  /*  325 */  _ConvI2L_iRegIorL2I__rule,
  /*  326 */  _AndL_iRegL_immL_255_rule,
  /*  327 */  _AndL_iRegL_immL_65535_rule,
  /*  328 */  _AndL_iRegL_immL_4294967295_rule,
  /*  329 */  _AndI_iRegIorL2I_immI_255_rule,
  /*  330 */  _AndI_iRegIorL2I_immI_65535_rule,
  /*  331 */  vRegF_rule,
  /*  332 */  _NegF_vRegF__rule,
  /*  333 */  vRegF_rule,
  /*  334 */  vRegD_rule,
  /*  335 */  _NegD_vRegD__rule,
  /*  336 */  vRegD_rule,
  /*  337 */  vRegF_rule,
  /*  338 */  vRegD_rule,
  /*  339 */  iRegIorL2I_rule,
  /*  340 */  iRegL_rule,
  /*  341 */  iRegIorL2I_rule,
  /*  342 */  iRegL_rule,
  /*  343 */  iRegP_rule,
  /*  344 */  iRegN_rule,
  /*  345 */  _DecodeN_iRegN__rule,
  /*  346 */  iRegIorL2I_rule,
  /*  347 */  iRegL_rule,
  /*  348 */  iRegL_rule,
  /*  349 */  _AndL_iRegL_immL_rule,
  /*  350 */  iRegIorL2I_rule,
  /*  351 */  _AndI_iRegIorL2I_immI_rule,
  /*  352 */  iRegL_rule,
  /*  353 */  iRegIorL2I_rule,
  /*  354 */  iRegP_R4_rule,
  /*  355 */  iRegP_R1_rule,
  /*  356 */  iRegP_R3_rule,
  /*  357 */  iRegP_R1_rule,
  /*  358 */  iRegP_R3_rule,
  /*  359 */  iRegP_R3_rule,
  /*  360 */  iRegP_R3_rule,
  /*  361 */  iRegP_R1_rule,
  /*  362 */  iRegP_R1_rule,
  /*  363 */  vecD_rule,
  /*  364 */  vecX_rule,
  /*  365 */  vecX_rule,
  /*  366 */  vecD_rule,
  /*  367 */  vecX_rule,
  /*  368 */  vecX_rule,
  /*  369 */  vecD_rule,
  /*  370 */  vecX_rule,
  /*  371 */  immI_M1_rule,
  /*  372 */  immI_M1_rule,
  /*  373 */  immI_M1_rule,
  /*  374 */  immL_M1_rule,
  /*  375 */  vecD_rule,
  /*  376 */  _ReplicateB_immI_M1__rule,
  /*  377 */  vecD_rule,
  /*  378 */  _ReplicateS_immI_M1__rule,
  /*  379 */  vecD_rule,
  /*  380 */  _ReplicateI_immI_M1__rule,
  /*  381 */  vecX_rule,
  /*  382 */  _ReplicateB_immI_M1__rule,
  /*  383 */  vecX_rule,
  /*  384 */  _ReplicateS_immI_M1__rule,
  /*  385 */  vecX_rule,
  /*  386 */  _ReplicateI_immI_M1__rule,
  /*  387 */  vecX_rule,
  /*  388 */  _ReplicateL_immL_M1__rule,
  /*  389 */  vecD_rule,
  /*  390 */  vecX_rule,
  /*  391 */  vecX_rule,
  /*  392 */  vecD_rule,
  /*  393 */  vecX_rule,
  /*  394 */  vecD_rule,
  /*  395 */  vecX_rule,
  /*  396 */  vecD_rule,
  /*  397 */  _NegVF_vecD__rule,
  /*  398 */  vecD_rule,
  /*  399 */  vecX_rule,
  /*  400 */  _NegVF_vecX__rule,
  /*  401 */  vecX_rule,
  /*  402 */  vecX_rule,
  /*  403 */  _NegVD_vecX__rule,
  /*  404 */  vecX_rule,
  /*  405 */  immI_rule,
  /*  406 */  immI_rule,
  /*  407 */  vecD_rule,
  /*  408 */  vecX_rule,
  /*  409 */  vecD_rule,
  /*  410 */  vecX_rule,
  /*  411 */  vecD_rule,
  /*  412 */  vecX_rule,
  /*  413 */  vecX_rule,
  /*  414 */  vecD_rule,
  /*  415 */  vecX_rule,
  /*  416 */  vecD_rule,
  /*  417 */  vecX_rule,
  /*  418 */  vecD_rule,
  /*  419 */  vecX_rule,
  /*  420 */  vecX_rule,
  /*  421 */  vReg_rule,
  /*  422 */  immI_M1_rule,
  /*  423 */  pRegGov_rule,
  /*  424 */  immL_M1_rule,
  /*  425 */  pRegGov_rule,
  /*  426 */  vReg_rule,
  /*  427 */  immBAddSubV_rule,
  /*  428 */  immIAddSubV_rule,
  /*  429 */  immIAddSubV_rule,
  /*  430 */  immLAddSubV_rule,
  /*  431 */  immBLog_rule,
  /*  432 */  immSLog_rule,
  /*  433 */  immILog_rule,
  /*  434 */  immLLog_rule,
  /*  435 */  vReg_rule,
  /*  436 */  _ReplicateB_immI_M1__rule,
  /*  437 */  vReg_rule,
  /*  438 */  _ReplicateS_immI_M1__rule,
  /*  439 */  vReg_rule,
  /*  440 */  _ReplicateI_immI_M1__rule,
  /*  441 */  vReg_rule,
  /*  442 */  _ReplicateL_immL_M1__rule,
  /*  443 */  vReg_rule,
  /*  444 */  _NegVF_vReg__rule,
  /*  445 */  vReg_rule,
  /*  446 */  vReg_rule,
  /*  447 */  _NegVD_vReg__rule,
  /*  448 */  vReg_rule,
  /*  449 */  vReg_rule,
  /*  450 */  vReg_rule,
  /*  451 */  vReg_rule,
  /*  452 */  vReg_rule,
  /*  453 */  immI_rule,
  /*  454 */  indirect_rule,
  /*  455 */  pRegGov_rule,
  /*  456 */  iRegIorL2I_rule,
  /*  457 */  iRegL_rule,
  /*  458 */  vRegF_rule,
  /*  459 */  vRegD_rule,
  /*  460 */  vReg_rule,
  /*  461 */  vReg_rule,
  /*  462 */  vReg_rule,
  /*  463 */  vReg_rule,
  /*  464 */  vReg_rule,
  /*  465 */  vReg_rule,
  /*  466 */  vReg_rule,
  // last internally defined operand
  /*  467 */  immI_rule,
  /*  468 */  immL_rule,
  /*  469 */  immP_rule,
  /*  470 */  immP0_rule,
  /*  471 */  immP_1_rule,
  /*  472 */  immByteMapBase_rule,
  /*  473 */  immN_rule,
  /*  474 */  immN0_rule,
  /*  475 */  immNKlass_rule,
  /*  476 */  immFPacked_rule,
  /*  477 */  immF_rule,
  /*  478 */  immDPacked_rule,
  /*  479 */  immD_rule,
  /*  480 */  iRegIorL2I_rule,
  /*  481 */  iRegL_rule,
  /*  482 */  iRegIorL2I_rule,
  /*  483 */  iRegL_rule,
  /*  484 */  iRegL_rule,
  /*  485 */  iRegP_rule,
  /*  486 */  iRegPNoSp_rule,
  /*  487 */  iRegPNoSp_rule,
  /*  488 */  iRegI_rule,
  /*  489 */  iRegL_rule,
  /*  490 */  vRegF_rule,
  /*  491 */  vRegD_rule,
  /*  492 */  vecD_rule,
  /*  493 */  vecX_rule,
  /*  494 */  vReg_rule,
  /*  495 */  pRegGov_rule,
  /*  496 */  memory8_rule,
  /*  497 */  indirect_rule,
  /*  498 */  indirect_rule,
  /*  499 */  vRegF_rule,
  /*  500 */  vRegD_rule,
  /*  501 */  vRegF_rule,
  /*  502 */  vRegD_rule,
  /*  503 */  stackSlotF_rule,
  /*  504 */  stackSlotI_rule,
  /*  505 */  stackSlotD_rule,
  /*  506 */  stackSlotL_rule,
  /*  507 */  vRegF_rule,
  /*  508 */  iRegI_rule,
  /*  509 */  vRegD_rule,
  /*  510 */  iRegL_rule,
  /*  511 */  iRegIorL2I_rule,
  /*  512 */  iRegIorL2I_rule,
  /*  513 */  iRegL_rule,
  /*  514 */  iRegL_rule,
  /*  515 */  iRegIorL2I_rule,
  /*  516 */  iRegIorL2I_rule,
  /*  517 */  iRegL_rule,
  /*  518 */  iRegL_rule,
  /*  519 */  immI0_rule,
  /*  520 */  immI0_rule,
  /*  521 */  iRegIorL2I_rule,
  /*  522 */  iRegL_rule,
  /*  523 */  iRegI_rule,
  /*  524 */  iRegI_rule,
  /*  525 */  iRegI_rule,
  /*  526 */  iRegI_rule,
  /*  527 */  iRegI_rule,
  /*  528 */  iRegI_rule,
  /*  529 */  iRegI_rule,
  /*  530 */  iRegI_rule,
  /*  531 */  iRegL_rule,
  /*  532 */  iRegL_rule,
  /*  533 */  iRegL_rule,
  /*  534 */  iRegL_rule,
  /*  535 */  iRegL_rule,
  /*  536 */  iRegL_rule,
  /*  537 */  iRegL_rule,
  /*  538 */  iRegL_rule,
  /*  539 */  iRegP_rule,
  /*  540 */  iRegN_rule,
  /*  541 */  iRegP_rule,
  /*  542 */  iRegN_rule,
  /*  543 */  vRegF_rule,
  /*  544 */  vRegF_rule,
  /*  545 */  vRegD_rule,
  /*  546 */  vRegD_rule,
  /*  547 */  _AndL_iRegL_immL_rule,
  /*  548 */  _AndI_iRegIorL2I_immI_rule,
  /*  549 */  _AndL_iRegL_iRegL_rule,
  /*  550 */  _AndI_iRegIorL2I_iRegIorL2I_rule,
  /*  551 */  iRegP_rule,
  /*  552 */  iRegP_rule,
  /*  553 */  _PartialSubtypeCheck_iRegP_R4_iRegP_R0_rule,
  /*  554 */  0,
  /*  555 */  vecD_rule,
  /*  556 */  vecX_rule,
  /*  557 */  vecD_rule,
  /*  558 */  vecX_rule,
  /*  559 */  vecD_rule,
  /*  560 */  vecX_rule,
  /*  561 */  vecD_rule,
  /*  562 */  vecD_rule,
  /*  563 */  vecD_rule,
  /*  564 */  vecD_rule,
  /*  565 */  vecX_rule,
  /*  566 */  vecD_rule,
  /*  567 */  vecD_rule,
  /*  568 */  vecX_rule,
  /*  569 */  vecD_rule,
  /*  570 */  vecX_rule,
  /*  571 */  vecX_rule,
  /*  572 */  vecD_rule,
  /*  573 */  vecX_rule,
  /*  574 */  vecD_rule,
  /*  575 */  vecX_rule,
  /*  576 */  vecX_rule,
  /*  577 */  vecD_rule,
  /*  578 */  vecD_rule,
  /*  579 */  vecD_rule,
  /*  580 */  vecD_rule,
  /*  581 */  vecD_rule,
  /*  582 */  vecX_rule,
  /*  583 */  vecX_rule,
  /*  584 */  vecX_rule,
  /*  585 */  vecX_rule,
  /*  586 */  vecD_rule,
  /*  587 */  vecX_rule,
  /*  588 */  vecD_rule,
  /*  589 */  vecX_rule,
  /*  590 */  vecD_rule,
  /*  591 */  vecD_rule,
  /*  592 */  vecD_rule,
  /*  593 */  vecD_rule,
  /*  594 */  vecD_rule,
  /*  595 */  vecD_rule,
  /*  596 */  vecX_rule,
  /*  597 */  immI0_rule,
  /*  598 */  immI0_rule,
  /*  599 */  vecD_rule,
  /*  600 */  vecX_rule,
  /*  601 */  vecD_rule,
  /*  602 */  vecD_rule,
  /*  603 */  vecD_rule,
  /*  604 */  vecD_rule,
  /*  605 */  vecX_rule,
  /*  606 */  vecD_rule,
  /*  607 */  vecX_rule,
  /*  608 */  vecD_rule,
  /*  609 */  vecX_rule,
  /*  610 */  vecX_rule,
  /*  611 */  vecD_rule,
  /*  612 */  vecX_rule,
  /*  613 */  vecX_rule,
  /*  614 */  vecD_rule,
  /*  615 */  vecX_rule,
  /*  616 */  vecX_rule,
  /*  617 */  vecD_rule,
  /*  618 */  vecX_rule,
  /*  619 */  vecX_rule,
  /*  620 */  iRegIorL2I_rule,
  /*  621 */  iRegIorL2I_rule,
  /*  622 */  iRegIorL2I_rule,
  /*  623 */  iRegIorL2I_rule,
  /*  624 */  vecX_rule,
  /*  625 */  vecD_rule,
  /*  626 */  vecD_rule,
  /*  627 */  vecX_rule,
  /*  628 */  vecD_rule,
  /*  629 */  vecX_rule,
  /*  630 */  vecD_rule,
  /*  631 */  vecX_rule,
  /*  632 */  vReg_rule,
  /*  633 */  pRegGov_rule,
  /*  634 */  vReg_rule,
  /*  635 */  vReg_rule,
  /*  636 */  vReg_rule,
  /*  637 */  vReg_rule,
  /*  638 */  vReg_rule,
  /*  639 */  vReg_rule,
  /*  640 */  vReg_rule,
  /*  641 */  vReg_rule,
  /*  642 */  vReg_rule,
  /*  643 */  iRegIorL2I_rule,
  /*  644 */  iRegIorL2I_rule,
  /*  645 */  iRegIorL2I_rule,
  /*  646 */  iRegIorL2I_rule,
  /*  647 */  iRegIorL2I_rule,
  /*  648 */  iRegIorL2I_rule,
  /*  649 */  iRegIorL2I_rule,
  /*  650 */  iRegIorL2I_rule,
  /*  651 */  vReg_rule,
  /*  652 */  vReg_rule,
  /*  653 */  pRegGov_rule,
  /*  654 */  pReg_rule,
  /*  655 */  pReg_rule,
  /*  656 */  vReg_rule,
  /*  657 */  vReg_rule,
  /*  658 */  vReg_rule,
  /*  659 */  vReg_rule,
  /*  660 */  vReg_rule,
  /*  661 */  vReg_rule,
  /*  662 */  vReg_rule,
  /*  663 */  vReg_rule,
  /*  664 */  vReg_rule,
  /*  665 */  vReg_rule,
  /*  666 */  vReg_rule,
  /*  667 */  immI0_rule,
  /*  668 */  pReg_rule,
  /*  669 */  memory1_rule,
  /*  670 */  _LoadB_memory1__rule,
  /*  671 */  memory1_rule,
  /*  672 */  _LoadUB_memory1__rule,
  /*  673 */  memory2_rule,
  /*  674 */  _LoadS_memory2__rule,
  /*  675 */  memory2_rule,
  /*  676 */  _LoadUS_memory2__rule,
  /*  677 */  memory4_rule,
  /*  678 */  _LoadI_memory4__rule,
  /*  679 */  _ConvI2L__LoadI_memory4___rule,
  /*  680 */  memory8_rule,
  /*  681 */  memory4_rule,
  /*  682 */  memory8_rule,
  /*  683 */  memory4_rule,
  /*  684 */  memory8_rule,
  /*  685 */  memory4_rule,
  /*  686 */  memory4_rule,
  /*  687 */  memory8_rule,
  /*  688 */  memory1_rule,
  /*  689 */  memory1_rule,
  /*  690 */  memory1_rule,
  /*  691 */  memory1_rule,
  /*  692 */  memory2_rule,
  /*  693 */  memory2_rule,
  /*  694 */  memory4_rule,
  /*  695 */  memory4_rule,
  /*  696 */  memory8_rule,
  /*  697 */  memory8_rule,
  /*  698 */  memory8_rule,
  /*  699 */  memory8_rule,
  /*  700 */  memory4_rule,
  /*  701 */  memory4_rule,
  /*  702 */  memory4_rule,
  /*  703 */  memory8_rule,
  /*  704 */  memory4_rule,
  /*  705 */  memory8_rule,
  /*  706 */  indirect_rule,
  /*  707 */  _LoadB_indirect__rule,
  /*  708 */  indirect_rule,
  /*  709 */  _LoadUB_indirect__rule,
  /*  710 */  indirect_rule,
  /*  711 */  indirect_rule,
  /*  712 */  _LoadUS_indirect__rule,
  /*  713 */  _LoadS_indirect__rule,
  /*  714 */  indirect_rule,
  /*  715 */  _ConvI2L__LoadI_indirect___rule,
  /*  716 */  indirect_rule,
  /*  717 */  indirect_rule,
  /*  718 */  indirect_rule,
  /*  719 */  indirect_rule,
  /*  720 */  indirect_rule,
  /*  721 */  indirect_rule,
  /*  722 */  indirect_rule,
  /*  723 */  indirect_rule,
  /*  724 */  indirect_rule,
  /*  725 */  indirect_rule,
  /*  726 */  indirect_rule,
  /*  727 */  indirect_rule,
  /*  728 */  indirect_rule,
  /*  729 */  indirect_rule,
  /*  730 */  0,
  /*  731 */  0,
  /*  732 */  iRegIorL2I_rule,
  /*  733 */  iRegL_rule,
  /*  734 */  iRegIorL2I_rule,
  /*  735 */  iRegIorL2I_rule,
  /*  736 */  iRegIorL2I_rule,
  /*  737 */  _LoadI_memory4__rule,
  /*  738 */  iRegL_rule,
  /*  739 */  _LoadL_memory8__rule,
  /*  740 */  0,
  /*  741 */  0,
  /*  742 */  0,
  /*  743 */  0,
  /*  744 */  0,
  /*  745 */  0,
  /*  746 */  0,
  /*  747 */  0,
  /*  748 */  0,
  /*  749 */  0,
  /*  750 */  0,
  /*  751 */  0,
  /*  752 */  _CastP2X_iRegP__rule,
  /*  753 */  _CastP2X__DecodeN_iRegN___rule,
  /*  754 */  iRegP_rule,
  /*  755 */  iRegP_rule,
  /*  756 */  iRegN_rule,
  /*  757 */  iRegN_rule,
  /*  758 */  iRegP_rule,
  /*  759 */  iRegN_rule,
  /*  760 */  indirect_rule,
  /*  761 */  indirect_rule,
  /*  762 */  indirect_rule,
  /*  763 */  indirect_rule,
  /*  764 */  indirect_rule,
  /*  765 */  indirect_rule,
  /*  766 */  indirect_rule,
  /*  767 */  indirect_rule,
  /*  768 */  indirect_rule,
  /*  769 */  indirect_rule,
  /*  770 */  indirect_rule,
  /*  771 */  indirect_rule,
  /*  772 */  indirect_rule,
  /*  773 */  indirect_rule,
  /*  774 */  indirect_rule,
  /*  775 */  indirect_rule,
  /*  776 */  indirect_rule,
  /*  777 */  indirect_rule,
  /*  778 */  indirect_rule,
  /*  779 */  indirect_rule,
  /*  780 */  indirect_rule,
  /*  781 */  indirect_rule,
  /*  782 */  indirect_rule,
  /*  783 */  indirect_rule,
  /*  784 */  indirect_rule,
  /*  785 */  indirect_rule,
  /*  786 */  indirect_rule,
  /*  787 */  indirect_rule,
  /*  788 */  indirect_rule,
  /*  789 */  indirect_rule,
  /*  790 */  indirect_rule,
  /*  791 */  indirect_rule,
  /*  792 */  indirect_rule,
  /*  793 */  indirect_rule,
  /*  794 */  indirect_rule,
  /*  795 */  indirect_rule,
  /*  796 */  indirect_rule,
  /*  797 */  indirect_rule,
  /*  798 */  indirect_rule,
  /*  799 */  indirect_rule,
  /*  800 */  indirect_rule,
  /*  801 */  indirect_rule,
  /*  802 */  indirect_rule,
  /*  803 */  indirect_rule,
  /*  804 */  indirect_rule,
  /*  805 */  indirect_rule,
  /*  806 */  indirect_rule,
  /*  807 */  indirect_rule,
  /*  808 */  indirect_rule,
  /*  809 */  indirect_rule,
  /*  810 */  indirect_rule,
  /*  811 */  indirect_rule,
  /*  812 */  indirect_rule,
  /*  813 */  indirect_rule,
  /*  814 */  indirect_rule,
  /*  815 */  indirect_rule,
  /*  816 */  indirect_rule,
  /*  817 */  indirect_rule,
  /*  818 */  indirect_rule,
  /*  819 */  indirect_rule,
  /*  820 */  indirect_rule,
  /*  821 */  iRegL_rule,
  /*  822 */  iRegL_rule,
  /*  823 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  824 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  825 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  826 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  827 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  828 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  829 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  830 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  831 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  832 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  833 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  834 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  835 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  836 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  837 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  838 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  839 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  840 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  841 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  842 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  843 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  844 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  845 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  846 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  847 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  848 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  849 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  850 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  851 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  852 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  853 */  iRegIorL2I_rule,
  /*  854 */  iRegIorL2I_rule,
  /*  855 */  _ConvL2I_iRegL__rule,
  /*  856 */  iRegP_rule,
  /*  857 */  iRegP_rule,
  /*  858 */  iRegP_rule,
  /*  859 */  iRegP_rule,
  /*  860 */  _ConvI2L_iRegIorL2I__rule,
  /*  861 */  iRegP_rule,
  /*  862 */  iRegL_rule,
  /*  863 */  iRegL_rule,
  /*  864 */  iRegIorL2I_rule,
  /*  865 */  iRegIorL2I_rule,
  /*  866 */  iRegL_rule,
  /*  867 */  iRegL_rule,
  /*  868 */  immI0_rule,
  /*  869 */  immL0_rule,
  /*  870 */  iRegIorL2I_rule,
  /*  871 */  _ConvI2L_iRegIorL2I__rule,
  /*  872 */  _ConvI2L_iRegIorL2I__rule,
  /*  873 */  iRegL_rule,
  /*  874 */  iRegL_rule,
  /*  875 */  iRegIorL2I_rule,
  /*  876 */  _MulI_iRegIorL2I_iRegIorL2I_rule,
  /*  877 */  iRegIorL2I_rule,
  /*  878 */  _SubI_immI0_iRegIorL2I_rule,
  /*  879 */  iRegIorL2I_rule,
  /*  880 */  iRegL_rule,
  /*  881 */  _MulL_iRegL_iRegL_rule,
  /*  882 */  iRegL_rule,
  /*  883 */  _SubL_immL0_iRegL_rule,
  /*  884 */  iRegL_rule,
  /*  885 */  iRegLNoSp_rule,
  /*  886 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  887 */  iRegLNoSp_rule,
  /*  888 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  889 */  iRegLNoSp_rule,
  /*  890 */  iRegLNoSp_rule,
  /*  891 */  _SubL_immL0__ConvI2L_iRegIorL2I__rule,
  /*  892 */  _ConvI2L_iRegIorL2I__rule,
  /*  893 */  _Binary_iRegIorL2I_iRegIorL2I_rule,
  /*  894 */  iRegIorL2I_rule,
  /*  895 */  iRegL_rule,
  /*  896 */  iRegIorL2I_rule,
  /*  897 */  iRegL_rule,
  /*  898 */  iRegIorL2I_rule,
  /*  899 */  iRegIorL2I_rule,
  /*  900 */  iRegIorL2I_rule,
  /*  901 */  iRegIorL2I_rule,
  /*  902 */  iRegIorL2I_rule,
  /*  903 */  iRegIorL2I_rule,
  /*  904 */  iRegL_rule,
  /*  905 */  iRegL_rule,
  /*  906 */  iRegL_rule,
  /*  907 */  iRegL_rule,
  /*  908 */  _CastP2X_iRegP__rule,
  /*  909 */  iRegL_rule,
  /*  910 */  iRegL_rule,
  /*  911 */  iRegL_rule,
  /*  912 */  iRegIorL2I_rule,
  /*  913 */  iRegIorL2I_rule,
  /*  914 */  _XorI_iRegIorL2I_immI_M1_rule,
  /*  915 */  iRegL_rule,
  /*  916 */  _XorL_iRegL_immL_M1_rule,
  /*  917 */  iRegIorL2I_rule,
  /*  918 */  _XorI_iRegIorL2I_immI_M1_rule,
  /*  919 */  iRegL_rule,
  /*  920 */  _XorL_iRegL_immL_M1_rule,
  /*  921 */  immI_M1_rule,
  /*  922 */  _XorI_iRegIorL2I_iRegIorL2I_rule,
  /*  923 */  immL_M1_rule,
  /*  924 */  _XorL_iRegL_iRegL_rule,
  /*  925 */  iRegIorL2I_rule,
  /*  926 */  _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  927 */  iRegL_rule,
  /*  928 */  _XorL__URShiftL_iRegL_immI_immL_M1_rule,
  /*  929 */  iRegIorL2I_rule,
  /*  930 */  _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  931 */  iRegL_rule,
  /*  932 */  _XorL__RShiftL_iRegL_immI_immL_M1_rule,
  /*  933 */  iRegIorL2I_rule,
  /*  934 */  _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule,
  /*  935 */  iRegL_rule,
  /*  936 */  _XorL__RotateRight_iRegL_immI_immL_M1_rule,
  /*  937 */  iRegIorL2I_rule,
  /*  938 */  _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  939 */  iRegL_rule,
  /*  940 */  _XorL__LShiftL_iRegL_immI_immL_M1_rule,
  /*  941 */  immI_M1_rule,
  /*  942 */  _XorI__URShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  943 */  immI_M1_rule,
  /*  944 */  _XorI_iRegIorL2I__URShiftI_iRegIorL2I_immI_rule,
  /*  945 */  immL_M1_rule,
  /*  946 */  _XorL__URShiftL_iRegL_immI_iRegL_rule,
  /*  947 */  immL_M1_rule,
  /*  948 */  _XorL_iRegL__URShiftL_iRegL_immI_rule,
  /*  949 */  immI_M1_rule,
  /*  950 */  _XorI__RShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  951 */  immI_M1_rule,
  /*  952 */  _XorI_iRegIorL2I__RShiftI_iRegIorL2I_immI_rule,
  /*  953 */  immL_M1_rule,
  /*  954 */  _XorL__RShiftL_iRegL_immI_iRegL_rule,
  /*  955 */  immL_M1_rule,
  /*  956 */  _XorL_iRegL__RShiftL_iRegL_immI_rule,
  /*  957 */  immI_M1_rule,
  /*  958 */  _XorI__RotateRight_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  959 */  immI_M1_rule,
  /*  960 */  _XorI_iRegIorL2I__RotateRight_iRegIorL2I_immI_rule,
  /*  961 */  immL_M1_rule,
  /*  962 */  _XorL__RotateRight_iRegL_immI_iRegL_rule,
  /*  963 */  immL_M1_rule,
  /*  964 */  _XorL_iRegL__RotateRight_iRegL_immI_rule,
  /*  965 */  immI_M1_rule,
  /*  966 */  _XorI__LShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  967 */  immI_M1_rule,
  /*  968 */  _XorI_iRegIorL2I__LShiftI_iRegIorL2I_immI_rule,
  /*  969 */  immL_M1_rule,
  /*  970 */  _XorL__LShiftL_iRegL_immI_iRegL_rule,
  /*  971 */  immL_M1_rule,
  /*  972 */  _XorL_iRegL__LShiftL_iRegL_immI_rule,
  /*  973 */  iRegIorL2I_rule,
  /*  974 */  _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  975 */  iRegL_rule,
  /*  976 */  _XorL__URShiftL_iRegL_immI_immL_M1_rule,
  /*  977 */  iRegIorL2I_rule,
  /*  978 */  _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  979 */  iRegL_rule,
  /*  980 */  _XorL__RShiftL_iRegL_immI_immL_M1_rule,
  /*  981 */  iRegIorL2I_rule,
  /*  982 */  _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule,
  /*  983 */  iRegL_rule,
  /*  984 */  _XorL__RotateRight_iRegL_immI_immL_M1_rule,
  /*  985 */  iRegIorL2I_rule,
  /*  986 */  _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  987 */  iRegL_rule,
  /*  988 */  _XorL__LShiftL_iRegL_immI_immL_M1_rule,
  /*  989 */  iRegIorL2I_rule,
  /*  990 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  991 */  iRegL_rule,
  /*  992 */  _URShiftL_iRegL_immI_rule,
  /*  993 */  iRegIorL2I_rule,
  /*  994 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  995 */  iRegL_rule,
  /*  996 */  _RShiftL_iRegL_immI_rule,
  /*  997 */  iRegIorL2I_rule,
  /*  998 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  999 */  iRegL_rule,
  /* 1000 */  _LShiftL_iRegL_immI_rule,
  /* 1001 */  iRegIorL2I_rule,
  /* 1002 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1003 */  iRegL_rule,
  /* 1004 */  _RotateRight_iRegL_immI_rule,
  /* 1005 */  iRegIorL2I_rule,
  /* 1006 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1007 */  iRegL_rule,
  /* 1008 */  _URShiftL_iRegL_immI_rule,
  /* 1009 */  iRegIorL2I_rule,
  /* 1010 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1011 */  iRegL_rule,
  /* 1012 */  _RShiftL_iRegL_immI_rule,
  /* 1013 */  iRegIorL2I_rule,
  /* 1014 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1015 */  iRegL_rule,
  /* 1016 */  _LShiftL_iRegL_immI_rule,
  /* 1017 */  iRegIorL2I_rule,
  /* 1018 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1019 */  iRegL_rule,
  /* 1020 */  _RotateRight_iRegL_immI_rule,
  /* 1021 */  iRegIorL2I_rule,
  /* 1022 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1023 */  iRegL_rule,
  /* 1024 */  _URShiftL_iRegL_immI_rule,
  /* 1025 */  iRegIorL2I_rule,
  /* 1026 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1027 */  iRegL_rule,
  /* 1028 */  _RShiftL_iRegL_immI_rule,
  /* 1029 */  iRegIorL2I_rule,
  /* 1030 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1031 */  iRegL_rule,
  /* 1032 */  _LShiftL_iRegL_immI_rule,
  /* 1033 */  iRegIorL2I_rule,
  /* 1034 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1035 */  iRegL_rule,
  /* 1036 */  _RotateRight_iRegL_immI_rule,
  /* 1037 */  iRegIorL2I_rule,
  /* 1038 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1039 */  iRegL_rule,
  /* 1040 */  _URShiftL_iRegL_immI_rule,
  /* 1041 */  iRegIorL2I_rule,
  /* 1042 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1043 */  iRegL_rule,
  /* 1044 */  _RShiftL_iRegL_immI_rule,
  /* 1045 */  iRegIorL2I_rule,
  /* 1046 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1047 */  iRegL_rule,
  /* 1048 */  _LShiftL_iRegL_immI_rule,
  /* 1049 */  iRegIorL2I_rule,
  /* 1050 */  iRegL_rule,
  /* 1051 */  iRegIorL2I_rule,
  /* 1052 */  iRegL_rule,
  /* 1053 */  iRegIorL2I_rule,
  /* 1054 */  iRegL_rule,
  /* 1055 */  _LShiftL_iRegL_immI_rule,
  /* 1056 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1057 */  _LShiftL_iRegL_immI_rule,
  /* 1058 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1059 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1060 */  _URShiftL_iRegL_immI_rule,
  /* 1061 */  _AndI__URShiftI_iRegIorL2I_immI_immI_bitmask_rule,
  /* 1062 */  _AndI_iRegIorL2I_immI_bitmask_rule,
  /* 1063 */  _AndL_iRegL_immL_bitmask_rule,
  /* 1064 */  _LShiftI__AndI_iRegIorL2I_immI_bitmask_immI_rule,
  /* 1065 */  _LShiftL__AndL_iRegL_immL_positive_bitmaskI_immI_rule,
  /* 1066 */  _ConvI2L__AndI_iRegIorL2I_immI_bitmask__rule,
  /* 1067 */  _ConvL2I__AndL_iRegL_immL_positive_bitmaskI__rule,
  /* 1068 */  _AndI_iRegI_immI_bitmask_rule,
  /* 1069 */  _LShiftL_iRegL_immI_rule,
  /* 1070 */  _URShiftL_iRegL_immI_rule,
  /* 1071 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1072 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1073 */  _LShiftL_iRegL_immI_rule,
  /* 1074 */  _URShiftL_iRegL_immI_rule,
  /* 1075 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1076 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1077 */  iRegI_rule,
  /* 1078 */  iRegL_rule,
  /* 1079 */  iRegI_rule,
  /* 1080 */  iRegL_rule,
  /* 1081 */  iRegI_rule,
  /* 1082 */  iRegL_rule,
  /* 1083 */  iRegL_rule,
  /* 1084 */  _ConvI2L_iRegIorL2I__rule,
  /* 1085 */  iRegL_rule,
  /* 1086 */  iRegIorL2I_rule,
  /* 1087 */  _RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_rule,
  /* 1088 */  iRegIorL2I_rule,
  /* 1089 */  _RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /* 1090 */  iRegIorL2I_rule,
  /* 1091 */  _URShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /* 1092 */  iRegL_rule,
  /* 1093 */  _RShiftL__LShiftL_iRegL_immI_48_immI_48_rule,
  /* 1094 */  iRegL_rule,
  /* 1095 */  _RShiftL__LShiftL_iRegL_immI_32_immI_32_rule,
  /* 1096 */  iRegL_rule,
  /* 1097 */  _RShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /* 1098 */  iRegL_rule,
  /* 1099 */  _URShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /* 1100 */  iRegIorL2I_rule,
  /* 1101 */  _AndI_iRegIorL2I_immI_255_rule,
  /* 1102 */  iRegIorL2I_rule,
  /* 1103 */  _AndI_iRegIorL2I_immI_65535_rule,
  /* 1104 */  iRegL_rule,
  /* 1105 */  _AndL_iRegL_immL_255_rule,
  /* 1106 */  iRegL_rule,
  /* 1107 */  _AndL_iRegL_immL_65535_rule,
  /* 1108 */  iRegL_rule,
  /* 1109 */  _AndL_iRegL_immL_4294967295_rule,
  /* 1110 */  iRegIorL2I_rule,
  /* 1111 */  iRegIorL2I_rule,
  /* 1112 */  iRegL_rule,
  /* 1113 */  iRegL_rule,
  /* 1114 */  iRegL_rule,
  /* 1115 */  iRegL_rule,
  /* 1116 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt_rule,
  /* 1117 */  iRegL_rule,
  /* 1118 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt_rule,
  /* 1119 */  iRegL_rule,
  /* 1120 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt_rule,
  /* 1121 */  iRegL_rule,
  /* 1122 */  iRegL_rule,
  /* 1123 */  iRegL_rule,
  /* 1124 */  iRegIorL2I_rule,
  /* 1125 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt_rule,
  /* 1126 */  iRegIorL2I_rule,
  /* 1127 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt_rule,
  /* 1128 */  iRegIorL2I_rule,
  /* 1129 */  iRegIorL2I_rule,
  /* 1130 */  iRegL_rule,
  /* 1131 */  _LShiftL__ConvI2L_iRegIorL2I__immIExt_rule,
  /* 1132 */  iRegL_rule,
  /* 1133 */  iRegL_rule,
  /* 1134 */  _LShiftL__AndL_iRegL_immL_255_immIExt_rule,
  /* 1135 */  iRegL_rule,
  /* 1136 */  _LShiftL__AndL_iRegL_immL_65535_immIExt_rule,
  /* 1137 */  iRegL_rule,
  /* 1138 */  _LShiftL__AndL_iRegL_immL_4294967295_immIExt_rule,
  /* 1139 */  iRegL_rule,
  /* 1140 */  iRegL_rule,
  /* 1141 */  iRegL_rule,
  /* 1142 */  iRegIorL2I_rule,
  /* 1143 */  _LShiftI__AndI_iRegIorL2I_immI_255_immIExt_rule,
  /* 1144 */  iRegIorL2I_rule,
  /* 1145 */  _LShiftI__AndI_iRegIorL2I_immI_65535_immIExt_rule,
  /* 1146 */  iRegIorL2I_rule,
  /* 1147 */  iRegIorL2I_rule,
  /* 1148 */  vRegF_rule,
  /* 1149 */  vRegD_rule,
  /* 1150 */  vRegF_rule,
  /* 1151 */  vRegD_rule,
  /* 1152 */  vRegF_rule,
  /* 1153 */  vRegD_rule,
  /* 1154 */  vRegF_rule,
  /* 1155 */  vRegD_rule,
  /* 1156 */  vRegF_rule,
  /* 1157 */  vRegF_rule,
  /* 1158 */  vRegD_rule,
  /* 1159 */  vRegD_rule,
  /* 1160 */  _NegF_vRegF__rule,
  /* 1161 */  _NegF_vRegF__rule,
  /* 1162 */  _NegD_vRegD__rule,
  /* 1163 */  _NegD_vRegD__rule,
  /* 1164 */  _NegF_vRegF__rule,
  /* 1165 */  _NegD_vRegD__rule,
  /* 1166 */  vRegF_rule,
  /* 1167 */  vRegF_rule,
  /* 1168 */  vRegD_rule,
  /* 1169 */  vRegD_rule,
  /* 1170 */  vRegF_rule,
  /* 1171 */  vRegD_rule,
  /* 1172 */  iRegIorL2I_rule,
  /* 1173 */  iRegL_rule,
  /* 1174 */  _SubF_vRegF_vRegF_rule,
  /* 1175 */  _SubD_vRegD_vRegD_rule,
  /* 1176 */  vRegD_rule,
  /* 1177 */  vRegF_rule,
  /* 1178 */  vRegD_rule,
  /* 1179 */  vRegD_rule,
  /* 1180 */  vRegF_rule,
  /* 1181 */  vRegD_rule,
  /* 1182 */  vRegF_rule,
  /* 1183 */  0,
  /* 1184 */  iRegIorL2I_rule,
  /* 1185 */  iRegIorL2I_rule,
  /* 1186 */  iRegIorL2I_rule,
  /* 1187 */  iRegIorL2I_rule,
  /* 1188 */  iRegIorL2I_rule,
  /* 1189 */  iRegIorL2I_rule,
  /* 1190 */  iRegL_rule,
  /* 1191 */  iRegL_rule,
  /* 1192 */  iRegL_rule,
  /* 1193 */  iRegL_rule,
  /* 1194 */  iRegL_rule,
  /* 1195 */  iRegL_rule,
  /* 1196 */  iRegIorL2I_rule,
  /* 1197 */  _ConvI2L_iRegIorL2I__rule,
  /* 1198 */  iRegL_rule,
  /* 1199 */  iRegIorL2I_rule,
  /* 1200 */  iRegP_rule,
  /* 1201 */  vRegD_rule,
  /* 1202 */  vRegF_rule,
  /* 1203 */  vRegF_rule,
  /* 1204 */  vRegF_rule,
  /* 1205 */  iRegIorL2I_rule,
  /* 1206 */  iRegL_rule,
  /* 1207 */  vRegD_rule,
  /* 1208 */  vRegD_rule,
  /* 1209 */  iRegIorL2I_rule,
  /* 1210 */  iRegL_rule,
  /* 1211 */  vRegF_rule,
  /* 1212 */  iRegI_rule,
  /* 1213 */  vRegD_rule,
  /* 1214 */  iRegL_rule,
  /* 1215 */  iRegL_R11_rule,
  /* 1216 */  immL_rule,
  /* 1217 */  cmpOp_rule,
  /* 1218 */  cmpOp_rule,
  /* 1219 */  vRegF_rule,
  /* 1220 */  vRegD_rule,
  /* 1221 */  vRegF_rule,
  /* 1222 */  vRegD_rule,
  /* 1223 */  iRegIorL2I_rule,
  /* 1224 */  iRegIorL2I_rule,
  /* 1225 */  0,
  /* 1226 */  iRegI_rule,
  /* 1227 */  0,
  /* 1228 */  iRegI_rule,
  /* 1229 */  0,
  /* 1230 */  cmpOp_rule,
  /* 1231 */  cmpOpU_rule,
  /* 1232 */  cmpOpEqNe_rule,
  /* 1233 */  cmpOpEqNe_rule,
  /* 1234 */  cmpOpEqNe_rule,
  /* 1235 */  cmpOpEqNe_rule,
  /* 1236 */  cmpOpEqNe_rule,
  /* 1237 */  cmpOpUEqNeLtGe_rule,
  /* 1238 */  cmpOpUEqNeLtGe_rule,
  /* 1239 */  cmpOpLtGe_rule,
  /* 1240 */  cmpOpLtGe_rule,
  /* 1241 */  cmpOpEqNe_rule,
  /* 1242 */  cmpOpEqNe_rule,
  /* 1243 */  cmpOpLtGe_rule,
  /* 1244 */  cmpOpLtGe_rule,
  /* 1245 */  cmpOpEqNe_rule,
  /* 1246 */  cmpOpEqNe_rule,
  /* 1247 */  cmpOp_rule,
  /* 1248 */  cmpOpU_rule,
  /* 1249 */  iRegP_rule,
  /* 1250 */  0,
  /* 1251 */  0,
  /* 1252 */  0,
  /* 1253 */  0,
  /* 1254 */  0,
  /* 1255 */  0,
  /* 1256 */  iRegPNoSp_rule,
  /* 1257 */  iRegPNoSp_rule,
  /* 1258 */  0,
  /* 1259 */  0,
  /* 1260 */  0,
  /* 1261 */  0,
  /* 1262 */  iRegP_R4_rule,
  /* 1263 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1264 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1265 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1266 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1267 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1268 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1269 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1270 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1271 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1272 */  _Binary_iRegP_R1_iRegI_R4_rule,
  /* 1273 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1274 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1275 */  _Binary_iRegP_R1_iRegP_R3_rule,
  /* 1276 */  _Binary_iRegP_R1_iRegP_R3_rule,
  /* 1277 */  iRegP_R1_rule,
  /* 1278 */  iRegP_R1_rule,
  /* 1279 */  iRegP_R1_rule,
  /* 1280 */  iRegP_R2_rule,
  /* 1281 */  iRegP_R0_rule,
  /* 1282 */  iRegP_R2_rule,
  /* 1283 */  vmem2_rule,
  /* 1284 */  vmem4_rule,
  /* 1285 */  vmem8_rule,
  /* 1286 */  vmem16_rule,
  /* 1287 */  vmem2_rule,
  /* 1288 */  vmem4_rule,
  /* 1289 */  vmem8_rule,
  /* 1290 */  vmem16_rule,
  /* 1291 */  vecX_rule,
  /* 1292 */  iRegIorL2I_rule,
  /* 1293 */  iRegIorL2I_rule,
  /* 1294 */  iRegIorL2I_rule,
  /* 1295 */  iRegIorL2I_rule,
  /* 1296 */  iRegL_rule,
  /* 1297 */  iRegIorL2I_rule,
  /* 1298 */  iRegIorL2I_rule,
  /* 1299 */  iRegIorL2I_rule,
  /* 1300 */  iRegIorL2I_rule,
  /* 1301 */  iRegL_rule,
  /* 1302 */  iRegIorL2I_rule,
  /* 1303 */  iRegIorL2I_rule,
  /* 1304 */  iRegIorL2I_rule,
  /* 1305 */  iRegIorL2I_rule,
  /* 1306 */  iRegIorL2I_rule,
  /* 1307 */  iRegIorL2I_rule,
  /* 1308 */  iRegIorL2I_rule,
  /* 1309 */  iRegIorL2I_rule,
  /* 1310 */  iRegIorL2I_rule,
  /* 1311 */  iRegIorL2I_rule,
  /* 1312 */  iRegIorL2I_rule,
  /* 1313 */  iRegIorL2I_rule,
  /* 1314 */  iRegL_rule,
  /* 1315 */  iRegL_rule,
  /* 1316 */  vRegF_rule,
  /* 1317 */  vRegF_rule,
  /* 1318 */  vRegD_rule,
  /* 1319 */  vRegF_rule,
  /* 1320 */  vRegF_rule,
  /* 1321 */  vRegD_rule,
  /* 1322 */  iRegIorL2I_rule,
  /* 1323 */  iRegIorL2I_rule,
  /* 1324 */  iRegIorL2I_rule,
  /* 1325 */  iRegIorL2I_rule,
  /* 1326 */  iRegIorL2I_rule,
  /* 1327 */  iRegIorL2I_rule,
  /* 1328 */  iRegIorL2I_rule,
  /* 1329 */  iRegIorL2I_rule,
  /* 1330 */  iRegIorL2I_rule,
  /* 1331 */  iRegIorL2I_rule,
  /* 1332 */  iRegIorL2I_rule,
  /* 1333 */  iRegIorL2I_rule,
  /* 1334 */  iRegIorL2I_rule,
  /* 1335 */  iRegIorL2I_rule,
  /* 1336 */  iRegIorL2I_rule,
  /* 1337 */  iRegIorL2I_rule,
  /* 1338 */  iRegIorL2I_rule,
  /* 1339 */  iRegIorL2I_rule,
  /* 1340 */  iRegL_rule,
  /* 1341 */  iRegL_rule,
  /* 1342 */  iRegL_rule,
  /* 1343 */  _Binary_vecD_iRegIorL2I_rule,
  /* 1344 */  _Binary_vecX_iRegIorL2I_rule,
  /* 1345 */  _Binary_vecD_iRegIorL2I_rule,
  /* 1346 */  _Binary_vecX_iRegIorL2I_rule,
  /* 1347 */  _Binary_vecD_iRegIorL2I_rule,
  /* 1348 */  _Binary_vecX_iRegIorL2I_rule,
  /* 1349 */  _Binary_vecX_iRegL_rule,
  /* 1350 */  _Binary_vecD_vRegF_rule,
  /* 1351 */  _Binary_vecX_vRegF_rule,
  /* 1352 */  _Binary_vecX_vRegD_rule,
  /* 1353 */  vecD_rule,
  /* 1354 */  vecX_rule,
  /* 1355 */  vecD_rule,
  /* 1356 */  vecX_rule,
  /* 1357 */  vecD_rule,
  /* 1358 */  vecX_rule,
  /* 1359 */  vecX_rule,
  /* 1360 */  vecD_rule,
  /* 1361 */  vecX_rule,
  /* 1362 */  vecX_rule,
  /* 1363 */  _Binary_vecD_vecD_rule,
  /* 1364 */  _Binary_vecX_vecX_rule,
  /* 1365 */  vecX_rule,
  /* 1366 */  vecD_rule,
  /* 1367 */  _ReplicateB_immI_M1__rule,
  /* 1368 */  vecD_rule,
  /* 1369 */  _ReplicateS_immI_M1__rule,
  /* 1370 */  vecD_rule,
  /* 1371 */  _ReplicateI_immI_M1__rule,
  /* 1372 */  vecX_rule,
  /* 1373 */  _ReplicateB_immI_M1__rule,
  /* 1374 */  vecX_rule,
  /* 1375 */  _ReplicateS_immI_M1__rule,
  /* 1376 */  vecX_rule,
  /* 1377 */  _ReplicateI_immI_M1__rule,
  /* 1378 */  vecX_rule,
  /* 1379 */  _ReplicateL_immL_M1__rule,
  /* 1380 */  vecD_rule,
  /* 1381 */  _XorV_vecD__ReplicateB_immI_M1__rule,
  /* 1382 */  vecD_rule,
  /* 1383 */  _XorV__ReplicateB_immI_M1__vecD_rule,
  /* 1384 */  vecD_rule,
  /* 1385 */  _XorV_vecD__ReplicateS_immI_M1__rule,
  /* 1386 */  vecD_rule,
  /* 1387 */  _XorV__ReplicateS_immI_M1__vecD_rule,
  /* 1388 */  vecD_rule,
  /* 1389 */  _XorV_vecD__ReplicateI_immI_M1__rule,
  /* 1390 */  vecD_rule,
  /* 1391 */  _XorV__ReplicateI_immI_M1__vecD_rule,
  /* 1392 */  vecX_rule,
  /* 1393 */  _XorV_vecX__ReplicateB_immI_M1__rule,
  /* 1394 */  vecX_rule,
  /* 1395 */  _XorV__ReplicateB_immI_M1__vecX_rule,
  /* 1396 */  vecX_rule,
  /* 1397 */  _XorV_vecX__ReplicateS_immI_M1__rule,
  /* 1398 */  vecX_rule,
  /* 1399 */  _XorV__ReplicateS_immI_M1__vecX_rule,
  /* 1400 */  vecX_rule,
  /* 1401 */  _XorV_vecX__ReplicateI_immI_M1__rule,
  /* 1402 */  vecX_rule,
  /* 1403 */  _XorV__ReplicateI_immI_M1__vecX_rule,
  /* 1404 */  vecX_rule,
  /* 1405 */  _XorV_vecX__ReplicateL_immL_M1__rule,
  /* 1406 */  vecX_rule,
  /* 1407 */  _XorV__ReplicateL_immL_M1__vecX_rule,
  /* 1408 */  vecD_rule,
  /* 1409 */  vecX_rule,
  /* 1410 */  vecD_rule,
  /* 1411 */  vecX_rule,
  /* 1412 */  vecD_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  vecD_rule,
  /* 1415 */  vecX_rule,
  /* 1416 */  vecD_rule,
  /* 1417 */  vecX_rule,
  /* 1418 */  vecD_rule,
  /* 1419 */  vecX_rule,
  /* 1420 */  vecX_rule,
  /* 1421 */  vecX_rule,
  /* 1422 */  _Binary_vecD_vecD_rule,
  /* 1423 */  _Binary_vecX_vecX_rule,
  /* 1424 */  vecD_rule,
  /* 1425 */  vecX_rule,
  /* 1426 */  vecD_rule,
  /* 1427 */  vecX_rule,
  /* 1428 */  vecD_rule,
  /* 1429 */  vecX_rule,
  /* 1430 */  vecX_rule,
  /* 1431 */  vecD_rule,
  /* 1432 */  vecX_rule,
  /* 1433 */  vecD_rule,
  /* 1434 */  vecX_rule,
  /* 1435 */  vecX_rule,
  /* 1436 */  vecD_rule,
  /* 1437 */  vecX_rule,
  /* 1438 */  vecD_rule,
  /* 1439 */  vecX_rule,
  /* 1440 */  _SubVF_vecD_vecD_rule,
  /* 1441 */  _SubVF_vecX_vecX_rule,
  /* 1442 */  _SubVD_vecX_vecX_rule,
  /* 1443 */  iRegIorL2I_rule,
  /* 1444 */  iRegIorL2I_rule,
  /* 1445 */  immI_rule,
  /* 1446 */  immI_rule,
  /* 1447 */  iRegIorL2I_rule,
  /* 1448 */  iRegIorL2I_rule,
  /* 1449 */  immI_rule,
  /* 1450 */  immI_rule,
  /* 1451 */  iRegIorL2I_rule,
  /* 1452 */  iRegIorL2I_rule,
  /* 1453 */  immI_rule,
  /* 1454 */  immI_rule,
  /* 1455 */  iRegL_rule,
  /* 1456 */  immI0_rule,
  /* 1457 */  vRegF_rule,
  /* 1458 */  vRegF_rule,
  /* 1459 */  vRegD_rule,
  /* 1460 */  iRegIorL2I_rule,
  /* 1461 */  iRegIorL2I_rule,
  /* 1462 */  iRegIorL2I_rule,
  /* 1463 */  iRegIorL2I_rule,
  /* 1464 */  vRegF_rule,
  /* 1465 */  vRegF_rule,
  /* 1466 */  vRegF_rule,
  /* 1467 */  vRegF_rule,
  /* 1468 */  vRegD_rule,
  /* 1469 */  vRegD_rule,
  /* 1470 */  vecD_rule,
  /* 1471 */  vecX_rule,
  /* 1472 */  vecD_rule,
  /* 1473 */  vecX_rule,
  /* 1474 */  vecD_rule,
  /* 1475 */  vecX_rule,
  /* 1476 */  vecX_rule,
  /* 1477 */  vecD_rule,
  /* 1478 */  vecX_rule,
  /* 1479 */  vecX_rule,
  /* 1480 */  vecD_rule,
  /* 1481 */  vecX_rule,
  /* 1482 */  vecD_rule,
  /* 1483 */  vecX_rule,
  /* 1484 */  vecD_rule,
  /* 1485 */  vecX_rule,
  /* 1486 */  vecX_rule,
  /* 1487 */  vecD_rule,
  /* 1488 */  vecX_rule,
  /* 1489 */  vecX_rule,
  /* 1490 */  vecD_rule,
  /* 1491 */  vecX_rule,
  /* 1492 */  vecD_rule,
  /* 1493 */  vecX_rule,
  /* 1494 */  vecD_rule,
  /* 1495 */  vecX_rule,
  /* 1496 */  vecD_rule,
  /* 1497 */  vecX_rule,
  /* 1498 */  vecX_rule,
  /* 1499 */  vecD_rule,
  /* 1500 */  _MulVS_vecD_vecD_rule,
  /* 1501 */  vecX_rule,
  /* 1502 */  _MulVS_vecX_vecX_rule,
  /* 1503 */  vecD_rule,
  /* 1504 */  _MulVI_vecD_vecD_rule,
  /* 1505 */  vecX_rule,
  /* 1506 */  _MulVI_vecX_vecX_rule,
  /* 1507 */  vecD_rule,
  /* 1508 */  vecX_rule,
  /* 1509 */  vecX_rule,
  /* 1510 */  vecD_rule,
  /* 1511 */  vecX_rule,
  /* 1512 */  vecD_rule,
  /* 1513 */  vecX_rule,
  /* 1514 */  vecD_rule,
  /* 1515 */  vecD_rule,
  /* 1516 */  vecX_rule,
  /* 1517 */  vecX_rule,
  /* 1518 */  vecX_rule,
  /* 1519 */  vecX_rule,
  /* 1520 */  vecX_rule,
  /* 1521 */  vecD_rule,
  /* 1522 */  vecX_rule,
  /* 1523 */  vecX_rule,
  /* 1524 */  vecD_rule,
  /* 1525 */  vecX_rule,
  /* 1526 */  vecD_rule,
  /* 1527 */  vecX_rule,
  /* 1528 */  vecD_rule,
  /* 1529 */  vecX_rule,
  /* 1530 */  vecD_rule,
  /* 1531 */  vecX_rule,
  /* 1532 */  vecD_rule,
  /* 1533 */  vecX_rule,
  /* 1534 */  vecD_rule,
  /* 1535 */  vecX_rule,
  /* 1536 */  vecD_rule,
  /* 1537 */  vecX_rule,
  /* 1538 */  vecD_rule,
  /* 1539 */  vecX_rule,
  /* 1540 */  vecD_rule,
  /* 1541 */  vecX_rule,
  /* 1542 */  vecD_rule,
  /* 1543 */  vecX_rule,
  /* 1544 */  vecD_rule,
  /* 1545 */  vecX_rule,
  /* 1546 */  vecD_rule,
  /* 1547 */  vecX_rule,
  /* 1548 */  vecD_rule,
  /* 1549 */  vecX_rule,
  /* 1550 */  vecD_rule,
  /* 1551 */  vecX_rule,
  /* 1552 */  vecD_rule,
  /* 1553 */  vecX_rule,
  /* 1554 */  vecD_rule,
  /* 1555 */  vecX_rule,
  /* 1556 */  vecD_rule,
  /* 1557 */  vecX_rule,
  /* 1558 */  vecD_rule,
  /* 1559 */  vecX_rule,
  /* 1560 */  vecD_rule,
  /* 1561 */  vecX_rule,
  /* 1562 */  vecD_rule,
  /* 1563 */  vecX_rule,
  /* 1564 */  vecD_rule,
  /* 1565 */  vecX_rule,
  /* 1566 */  vecX_rule,
  /* 1567 */  vecX_rule,
  /* 1568 */  vecX_rule,
  /* 1569 */  vecX_rule,
  /* 1570 */  vecX_rule,
  /* 1571 */  vecX_rule,
  /* 1572 */  vecD_rule,
  /* 1573 */  _RShiftVB_vecD__RShiftCntV_immI__rule,
  /* 1574 */  vecX_rule,
  /* 1575 */  _RShiftVB_vecX__RShiftCntV_immI__rule,
  /* 1576 */  vecD_rule,
  /* 1577 */  _RShiftVS_vecD__RShiftCntV_immI__rule,
  /* 1578 */  vecX_rule,
  /* 1579 */  _RShiftVS_vecX__RShiftCntV_immI__rule,
  /* 1580 */  vecD_rule,
  /* 1581 */  _RShiftVI_vecD__RShiftCntV_immI__rule,
  /* 1582 */  vecX_rule,
  /* 1583 */  _RShiftVI_vecX__RShiftCntV_immI__rule,
  /* 1584 */  vecX_rule,
  /* 1585 */  _RShiftVL_vecX__RShiftCntV_immI__rule,
  /* 1586 */  vecD_rule,
  /* 1587 */  _URShiftVB_vecD__RShiftCntV_immI__rule,
  /* 1588 */  vecX_rule,
  /* 1589 */  _URShiftVB_vecX__RShiftCntV_immI__rule,
  /* 1590 */  vecD_rule,
  /* 1591 */  _URShiftVS_vecD__RShiftCntV_immI__rule,
  /* 1592 */  vecX_rule,
  /* 1593 */  _URShiftVS_vecX__RShiftCntV_immI__rule,
  /* 1594 */  vecD_rule,
  /* 1595 */  _URShiftVI_vecD__RShiftCntV_immI__rule,
  /* 1596 */  vecX_rule,
  /* 1597 */  _URShiftVI_vecX__RShiftCntV_immI__rule,
  /* 1598 */  vecX_rule,
  /* 1599 */  _URShiftVL_vecX__RShiftCntV_immI__rule,
  /* 1600 */  vecD_rule,
  /* 1601 */  vecX_rule,
  /* 1602 */  vecX_rule,
  /* 1603 */  vecD_rule,
  /* 1604 */  vecX_rule,
  /* 1605 */  vecX_rule,
  /* 1606 */  vecX_rule,
  /* 1607 */  vecD_rule,
  /* 1608 */  vecX_rule,
  /* 1609 */  vecD_rule,
  /* 1610 */  vmemA_rule,
  /* 1611 */  vmemA_rule,
  /* 1612 */  vmem2_rule,
  /* 1613 */  vmem2_rule,
  /* 1614 */  vmem4_rule,
  /* 1615 */  vmem4_rule,
  /* 1616 */  vmem8_rule,
  /* 1617 */  vmem8_rule,
  /* 1618 */  vmem16_rule,
  /* 1619 */  vmem16_rule,
  /* 1620 */  vmemA_rule,
  /* 1621 */  vmemA_rule,
  /* 1622 */  vmemA_rule,
  /* 1623 */  vmemA_rule,
  /* 1624 */  vmemA_rule,
  /* 1625 */  vmemA_rule,
  /* 1626 */  immI_rule,
  /* 1627 */  iRegIorL2I_rule,
  /* 1628 */  immL_rule,
  /* 1629 */  iRegL_rule,
  /* 1630 */  pRegGov_rule,
  /* 1631 */  pRegGov_rule,
  /* 1632 */  pRegGov_rule,
  /* 1633 */  pRegGov_rule,
  /* 1634 */  pRegGov_rule,
  /* 1635 */  vReg_rule,
  /* 1636 */  pRegGov_rule,
  /* 1637 */  vReg_rule,
  /* 1638 */  vReg_rule,
  /* 1639 */  vReg_rule,
  /* 1640 */  vReg_rule,
  /* 1641 */  vReg_rule,
  /* 1642 */  vReg_rule,
  /* 1643 */  vReg_rule,
  /* 1644 */  vReg_rule,
  /* 1645 */  vReg_rule,
  /* 1646 */  vReg_rule,
  /* 1647 */  vReg_rule,
  /* 1648 */  vReg_rule,
  /* 1649 */  _Binary_vReg_vReg_rule,
  /* 1650 */  _Binary_vReg_vReg_rule,
  /* 1651 */  _Binary_vReg_vReg_rule,
  /* 1652 */  _Binary_vReg_vReg_rule,
  /* 1653 */  _Binary_vReg_vReg_rule,
  /* 1654 */  _Binary_vReg_vReg_rule,
  /* 1655 */  vReg_rule,
  /* 1656 */  _ReplicateB_immBAddSubV__rule,
  /* 1657 */  vReg_rule,
  /* 1658 */  _ReplicateS_immIAddSubV__rule,
  /* 1659 */  vReg_rule,
  /* 1660 */  _ReplicateI_immIAddSubV__rule,
  /* 1661 */  vReg_rule,
  /* 1662 */  _ReplicateL_immLAddSubV__rule,
  /* 1663 */  vReg_rule,
  /* 1664 */  _ReplicateB_immBLog__rule,
  /* 1665 */  vReg_rule,
  /* 1666 */  _ReplicateS_immSLog__rule,
  /* 1667 */  vReg_rule,
  /* 1668 */  _ReplicateI_immILog__rule,
  /* 1669 */  vReg_rule,
  /* 1670 */  _ReplicateL_immLLog__rule,
  /* 1671 */  vReg_rule,
  /* 1672 */  _ReplicateB_immBLog__rule,
  /* 1673 */  vReg_rule,
  /* 1674 */  _ReplicateS_immSLog__rule,
  /* 1675 */  vReg_rule,
  /* 1676 */  _ReplicateI_immILog__rule,
  /* 1677 */  vReg_rule,
  /* 1678 */  _ReplicateL_immLLog__rule,
  /* 1679 */  vReg_rule,
  /* 1680 */  _ReplicateB_immBLog__rule,
  /* 1681 */  vReg_rule,
  /* 1682 */  _ReplicateS_immSLog__rule,
  /* 1683 */  vReg_rule,
  /* 1684 */  _ReplicateI_immILog__rule,
  /* 1685 */  vReg_rule,
  /* 1686 */  _ReplicateL_immLLog__rule,
  /* 1687 */  vReg_rule,
  /* 1688 */  vReg_rule,
  /* 1689 */  vReg_rule,
  /* 1690 */  _Binary_vReg_vReg_rule,
  /* 1691 */  _Binary_vReg_vReg_rule,
  /* 1692 */  _Binary_vReg_vReg_rule,
  /* 1693 */  vReg_rule,
  /* 1694 */  _ReplicateB_immI_M1__rule,
  /* 1695 */  vReg_rule,
  /* 1696 */  _ReplicateS_immI_M1__rule,
  /* 1697 */  vReg_rule,
  /* 1698 */  _ReplicateI_immI_M1__rule,
  /* 1699 */  vReg_rule,
  /* 1700 */  _ReplicateL_immL_M1__rule,
  /* 1701 */  vReg_rule,
  /* 1702 */  _XorV_vReg__ReplicateB_immI_M1__rule,
  /* 1703 */  vReg_rule,
  /* 1704 */  _XorV__ReplicateB_immI_M1__vReg_rule,
  /* 1705 */  vReg_rule,
  /* 1706 */  _XorV_vReg__ReplicateS_immI_M1__rule,
  /* 1707 */  vReg_rule,
  /* 1708 */  _XorV__ReplicateS_immI_M1__vReg_rule,
  /* 1709 */  vReg_rule,
  /* 1710 */  _XorV_vReg__ReplicateI_immI_M1__rule,
  /* 1711 */  vReg_rule,
  /* 1712 */  _XorV__ReplicateI_immI_M1__vReg_rule,
  /* 1713 */  vReg_rule,
  /* 1714 */  _XorV_vReg__ReplicateL_immL_M1__rule,
  /* 1715 */  vReg_rule,
  /* 1716 */  _XorV__ReplicateL_immL_M1__vReg_rule,
  /* 1717 */  vReg_rule,
  /* 1718 */  vReg_rule,
  /* 1719 */  _Binary_vReg_vReg_rule,
  /* 1720 */  _Binary_vReg_vReg_rule,
  /* 1721 */  vReg_rule,
  /* 1722 */  vReg_rule,
  /* 1723 */  _Binary_vReg_vReg_rule,
  /* 1724 */  _Binary_vReg_vReg_rule,
  /* 1725 */  vReg_rule,
  /* 1726 */  vReg_rule,
  /* 1727 */  _Binary_vReg_vReg_rule,
  /* 1728 */  _Binary_vReg_vReg_rule,
  /* 1729 */  vReg_rule,
  /* 1730 */  vReg_rule,
  /* 1731 */  vReg_rule,
  /* 1732 */  vReg_rule,
  /* 1733 */  _NegVF_vReg__rule,
  /* 1734 */  _NegVF_vReg__rule,
  /* 1735 */  _NegVD_vReg__rule,
  /* 1736 */  _NegVD_vReg__rule,
  /* 1737 */  _NegVF_vReg__rule,
  /* 1738 */  _NegVD_vReg__rule,
  /* 1739 */  vReg_rule,
  /* 1740 */  _MulVB_vReg_vReg_rule,
  /* 1741 */  vReg_rule,
  /* 1742 */  _MulVS_vReg_vReg_rule,
  /* 1743 */  vReg_rule,
  /* 1744 */  _MulVI_vReg_vReg_rule,
  /* 1745 */  vReg_rule,
  /* 1746 */  _MulVL_vReg_vReg_rule,
  /* 1747 */  vReg_rule,
  /* 1748 */  vReg_rule,
  /* 1749 */  vReg_rule,
  /* 1750 */  vReg_rule,
  /* 1751 */  vReg_rule,
  /* 1752 */  vReg_rule,
  /* 1753 */  vReg_rule,
  /* 1754 */  vReg_rule,
  /* 1755 */  vReg_rule,
  /* 1756 */  vReg_rule,
  /* 1757 */  _Binary_vReg_vReg_rule,
  /* 1758 */  _Binary_vReg_vReg_rule,
  /* 1759 */  _Binary_vReg_vReg_rule,
  /* 1760 */  _Binary_vReg_vReg_rule,
  /* 1761 */  _Binary_vReg_vReg_rule,
  /* 1762 */  _Binary_vReg_vReg_rule,
  /* 1763 */  vReg_rule,
  /* 1764 */  vReg_rule,
  /* 1765 */  _Binary_vReg_vReg_rule,
  /* 1766 */  _Binary_vReg_vReg_rule,
  /* 1767 */  _Binary_vReg_vReg_rule,
  /* 1768 */  vReg_rule,
  /* 1769 */  vReg_rule,
  /* 1770 */  pRegGov_rule,
  /* 1771 */  pRegGov_rule,
  /* 1772 */  _LoadVector_indirect__rule,
  /* 1773 */  _LoadVector_indirect__rule,
  /* 1774 */  indirect_rule,
  /* 1775 */  indirect_rule,
  /* 1776 */  iRegIorL2I_rule,
  /* 1777 */  iRegL_rule,
  /* 1778 */  vRegF_rule,
  /* 1779 */  vRegD_rule,
  /* 1780 */  iRegIorL2I_rule,
  /* 1781 */  iRegL_rule,
  /* 1782 */  vRegF_rule,
  /* 1783 */  vRegD_rule,
  /* 1784 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1785 */  _Binary_iRegL_vReg_rule,
  /* 1786 */  _Binary_vRegF_vReg_rule,
  /* 1787 */  _Binary_vRegD_vReg_rule,
  /* 1788 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1789 */  _Binary_iRegL_vReg_rule,
  /* 1790 */  _Binary_vRegF_vReg_rule,
  /* 1791 */  _Binary_vRegD_vReg_rule,
  /* 1792 */  iRegIorL2I_rule,
  /* 1793 */  iRegL_rule,
  /* 1794 */  iRegIorL2I_rule,
  /* 1795 */  iRegL_rule,
  /* 1796 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1797 */  _Binary_iRegL_vReg_rule,
  /* 1798 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1799 */  _Binary_iRegL_vReg_rule,
  /* 1800 */  iRegIorL2I_rule,
  /* 1801 */  iRegL_rule,
  /* 1802 */  iRegIorL2I_rule,
  /* 1803 */  iRegL_rule,
  /* 1804 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1805 */  _Binary_iRegL_vReg_rule,
  /* 1806 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1807 */  _Binary_iRegL_vReg_rule,
  /* 1808 */  iRegIorL2I_rule,
  /* 1809 */  iRegL_rule,
  /* 1810 */  iRegIorL2I_rule,
  /* 1811 */  iRegL_rule,
  /* 1812 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1813 */  _Binary_iRegL_vReg_rule,
  /* 1814 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1815 */  _Binary_iRegL_vReg_rule,
  /* 1816 */  iRegIorL2I_rule,
  /* 1817 */  iRegL_rule,
  /* 1818 */  iRegIorL2I_rule,
  /* 1819 */  iRegL_rule,
  /* 1820 */  vRegF_rule,
  /* 1821 */  vRegF_rule,
  /* 1822 */  vRegD_rule,
  /* 1823 */  vRegD_rule,
  /* 1824 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1825 */  _Binary_iRegL_vReg_rule,
  /* 1826 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1827 */  _Binary_iRegL_vReg_rule,
  /* 1828 */  _Binary_vRegF_vReg_rule,
  /* 1829 */  _Binary_vRegD_vReg_rule,
  /* 1830 */  _Binary_vRegF_vReg_rule,
  /* 1831 */  _Binary_vRegD_vReg_rule,
  /* 1832 */  iRegIorL2I_rule,
  /* 1833 */  iRegL_rule,
  /* 1834 */  iRegIorL2I_rule,
  /* 1835 */  iRegL_rule,
  /* 1836 */  vRegF_rule,
  /* 1837 */  vRegF_rule,
  /* 1838 */  vRegD_rule,
  /* 1839 */  vRegD_rule,
  /* 1840 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1841 */  _Binary_iRegL_vReg_rule,
  /* 1842 */  _Binary_iRegIorL2I_vReg_rule,
  /* 1843 */  _Binary_iRegL_vReg_rule,
  /* 1844 */  _Binary_vRegF_vReg_rule,
  /* 1845 */  _Binary_vRegD_vReg_rule,
  /* 1846 */  _Binary_vRegF_vReg_rule,
  /* 1847 */  _Binary_vRegD_vReg_rule,
  /* 1848 */  vReg_rule,
  /* 1849 */  iRegIorL2I_rule,
  /* 1850 */  iRegIorL2I_rule,
  /* 1851 */  iRegIorL2I_rule,
  /* 1852 */  iRegL_rule,
  /* 1853 */  immI8_rule,
  /* 1854 */  immI8_shift8_rule,
  /* 1855 */  immI8_shift8_rule,
  /* 1856 */  immL8_shift8_rule,
  /* 1857 */  vRegF_rule,
  /* 1858 */  vRegD_rule,
  /* 1859 */  vReg_rule,
  /* 1860 */  vReg_rule,
  /* 1861 */  vReg_rule,
  /* 1862 */  vReg_rule,
  /* 1863 */  vReg_rule,
  /* 1864 */  vReg_rule,
  /* 1865 */  vReg_rule,
  /* 1866 */  vReg_rule,
  /* 1867 */  vReg_rule,
  /* 1868 */  vReg_rule,
  /* 1869 */  vReg_rule,
  /* 1870 */  vReg_rule,
  /* 1871 */  vReg_rule,
  /* 1872 */  vReg_rule,
  /* 1873 */  vReg_rule,
  /* 1874 */  vReg_rule,
  /* 1875 */  vReg_rule,
  /* 1876 */  vReg_rule,
  /* 1877 */  vReg_rule,
  /* 1878 */  vReg_rule,
  /* 1879 */  vReg_rule,
  /* 1880 */  vReg_rule,
  /* 1881 */  vReg_rule,
  /* 1882 */  vReg_rule,
  /* 1883 */  _Binary_vReg_vReg_rule,
  /* 1884 */  _Binary_vReg_vReg_rule,
  /* 1885 */  _Binary_vReg_vReg_rule,
  /* 1886 */  _Binary_vReg_vReg_rule,
  /* 1887 */  _Binary_vReg_vReg_rule,
  /* 1888 */  _Binary_vReg_vReg_rule,
  /* 1889 */  _Binary_vReg_vReg_rule,
  /* 1890 */  _Binary_vReg_vReg_rule,
  /* 1891 */  _Binary_vReg_vReg_rule,
  /* 1892 */  _Binary_vReg_vReg_rule,
  /* 1893 */  _Binary_vReg_vReg_rule,
  /* 1894 */  _Binary_vReg_vReg_rule,
  /* 1895 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1896 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1897 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1898 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1899 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1900 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1901 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1902 */  _Binary_vReg__RShiftCntV_immI__rule,
  /* 1903 */  _Binary_vReg__LShiftCntV_immI__rule,
  /* 1904 */  _Binary_vReg__LShiftCntV_immI__rule,
  /* 1905 */  _Binary_vReg__LShiftCntV_immI__rule,
  /* 1906 */  _Binary_vReg__LShiftCntV_immI__rule,
  /* 1907 */  vReg_rule,
  /* 1908 */  vReg_rule,
  /* 1909 */  vReg_rule,
  /* 1910 */  vReg_rule,
  /* 1911 */  vReg_rule,
  /* 1912 */  vReg_rule,
  /* 1913 */  vReg_rule,
  /* 1914 */  vReg_rule,
  /* 1915 */  _Binary_vReg_vReg_rule,
  /* 1916 */  _Binary_vReg_vReg_rule,
  /* 1917 */  _Binary_vReg_vReg_rule,
  /* 1918 */  _Binary_vReg_vReg_rule,
  /* 1919 */  _Binary_vReg_vReg_rule,
  /* 1920 */  _Binary_vReg_vReg_rule,
  /* 1921 */  vReg_rule,
  /* 1922 */  vReg_rule,
  /* 1923 */  vReg_rule,
  /* 1924 */  vReg_rule,
  /* 1925 */  vReg_rule,
  /* 1926 */  vReg_rule,
  /* 1927 */  vReg_rule,
  /* 1928 */  vReg_rule,
  /* 1929 */  vReg_rule,
  /* 1930 */  vReg_rule,
  /* 1931 */  vReg_rule,
  /* 1932 */  vReg_rule,
  /* 1933 */  vReg_rule,
  /* 1934 */  vReg_rule,
  /* 1935 */  pRegGov_rule,
  /* 1936 */  pRegGov_rule,
  /* 1937 */  pRegGov_rule,
  /* 1938 */  pRegGov_rule,
  /* 1939 */  _Binary_vReg_iRegIorL2I_rule,
  /* 1940 */  _Binary_vReg_vRegF_rule,
  /* 1941 */  _Binary_vReg_iRegIorL2I_rule,
  /* 1942 */  _Binary_vReg_iRegL_rule,
  /* 1943 */  _Binary_vReg_vRegD_rule,
  /* 1944 */  _Binary_vReg_vRegF_rule,
  /* 1945 */  vReg_rule,
  /* 1946 */  indirect_rule,
  /* 1947 */  indirect_rule,
  /* 1948 */  indirect_rule,
  /* 1949 */  indirect_rule,
  /* 1950 */  indirect_rule,
  /* 1951 */  indirect_rule,
  /* 1952 */  indirect_rule,
  /* 1953 */  indirect_rule,
  /* 1954 */  indirect_rule,
  /* 1955 */  indirect_rule,
  /* 1956 */  indirect_rule,
  /* 1957 */  indirect_rule,
  /* 1958 */  indirect_rule,
  /* 1959 */  indirect_rule,
  /* 1960 */  indirect_rule,
  /* 1961 */  indirect_rule,
  /* 1962 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1963 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1964 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1965 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1966 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1967 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1968 */  pReg_rule,
  /* 1969 */  pReg_rule,
  /* 1970 */  pReg_rule,
  /* 1971 */  pReg_rule,
  /* 1972 */  pReg_rule,
  /* 1973 */  pReg_rule,
  /* 1974 */  iRegL_rule,
  /* 1975 */  indirect_rule,
  /* 1976 */  indirect_rule,
  /* 1977 */  indirect_rule,
  /* 1978 */  indirect_rule,
  /* 1979 */  indirect_rule,
  /* 1980 */  indirect_rule,
  /* 1981 */  indirect_rule,
  /* 1982 */  indirect_rule,
  /* 1983 */  indirect_rule,
  /* 1984 */  indirect_rule,
  /* 1985 */  indirect_rule,
  /* 1986 */  indirect_rule,
  /* 1987 */  memory8_rule,
  /* 1988 */  indirect_rule,
  /* 1989 */  indirect_rule,
  /* 1990 */  indirect_rule,
  /* 1991 */  indirect_rule,
  /* 1992 */  indirect_rule,
  /* 1993 */  indirect_rule,
  /* 1994 */  indirect_rule,
  /* 1995 */  indirect_rule,
  /* 1996 */  indirect_rule,
  // last instruction
  0 // no trailing comma
};

const        int   rightOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  0,
  /*    9 */  0,
  /*   10 */  0,
  /*   11 */  0,
  /*   12 */  0,
  /*   13 */  0,
  /*   14 */  0,
  /*   15 */  0,
  /*   16 */  0,
  /*   17 */  0,
  /*   18 */  0,
  /*   19 */  0,
  /*   20 */  0,
  /*   21 */  0,
  /*   22 */  0,
  /*   23 */  0,
  /*   24 */  0,
  /*   25 */  0,
  /*   26 */  0,
  /*   27 */  0,
  /*   28 */  0,
  /*   29 */  0,
  /*   30 */  0,
  /*   31 */  0,
  /*   32 */  0,
  /*   33 */  0,
  /*   34 */  0,
  /*   35 */  0,
  /*   36 */  0,
  /*   37 */  0,
  /*   38 */  0,
  /*   39 */  0,
  /*   40 */  0,
  /*   41 */  0,
  /*   42 */  0,
  /*   43 */  0,
  /*   44 */  0,
  /*   45 */  0,
  /*   46 */  0,
  /*   47 */  0,
  /*   48 */  0,
  /*   49 */  0,
  /*   50 */  0,
  /*   51 */  0,
  /*   52 */  0,
  /*   53 */  0,
  /*   54 */  0,
  /*   55 */  0,
  /*   56 */  0,
  /*   57 */  0,
  /*   58 */  0,
  /*   59 */  0,
  /*   60 */  0,
  /*   61 */  0,
  /*   62 */  0,
  /*   63 */  0,
  /*   64 */  0,
  /*   65 */  0,
  /*   66 */  0,
  /*   67 */  0,
  /*   68 */  0,
  /*   69 */  0,
  /*   70 */  0,
  /*   71 */  0,
  /*   72 */  0,
  /*   73 */  0,
  /*   74 */  0,
  /*   75 */  0,
  /*   76 */  0,
  /*   77 */  0,
  /*   78 */  0,
  /*   79 */  0,
  /*   80 */  0,
  /*   81 */  0,
  /*   82 */  0,
  /*   83 */  0,
  /*   84 */  0,
  /*   85 */  0,
  /*   86 */  0,
  /*   87 */  0,
  /*   88 */  0,
  /*   89 */  0,
  /*   90 */  0,
  /*   91 */  0,
  /*   92 */  0,
  /*   93 */  0,
  /*   94 */  0,
  /*   95 */  0,
  /*   96 */  0,
  /*   97 */  0,
  /*   98 */  0,
  /*   99 */  0,
  /*  100 */  0,
  /*  101 */  0,
  /*  102 */  0,
  /*  103 */  0,
  /*  104 */  0,
  /*  105 */  0,
  /*  106 */  0,
  /*  107 */  0,
  /*  108 */  0,
  /*  109 */  0,
  /*  110 */  0,
  /*  111 */  0,
  /*  112 */  0,
  /*  113 */  0,
  /*  114 */  0,
  /*  115 */  0,
  /*  116 */  0,
  /*  117 */  0,
  /*  118 */  0,
  /*  119 */  0,
  /*  120 */  0,
  /*  121 */  0,
  /*  122 */  0,
  /*  123 */  0,
  /*  124 */  0,
  /*  125 */  0,
  /*  126 */  0,
  /*  127 */  0,
  /*  128 */  0,
  /*  129 */  0,
  /*  130 */  0,
  /*  131 */  0,
  /*  132 */  0,
  /*  133 */  0,
  /*  134 */  0,
  /*  135 */  0,
  /*  136 */  0,
  /*  137 */  0,
  /*  138 */  0,
  /*  139 */  0,
  /*  140 */  0,
  /*  141 */  0,
  /*  142 */  0,
  /*  143 */  0,
  /*  144 */  0,
  /*  145 */  0,
  /*  146 */  0,
  /*  147 */  0,
  /*  148 */  0,
  /*  149 */  0,
  /*  150 */  0,
  /*  151 */  0,
  /*  152 */  0,
  /*  153 */  0,
  /*  154 */  0,
  /*  155 */  0,
  /*  156 */  0,
  /*  157 */  0,
  /*  158 */  0,
  /*  159 */  _LShiftL__ConvI2L_iRegI__immIScale_rule,
  /*  160 */  _LShiftL_iRegL_immIScale_rule,
  /*  161 */  _ConvI2L_iRegI__rule,
  /*  162 */  iRegL_rule,
  /*  163 */  immIOffset_rule,
  /*  164 */  immIOffset1_rule,
  /*  165 */  immIOffset2_rule,
  /*  166 */  immIOffset4_rule,
  /*  167 */  immIOffset8_rule,
  /*  168 */  immIOffset16_rule,
  /*  169 */  immLoffset_rule,
  /*  170 */  immLoffset1_rule,
  /*  171 */  immLoffset2_rule,
  /*  172 */  immLoffset4_rule,
  /*  173 */  immLoffset8_rule,
  /*  174 */  immLoffset16_rule,
  /*  175 */  0,
  /*  176 */  _LShiftL__ConvI2L_iRegI__immIScale_rule,
  /*  177 */  _LShiftL_iRegL_immIScale_rule,
  /*  178 */  _ConvI2L_iRegI__rule,
  /*  179 */  iRegL_rule,
  /*  180 */  immIOffset_rule,
  /*  181 */  immLoffset_rule,
  /*  182 */  immL_pc_off_rule,
  /*  183 */  0,
  /*  184 */  0,
  /*  185 */  0,
  /*  186 */  0,
  /*  187 */  0,
  /*  188 */  0,
  /*  189 */  0,
  /*  190 */  0,
  /*  191 */  0,
  /*  192 */  0,
  /*  193 */  0,
  /*  194 */  0,
  /*  195 */  0,
  /*  196 */  vmemA_immIOffset4_rule,
  /*  197 */  vmemA_immLOffset4_rule,
  // last operand
  /*  198 */  0,
  /*  199 */  0,
  /*  200 */  0,
  /*  201 */  0,
  /*  202 */  0,
  /*  203 */  0,
  /*  204 */  0,
  /*  205 */  0,
  /*  206 */  0,
  /*  207 */  0,
  /*  208 */  0,
  // last operand class
  /*  209 */  0,
  /*  210 */  immIScale_rule,
  /*  211 */  immIScale_rule,
  /*  212 */  0,
  /*  213 */  0,
  /*  214 */  0,
  /*  215 */  0,
  /*  216 */  0,
  /*  217 */  0,
  /*  218 */  0,
  /*  219 */  0,
  /*  220 */  0,
  /*  221 */  0,
  /*  222 */  0,
  /*  223 */  0,
  /*  224 */  0,
  /*  225 */  0,
  /*  226 */  0,
  /*  227 */  0,
  /*  228 */  iRegP_rule,
  /*  229 */  iRegLNoSp_rule,
  /*  230 */  iRegINoSp_rule,
  /*  231 */  iRegNNoSp_rule,
  /*  232 */  iRegI_rule,
  /*  233 */  iRegL_rule,
  /*  234 */  iRegN_rule,
  /*  235 */  rFlagsReg_rule,
  /*  236 */  iRegIorL2I_rule,
  /*  237 */  rFlagsRegU_rule,
  /*  238 */  iRegIorL2I_rule,
  /*  239 */  immI0_rule,
  /*  240 */  immI0_rule,
  /*  241 */  immL0_rule,
  /*  242 */  iRegL_rule,
  /*  243 */  immP0_rule,
  /*  244 */  iRegP_rule,
  /*  245 */  immN0_rule,
  /*  246 */  iRegN_rule,
  /*  247 */  vRegF_rule,
  /*  248 */  vRegD_rule,
  /*  249 */  0,
  /*  250 */  0,
  /*  251 */  immIScale_rule,
  /*  252 */  iRegIorL2I_rule,
  /*  253 */  iRegIorL2I_rule,
  /*  254 */  iRegL_rule,
  /*  255 */  iRegL_rule,
  /*  256 */  _ConvI2L_iRegIorL2I__rule,
  /*  257 */  _ConvI2L_iRegIorL2I__rule,
  /*  258 */  immI_M1_rule,
  /*  259 */  immL_M1_rule,
  /*  260 */  iRegIorL2I_rule,
  /*  261 */  iRegL_rule,
  /*  262 */  immI_rule,
  /*  263 */  immI_M1_rule,
  /*  264 */  immI_rule,
  /*  265 */  immL_M1_rule,
  /*  266 */  immI_rule,
  /*  267 */  immI_M1_rule,
  /*  268 */  immI_rule,
  /*  269 */  immL_M1_rule,
  /*  270 */  immI_rule,
  /*  271 */  immI_M1_rule,
  /*  272 */  immI_rule,
  /*  273 */  immL_M1_rule,
  /*  274 */  immI_rule,
  /*  275 */  immI_M1_rule,
  /*  276 */  immI_rule,
  /*  277 */  immL_M1_rule,
  /*  278 */  iRegIorL2I_rule,
  /*  279 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  280 */  iRegL_rule,
  /*  281 */  _URShiftL_iRegL_immI_rule,
  /*  282 */  iRegIorL2I_rule,
  /*  283 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  284 */  iRegL_rule,
  /*  285 */  _RShiftL_iRegL_immI_rule,
  /*  286 */  iRegIorL2I_rule,
  /*  287 */  _RotateRight_iRegIorL2I_immI_rule,
  /*  288 */  iRegL_rule,
  /*  289 */  _RotateRight_iRegL_immI_rule,
  /*  290 */  iRegIorL2I_rule,
  /*  291 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  292 */  iRegL_rule,
  /*  293 */  _LShiftL_iRegL_immI_rule,
  /*  294 */  immI_bitmask_rule,
  /*  295 */  immI_bitmask_rule,
  /*  296 */  immL_bitmask_rule,
  /*  297 */  immI_rule,
  /*  298 */  immL_positive_bitmaskI_rule,
  /*  299 */  immI_rule,
  /*  300 */  0,
  /*  301 */  0,
  /*  302 */  immI_bitmask_rule,
  /*  303 */  immI_16_rule,
  /*  304 */  immI_16_rule,
  /*  305 */  immI_24_rule,
  /*  306 */  immI_24_rule,
  /*  307 */  immI_24_rule,
  /*  308 */  immI_48_rule,
  /*  309 */  immI_48_rule,
  /*  310 */  immI_32_rule,
  /*  311 */  immI_32_rule,
  /*  312 */  immI_56_rule,
  /*  313 */  immI_56_rule,
  /*  314 */  immI_56_rule,
  /*  315 */  immI_255_rule,
  /*  316 */  immI_65535_rule,
  /*  317 */  immL_255_rule,
  /*  318 */  immL_65535_rule,
  /*  319 */  immL_4294967295_rule,
  /*  320 */  immIExt_rule,
  /*  321 */  immIExt_rule,
  /*  322 */  immIExt_rule,
  /*  323 */  immIExt_rule,
  /*  324 */  immIExt_rule,
  /*  325 */  immIExt_rule,
  /*  326 */  immIExt_rule,
  /*  327 */  immIExt_rule,
  /*  328 */  immIExt_rule,
  /*  329 */  immIExt_rule,
  /*  330 */  immIExt_rule,
  /*  331 */  0,
  /*  332 */  vRegF_rule,
  /*  333 */  _NegF_vRegF__rule,
  /*  334 */  0,
  /*  335 */  vRegD_rule,
  /*  336 */  _NegD_vRegD__rule,
  /*  337 */  vRegF_rule,
  /*  338 */  vRegD_rule,
  /*  339 */  iRegIorL2I_rule,
  /*  340 */  iRegL_rule,
  /*  341 */  immI0_rule,
  /*  342 */  immL0_rule,
  /*  343 */  immP0_rule,
  /*  344 */  immN0_rule,
  /*  345 */  immP0_rule,
  /*  346 */  immI0_rule,
  /*  347 */  immL0_rule,
  /*  348 */  immL_rule,
  /*  349 */  immL0_rule,
  /*  350 */  immI_rule,
  /*  351 */  immI0_rule,
  /*  352 */  iRegL_rule,
  /*  353 */  iRegIorL2I_rule,
  /*  354 */  iRegP_R0_rule,
  /*  355 */  iRegI_R2_rule,
  /*  356 */  iRegI_R4_rule,
  /*  357 */  iRegI_R4_rule,
  /*  358 */  iRegI_R2_rule,
  /*  359 */  immI_le_4_rule,
  /*  360 */  immI_1_rule,
  /*  361 */  iRegP_R3_rule,
  /*  362 */  iRegI_R3_rule,
  /*  363 */  iRegIorL2I_rule,
  /*  364 */  iRegIorL2I_rule,
  /*  365 */  iRegL_rule,
  /*  366 */  vRegF_rule,
  /*  367 */  vRegF_rule,
  /*  368 */  vRegD_rule,
  /*  369 */  vecD_rule,
  /*  370 */  vecX_rule,
  /*  371 */  0,
  /*  372 */  0,
  /*  373 */  0,
  /*  374 */  0,
  /*  375 */  _ReplicateB_immI_M1__rule,
  /*  376 */  vecD_rule,
  /*  377 */  _ReplicateS_immI_M1__rule,
  /*  378 */  vecD_rule,
  /*  379 */  _ReplicateI_immI_M1__rule,
  /*  380 */  vecD_rule,
  /*  381 */  _ReplicateB_immI_M1__rule,
  /*  382 */  vecX_rule,
  /*  383 */  _ReplicateS_immI_M1__rule,
  /*  384 */  vecX_rule,
  /*  385 */  _ReplicateI_immI_M1__rule,
  /*  386 */  vecX_rule,
  /*  387 */  _ReplicateL_immL_M1__rule,
  /*  388 */  vecX_rule,
  /*  389 */  vecD_rule,
  /*  390 */  vecX_rule,
  /*  391 */  vecX_rule,
  /*  392 */  vecD_rule,
  /*  393 */  vecX_rule,
  /*  394 */  vecD_rule,
  /*  395 */  vecX_rule,
  /*  396 */  0,
  /*  397 */  vecD_rule,
  /*  398 */  _NegVF_vecD__rule,
  /*  399 */  0,
  /*  400 */  vecX_rule,
  /*  401 */  _NegVF_vecX__rule,
  /*  402 */  0,
  /*  403 */  vecX_rule,
  /*  404 */  _NegVD_vecX__rule,
  /*  405 */  0,
  /*  406 */  0,
  /*  407 */  _RShiftCntV_immI__rule,
  /*  408 */  _RShiftCntV_immI__rule,
  /*  409 */  _RShiftCntV_immI__rule,
  /*  410 */  _RShiftCntV_immI__rule,
  /*  411 */  _RShiftCntV_immI__rule,
  /*  412 */  _RShiftCntV_immI__rule,
  /*  413 */  _RShiftCntV_immI__rule,
  /*  414 */  _RShiftCntV_immI__rule,
  /*  415 */  _RShiftCntV_immI__rule,
  /*  416 */  _RShiftCntV_immI__rule,
  /*  417 */  _RShiftCntV_immI__rule,
  /*  418 */  _RShiftCntV_immI__rule,
  /*  419 */  _RShiftCntV_immI__rule,
  /*  420 */  _RShiftCntV_immI__rule,
  /*  421 */  pRegGov_rule,
  /*  422 */  0,
  /*  423 */  _MaskAll_immI_M1__rule,
  /*  424 */  0,
  /*  425 */  _MaskAll_immL_M1__rule,
  /*  426 */  vReg_rule,
  /*  427 */  0,
  /*  428 */  0,
  /*  429 */  0,
  /*  430 */  0,
  /*  431 */  0,
  /*  432 */  0,
  /*  433 */  0,
  /*  434 */  0,
  /*  435 */  _ReplicateB_immI_M1__rule,
  /*  436 */  vReg_rule,
  /*  437 */  _ReplicateS_immI_M1__rule,
  /*  438 */  vReg_rule,
  /*  439 */  _ReplicateI_immI_M1__rule,
  /*  440 */  vReg_rule,
  /*  441 */  _ReplicateL_immL_M1__rule,
  /*  442 */  vReg_rule,
  /*  443 */  0,
  /*  444 */  vReg_rule,
  /*  445 */  _NegVF_vReg__rule,
  /*  446 */  0,
  /*  447 */  vReg_rule,
  /*  448 */  _NegVD_vReg__rule,
  /*  449 */  vReg_rule,
  /*  450 */  vReg_rule,
  /*  451 */  vReg_rule,
  /*  452 */  vReg_rule,
  /*  453 */  pRegGov_rule,
  /*  454 */  0,
  /*  455 */  immI_gt_1_rule,
  /*  456 */  vReg_rule,
  /*  457 */  vReg_rule,
  /*  458 */  vReg_rule,
  /*  459 */  vReg_rule,
  /*  460 */  _RShiftCntV_immI__rule,
  /*  461 */  _LShiftCntV_immI__rule,
  /*  462 */  iRegIorL2I_rule,
  /*  463 */  vRegF_rule,
  /*  464 */  iRegL_rule,
  /*  465 */  vRegD_rule,
  /*  466 */  _Binary_vReg_pRegGov_rule,
  // last internally defined operand
  /*  467 */  0,
  /*  468 */  0,
  /*  469 */  0,
  /*  470 */  0,
  /*  471 */  0,
  /*  472 */  0,
  /*  473 */  0,
  /*  474 */  0,
  /*  475 */  0,
  /*  476 */  0,
  /*  477 */  0,
  /*  478 */  0,
  /*  479 */  0,
  /*  480 */  0,
  /*  481 */  0,
  /*  482 */  0,
  /*  483 */  0,
  /*  484 */  0,
  /*  485 */  0,
  /*  486 */  0,
  /*  487 */  0,
  /*  488 */  0,
  /*  489 */  0,
  /*  490 */  0,
  /*  491 */  0,
  /*  492 */  0,
  /*  493 */  0,
  /*  494 */  0,
  /*  495 */  0,
  /*  496 */  _Binary_iRegP_iRegP_rule,
  /*  497 */  _Binary_iRegLNoSp_iRegLNoSp_rule,
  /*  498 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  499 */  0,
  /*  500 */  0,
  /*  501 */  0,
  /*  502 */  0,
  /*  503 */  0,
  /*  504 */  0,
  /*  505 */  0,
  /*  506 */  0,
  /*  507 */  0,
  /*  508 */  0,
  /*  509 */  0,
  /*  510 */  0,
  /*  511 */  iRegIorL2I_rule,
  /*  512 */  immIAddSub_rule,
  /*  513 */  iRegL_rule,
  /*  514 */  immLAddSub_rule,
  /*  515 */  iRegIorL2I_rule,
  /*  516 */  immIAddSub_rule,
  /*  517 */  iRegL_rule,
  /*  518 */  immLAddSub_rule,
  /*  519 */  iRegIorL2I_rule,
  /*  520 */  iRegL_rule,
  /*  521 */  iRegIorL2I_rule,
  /*  522 */  iRegL_rule,
  /*  523 */  iRegI_rule,
  /*  524 */  immI0_rule,
  /*  525 */  immIAddSub_rule,
  /*  526 */  immI_rule,
  /*  527 */  iRegI_rule,
  /*  528 */  immI0_rule,
  /*  529 */  immIAddSub_rule,
  /*  530 */  immI_rule,
  /*  531 */  iRegL_rule,
  /*  532 */  immL0_rule,
  /*  533 */  immLAddSub_rule,
  /*  534 */  immL_rule,
  /*  535 */  iRegL_rule,
  /*  536 */  immL0_rule,
  /*  537 */  immLAddSub_rule,
  /*  538 */  immL_rule,
  /*  539 */  iRegP_rule,
  /*  540 */  iRegN_rule,
  /*  541 */  immP0_rule,
  /*  542 */  immN0_rule,
  /*  543 */  vRegF_rule,
  /*  544 */  immF0_rule,
  /*  545 */  vRegD_rule,
  /*  546 */  immD0_rule,
  /*  547 */  immL0_rule,
  /*  548 */  immI0_rule,
  /*  549 */  immL0_rule,
  /*  550 */  immI0_rule,
  /*  551 */  iRegP_rule,
  /*  552 */  iRegP_rule,
  /*  553 */  immP0_rule,
  /*  554 */  0,
  /*  555 */  0,
  /*  556 */  0,
  /*  557 */  0,
  /*  558 */  0,
  /*  559 */  0,
  /*  560 */  0,
  /*  561 */  0,
  /*  562 */  0,
  /*  563 */  0,
  /*  564 */  0,
  /*  565 */  0,
  /*  566 */  0,
  /*  567 */  0,
  /*  568 */  0,
  /*  569 */  0,
  /*  570 */  0,
  /*  571 */  0,
  /*  572 */  0,
  /*  573 */  0,
  /*  574 */  0,
  /*  575 */  0,
  /*  576 */  0,
  /*  577 */  0,
  /*  578 */  0,
  /*  579 */  0,
  /*  580 */  0,
  /*  581 */  0,
  /*  582 */  0,
  /*  583 */  0,
  /*  584 */  0,
  /*  585 */  0,
  /*  586 */  0,
  /*  587 */  0,
  /*  588 */  0,
  /*  589 */  0,
  /*  590 */  0,
  /*  591 */  0,
  /*  592 */  0,
  /*  593 */  0,
  /*  594 */  0,
  /*  595 */  0,
  /*  596 */  0,
  /*  597 */  0,
  /*  598 */  0,
  /*  599 */  0,
  /*  600 */  0,
  /*  601 */  0,
  /*  602 */  0,
  /*  603 */  0,
  /*  604 */  0,
  /*  605 */  0,
  /*  606 */  0,
  /*  607 */  0,
  /*  608 */  0,
  /*  609 */  0,
  /*  610 */  0,
  /*  611 */  0,
  /*  612 */  0,
  /*  613 */  0,
  /*  614 */  0,
  /*  615 */  0,
  /*  616 */  0,
  /*  617 */  0,
  /*  618 */  0,
  /*  619 */  0,
  /*  620 */  0,
  /*  621 */  0,
  /*  622 */  0,
  /*  623 */  0,
  /*  624 */  0,
  /*  625 */  0,
  /*  626 */  0,
  /*  627 */  0,
  /*  628 */  0,
  /*  629 */  0,
  /*  630 */  0,
  /*  631 */  0,
  /*  632 */  0,
  /*  633 */  0,
  /*  634 */  0,
  /*  635 */  0,
  /*  636 */  0,
  /*  637 */  0,
  /*  638 */  0,
  /*  639 */  0,
  /*  640 */  0,
  /*  641 */  0,
  /*  642 */  0,
  /*  643 */  0,
  /*  644 */  0,
  /*  645 */  0,
  /*  646 */  0,
  /*  647 */  0,
  /*  648 */  0,
  /*  649 */  0,
  /*  650 */  0,
  /*  651 */  0,
  /*  652 */  0,
  /*  653 */  0,
  /*  654 */  0,
  /*  655 */  0,
  /*  656 */  0,
  /*  657 */  0,
  /*  658 */  0,
  /*  659 */  0,
  /*  660 */  0,
  /*  661 */  0,
  /*  662 */  0,
  /*  663 */  0,
  /*  664 */  0,
  /*  665 */  0,
  /*  666 */  0,
  /*  667 */  0,
  /*  668 */  0,
  /*  669 */  0,
  /*  670 */  0,
  /*  671 */  0,
  /*  672 */  0,
  /*  673 */  0,
  /*  674 */  0,
  /*  675 */  0,
  /*  676 */  0,
  /*  677 */  0,
  /*  678 */  0,
  /*  679 */  immL_32bits_rule,
  /*  680 */  0,
  /*  681 */  0,
  /*  682 */  0,
  /*  683 */  0,
  /*  684 */  0,
  /*  685 */  0,
  /*  686 */  0,
  /*  687 */  0,
  /*  688 */  immI0_rule,
  /*  689 */  immI0_rule,
  /*  690 */  iRegIorL2I_rule,
  /*  691 */  immI0_rule,
  /*  692 */  iRegIorL2I_rule,
  /*  693 */  immI0_rule,
  /*  694 */  iRegIorL2I_rule,
  /*  695 */  immI0_rule,
  /*  696 */  iRegL_rule,
  /*  697 */  immL0_rule,
  /*  698 */  iRegP_rule,
  /*  699 */  immP0_rule,
  /*  700 */  iRegN_rule,
  /*  701 */  immN0_rule,
  /*  702 */  vRegF_rule,
  /*  703 */  vRegD_rule,
  /*  704 */  iRegN_rule,
  /*  705 */  0,
  /*  706 */  0,
  /*  707 */  0,
  /*  708 */  0,
  /*  709 */  0,
  /*  710 */  0,
  /*  711 */  0,
  /*  712 */  0,
  /*  713 */  0,
  /*  714 */  0,
  /*  715 */  immL_32bits_rule,
  /*  716 */  0,
  /*  717 */  0,
  /*  718 */  0,
  /*  719 */  0,
  /*  720 */  0,
  /*  721 */  iRegIorL2I_rule,
  /*  722 */  iRegIorL2I_rule,
  /*  723 */  iRegIorL2I_rule,
  /*  724 */  iRegL_rule,
  /*  725 */  iRegP_rule,
  /*  726 */  iRegN_rule,
  /*  727 */  vRegF_rule,
  /*  728 */  vRegD_rule,
  /*  729 */  0,
  /*  730 */  0,
  /*  731 */  0,
  /*  732 */  0,
  /*  733 */  0,
  /*  734 */  0,
  /*  735 */  0,
  /*  736 */  0,
  /*  737 */  0,
  /*  738 */  0,
  /*  739 */  0,
  /*  740 */  0,
  /*  741 */  0,
  /*  742 */  0,
  /*  743 */  0,
  /*  744 */  0,
  /*  745 */  0,
  /*  746 */  0,
  /*  747 */  0,
  /*  748 */  0,
  /*  749 */  0,
  /*  750 */  0,
  /*  751 */  0,
  /*  752 */  0,
  /*  753 */  0,
  /*  754 */  0,
  /*  755 */  0,
  /*  756 */  0,
  /*  757 */  0,
  /*  758 */  0,
  /*  759 */  0,
  /*  760 */  0,
  /*  761 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  762 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  763 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  764 */  _Binary_iRegLNoSp_iRegLNoSp_rule,
  /*  765 */  _Binary_iRegP_iRegP_rule,
  /*  766 */  _Binary_iRegNNoSp_iRegNNoSp_rule,
  /*  767 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  768 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  769 */  _Binary_iRegINoSp_iRegINoSp_rule,
  /*  770 */  _Binary_iRegLNoSp_iRegLNoSp_rule,
  /*  771 */  _Binary_iRegP_iRegP_rule,
  /*  772 */  _Binary_iRegNNoSp_iRegNNoSp_rule,
  /*  773 */  _Binary_iRegI_iRegI_rule,
  /*  774 */  _Binary_iRegI_iRegI_rule,
  /*  775 */  _Binary_iRegI_iRegI_rule,
  /*  776 */  _Binary_iRegL_iRegL_rule,
  /*  777 */  _Binary_iRegN_iRegN_rule,
  /*  778 */  _Binary_iRegP_iRegP_rule,
  /*  779 */  _Binary_iRegI_iRegI_rule,
  /*  780 */  _Binary_iRegI_iRegI_rule,
  /*  781 */  _Binary_iRegI_iRegI_rule,
  /*  782 */  _Binary_iRegL_iRegL_rule,
  /*  783 */  _Binary_iRegN_iRegN_rule,
  /*  784 */  _Binary_iRegP_iRegP_rule,
  /*  785 */  _Binary_iRegI_iRegI_rule,
  /*  786 */  _Binary_iRegI_iRegI_rule,
  /*  787 */  _Binary_iRegI_iRegI_rule,
  /*  788 */  _Binary_iRegL_iRegL_rule,
  /*  789 */  _Binary_iRegN_iRegN_rule,
  /*  790 */  _Binary_iRegP_iRegP_rule,
  /*  791 */  _Binary_iRegI_iRegI_rule,
  /*  792 */  _Binary_iRegI_iRegI_rule,
  /*  793 */  _Binary_iRegI_iRegI_rule,
  /*  794 */  _Binary_iRegL_iRegL_rule,
  /*  795 */  _Binary_iRegN_iRegN_rule,
  /*  796 */  _Binary_iRegP_iRegP_rule,
  /*  797 */  iRegI_rule,
  /*  798 */  iRegL_rule,
  /*  799 */  iRegN_rule,
  /*  800 */  iRegP_rule,
  /*  801 */  iRegI_rule,
  /*  802 */  iRegL_rule,
  /*  803 */  iRegN_rule,
  /*  804 */  iRegP_rule,
  /*  805 */  iRegL_rule,
  /*  806 */  iRegL_rule,
  /*  807 */  immLAddSub_rule,
  /*  808 */  immLAddSub_rule,
  /*  809 */  iRegIorL2I_rule,
  /*  810 */  iRegIorL2I_rule,
  /*  811 */  immIAddSub_rule,
  /*  812 */  immIAddSub_rule,
  /*  813 */  iRegL_rule,
  /*  814 */  iRegL_rule,
  /*  815 */  immLAddSub_rule,
  /*  816 */  immLAddSub_rule,
  /*  817 */  iRegIorL2I_rule,
  /*  818 */  iRegIorL2I_rule,
  /*  819 */  immIAddSub_rule,
  /*  820 */  immIAddSub_rule,
  /*  821 */  iRegL_rule,
  /*  822 */  immLAddSub_rule,
  /*  823 */  _Binary_iRegIorL2I_iRegIorL2I_rule,
  /*  824 */  _Binary_iRegIorL2I_iRegIorL2I_rule,
  /*  825 */  _Binary_immI0_iRegIorL2I_rule,
  /*  826 */  _Binary_immI0_iRegIorL2I_rule,
  /*  827 */  _Binary_iRegIorL2I_immI0_rule,
  /*  828 */  _Binary_iRegIorL2I_immI0_rule,
  /*  829 */  _Binary_immI_1_immI0_rule,
  /*  830 */  _Binary_immI_1_immI0_rule,
  /*  831 */  _Binary_iRegL_iRegL_rule,
  /*  832 */  _Binary_iRegL_iRegL_rule,
  /*  833 */  _Binary_iRegL_immL0_rule,
  /*  834 */  _Binary_iRegL_immL0_rule,
  /*  835 */  _Binary_immL0_iRegL_rule,
  /*  836 */  _Binary_immL0_iRegL_rule,
  /*  837 */  _Binary_iRegP_iRegP_rule,
  /*  838 */  _Binary_iRegP_iRegP_rule,
  /*  839 */  _Binary_iRegP_immP0_rule,
  /*  840 */  _Binary_iRegP_immP0_rule,
  /*  841 */  _Binary_immP0_iRegP_rule,
  /*  842 */  _Binary_immP0_iRegP_rule,
  /*  843 */  _Binary_iRegN_iRegN_rule,
  /*  844 */  _Binary_iRegN_iRegN_rule,
  /*  845 */  _Binary_iRegN_immN0_rule,
  /*  846 */  _Binary_iRegN_immN0_rule,
  /*  847 */  _Binary_immN0_iRegN_rule,
  /*  848 */  _Binary_immN0_iRegN_rule,
  /*  849 */  _Binary_vRegF_vRegF_rule,
  /*  850 */  _Binary_vRegF_vRegF_rule,
  /*  851 */  _Binary_vRegD_vRegD_rule,
  /*  852 */  _Binary_vRegD_vRegD_rule,
  /*  853 */  iRegIorL2I_rule,
  /*  854 */  immIAddSub_rule,
  /*  855 */  immIAddSub_rule,
  /*  856 */  iRegL_rule,
  /*  857 */  _ConvI2L_iRegIorL2I__rule,
  /*  858 */  _LShiftL_iRegL_immIScale_rule,
  /*  859 */  _LShiftL__ConvI2L_iRegIorL2I__immIScale_rule,
  /*  860 */  immI_rule,
  /*  861 */  immLAddSub_rule,
  /*  862 */  iRegL_rule,
  /*  863 */  immLAddSub_rule,
  /*  864 */  iRegIorL2I_rule,
  /*  865 */  immIAddSub_rule,
  /*  866 */  iRegL_rule,
  /*  867 */  immLAddSub_rule,
  /*  868 */  iRegIorL2I_rule,
  /*  869 */  iRegL_rule,
  /*  870 */  iRegIorL2I_rule,
  /*  871 */  _ConvI2L_iRegIorL2I__rule,
  /*  872 */  _ConvI2L_iRegIorL2I__rule,
  /*  873 */  iRegL_rule,
  /*  874 */  iRegL_rule,
  /*  875 */  _MulI_iRegIorL2I_iRegIorL2I_rule,
  /*  876 */  iRegIorL2I_rule,
  /*  877 */  _MulI_iRegIorL2I_iRegIorL2I_rule,
  /*  878 */  iRegIorL2I_rule,
  /*  879 */  _SubI_immI0_iRegIorL2I_rule,
  /*  880 */  _MulL_iRegL_iRegL_rule,
  /*  881 */  iRegL_rule,
  /*  882 */  _MulL_iRegL_iRegL_rule,
  /*  883 */  iRegL_rule,
  /*  884 */  _SubL_immL0_iRegL_rule,
  /*  885 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  886 */  iRegLNoSp_rule,
  /*  887 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  888 */  iRegLNoSp_rule,
  /*  889 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  890 */  _MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I__rule,
  /*  891 */  _ConvI2L_iRegIorL2I__rule,
  /*  892 */  _SubL_immL0__ConvI2L_iRegIorL2I__rule,
  /*  893 */  _Binary_iRegIorL2I_iRegIorL2I_rule,
  /*  894 */  iRegIorL2I_rule,
  /*  895 */  iRegL_rule,
  /*  896 */  iRegIorL2I_rule,
  /*  897 */  iRegL_rule,
  /*  898 */  iRegIorL2I_rule,
  /*  899 */  immI_rule,
  /*  900 */  iRegIorL2I_rule,
  /*  901 */  immI_rule,
  /*  902 */  iRegIorL2I_rule,
  /*  903 */  immI_rule,
  /*  904 */  iRegIorL2I_rule,
  /*  905 */  immI_rule,
  /*  906 */  iRegIorL2I_rule,
  /*  907 */  immI_rule,
  /*  908 */  immI_rule,
  /*  909 */  iRegIorL2I_rule,
  /*  910 */  immI_rule,
  /*  911 */  immL_M1_rule,
  /*  912 */  immI_M1_rule,
  /*  913 */  _XorI_iRegIorL2I_immI_M1_rule,
  /*  914 */  iRegIorL2I_rule,
  /*  915 */  _XorL_iRegL_immL_M1_rule,
  /*  916 */  iRegL_rule,
  /*  917 */  _XorI_iRegIorL2I_immI_M1_rule,
  /*  918 */  iRegIorL2I_rule,
  /*  919 */  _XorL_iRegL_immL_M1_rule,
  /*  920 */  iRegL_rule,
  /*  921 */  _XorI_iRegIorL2I_iRegIorL2I_rule,
  /*  922 */  immI_M1_rule,
  /*  923 */  _XorL_iRegL_iRegL_rule,
  /*  924 */  immL_M1_rule,
  /*  925 */  _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  926 */  iRegIorL2I_rule,
  /*  927 */  _XorL__URShiftL_iRegL_immI_immL_M1_rule,
  /*  928 */  iRegL_rule,
  /*  929 */  _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  930 */  iRegIorL2I_rule,
  /*  931 */  _XorL__RShiftL_iRegL_immI_immL_M1_rule,
  /*  932 */  iRegL_rule,
  /*  933 */  _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule,
  /*  934 */  iRegIorL2I_rule,
  /*  935 */  _XorL__RotateRight_iRegL_immI_immL_M1_rule,
  /*  936 */  iRegL_rule,
  /*  937 */  _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  938 */  iRegIorL2I_rule,
  /*  939 */  _XorL__LShiftL_iRegL_immI_immL_M1_rule,
  /*  940 */  iRegL_rule,
  /*  941 */  _XorI__URShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  942 */  immI_M1_rule,
  /*  943 */  _XorI_iRegIorL2I__URShiftI_iRegIorL2I_immI_rule,
  /*  944 */  immI_M1_rule,
  /*  945 */  _XorL__URShiftL_iRegL_immI_iRegL_rule,
  /*  946 */  immL_M1_rule,
  /*  947 */  _XorL_iRegL__URShiftL_iRegL_immI_rule,
  /*  948 */  immL_M1_rule,
  /*  949 */  _XorI__RShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  950 */  immI_M1_rule,
  /*  951 */  _XorI_iRegIorL2I__RShiftI_iRegIorL2I_immI_rule,
  /*  952 */  immI_M1_rule,
  /*  953 */  _XorL__RShiftL_iRegL_immI_iRegL_rule,
  /*  954 */  immL_M1_rule,
  /*  955 */  _XorL_iRegL__RShiftL_iRegL_immI_rule,
  /*  956 */  immL_M1_rule,
  /*  957 */  _XorI__RotateRight_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  958 */  immI_M1_rule,
  /*  959 */  _XorI_iRegIorL2I__RotateRight_iRegIorL2I_immI_rule,
  /*  960 */  immI_M1_rule,
  /*  961 */  _XorL__RotateRight_iRegL_immI_iRegL_rule,
  /*  962 */  immL_M1_rule,
  /*  963 */  _XorL_iRegL__RotateRight_iRegL_immI_rule,
  /*  964 */  immL_M1_rule,
  /*  965 */  _XorI__LShiftI_iRegIorL2I_immI_iRegIorL2I_rule,
  /*  966 */  immI_M1_rule,
  /*  967 */  _XorI_iRegIorL2I__LShiftI_iRegIorL2I_immI_rule,
  /*  968 */  immI_M1_rule,
  /*  969 */  _XorL__LShiftL_iRegL_immI_iRegL_rule,
  /*  970 */  immL_M1_rule,
  /*  971 */  _XorL_iRegL__LShiftL_iRegL_immI_rule,
  /*  972 */  immL_M1_rule,
  /*  973 */  _XorI__URShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  974 */  iRegIorL2I_rule,
  /*  975 */  _XorL__URShiftL_iRegL_immI_immL_M1_rule,
  /*  976 */  iRegL_rule,
  /*  977 */  _XorI__RShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  978 */  iRegIorL2I_rule,
  /*  979 */  _XorL__RShiftL_iRegL_immI_immL_M1_rule,
  /*  980 */  iRegL_rule,
  /*  981 */  _XorI__RotateRight_iRegIorL2I_immI_immI_M1_rule,
  /*  982 */  iRegIorL2I_rule,
  /*  983 */  _XorL__RotateRight_iRegL_immI_immL_M1_rule,
  /*  984 */  iRegL_rule,
  /*  985 */  _XorI__LShiftI_iRegIorL2I_immI_immI_M1_rule,
  /*  986 */  iRegIorL2I_rule,
  /*  987 */  _XorL__LShiftL_iRegL_immI_immL_M1_rule,
  /*  988 */  iRegL_rule,
  /*  989 */  _URShiftI_iRegIorL2I_immI_rule,
  /*  990 */  iRegIorL2I_rule,
  /*  991 */  _URShiftL_iRegL_immI_rule,
  /*  992 */  iRegL_rule,
  /*  993 */  _RShiftI_iRegIorL2I_immI_rule,
  /*  994 */  iRegIorL2I_rule,
  /*  995 */  _RShiftL_iRegL_immI_rule,
  /*  996 */  iRegL_rule,
  /*  997 */  _LShiftI_iRegIorL2I_immI_rule,
  /*  998 */  iRegIorL2I_rule,
  /*  999 */  _LShiftL_iRegL_immI_rule,
  /* 1000 */  iRegL_rule,
  /* 1001 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1002 */  iRegIorL2I_rule,
  /* 1003 */  _RotateRight_iRegL_immI_rule,
  /* 1004 */  iRegL_rule,
  /* 1005 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1006 */  iRegIorL2I_rule,
  /* 1007 */  _URShiftL_iRegL_immI_rule,
  /* 1008 */  iRegL_rule,
  /* 1009 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1010 */  iRegIorL2I_rule,
  /* 1011 */  _RShiftL_iRegL_immI_rule,
  /* 1012 */  iRegL_rule,
  /* 1013 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1014 */  iRegIorL2I_rule,
  /* 1015 */  _LShiftL_iRegL_immI_rule,
  /* 1016 */  iRegL_rule,
  /* 1017 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1018 */  iRegIorL2I_rule,
  /* 1019 */  _RotateRight_iRegL_immI_rule,
  /* 1020 */  iRegL_rule,
  /* 1021 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1022 */  iRegIorL2I_rule,
  /* 1023 */  _URShiftL_iRegL_immI_rule,
  /* 1024 */  iRegL_rule,
  /* 1025 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1026 */  iRegIorL2I_rule,
  /* 1027 */  _RShiftL_iRegL_immI_rule,
  /* 1028 */  iRegL_rule,
  /* 1029 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1030 */  iRegIorL2I_rule,
  /* 1031 */  _LShiftL_iRegL_immI_rule,
  /* 1032 */  iRegL_rule,
  /* 1033 */  _RotateRight_iRegIorL2I_immI_rule,
  /* 1034 */  iRegIorL2I_rule,
  /* 1035 */  _RotateRight_iRegL_immI_rule,
  /* 1036 */  iRegL_rule,
  /* 1037 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1038 */  iRegIorL2I_rule,
  /* 1039 */  _URShiftL_iRegL_immI_rule,
  /* 1040 */  iRegL_rule,
  /* 1041 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1042 */  iRegIorL2I_rule,
  /* 1043 */  _RShiftL_iRegL_immI_rule,
  /* 1044 */  iRegL_rule,
  /* 1045 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1046 */  iRegIorL2I_rule,
  /* 1047 */  _LShiftL_iRegL_immI_rule,
  /* 1048 */  iRegL_rule,
  /* 1049 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1050 */  _URShiftL_iRegL_immI_rule,
  /* 1051 */  _RShiftI_iRegIorL2I_immI_rule,
  /* 1052 */  _RShiftL_iRegL_immI_rule,
  /* 1053 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1054 */  _LShiftL_iRegL_immI_rule,
  /* 1055 */  immI_rule,
  /* 1056 */  immI_rule,
  /* 1057 */  immI_rule,
  /* 1058 */  immI_rule,
  /* 1059 */  immI_bitmask_rule,
  /* 1060 */  immL_bitmask_rule,
  /* 1061 */  0,
  /* 1062 */  immI_rule,
  /* 1063 */  immI_rule,
  /* 1064 */  0,
  /* 1065 */  0,
  /* 1066 */  immI_rule,
  /* 1067 */  immI_rule,
  /* 1068 */  0,
  /* 1069 */  _URShiftL_iRegL_immI_rule,
  /* 1070 */  _LShiftL_iRegL_immI_rule,
  /* 1071 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1072 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1073 */  _URShiftL_iRegL_immI_rule,
  /* 1074 */  _LShiftL_iRegL_immI_rule,
  /* 1075 */  _URShiftI_iRegIorL2I_immI_rule,
  /* 1076 */  _LShiftI_iRegIorL2I_immI_rule,
  /* 1077 */  immI_rule,
  /* 1078 */  immI_rule,
  /* 1079 */  iRegI_rule,
  /* 1080 */  iRegI_rule,
  /* 1081 */  iRegI_rule,
  /* 1082 */  iRegI_rule,
  /* 1083 */  _ConvI2L_iRegIorL2I__rule,
  /* 1084 */  iRegL_rule,
  /* 1085 */  _ConvI2L_iRegIorL2I__rule,
  /* 1086 */  _RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_rule,
  /* 1087 */  iRegIorL2I_rule,
  /* 1088 */  _RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /* 1089 */  iRegIorL2I_rule,
  /* 1090 */  _URShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_rule,
  /* 1091 */  iRegIorL2I_rule,
  /* 1092 */  _RShiftL__LShiftL_iRegL_immI_48_immI_48_rule,
  /* 1093 */  iRegL_rule,
  /* 1094 */  _RShiftL__LShiftL_iRegL_immI_32_immI_32_rule,
  /* 1095 */  iRegL_rule,
  /* 1096 */  _RShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /* 1097 */  iRegL_rule,
  /* 1098 */  _URShiftL__LShiftL_iRegL_immI_56_immI_56_rule,
  /* 1099 */  iRegL_rule,
  /* 1100 */  _AndI_iRegIorL2I_immI_255_rule,
  /* 1101 */  iRegIorL2I_rule,
  /* 1102 */  _AndI_iRegIorL2I_immI_65535_rule,
  /* 1103 */  iRegIorL2I_rule,
  /* 1104 */  _AndL_iRegL_immL_255_rule,
  /* 1105 */  iRegL_rule,
  /* 1106 */  _AndL_iRegL_immL_65535_rule,
  /* 1107 */  iRegL_rule,
  /* 1108 */  _AndL_iRegL_immL_4294967295_rule,
  /* 1109 */  iRegL_rule,
  /* 1110 */  _AndI_iRegIorL2I_immI_255_rule,
  /* 1111 */  _AndI_iRegIorL2I_immI_65535_rule,
  /* 1112 */  _AndL_iRegL_immL_255_rule,
  /* 1113 */  _AndL_iRegL_immL_65535_rule,
  /* 1114 */  _AndL_iRegL_immL_4294967295_rule,
  /* 1115 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt_rule,
  /* 1116 */  iRegL_rule,
  /* 1117 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt_rule,
  /* 1118 */  iRegL_rule,
  /* 1119 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt_rule,
  /* 1120 */  iRegL_rule,
  /* 1121 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt_rule,
  /* 1122 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt_rule,
  /* 1123 */  _LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt_rule,
  /* 1124 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt_rule,
  /* 1125 */  iRegIorL2I_rule,
  /* 1126 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt_rule,
  /* 1127 */  iRegIorL2I_rule,
  /* 1128 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt_rule,
  /* 1129 */  _LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt_rule,
  /* 1130 */  _LShiftL__ConvI2L_iRegIorL2I__immIExt_rule,
  /* 1131 */  iRegL_rule,
  /* 1132 */  _LShiftL__ConvI2L_iRegIorL2I__immIExt_rule,
  /* 1133 */  _LShiftL__AndL_iRegL_immL_255_immIExt_rule,
  /* 1134 */  iRegL_rule,
  /* 1135 */  _LShiftL__AndL_iRegL_immL_65535_immIExt_rule,
  /* 1136 */  iRegL_rule,
  /* 1137 */  _LShiftL__AndL_iRegL_immL_4294967295_immIExt_rule,
  /* 1138 */  iRegL_rule,
  /* 1139 */  _LShiftL__AndL_iRegL_immL_255_immIExt_rule,
  /* 1140 */  _LShiftL__AndL_iRegL_immL_65535_immIExt_rule,
  /* 1141 */  _LShiftL__AndL_iRegL_immL_4294967295_immIExt_rule,
  /* 1142 */  _LShiftI__AndI_iRegIorL2I_immI_255_immIExt_rule,
  /* 1143 */  iRegIorL2I_rule,
  /* 1144 */  _LShiftI__AndI_iRegIorL2I_immI_65535_immIExt_rule,
  /* 1145 */  iRegIorL2I_rule,
  /* 1146 */  _LShiftI__AndI_iRegIorL2I_immI_255_immIExt_rule,
  /* 1147 */  _LShiftI__AndI_iRegIorL2I_immI_65535_immIExt_rule,
  /* 1148 */  vRegF_rule,
  /* 1149 */  vRegD_rule,
  /* 1150 */  vRegF_rule,
  /* 1151 */  vRegD_rule,
  /* 1152 */  vRegF_rule,
  /* 1153 */  vRegD_rule,
  /* 1154 */  _Binary_vRegF_vRegF_rule,
  /* 1155 */  _Binary_vRegD_vRegD_rule,
  /* 1156 */  _Binary__NegF_vRegF__vRegF_rule,
  /* 1157 */  _Binary_vRegF__NegF_vRegF__rule,
  /* 1158 */  _Binary__NegD_vRegD__vRegD_rule,
  /* 1159 */  _Binary_vRegD__NegD_vRegD__rule,
  /* 1160 */  _Binary__NegF_vRegF__vRegF_rule,
  /* 1161 */  _Binary_vRegF__NegF_vRegF__rule,
  /* 1162 */  _Binary__NegD_vRegD__vRegD_rule,
  /* 1163 */  _Binary_vRegD__NegD_vRegD__rule,
  /* 1164 */  _Binary_vRegF_vRegF_rule,
  /* 1165 */  _Binary_vRegD_vRegD_rule,
  /* 1166 */  vRegF_rule,
  /* 1167 */  vRegF_rule,
  /* 1168 */  vRegD_rule,
  /* 1169 */  vRegD_rule,
  /* 1170 */  vRegF_rule,
  /* 1171 */  vRegD_rule,
  /* 1172 */  0,
  /* 1173 */  0,
  /* 1174 */  0,
  /* 1175 */  0,
  /* 1176 */  0,
  /* 1177 */  0,
  /* 1178 */  immI_rule,
  /* 1179 */  _Binary_vRegD_vRegD_rule,
  /* 1180 */  vRegF_rule,
  /* 1181 */  _Binary_vRegD_vRegD_rule,
  /* 1182 */  _Binary_vRegF_vRegF_rule,
  /* 1183 */  0,
  /* 1184 */  iRegIorL2I_rule,
  /* 1185 */  immILog_rule,
  /* 1186 */  iRegIorL2I_rule,
  /* 1187 */  immILog_rule,
  /* 1188 */  iRegIorL2I_rule,
  /* 1189 */  immILog_rule,
  /* 1190 */  iRegL_rule,
  /* 1191 */  immLLog_rule,
  /* 1192 */  iRegL_rule,
  /* 1193 */  immLLog_rule,
  /* 1194 */  iRegL_rule,
  /* 1195 */  immLLog_rule,
  /* 1196 */  0,
  /* 1197 */  immL_32bits_rule,
  /* 1198 */  0,
  /* 1199 */  0,
  /* 1200 */  0,
  /* 1201 */  0,
  /* 1202 */  0,
  /* 1203 */  0,
  /* 1204 */  0,
  /* 1205 */  0,
  /* 1206 */  0,
  /* 1207 */  0,
  /* 1208 */  0,
  /* 1209 */  0,
  /* 1210 */  0,
  /* 1211 */  0,
  /* 1212 */  0,
  /* 1213 */  0,
  /* 1214 */  0,
  /* 1215 */  iRegP_R10_rule,
  /* 1216 */  iRegP_R10_rule,
  /* 1217 */  _OverflowMulI_iRegIorL2I_iRegIorL2I_rule,
  /* 1218 */  _OverflowMulL_iRegL_iRegL_rule,
  /* 1219 */  vRegF_rule,
  /* 1220 */  vRegD_rule,
  /* 1221 */  immF0_rule,
  /* 1222 */  immD0_rule,
  /* 1223 */  iRegIorL2I_rule,
  /* 1224 */  immI0_rule,
  /* 1225 */  0,
  /* 1226 */  iRegI_rule,
  /* 1227 */  0,
  /* 1228 */  iRegI_rule,
  /* 1229 */  0,
  /* 1230 */  rFlagsReg_rule,
  /* 1231 */  rFlagsRegU_rule,
  /* 1232 */  _CmpI_iRegIorL2I_immI0_rule,
  /* 1233 */  _CmpL_iRegL_immL0_rule,
  /* 1234 */  _CmpP_iRegP_immP0_rule,
  /* 1235 */  _CmpN_iRegN_immN0_rule,
  /* 1236 */  _CmpP__DecodeN_iRegN__immP0_rule,
  /* 1237 */  _CmpU_iRegIorL2I_immI0_rule,
  /* 1238 */  _CmpUL_iRegL_immL0_rule,
  /* 1239 */  _CmpL_iRegL_immL0_rule,
  /* 1240 */  _CmpI_iRegIorL2I_immI0_rule,
  /* 1241 */  _CmpL__AndL_iRegL_immL_immL0_rule,
  /* 1242 */  _CmpI__AndI_iRegIorL2I_immI_immI0_rule,
  /* 1243 */  _CmpL_iRegL_immL0_rule,
  /* 1244 */  _CmpI_iRegIorL2I_immI0_rule,
  /* 1245 */  _CmpL__AndL_iRegL_immL_immL0_rule,
  /* 1246 */  _CmpI__AndI_iRegIorL2I_immI_immI0_rule,
  /* 1247 */  rFlagsReg_rule,
  /* 1248 */  rFlagsRegU_rule,
  /* 1249 */  0,
  /* 1250 */  0,
  /* 1251 */  0,
  /* 1252 */  0,
  /* 1253 */  0,
  /* 1254 */  0,
  /* 1255 */  0,
  /* 1256 */  inline_cache_RegP_rule,
  /* 1257 */  iRegP_R0_rule,
  /* 1258 */  0,
  /* 1259 */  0,
  /* 1260 */  0,
  /* 1261 */  0,
  /* 1262 */  iRegP_R0_rule,
  /* 1263 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1264 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1265 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1266 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1267 */  _Binary_iRegP_R3_iRegI_R2_rule,
  /* 1268 */  _Binary_iRegP_R3_iRegI_R2_rule,
  /* 1269 */  _Binary_iRegP_R3_iRegI_R2_rule,
  /* 1270 */  _Binary_iRegP_R3_immI_le_4_rule,
  /* 1271 */  _Binary_iRegP_R3_immI_le_4_rule,
  /* 1272 */  _Binary_iRegP_R3_immI_1_rule,
  /* 1273 */  iRegI_R3_rule,
  /* 1274 */  iRegI_R3_rule,
  /* 1275 */  iRegI_R4_rule,
  /* 1276 */  iRegI_R4_rule,
  /* 1277 */  iRegP_R2_rule,
  /* 1278 */  iRegP_R2_rule,
  /* 1279 */  iRegI_R2_rule,
  /* 1280 */  _Binary_iRegP_R1_iRegI_R3_rule,
  /* 1281 */  _Binary_iRegP_R1_iRegI_R2_rule,
  /* 1282 */  _Binary_iRegP_R1_iRegI_R3_rule,
  /* 1283 */  0,
  /* 1284 */  0,
  /* 1285 */  0,
  /* 1286 */  0,
  /* 1287 */  vecD_rule,
  /* 1288 */  vecD_rule,
  /* 1289 */  vecD_rule,
  /* 1290 */  vecX_rule,
  /* 1291 */  0,
  /* 1292 */  vecD_rule,
  /* 1293 */  vecX_rule,
  /* 1294 */  vecD_rule,
  /* 1295 */  vecX_rule,
  /* 1296 */  vecX_rule,
  /* 1297 */  vecD_rule,
  /* 1298 */  vecX_rule,
  /* 1299 */  vecD_rule,
  /* 1300 */  vecX_rule,
  /* 1301 */  vecX_rule,
  /* 1302 */  vecD_rule,
  /* 1303 */  vecX_rule,
  /* 1304 */  vecD_rule,
  /* 1305 */  vecX_rule,
  /* 1306 */  vecX_rule,
  /* 1307 */  vecD_rule,
  /* 1308 */  vecX_rule,
  /* 1309 */  vecD_rule,
  /* 1310 */  vecX_rule,
  /* 1311 */  vecX_rule,
  /* 1312 */  vecD_rule,
  /* 1313 */  vecD_rule,
  /* 1314 */  vecX_rule,
  /* 1315 */  vecX_rule,
  /* 1316 */  vecD_rule,
  /* 1317 */  vecX_rule,
  /* 1318 */  vecX_rule,
  /* 1319 */  vecD_rule,
  /* 1320 */  vecX_rule,
  /* 1321 */  vecX_rule,
  /* 1322 */  vecD_rule,
  /* 1323 */  vecD_rule,
  /* 1324 */  vecD_rule,
  /* 1325 */  vecX_rule,
  /* 1326 */  vecX_rule,
  /* 1327 */  vecX_rule,
  /* 1328 */  vecD_rule,
  /* 1329 */  vecD_rule,
  /* 1330 */  vecD_rule,
  /* 1331 */  vecX_rule,
  /* 1332 */  vecX_rule,
  /* 1333 */  vecX_rule,
  /* 1334 */  vecD_rule,
  /* 1335 */  vecD_rule,
  /* 1336 */  vecD_rule,
  /* 1337 */  vecX_rule,
  /* 1338 */  vecX_rule,
  /* 1339 */  vecX_rule,
  /* 1340 */  vecX_rule,
  /* 1341 */  vecX_rule,
  /* 1342 */  vecX_rule,
  /* 1343 */  immI_rule,
  /* 1344 */  immI_rule,
  /* 1345 */  immI_rule,
  /* 1346 */  immI_rule,
  /* 1347 */  immI_rule,
  /* 1348 */  immI_rule,
  /* 1349 */  immI_rule,
  /* 1350 */  immI_rule,
  /* 1351 */  immI_rule,
  /* 1352 */  immI_rule,
  /* 1353 */  immI_rule,
  /* 1354 */  immI_rule,
  /* 1355 */  immI_rule,
  /* 1356 */  immI_rule,
  /* 1357 */  immI_rule,
  /* 1358 */  immI_rule,
  /* 1359 */  immI_rule,
  /* 1360 */  immI_rule,
  /* 1361 */  immI_rule,
  /* 1362 */  immI_rule,
  /* 1363 */  immI_rule,
  /* 1364 */  immI_rule,
  /* 1365 */  vecX_rule,
  /* 1366 */  _ReplicateB_immI_M1__rule,
  /* 1367 */  vecD_rule,
  /* 1368 */  _ReplicateS_immI_M1__rule,
  /* 1369 */  vecD_rule,
  /* 1370 */  _ReplicateI_immI_M1__rule,
  /* 1371 */  vecD_rule,
  /* 1372 */  _ReplicateB_immI_M1__rule,
  /* 1373 */  vecX_rule,
  /* 1374 */  _ReplicateS_immI_M1__rule,
  /* 1375 */  vecX_rule,
  /* 1376 */  _ReplicateI_immI_M1__rule,
  /* 1377 */  vecX_rule,
  /* 1378 */  _ReplicateL_immL_M1__rule,
  /* 1379 */  vecX_rule,
  /* 1380 */  _XorV_vecD__ReplicateB_immI_M1__rule,
  /* 1381 */  vecD_rule,
  /* 1382 */  _XorV__ReplicateB_immI_M1__vecD_rule,
  /* 1383 */  vecD_rule,
  /* 1384 */  _XorV_vecD__ReplicateS_immI_M1__rule,
  /* 1385 */  vecD_rule,
  /* 1386 */  _XorV__ReplicateS_immI_M1__vecD_rule,
  /* 1387 */  vecD_rule,
  /* 1388 */  _XorV_vecD__ReplicateI_immI_M1__rule,
  /* 1389 */  vecD_rule,
  /* 1390 */  _XorV__ReplicateI_immI_M1__vecD_rule,
  /* 1391 */  vecD_rule,
  /* 1392 */  _XorV_vecX__ReplicateB_immI_M1__rule,
  /* 1393 */  vecX_rule,
  /* 1394 */  _XorV__ReplicateB_immI_M1__vecX_rule,
  /* 1395 */  vecX_rule,
  /* 1396 */  _XorV_vecX__ReplicateS_immI_M1__rule,
  /* 1397 */  vecX_rule,
  /* 1398 */  _XorV__ReplicateS_immI_M1__vecX_rule,
  /* 1399 */  vecX_rule,
  /* 1400 */  _XorV_vecX__ReplicateI_immI_M1__rule,
  /* 1401 */  vecX_rule,
  /* 1402 */  _XorV__ReplicateI_immI_M1__vecX_rule,
  /* 1403 */  vecX_rule,
  /* 1404 */  _XorV_vecX__ReplicateL_immL_M1__rule,
  /* 1405 */  vecX_rule,
  /* 1406 */  _XorV__ReplicateL_immL_M1__vecX_rule,
  /* 1407 */  vecX_rule,
  /* 1408 */  vecD_rule,
  /* 1409 */  vecX_rule,
  /* 1410 */  vecD_rule,
  /* 1411 */  vecX_rule,
  /* 1412 */  vecD_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  vecD_rule,
  /* 1415 */  vecX_rule,
  /* 1416 */  vecD_rule,
  /* 1417 */  vecX_rule,
  /* 1418 */  vecD_rule,
  /* 1419 */  vecX_rule,
  /* 1420 */  vecX_rule,
  /* 1421 */  vecX_rule,
  /* 1422 */  vecD_rule,
  /* 1423 */  vecX_rule,
  /* 1424 */  immI_1_rule,
  /* 1425 */  immI_1_rule,
  /* 1426 */  immI_2_rule,
  /* 1427 */  immI_2_rule,
  /* 1428 */  immI_4_rule,
  /* 1429 */  immI_4_rule,
  /* 1430 */  immI_8_rule,
  /* 1431 */  vecD_rule,
  /* 1432 */  vecX_rule,
  /* 1433 */  vecD_rule,
  /* 1434 */  vecX_rule,
  /* 1435 */  vecX_rule,
  /* 1436 */  vecD_rule,
  /* 1437 */  vecX_rule,
  /* 1438 */  vecD_rule,
  /* 1439 */  vecX_rule,
  /* 1440 */  0,
  /* 1441 */  0,
  /* 1442 */  0,
  /* 1443 */  0,
  /* 1444 */  0,
  /* 1445 */  0,
  /* 1446 */  0,
  /* 1447 */  0,
  /* 1448 */  0,
  /* 1449 */  0,
  /* 1450 */  0,
  /* 1451 */  0,
  /* 1452 */  0,
  /* 1453 */  0,
  /* 1454 */  0,
  /* 1455 */  0,
  /* 1456 */  0,
  /* 1457 */  0,
  /* 1458 */  0,
  /* 1459 */  0,
  /* 1460 */  vecD_rule,
  /* 1461 */  vecX_rule,
  /* 1462 */  vecD_rule,
  /* 1463 */  vecX_rule,
  /* 1464 */  vecD_rule,
  /* 1465 */  vecX_rule,
  /* 1466 */  vecD_rule,
  /* 1467 */  vecX_rule,
  /* 1468 */  vecX_rule,
  /* 1469 */  vecX_rule,
  /* 1470 */  vecD_rule,
  /* 1471 */  vecX_rule,
  /* 1472 */  vecD_rule,
  /* 1473 */  vecX_rule,
  /* 1474 */  vecD_rule,
  /* 1475 */  vecX_rule,
  /* 1476 */  vecX_rule,
  /* 1477 */  vecD_rule,
  /* 1478 */  vecX_rule,
  /* 1479 */  vecX_rule,
  /* 1480 */  vecD_rule,
  /* 1481 */  vecX_rule,
  /* 1482 */  vecD_rule,
  /* 1483 */  vecX_rule,
  /* 1484 */  vecD_rule,
  /* 1485 */  vecX_rule,
  /* 1486 */  vecX_rule,
  /* 1487 */  vecD_rule,
  /* 1488 */  vecX_rule,
  /* 1489 */  vecX_rule,
  /* 1490 */  vecD_rule,
  /* 1491 */  vecX_rule,
  /* 1492 */  vecD_rule,
  /* 1493 */  vecX_rule,
  /* 1494 */  vecD_rule,
  /* 1495 */  vecX_rule,
  /* 1496 */  vecD_rule,
  /* 1497 */  vecX_rule,
  /* 1498 */  vecX_rule,
  /* 1499 */  _MulVS_vecD_vecD_rule,
  /* 1500 */  vecD_rule,
  /* 1501 */  _MulVS_vecX_vecX_rule,
  /* 1502 */  vecX_rule,
  /* 1503 */  _MulVI_vecD_vecD_rule,
  /* 1504 */  vecD_rule,
  /* 1505 */  _MulVI_vecX_vecX_rule,
  /* 1506 */  vecX_rule,
  /* 1507 */  _Binary_vecD_vecD_rule,
  /* 1508 */  _Binary_vecX_vecX_rule,
  /* 1509 */  _Binary_vecX_vecX_rule,
  /* 1510 */  _MulVS_vecD_vecD_rule,
  /* 1511 */  _MulVS_vecX_vecX_rule,
  /* 1512 */  _MulVI_vecD_vecD_rule,
  /* 1513 */  _MulVI_vecX_vecX_rule,
  /* 1514 */  _Binary__NegVF_vecD__vecD_rule,
  /* 1515 */  _Binary_vecD__NegVF_vecD__rule,
  /* 1516 */  _Binary__NegVF_vecX__vecX_rule,
  /* 1517 */  _Binary_vecX__NegVF_vecX__rule,
  /* 1518 */  _Binary__NegVD_vecX__vecX_rule,
  /* 1519 */  _Binary_vecX__NegVD_vecX__rule,
  /* 1520 */  vecX_rule,
  /* 1521 */  vecD_rule,
  /* 1522 */  vecX_rule,
  /* 1523 */  vecX_rule,
  /* 1524 */  vecD_rule,
  /* 1525 */  vecX_rule,
  /* 1526 */  vecD_rule,
  /* 1527 */  vecX_rule,
  /* 1528 */  vecD_rule,
  /* 1529 */  vecX_rule,
  /* 1530 */  vecD_rule,
  /* 1531 */  vecX_rule,
  /* 1532 */  vecD_rule,
  /* 1533 */  vecX_rule,
  /* 1534 */  vecD_rule,
  /* 1535 */  vecX_rule,
  /* 1536 */  _LShiftCntV_immI__rule,
  /* 1537 */  _LShiftCntV_immI__rule,
  /* 1538 */  _RShiftCntV_immI__rule,
  /* 1539 */  _RShiftCntV_immI__rule,
  /* 1540 */  _RShiftCntV_immI__rule,
  /* 1541 */  _RShiftCntV_immI__rule,
  /* 1542 */  vecD_rule,
  /* 1543 */  vecX_rule,
  /* 1544 */  vecD_rule,
  /* 1545 */  vecX_rule,
  /* 1546 */  vecD_rule,
  /* 1547 */  vecX_rule,
  /* 1548 */  _LShiftCntV_immI__rule,
  /* 1549 */  _LShiftCntV_immI__rule,
  /* 1550 */  _RShiftCntV_immI__rule,
  /* 1551 */  _RShiftCntV_immI__rule,
  /* 1552 */  _RShiftCntV_immI__rule,
  /* 1553 */  _RShiftCntV_immI__rule,
  /* 1554 */  vecD_rule,
  /* 1555 */  vecX_rule,
  /* 1556 */  vecD_rule,
  /* 1557 */  vecX_rule,
  /* 1558 */  vecD_rule,
  /* 1559 */  vecX_rule,
  /* 1560 */  _LShiftCntV_immI__rule,
  /* 1561 */  _LShiftCntV_immI__rule,
  /* 1562 */  _RShiftCntV_immI__rule,
  /* 1563 */  _RShiftCntV_immI__rule,
  /* 1564 */  _RShiftCntV_immI__rule,
  /* 1565 */  _RShiftCntV_immI__rule,
  /* 1566 */  vecX_rule,
  /* 1567 */  vecX_rule,
  /* 1568 */  vecX_rule,
  /* 1569 */  _LShiftCntV_immI__rule,
  /* 1570 */  _RShiftCntV_immI__rule,
  /* 1571 */  _RShiftCntV_immI__rule,
  /* 1572 */  _RShiftVB_vecD__RShiftCntV_immI__rule,
  /* 1573 */  vecD_rule,
  /* 1574 */  _RShiftVB_vecX__RShiftCntV_immI__rule,
  /* 1575 */  vecX_rule,
  /* 1576 */  _RShiftVS_vecD__RShiftCntV_immI__rule,
  /* 1577 */  vecD_rule,
  /* 1578 */  _RShiftVS_vecX__RShiftCntV_immI__rule,
  /* 1579 */  vecX_rule,
  /* 1580 */  _RShiftVI_vecD__RShiftCntV_immI__rule,
  /* 1581 */  vecD_rule,
  /* 1582 */  _RShiftVI_vecX__RShiftCntV_immI__rule,
  /* 1583 */  vecX_rule,
  /* 1584 */  _RShiftVL_vecX__RShiftCntV_immI__rule,
  /* 1585 */  vecX_rule,
  /* 1586 */  _URShiftVB_vecD__RShiftCntV_immI__rule,
  /* 1587 */  vecD_rule,
  /* 1588 */  _URShiftVB_vecX__RShiftCntV_immI__rule,
  /* 1589 */  vecX_rule,
  /* 1590 */  _URShiftVS_vecD__RShiftCntV_immI__rule,
  /* 1591 */  vecD_rule,
  /* 1592 */  _URShiftVS_vecX__RShiftCntV_immI__rule,
  /* 1593 */  vecX_rule,
  /* 1594 */  _URShiftVI_vecD__RShiftCntV_immI__rule,
  /* 1595 */  vecD_rule,
  /* 1596 */  _URShiftVI_vecX__RShiftCntV_immI__rule,
  /* 1597 */  vecX_rule,
  /* 1598 */  _URShiftVL_vecX__RShiftCntV_immI__rule,
  /* 1599 */  vecX_rule,
  /* 1600 */  vecD_rule,
  /* 1601 */  vecX_rule,
  /* 1602 */  vecX_rule,
  /* 1603 */  vecD_rule,
  /* 1604 */  vecX_rule,
  /* 1605 */  vecX_rule,
  /* 1606 */  immI_rule,
  /* 1607 */  0,
  /* 1608 */  0,
  /* 1609 */  0,
  /* 1610 */  0,
  /* 1611 */  vReg_rule,
  /* 1612 */  0,
  /* 1613 */  vReg_rule,
  /* 1614 */  0,
  /* 1615 */  vReg_rule,
  /* 1616 */  0,
  /* 1617 */  vReg_rule,
  /* 1618 */  0,
  /* 1619 */  vReg_rule,
  /* 1620 */  0,
  /* 1621 */  vReg_rule,
  /* 1622 */  pRegGov_rule,
  /* 1623 */  pRegGov_rule,
  /* 1624 */  _Binary_vReg_pRegGov_rule,
  /* 1625 */  _Binary_vReg_pRegGov_rule,
  /* 1626 */  0,
  /* 1627 */  0,
  /* 1628 */  0,
  /* 1629 */  0,
  /* 1630 */  pRegGov_rule,
  /* 1631 */  pRegGov_rule,
  /* 1632 */  pRegGov_rule,
  /* 1633 */  _XorVMask_pRegGov__MaskAll_immI_M1__rule,
  /* 1634 */  _XorVMask_pRegGov__MaskAll_immL_M1__rule,
  /* 1635 */  0,
  /* 1636 */  0,
  /* 1637 */  pRegGov_rule,
  /* 1638 */  pRegGov_rule,
  /* 1639 */  pRegGov_rule,
  /* 1640 */  pRegGov_rule,
  /* 1641 */  pRegGov_rule,
  /* 1642 */  pRegGov_rule,
  /* 1643 */  vReg_rule,
  /* 1644 */  vReg_rule,
  /* 1645 */  vReg_rule,
  /* 1646 */  vReg_rule,
  /* 1647 */  vReg_rule,
  /* 1648 */  vReg_rule,
  /* 1649 */  pRegGov_rule,
  /* 1650 */  pRegGov_rule,
  /* 1651 */  pRegGov_rule,
  /* 1652 */  pRegGov_rule,
  /* 1653 */  pRegGov_rule,
  /* 1654 */  pRegGov_rule,
  /* 1655 */  _ReplicateB_immBAddSubV__rule,
  /* 1656 */  vReg_rule,
  /* 1657 */  _ReplicateS_immIAddSubV__rule,
  /* 1658 */  vReg_rule,
  /* 1659 */  _ReplicateI_immIAddSubV__rule,
  /* 1660 */  vReg_rule,
  /* 1661 */  _ReplicateL_immLAddSubV__rule,
  /* 1662 */  vReg_rule,
  /* 1663 */  _ReplicateB_immBLog__rule,
  /* 1664 */  vReg_rule,
  /* 1665 */  _ReplicateS_immSLog__rule,
  /* 1666 */  vReg_rule,
  /* 1667 */  _ReplicateI_immILog__rule,
  /* 1668 */  vReg_rule,
  /* 1669 */  _ReplicateL_immLLog__rule,
  /* 1670 */  vReg_rule,
  /* 1671 */  _ReplicateB_immBLog__rule,
  /* 1672 */  vReg_rule,
  /* 1673 */  _ReplicateS_immSLog__rule,
  /* 1674 */  vReg_rule,
  /* 1675 */  _ReplicateI_immILog__rule,
  /* 1676 */  vReg_rule,
  /* 1677 */  _ReplicateL_immLLog__rule,
  /* 1678 */  vReg_rule,
  /* 1679 */  _ReplicateB_immBLog__rule,
  /* 1680 */  vReg_rule,
  /* 1681 */  _ReplicateS_immSLog__rule,
  /* 1682 */  vReg_rule,
  /* 1683 */  _ReplicateI_immILog__rule,
  /* 1684 */  vReg_rule,
  /* 1685 */  _ReplicateL_immLLog__rule,
  /* 1686 */  vReg_rule,
  /* 1687 */  vReg_rule,
  /* 1688 */  vReg_rule,
  /* 1689 */  vReg_rule,
  /* 1690 */  pRegGov_rule,
  /* 1691 */  pRegGov_rule,
  /* 1692 */  pRegGov_rule,
  /* 1693 */  _ReplicateB_immI_M1__rule,
  /* 1694 */  vReg_rule,
  /* 1695 */  _ReplicateS_immI_M1__rule,
  /* 1696 */  vReg_rule,
  /* 1697 */  _ReplicateI_immI_M1__rule,
  /* 1698 */  vReg_rule,
  /* 1699 */  _ReplicateL_immL_M1__rule,
  /* 1700 */  vReg_rule,
  /* 1701 */  _XorV_vReg__ReplicateB_immI_M1__rule,
  /* 1702 */  vReg_rule,
  /* 1703 */  _XorV__ReplicateB_immI_M1__vReg_rule,
  /* 1704 */  vReg_rule,
  /* 1705 */  _XorV_vReg__ReplicateS_immI_M1__rule,
  /* 1706 */  vReg_rule,
  /* 1707 */  _XorV__ReplicateS_immI_M1__vReg_rule,
  /* 1708 */  vReg_rule,
  /* 1709 */  _XorV_vReg__ReplicateI_immI_M1__rule,
  /* 1710 */  vReg_rule,
  /* 1711 */  _XorV__ReplicateI_immI_M1__vReg_rule,
  /* 1712 */  vReg_rule,
  /* 1713 */  _XorV_vReg__ReplicateL_immL_M1__rule,
  /* 1714 */  vReg_rule,
  /* 1715 */  _XorV__ReplicateL_immL_M1__vReg_rule,
  /* 1716 */  vReg_rule,
  /* 1717 */  vReg_rule,
  /* 1718 */  vReg_rule,
  /* 1719 */  pRegGov_rule,
  /* 1720 */  pRegGov_rule,
  /* 1721 */  vReg_rule,
  /* 1722 */  vReg_rule,
  /* 1723 */  pRegGov_rule,
  /* 1724 */  pRegGov_rule,
  /* 1725 */  _Binary_vReg_vReg_rule,
  /* 1726 */  _Binary_vReg_vReg_rule,
  /* 1727 */  _Binary_vReg_pRegGov_rule,
  /* 1728 */  _Binary_vReg_pRegGov_rule,
  /* 1729 */  _Binary__NegVF_vReg__vReg_rule,
  /* 1730 */  _Binary_vReg__NegVF_vReg__rule,
  /* 1731 */  _Binary__NegVD_vReg__vReg_rule,
  /* 1732 */  _Binary_vReg__NegVD_vReg__rule,
  /* 1733 */  _Binary__NegVF_vReg__vReg_rule,
  /* 1734 */  _Binary_vReg__NegVF_vReg__rule,
  /* 1735 */  _Binary__NegVD_vReg__vReg_rule,
  /* 1736 */  _Binary_vReg__NegVD_vReg__rule,
  /* 1737 */  _Binary_vReg_vReg_rule,
  /* 1738 */  _Binary_vReg_vReg_rule,
  /* 1739 */  _MulVB_vReg_vReg_rule,
  /* 1740 */  vReg_rule,
  /* 1741 */  _MulVS_vReg_vReg_rule,
  /* 1742 */  vReg_rule,
  /* 1743 */  _MulVI_vReg_vReg_rule,
  /* 1744 */  vReg_rule,
  /* 1745 */  _MulVL_vReg_vReg_rule,
  /* 1746 */  vReg_rule,
  /* 1747 */  _MulVB_vReg_vReg_rule,
  /* 1748 */  _MulVS_vReg_vReg_rule,
  /* 1749 */  _MulVI_vReg_vReg_rule,
  /* 1750 */  _MulVL_vReg_vReg_rule,
  /* 1751 */  vReg_rule,
  /* 1752 */  vReg_rule,
  /* 1753 */  vReg_rule,
  /* 1754 */  vReg_rule,
  /* 1755 */  vReg_rule,
  /* 1756 */  vReg_rule,
  /* 1757 */  pRegGov_rule,
  /* 1758 */  pRegGov_rule,
  /* 1759 */  pRegGov_rule,
  /* 1760 */  pRegGov_rule,
  /* 1761 */  pRegGov_rule,
  /* 1762 */  pRegGov_rule,
  /* 1763 */  pRegGov_rule,
  /* 1764 */  pRegGov_rule,
  /* 1765 */  immI_rule,
  /* 1766 */  _Binary_immI_pRegGov_rule,
  /* 1767 */  pRegGov_rule,
  /* 1768 */  0,
  /* 1769 */  0,
  /* 1770 */  immI_1_rule,
  /* 1771 */  immI_gt_1_rule,
  /* 1772 */  0,
  /* 1773 */  0,
  /* 1774 */  _VectorStoreMask_pRegGov_immI_gt_1_rule,
  /* 1775 */  _VectorStoreMask_pRegGov_immI_gt_1_rule,
  /* 1776 */  vReg_rule,
  /* 1777 */  vReg_rule,
  /* 1778 */  vReg_rule,
  /* 1779 */  vReg_rule,
  /* 1780 */  vReg_rule,
  /* 1781 */  vReg_rule,
  /* 1782 */  vReg_rule,
  /* 1783 */  vReg_rule,
  /* 1784 */  pRegGov_rule,
  /* 1785 */  pRegGov_rule,
  /* 1786 */  pRegGov_rule,
  /* 1787 */  pRegGov_rule,
  /* 1788 */  pRegGov_rule,
  /* 1789 */  pRegGov_rule,
  /* 1790 */  pRegGov_rule,
  /* 1791 */  pRegGov_rule,
  /* 1792 */  vReg_rule,
  /* 1793 */  vReg_rule,
  /* 1794 */  vReg_rule,
  /* 1795 */  vReg_rule,
  /* 1796 */  pRegGov_rule,
  /* 1797 */  pRegGov_rule,
  /* 1798 */  pRegGov_rule,
  /* 1799 */  pRegGov_rule,
  /* 1800 */  vReg_rule,
  /* 1801 */  vReg_rule,
  /* 1802 */  vReg_rule,
  /* 1803 */  vReg_rule,
  /* 1804 */  pRegGov_rule,
  /* 1805 */  pRegGov_rule,
  /* 1806 */  pRegGov_rule,
  /* 1807 */  pRegGov_rule,
  /* 1808 */  vReg_rule,
  /* 1809 */  vReg_rule,
  /* 1810 */  vReg_rule,
  /* 1811 */  vReg_rule,
  /* 1812 */  pRegGov_rule,
  /* 1813 */  pRegGov_rule,
  /* 1814 */  pRegGov_rule,
  /* 1815 */  pRegGov_rule,
  /* 1816 */  vReg_rule,
  /* 1817 */  vReg_rule,
  /* 1818 */  vReg_rule,
  /* 1819 */  vReg_rule,
  /* 1820 */  vReg_rule,
  /* 1821 */  vReg_rule,
  /* 1822 */  vReg_rule,
  /* 1823 */  vReg_rule,
  /* 1824 */  pRegGov_rule,
  /* 1825 */  pRegGov_rule,
  /* 1826 */  pRegGov_rule,
  /* 1827 */  pRegGov_rule,
  /* 1828 */  pRegGov_rule,
  /* 1829 */  pRegGov_rule,
  /* 1830 */  pRegGov_rule,
  /* 1831 */  pRegGov_rule,
  /* 1832 */  vReg_rule,
  /* 1833 */  vReg_rule,
  /* 1834 */  vReg_rule,
  /* 1835 */  vReg_rule,
  /* 1836 */  vReg_rule,
  /* 1837 */  vReg_rule,
  /* 1838 */  vReg_rule,
  /* 1839 */  vReg_rule,
  /* 1840 */  pRegGov_rule,
  /* 1841 */  pRegGov_rule,
  /* 1842 */  pRegGov_rule,
  /* 1843 */  pRegGov_rule,
  /* 1844 */  pRegGov_rule,
  /* 1845 */  pRegGov_rule,
  /* 1846 */  pRegGov_rule,
  /* 1847 */  pRegGov_rule,
  /* 1848 */  immI_rule,
  /* 1849 */  0,
  /* 1850 */  0,
  /* 1851 */  0,
  /* 1852 */  0,
  /* 1853 */  0,
  /* 1854 */  0,
  /* 1855 */  0,
  /* 1856 */  0,
  /* 1857 */  0,
  /* 1858 */  0,
  /* 1859 */  vReg_rule,
  /* 1860 */  vReg_rule,
  /* 1861 */  vReg_rule,
  /* 1862 */  vReg_rule,
  /* 1863 */  vReg_rule,
  /* 1864 */  vReg_rule,
  /* 1865 */  vReg_rule,
  /* 1866 */  vReg_rule,
  /* 1867 */  vReg_rule,
  /* 1868 */  vReg_rule,
  /* 1869 */  vReg_rule,
  /* 1870 */  vReg_rule,
  /* 1871 */  _RShiftCntV_immI__rule,
  /* 1872 */  _RShiftCntV_immI__rule,
  /* 1873 */  _RShiftCntV_immI__rule,
  /* 1874 */  _RShiftCntV_immI__rule,
  /* 1875 */  _RShiftCntV_immI__rule,
  /* 1876 */  _RShiftCntV_immI__rule,
  /* 1877 */  _RShiftCntV_immI__rule,
  /* 1878 */  _RShiftCntV_immI__rule,
  /* 1879 */  _LShiftCntV_immI__rule,
  /* 1880 */  _LShiftCntV_immI__rule,
  /* 1881 */  _LShiftCntV_immI__rule,
  /* 1882 */  _LShiftCntV_immI__rule,
  /* 1883 */  pRegGov_rule,
  /* 1884 */  pRegGov_rule,
  /* 1885 */  pRegGov_rule,
  /* 1886 */  pRegGov_rule,
  /* 1887 */  pRegGov_rule,
  /* 1888 */  pRegGov_rule,
  /* 1889 */  pRegGov_rule,
  /* 1890 */  pRegGov_rule,
  /* 1891 */  pRegGov_rule,
  /* 1892 */  pRegGov_rule,
  /* 1893 */  pRegGov_rule,
  /* 1894 */  pRegGov_rule,
  /* 1895 */  pRegGov_rule,
  /* 1896 */  pRegGov_rule,
  /* 1897 */  pRegGov_rule,
  /* 1898 */  pRegGov_rule,
  /* 1899 */  pRegGov_rule,
  /* 1900 */  pRegGov_rule,
  /* 1901 */  pRegGov_rule,
  /* 1902 */  pRegGov_rule,
  /* 1903 */  pRegGov_rule,
  /* 1904 */  pRegGov_rule,
  /* 1905 */  pRegGov_rule,
  /* 1906 */  pRegGov_rule,
  /* 1907 */  pRegGov_rule,
  /* 1908 */  pRegGov_rule,
  /* 1909 */  vReg_rule,
  /* 1910 */  vReg_rule,
  /* 1911 */  vReg_rule,
  /* 1912 */  vReg_rule,
  /* 1913 */  vReg_rule,
  /* 1914 */  vReg_rule,
  /* 1915 */  pRegGov_rule,
  /* 1916 */  pRegGov_rule,
  /* 1917 */  pRegGov_rule,
  /* 1918 */  pRegGov_rule,
  /* 1919 */  pRegGov_rule,
  /* 1920 */  pRegGov_rule,
  /* 1921 */  0,
  /* 1922 */  0,
  /* 1923 */  0,
  /* 1924 */  0,
  /* 1925 */  0,
  /* 1926 */  0,
  /* 1927 */  0,
  /* 1928 */  0,
  /* 1929 */  immI_rule,
  /* 1930 */  immI_rule,
  /* 1931 */  immI_rule,
  /* 1932 */  immI_rule,
  /* 1933 */  immI_rule,
  /* 1934 */  immI_rule,
  /* 1935 */  pRegGov_rule,
  /* 1936 */  pRegGov_rule,
  /* 1937 */  pRegGov_rule,
  /* 1938 */  pRegGov_rule,
  /* 1939 */  immI_rule,
  /* 1940 */  immI_rule,
  /* 1941 */  immI_rule,
  /* 1942 */  immI_rule,
  /* 1943 */  immI_rule,
  /* 1944 */  immI_rule,
  /* 1945 */  vReg_rule,
  /* 1946 */  vReg_rule,
  /* 1947 */  vReg_rule,
  /* 1948 */  vReg_rule,
  /* 1949 */  vReg_rule,
  /* 1950 */  _Binary_vReg_pRegGov_rule,
  /* 1951 */  _Binary_vReg_pRegGov_rule,
  /* 1952 */  _Binary_vReg_pRegGov_rule,
  /* 1953 */  _Binary_vReg_pRegGov_rule,
  /* 1954 */  _Binary_vReg_vReg_rule,
  /* 1955 */  _Binary_vReg_vReg_rule,
  /* 1956 */  _Binary_vReg_vReg_rule,
  /* 1957 */  _Binary_vReg_vReg_rule,
  /* 1958 */  _Binary_vReg__Binary_vReg_pRegGov_rule,
  /* 1959 */  _Binary_vReg__Binary_vReg_pRegGov_rule,
  /* 1960 */  _Binary_vReg__Binary_vReg_pRegGov_rule,
  /* 1961 */  _Binary_vReg__Binary_vReg_pRegGov_rule,
  /* 1962 */  iRegI_R3_rule,
  /* 1963 */  iRegI_R3_rule,
  /* 1964 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1965 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1966 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1967 */  _Binary_iRegP_R3_iRegI_R4_rule,
  /* 1968 */  0,
  /* 1969 */  0,
  /* 1970 */  0,
  /* 1971 */  0,
  /* 1972 */  0,
  /* 1973 */  0,
  /* 1974 */  0,
  /* 1975 */  _Binary_iRegP_iRegP_rule,
  /* 1976 */  _Binary_iRegN_iRegN_rule,
  /* 1977 */  _Binary_iRegP_iRegP_rule,
  /* 1978 */  _Binary_iRegN_iRegN_rule,
  /* 1979 */  _Binary_iRegN_iRegN_rule,
  /* 1980 */  _Binary_iRegP_iRegP_rule,
  /* 1981 */  _Binary_iRegN_iRegN_rule,
  /* 1982 */  _Binary_iRegP_iRegP_rule,
  /* 1983 */  _Binary_iRegN_iRegN_rule,
  /* 1984 */  _Binary_iRegP_iRegP_rule,
  /* 1985 */  _Binary_iRegN_iRegN_rule,
  /* 1986 */  _Binary_iRegP_iRegP_rule,
  /* 1987 */  0,
  /* 1988 */  0,
  /* 1989 */  _Binary_iRegP_iRegP_rule,
  /* 1990 */  _Binary_iRegP_iRegP_rule,
  /* 1991 */  _Binary_iRegP_iRegP_rule,
  /* 1992 */  _Binary_iRegP_iRegP_rule,
  /* 1993 */  _Binary_iRegP_iRegP_rule,
  /* 1994 */  _Binary_iRegP_iRegP_rule,
  /* 1995 */  iRegP_rule,
  /* 1996 */  iRegP_rule,
  // last instruction
  0 // no trailing comma
};

const char        *ruleName[] = {
  /*    0 */  "UNIVERSE",
  /*    1 */  "LABEL",
  /*    2 */  "SREGI",
  /*    3 */  "SREGP",
  /*    4 */  "SREGF",
  /*    5 */  "SREGD",
  /*    6 */  "SREGL",
  /*    7 */  "METHOD",
  /*    8 */  "IMMI",
  /*    9 */  "IMMI0",
  /*   10 */  "IMMI_1",
  /*   11 */  "IMMI_M1",
  /*   12 */  "IMMIEXT",
  /*   13 */  "IMMI_GT_1",
  /*   14 */  "IMMI_LE_4",
  /*   15 */  "IMMI_31",
  /*   16 */  "IMMI_2",
  /*   17 */  "IMMI_4",
  /*   18 */  "IMMI_8",
  /*   19 */  "IMMI_16",
  /*   20 */  "IMMI_24",
  /*   21 */  "IMMI_32",
  /*   22 */  "IMMI_48",
  /*   23 */  "IMMI_56",
  /*   24 */  "IMMI_63",
  /*   25 */  "IMMI_64",
  /*   26 */  "IMMI_255",
  /*   27 */  "IMMI_65535",
  /*   28 */  "IMML_255",
  /*   29 */  "IMML_65535",
  /*   30 */  "IMML_4294967295",
  /*   31 */  "IMML_BITMASK",
  /*   32 */  "IMMI_BITMASK",
  /*   33 */  "IMML_POSITIVE_BITMASKI",
  /*   34 */  "IMMISCALE",
  /*   35 */  "IMMI26",
  /*   36 */  "IMMI19",
  /*   37 */  "IMMIU12",
  /*   38 */  "IMMLU12",
  /*   39 */  "IMMIOFFSET",
  /*   40 */  "IMMIOFFSET1",
  /*   41 */  "IMMIOFFSET2",
  /*   42 */  "IMMIOFFSET4",
  /*   43 */  "IMMIOFFSET8",
  /*   44 */  "IMMIOFFSET16",
  /*   45 */  "IMMLOFFSET",
  /*   46 */  "IMMLOFFSET1",
  /*   47 */  "IMMLOFFSET2",
  /*   48 */  "IMMLOFFSET4",
  /*   49 */  "IMMLOFFSET8",
  /*   50 */  "IMMLOFFSET16",
  /*   51 */  "IMMI8",
  /*   52 */  "IMMI8_SHIFT8",
  /*   53 */  "IMML8_SHIFT8",
  /*   54 */  "IMMBADDSUBV",
  /*   55 */  "IMMIADDSUB",
  /*   56 */  "IMMIADDSUBV",
  /*   57 */  "IMMBLOG",
  /*   58 */  "IMMSLOG",
  /*   59 */  "IMMILOG",
  /*   60 */  "IMML",
  /*   61 */  "IMML0",
  /*   62 */  "IMML_1",
  /*   63 */  "IMML_M1",
  /*   64 */  "IMML_PC_OFF",
  /*   65 */  "IMMLADDSUB",
  /*   66 */  "IMMLADDSUBV",
  /*   67 */  "IMMLLOG",
  /*   68 */  "IMML_32BITS",
  /*   69 */  "IMMP",
  /*   70 */  "IMMP0",
  /*   71 */  "IMMP_1",
  /*   72 */  "IMMBYTEMAPBASE",
  /*   73 */  "IMMP_M1",
  /*   74 */  "IMMP_M2",
  /*   75 */  "IMMD",
  /*   76 */  "IMMD0",
  /*   77 */  "IMMDPACKED",
  /*   78 */  "IMMF",
  /*   79 */  "IMMF0",
  /*   80 */  "IMMFPACKED",
  /*   81 */  "IMMN",
  /*   82 */  "IMMN0",
  /*   83 */  "IMMNKLASS",
  /*   84 */  "IREGI",
  /*   85 */  "IREGINOSP",
  /*   86 */  "IREGL",
  /*   87 */  "IREGLNOSP",
  /*   88 */  "IREGP",
  /*   89 */  "IREGPNOSP",
  /*   90 */  "IREGP_R0",
  /*   91 */  "IREGP_R1",
  /*   92 */  "IREGP_R2",
  /*   93 */  "IREGP_R3",
  /*   94 */  "IREGP_R4",
  /*   95 */  "IREGP_R5",
  /*   96 */  "IREGP_R10",
  /*   97 */  "IREGL_R0",
  /*   98 */  "IREGL_R2",
  /*   99 */  "IREGL_R3",
  /*  100 */  "IREGL_R11",
  /*  101 */  "IREGP_FP",
  /*  102 */  "IREGI_R0",
  /*  103 */  "IREGI_R2",
  /*  104 */  "IREGI_R3",
  /*  105 */  "IREGI_R4",
  /*  106 */  "IREGN",
  /*  107 */  "IREGN_R0",
  /*  108 */  "IREGN_R2",
  /*  109 */  "IREGN_R3",
  /*  110 */  "IREGNNOSP",
  /*  111 */  "IREGIHEAPBASE",
  /*  112 */  "VREGF",
  /*  113 */  "VREGD",
  /*  114 */  "VREG",
  /*  115 */  "VECD",
  /*  116 */  "VECX",
  /*  117 */  "VREGD_V0",
  /*  118 */  "VREGD_V1",
  /*  119 */  "VREGD_V2",
  /*  120 */  "VREGD_V3",
  /*  121 */  "VREGD_V4",
  /*  122 */  "VREGD_V5",
  /*  123 */  "VREGD_V6",
  /*  124 */  "VREGD_V7",
  /*  125 */  "VREGD_V8",
  /*  126 */  "VREGD_V9",
  /*  127 */  "VREGD_V10",
  /*  128 */  "VREGD_V11",
  /*  129 */  "VREGD_V12",
  /*  130 */  "VREGD_V13",
  /*  131 */  "VREGD_V14",
  /*  132 */  "VREGD_V15",
  /*  133 */  "VREGD_V16",
  /*  134 */  "VREGD_V17",
  /*  135 */  "VREGD_V18",
  /*  136 */  "VREGD_V19",
  /*  137 */  "VREGD_V20",
  /*  138 */  "VREGD_V21",
  /*  139 */  "VREGD_V22",
  /*  140 */  "VREGD_V23",
  /*  141 */  "VREGD_V24",
  /*  142 */  "VREGD_V25",
  /*  143 */  "VREGD_V26",
  /*  144 */  "VREGD_V27",
  /*  145 */  "VREGD_V28",
  /*  146 */  "VREGD_V29",
  /*  147 */  "VREGD_V30",
  /*  148 */  "VREGD_V31",
  /*  149 */  "PREG",
  /*  150 */  "PREGGOV",
  /*  151 */  "PREGGOV_P0",
  /*  152 */  "PREGGOV_P1",
  /*  153 */  "RFLAGSREG",
  /*  154 */  "RFLAGSREGU",
  /*  155 */  "INLINE_CACHE_REGP",
  /*  156 */  "THREAD_REGP",
  /*  157 */  "LR_REGP",
  /*  158 */  "INDIRECT",
  /*  159 */  "INDINDEXSCALEDI2L",
  /*  160 */  "INDINDEXSCALED",
  /*  161 */  "INDINDEXI2L",
  /*  162 */  "INDINDEX",
  /*  163 */  "INDOFFI",
  /*  164 */  "INDOFFI1",
  /*  165 */  "INDOFFI2",
  /*  166 */  "INDOFFI4",
  /*  167 */  "INDOFFI8",
  /*  168 */  "INDOFFI16",
  /*  169 */  "INDOFFL",
  /*  170 */  "INDOFFL1",
  /*  171 */  "INDOFFL2",
  /*  172 */  "INDOFFL4",
  /*  173 */  "INDOFFL8",
  /*  174 */  "INDOFFL16",
  /*  175 */  "INDIRECTN",
  /*  176 */  "INDINDEXSCALEDI2LN",
  /*  177 */  "INDINDEXSCALEDN",
  /*  178 */  "INDINDEXI2LN",
  /*  179 */  "INDINDEXN",
  /*  180 */  "INDOFFIN",
  /*  181 */  "INDOFFLN",
  /*  182 */  "THREAD_ANCHOR_PC",
  /*  183 */  "STACKSLOTP",
  /*  184 */  "STACKSLOTI",
  /*  185 */  "STACKSLOTF",
  /*  186 */  "STACKSLOTD",
  /*  187 */  "STACKSLOTL",
  /*  188 */  "CMPOP",
  /*  189 */  "CMPOPU",
  /*  190 */  "CMPOPEQNE",
  /*  191 */  "CMPOPLTGE",
  /*  192 */  "CMPOPUEQNELTGE",
  /*  193 */  "IREGL2I",
  /*  194 */  "VMEMA_IMMIOFFSET4",
  /*  195 */  "VMEMA_IMMLOFFSET4",
  /*  196 */  "VMEMA_INDOFFI4",
  /*  197 */  "VMEMA_INDOFFL4",
  // last operand
  /*  198 */  "VMEM2",
  /*  199 */  "VMEM4",
  /*  200 */  "VMEM8",
  /*  201 */  "VMEM16",
  /*  202 */  "MEMORY1",
  /*  203 */  "MEMORY2",
  /*  204 */  "MEMORY4",
  /*  205 */  "MEMORY8",
  /*  206 */  "MEMORY",
  /*  207 */  "IREGIORL2I",
  /*  208 */  "VMEMA",
  // last operand class
  /*  209 */  "_ConvI2L_iRegI_",
  /*  210 */  "_LShiftL__ConvI2L_iRegI__immIScale",
  /*  211 */  "_LShiftL_iRegL_immIScale",
  /*  212 */  "_DecodeN_iRegN_",
  /*  213 */  "_LoadB_memory1_",
  /*  214 */  "_LoadUB_memory1_",
  /*  215 */  "_LoadS_memory2_",
  /*  216 */  "_LoadUS_memory2_",
  /*  217 */  "_LoadI_memory4_",
  /*  218 */  "_ConvI2L__LoadI_memory4__",
  /*  219 */  "_LoadB_indirect_",
  /*  220 */  "_LoadUB_indirect_",
  /*  221 */  "_LoadUS_indirect_",
  /*  222 */  "_LoadS_indirect_",
  /*  223 */  "_LoadI_indirect_",
  /*  224 */  "_ConvI2L__LoadI_indirect__",
  /*  225 */  "_LoadL_memory8_",
  /*  226 */  "_CastP2X_iRegP_",
  /*  227 */  "_CastP2X__DecodeN_iRegN__",
  /*  228 */  "_Binary_iRegP_iRegP",
  /*  229 */  "_Binary_iRegLNoSp_iRegLNoSp",
  /*  230 */  "_Binary_iRegINoSp_iRegINoSp",
  /*  231 */  "_Binary_iRegNNoSp_iRegNNoSp",
  /*  232 */  "_Binary_iRegI_iRegI",
  /*  233 */  "_Binary_iRegL_iRegL",
  /*  234 */  "_Binary_iRegN_iRegN",
  /*  235 */  "_Binary_cmpOp_rFlagsReg",
  /*  236 */  "_Binary_iRegIorL2I_iRegIorL2I",
  /*  237 */  "_Binary_cmpOpU_rFlagsRegU",
  /*  238 */  "_Binary_immI0_iRegIorL2I",
  /*  239 */  "_Binary_iRegIorL2I_immI0",
  /*  240 */  "_Binary_immI_1_immI0",
  /*  241 */  "_Binary_iRegL_immL0",
  /*  242 */  "_Binary_immL0_iRegL",
  /*  243 */  "_Binary_iRegP_immP0",
  /*  244 */  "_Binary_immP0_iRegP",
  /*  245 */  "_Binary_iRegN_immN0",
  /*  246 */  "_Binary_immN0_iRegN",
  /*  247 */  "_Binary_vRegF_vRegF",
  /*  248 */  "_Binary_vRegD_vRegD",
  /*  249 */  "_ConvL2I_iRegL_",
  /*  250 */  "_ConvI2L_iRegIorL2I_",
  /*  251 */  "_LShiftL__ConvI2L_iRegIorL2I__immIScale",
  /*  252 */  "_MulI_iRegIorL2I_iRegIorL2I",
  /*  253 */  "_SubI_immI0_iRegIorL2I",
  /*  254 */  "_MulL_iRegL_iRegL",
  /*  255 */  "_SubL_immL0_iRegL",
  /*  256 */  "_MulL__ConvI2L_iRegIorL2I___ConvI2L_iRegIorL2I_",
  /*  257 */  "_SubL_immL0__ConvI2L_iRegIorL2I_",
  /*  258 */  "_XorI_iRegIorL2I_immI_M1",
  /*  259 */  "_XorL_iRegL_immL_M1",
  /*  260 */  "_XorI_iRegIorL2I_iRegIorL2I",
  /*  261 */  "_XorL_iRegL_iRegL",
  /*  262 */  "_URShiftI_iRegIorL2I_immI",
  /*  263 */  "_XorI__URShiftI_iRegIorL2I_immI_immI_M1",
  /*  264 */  "_URShiftL_iRegL_immI",
  /*  265 */  "_XorL__URShiftL_iRegL_immI_immL_M1",
  /*  266 */  "_RShiftI_iRegIorL2I_immI",
  /*  267 */  "_XorI__RShiftI_iRegIorL2I_immI_immI_M1",
  /*  268 */  "_RShiftL_iRegL_immI",
  /*  269 */  "_XorL__RShiftL_iRegL_immI_immL_M1",
  /*  270 */  "_RotateRight_iRegIorL2I_immI",
  /*  271 */  "_XorI__RotateRight_iRegIorL2I_immI_immI_M1",
  /*  272 */  "_RotateRight_iRegL_immI",
  /*  273 */  "_XorL__RotateRight_iRegL_immI_immL_M1",
  /*  274 */  "_LShiftI_iRegIorL2I_immI",
  /*  275 */  "_XorI__LShiftI_iRegIorL2I_immI_immI_M1",
  /*  276 */  "_LShiftL_iRegL_immI",
  /*  277 */  "_XorL__LShiftL_iRegL_immI_immL_M1",
  /*  278 */  "_XorI__URShiftI_iRegIorL2I_immI_iRegIorL2I",
  /*  279 */  "_XorI_iRegIorL2I__URShiftI_iRegIorL2I_immI",
  /*  280 */  "_XorL__URShiftL_iRegL_immI_iRegL",
  /*  281 */  "_XorL_iRegL__URShiftL_iRegL_immI",
  /*  282 */  "_XorI__RShiftI_iRegIorL2I_immI_iRegIorL2I",
  /*  283 */  "_XorI_iRegIorL2I__RShiftI_iRegIorL2I_immI",
  /*  284 */  "_XorL__RShiftL_iRegL_immI_iRegL",
  /*  285 */  "_XorL_iRegL__RShiftL_iRegL_immI",
  /*  286 */  "_XorI__RotateRight_iRegIorL2I_immI_iRegIorL2I",
  /*  287 */  "_XorI_iRegIorL2I__RotateRight_iRegIorL2I_immI",
  /*  288 */  "_XorL__RotateRight_iRegL_immI_iRegL",
  /*  289 */  "_XorL_iRegL__RotateRight_iRegL_immI",
  /*  290 */  "_XorI__LShiftI_iRegIorL2I_immI_iRegIorL2I",
  /*  291 */  "_XorI_iRegIorL2I__LShiftI_iRegIorL2I_immI",
  /*  292 */  "_XorL__LShiftL_iRegL_immI_iRegL",
  /*  293 */  "_XorL_iRegL__LShiftL_iRegL_immI",
  /*  294 */  "_AndI__URShiftI_iRegIorL2I_immI_immI_bitmask",
  /*  295 */  "_AndI_iRegIorL2I_immI_bitmask",
  /*  296 */  "_AndL_iRegL_immL_bitmask",
  /*  297 */  "_LShiftI__AndI_iRegIorL2I_immI_bitmask_immI",
  /*  298 */  "_AndL_iRegL_immL_positive_bitmaskI",
  /*  299 */  "_LShiftL__AndL_iRegL_immL_positive_bitmaskI_immI",
  /*  300 */  "_ConvI2L__AndI_iRegIorL2I_immI_bitmask_",
  /*  301 */  "_ConvL2I__AndL_iRegL_immL_positive_bitmaskI_",
  /*  302 */  "_AndI_iRegI_immI_bitmask",
  /*  303 */  "_LShiftI_iRegIorL2I_immI_16",
  /*  304 */  "_RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16",
  /*  305 */  "_LShiftI_iRegIorL2I_immI_24",
  /*  306 */  "_RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24",
  /*  307 */  "_URShiftI__LShiftI_iRegIorL2I_immI_24_immI_24",
  /*  308 */  "_LShiftL_iRegL_immI_48",
  /*  309 */  "_RShiftL__LShiftL_iRegL_immI_48_immI_48",
  /*  310 */  "_LShiftL_iRegL_immI_32",
  /*  311 */  "_RShiftL__LShiftL_iRegL_immI_32_immI_32",
  /*  312 */  "_LShiftL_iRegL_immI_56",
  /*  313 */  "_RShiftL__LShiftL_iRegL_immI_56_immI_56",
  /*  314 */  "_URShiftL__LShiftL_iRegL_immI_56_immI_56",
  /*  315 */  "_AndI_iRegIorL2I_immI_255",
  /*  316 */  "_AndI_iRegIorL2I_immI_65535",
  /*  317 */  "_AndL_iRegL_immL_255",
  /*  318 */  "_AndL_iRegL_immL_65535",
  /*  319 */  "_AndL_iRegL_immL_4294967295",
  /*  320 */  "_LShiftL__RShiftL__LShiftL_iRegL_immI_56_immI_56_immIExt",
  /*  321 */  "_LShiftL__RShiftL__LShiftL_iRegL_immI_48_immI_48_immIExt",
  /*  322 */  "_LShiftL__RShiftL__LShiftL_iRegL_immI_32_immI_32_immIExt",
  /*  323 */  "_LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_24_immI_24_immIExt",
  /*  324 */  "_LShiftI__RShiftI__LShiftI_iRegIorL2I_immI_16_immI_16_immIExt",
  /*  325 */  "_LShiftL__ConvI2L_iRegIorL2I__immIExt",
  /*  326 */  "_LShiftL__AndL_iRegL_immL_255_immIExt",
  /*  327 */  "_LShiftL__AndL_iRegL_immL_65535_immIExt",
  /*  328 */  "_LShiftL__AndL_iRegL_immL_4294967295_immIExt",
  /*  329 */  "_LShiftI__AndI_iRegIorL2I_immI_255_immIExt",
  /*  330 */  "_LShiftI__AndI_iRegIorL2I_immI_65535_immIExt",
  /*  331 */  "_NegF_vRegF_",
  /*  332 */  "_Binary__NegF_vRegF__vRegF",
  /*  333 */  "_Binary_vRegF__NegF_vRegF_",
  /*  334 */  "_NegD_vRegD_",
  /*  335 */  "_Binary__NegD_vRegD__vRegD",
  /*  336 */  "_Binary_vRegD__NegD_vRegD_",
  /*  337 */  "_SubF_vRegF_vRegF",
  /*  338 */  "_SubD_vRegD_vRegD",
  /*  339 */  "_OverflowMulI_iRegIorL2I_iRegIorL2I",
  /*  340 */  "_OverflowMulL_iRegL_iRegL",
  /*  341 */  "_CmpI_iRegIorL2I_immI0",
  /*  342 */  "_CmpL_iRegL_immL0",
  /*  343 */  "_CmpP_iRegP_immP0",
  /*  344 */  "_CmpN_iRegN_immN0",
  /*  345 */  "_CmpP__DecodeN_iRegN__immP0",
  /*  346 */  "_CmpU_iRegIorL2I_immI0",
  /*  347 */  "_CmpUL_iRegL_immL0",
  /*  348 */  "_AndL_iRegL_immL",
  /*  349 */  "_CmpL__AndL_iRegL_immL_immL0",
  /*  350 */  "_AndI_iRegIorL2I_immI",
  /*  351 */  "_CmpI__AndI_iRegIorL2I_immI_immI0",
  /*  352 */  "_AndL_iRegL_iRegL",
  /*  353 */  "_AndI_iRegIorL2I_iRegIorL2I",
  /*  354 */  "_PartialSubtypeCheck_iRegP_R4_iRegP_R0",
  /*  355 */  "_Binary_iRegP_R1_iRegI_R2",
  /*  356 */  "_Binary_iRegP_R3_iRegI_R4",
  /*  357 */  "_Binary_iRegP_R1_iRegI_R4",
  /*  358 */  "_Binary_iRegP_R3_iRegI_R2",
  /*  359 */  "_Binary_iRegP_R3_immI_le_4",
  /*  360 */  "_Binary_iRegP_R3_immI_1",
  /*  361 */  "_Binary_iRegP_R1_iRegP_R3",
  /*  362 */  "_Binary_iRegP_R1_iRegI_R3",
  /*  363 */  "_Binary_vecD_iRegIorL2I",
  /*  364 */  "_Binary_vecX_iRegIorL2I",
  /*  365 */  "_Binary_vecX_iRegL",
  /*  366 */  "_Binary_vecD_vRegF",
  /*  367 */  "_Binary_vecX_vRegF",
  /*  368 */  "_Binary_vecX_vRegD",
  /*  369 */  "_Binary_vecD_vecD",
  /*  370 */  "_Binary_vecX_vecX",
  /*  371 */  "_ReplicateB_immI_M1_",
  /*  372 */  "_ReplicateS_immI_M1_",
  /*  373 */  "_ReplicateI_immI_M1_",
  /*  374 */  "_ReplicateL_immL_M1_",
  /*  375 */  "_XorV_vecD__ReplicateB_immI_M1_",
  /*  376 */  "_XorV__ReplicateB_immI_M1__vecD",
  /*  377 */  "_XorV_vecD__ReplicateS_immI_M1_",
  /*  378 */  "_XorV__ReplicateS_immI_M1__vecD",
  /*  379 */  "_XorV_vecD__ReplicateI_immI_M1_",
  /*  380 */  "_XorV__ReplicateI_immI_M1__vecD",
  /*  381 */  "_XorV_vecX__ReplicateB_immI_M1_",
  /*  382 */  "_XorV__ReplicateB_immI_M1__vecX",
  /*  383 */  "_XorV_vecX__ReplicateS_immI_M1_",
  /*  384 */  "_XorV__ReplicateS_immI_M1__vecX",
  /*  385 */  "_XorV_vecX__ReplicateI_immI_M1_",
  /*  386 */  "_XorV__ReplicateI_immI_M1__vecX",
  /*  387 */  "_XorV_vecX__ReplicateL_immL_M1_",
  /*  388 */  "_XorV__ReplicateL_immL_M1__vecX",
  /*  389 */  "_SubVF_vecD_vecD",
  /*  390 */  "_SubVF_vecX_vecX",
  /*  391 */  "_SubVD_vecX_vecX",
  /*  392 */  "_MulVS_vecD_vecD",
  /*  393 */  "_MulVS_vecX_vecX",
  /*  394 */  "_MulVI_vecD_vecD",
  /*  395 */  "_MulVI_vecX_vecX",
  /*  396 */  "_NegVF_vecD_",
  /*  397 */  "_Binary__NegVF_vecD__vecD",
  /*  398 */  "_Binary_vecD__NegVF_vecD_",
  /*  399 */  "_NegVF_vecX_",
  /*  400 */  "_Binary__NegVF_vecX__vecX",
  /*  401 */  "_Binary_vecX__NegVF_vecX_",
  /*  402 */  "_NegVD_vecX_",
  /*  403 */  "_Binary__NegVD_vecX__vecX",
  /*  404 */  "_Binary_vecX__NegVD_vecX_",
  /*  405 */  "_LShiftCntV_immI_",
  /*  406 */  "_RShiftCntV_immI_",
  /*  407 */  "_RShiftVB_vecD__RShiftCntV_immI_",
  /*  408 */  "_RShiftVB_vecX__RShiftCntV_immI_",
  /*  409 */  "_RShiftVS_vecD__RShiftCntV_immI_",
  /*  410 */  "_RShiftVS_vecX__RShiftCntV_immI_",
  /*  411 */  "_RShiftVI_vecD__RShiftCntV_immI_",
  /*  412 */  "_RShiftVI_vecX__RShiftCntV_immI_",
  /*  413 */  "_RShiftVL_vecX__RShiftCntV_immI_",
  /*  414 */  "_URShiftVB_vecD__RShiftCntV_immI_",
  /*  415 */  "_URShiftVB_vecX__RShiftCntV_immI_",
  /*  416 */  "_URShiftVS_vecD__RShiftCntV_immI_",
  /*  417 */  "_URShiftVS_vecX__RShiftCntV_immI_",
  /*  418 */  "_URShiftVI_vecD__RShiftCntV_immI_",
  /*  419 */  "_URShiftVI_vecX__RShiftCntV_immI_",
  /*  420 */  "_URShiftVL_vecX__RShiftCntV_immI_",
  /*  421 */  "_Binary_vReg_pRegGov",
  /*  422 */  "_MaskAll_immI_M1_",
  /*  423 */  "_XorVMask_pRegGov__MaskAll_immI_M1_",
  /*  424 */  "_MaskAll_immL_M1_",
  /*  425 */  "_XorVMask_pRegGov__MaskAll_immL_M1_",
  /*  426 */  "_Binary_vReg_vReg",
  /*  427 */  "_ReplicateB_immBAddSubV_",
  /*  428 */  "_ReplicateS_immIAddSubV_",
  /*  429 */  "_ReplicateI_immIAddSubV_",
  /*  430 */  "_ReplicateL_immLAddSubV_",
  /*  431 */  "_ReplicateB_immBLog_",
  /*  432 */  "_ReplicateS_immSLog_",
  /*  433 */  "_ReplicateI_immILog_",
  /*  434 */  "_ReplicateL_immLLog_",
  /*  435 */  "_XorV_vReg__ReplicateB_immI_M1_",
  /*  436 */  "_XorV__ReplicateB_immI_M1__vReg",
  /*  437 */  "_XorV_vReg__ReplicateS_immI_M1_",
  /*  438 */  "_XorV__ReplicateS_immI_M1__vReg",
  /*  439 */  "_XorV_vReg__ReplicateI_immI_M1_",
  /*  440 */  "_XorV__ReplicateI_immI_M1__vReg",
  /*  441 */  "_XorV_vReg__ReplicateL_immL_M1_",
  /*  442 */  "_XorV__ReplicateL_immL_M1__vReg",
  /*  443 */  "_NegVF_vReg_",
  /*  444 */  "_Binary__NegVF_vReg__vReg",
  /*  445 */  "_Binary_vReg__NegVF_vReg_",
  /*  446 */  "_NegVD_vReg_",
  /*  447 */  "_Binary__NegVD_vReg__vReg",
  /*  448 */  "_Binary_vReg__NegVD_vReg_",
  /*  449 */  "_MulVB_vReg_vReg",
  /*  450 */  "_MulVS_vReg_vReg",
  /*  451 */  "_MulVI_vReg_vReg",
  /*  452 */  "_MulVL_vReg_vReg",
  /*  453 */  "_Binary_immI_pRegGov",
  /*  454 */  "_LoadVector_indirect_",
  /*  455 */  "_VectorStoreMask_pRegGov_immI_gt_1",
  /*  456 */  "_Binary_iRegIorL2I_vReg",
  /*  457 */  "_Binary_iRegL_vReg",
  /*  458 */  "_Binary_vRegF_vReg",
  /*  459 */  "_Binary_vRegD_vReg",
  /*  460 */  "_Binary_vReg__RShiftCntV_immI_",
  /*  461 */  "_Binary_vReg__LShiftCntV_immI_",
  /*  462 */  "_Binary_vReg_iRegIorL2I",
  /*  463 */  "_Binary_vReg_vRegF",
  /*  464 */  "_Binary_vReg_iRegL",
  /*  465 */  "_Binary_vReg_vRegD",
  /*  466 */  "_Binary_vReg__Binary_vReg_pRegGov",
  // last internally defined operand
  /*  467 */  "loadConI",
  /*  468 */  "loadConL",
  /*  469 */  "loadConP",
  /*  470 */  "loadConP0",
  /*  471 */  "loadConP1",
  /*  472 */  "loadByteMapBase",
  /*  473 */  "loadConN",
  /*  474 */  "loadConN0",
  /*  475 */  "loadConNKlass",
  /*  476 */  "loadConF_packed",
  /*  477 */  "loadConF",
  /*  478 */  "loadConD_packed",
  /*  479 */  "loadConD",
  /*  480 */  "countLeadingZerosI",
  /*  481 */  "countLeadingZerosL",
  /*  482 */  "countTrailingZerosI",
  /*  483 */  "countTrailingZerosL",
  /*  484 */  "castX2P",
  /*  485 */  "castP2X",
  /*  486 */  "checkCastPP",
  /*  487 */  "castPP",
  /*  488 */  "castII",
  /*  489 */  "castLL",
  /*  490 */  "castFF",
  /*  491 */  "castDD",
  /*  492 */  "castVVD",
  /*  493 */  "castVVX",
  /*  494 */  "castVV",
  /*  495 */  "castVVMask",
  /*  496 */  "storePConditional",
  /*  497 */  "storeLConditional",
  /*  498 */  "storeIConditional",
  /*  499 */  "negF_reg_reg",
  /*  500 */  "negD_reg_reg",
  /*  501 */  "absF_reg",
  /*  502 */  "absD_reg",
  /*  503 */  "MoveF2I_stack_reg",
  /*  504 */  "MoveI2F_stack_reg",
  /*  505 */  "MoveD2L_stack_reg",
  /*  506 */  "MoveL2D_stack_reg",
  /*  507 */  "MoveF2I_reg_reg",
  /*  508 */  "MoveI2F_reg_reg",
  /*  509 */  "MoveD2L_reg_reg",
  /*  510 */  "MoveL2D_reg_reg",
  /*  511 */  "overflowAddI_reg_reg",
  /*  512 */  "overflowAddI_reg_imm",
  /*  513 */  "overflowAddL_reg_reg",
  /*  514 */  "overflowAddL_reg_imm",
  /*  515 */  "overflowSubI_reg_reg",
  /*  516 */  "overflowSubI_reg_imm",
  /*  517 */  "overflowSubL_reg_reg",
  /*  518 */  "overflowSubL_reg_imm",
  /*  519 */  "overflowNegI_reg",
  /*  520 */  "overflowNegL_reg",
  /*  521 */  "overflowMulI_reg",
  /*  522 */  "overflowMulL_reg",
  /*  523 */  "compI_reg_reg",
  /*  524 */  "compI_reg_immI0",
  /*  525 */  "compI_reg_immIAddSub",
  /*  526 */  "compI_reg_immI",
  /*  527 */  "compU_reg_reg",
  /*  528 */  "compU_reg_immI0",
  /*  529 */  "compU_reg_immIAddSub",
  /*  530 */  "compU_reg_immI",
  /*  531 */  "compL_reg_reg",
  /*  532 */  "compL_reg_immL0",
  /*  533 */  "compL_reg_immLAddSub",
  /*  534 */  "compL_reg_immL",
  /*  535 */  "compUL_reg_reg",
  /*  536 */  "compUL_reg_immL0",
  /*  537 */  "compUL_reg_immLAddSub",
  /*  538 */  "compUL_reg_immL",
  /*  539 */  "compP_reg_reg",
  /*  540 */  "compN_reg_reg",
  /*  541 */  "testP_reg",
  /*  542 */  "testN_reg",
  /*  543 */  "compF_reg_reg",
  /*  544 */  "compF_reg_zero",
  /*  545 */  "compD_reg_reg",
  /*  546 */  "compD_reg_zero",
  /*  547 */  "cmpL_and",
  /*  548 */  "cmpI_and",
  /*  549 */  "cmpL_and_reg",
  /*  550 */  "cmpI_and_reg",
  /*  551 */  "cmpFastLock",
  /*  552 */  "cmpFastUnlock",
  /*  553 */  "partialSubtypeCheckVsZero",
  /*  554 */  "tlsLoadP",
  /*  555 */  "reinterpretD",
  /*  556 */  "reinterpretX",
  /*  557 */  "reinterpretD2X",
  /*  558 */  "reinterpretX2D",
  /*  559 */  "reinterpretS2X",
  /*  560 */  "reinterpretX2S",
  /*  561 */  "reinterpretS2D",
  /*  562 */  "reinterpretD2S",
  /*  563 */  "vcvt8Bto8S",
  /*  564 */  "vcvt4Bto4S",
  /*  565 */  "vcvt8Sto8B",
  /*  566 */  "vcvt4Sto4B",
  /*  567 */  "vcvt4Sto4I",
  /*  568 */  "vcvt4Ito4S",
  /*  569 */  "vcvt2Ito2L",
  /*  570 */  "vcvt2Lto2I",
  /*  571 */  "vcvt4Ito4B",
  /*  572 */  "vcvt4Bto4I",
  /*  573 */  "vcvt2Lto2F",
  /*  574 */  "vcvt2Ito2F",
  /*  575 */  "vcvt4Ito4F",
  /*  576 */  "vcvt2Lto2D",
  /*  577 */  "vcvt4Sto4F",
  /*  578 */  "vcvt2Ito2D",
  /*  579 */  "vcvt4Bto4F",
  /*  580 */  "vcvt2Fto2L",
  /*  581 */  "vcvt2Fto2I",
  /*  582 */  "vcvt4Fto4I",
  /*  583 */  "vcvt2Dto2L",
  /*  584 */  "vcvt4Fto4S",
  /*  585 */  "vcvt4Fto4B",
  /*  586 */  "vcvt2Fto2D",
  /*  587 */  "vcvt2Dto2F",
  /*  588 */  "loadmask8B",
  /*  589 */  "loadmask16B",
  /*  590 */  "loadmask4S",
  /*  591 */  "loadmask8S",
  /*  592 */  "loadmask2I",
  /*  593 */  "loadmask4I",
  /*  594 */  "loadmask2L",
  /*  595 */  "vmaskcastD",
  /*  596 */  "vmaskcastX",
  /*  597 */  "loadcon8B",
  /*  598 */  "loadcon16B",
  /*  599 */  "loadshuffle8B",
  /*  600 */  "loadshuffle16B",
  /*  601 */  "loadshuffle4S",
  /*  602 */  "loadshuffle8S",
  /*  603 */  "loadshuffle4I",
  /*  604 */  "vabs8B",
  /*  605 */  "vabs16B",
  /*  606 */  "vabs4S",
  /*  607 */  "vabs8S",
  /*  608 */  "vabs2I",
  /*  609 */  "vabs4I",
  /*  610 */  "vabs2L",
  /*  611 */  "vabs2F",
  /*  612 */  "vabs4F",
  /*  613 */  "vabs2D",
  /*  614 */  "vsqrt2F",
  /*  615 */  "vsqrt4F",
  /*  616 */  "vsqrt2D",
  /*  617 */  "vneg2F",
  /*  618 */  "vneg4F",
  /*  619 */  "vneg2D",
  /*  620 */  "vshiftcnt8B",
  /*  621 */  "vshiftcnt8B_0",
  /*  622 */  "vshiftcnt16B",
  /*  623 */  "vshiftcnt16B_0",
  /*  624 */  "vpopcount4I",
  /*  625 */  "vpopcount2I",
  /*  626 */  "vmask_firsttrue8B",
  /*  627 */  "vmask_firsttrue16B",
  /*  628 */  "vmask_lasttrue8B",
  /*  629 */  "vmask_lasttrue16B",
  /*  630 */  "vmask_tolong8B",
  /*  631 */  "vmask_tolong16B",
  /*  632 */  "reinterpret",
  /*  633 */  "vmask_reinterpret_same_esize",
  /*  634 */  "vabsB",
  /*  635 */  "vabsS",
  /*  636 */  "vabsI",
  /*  637 */  "vabsL",
  /*  638 */  "vabsF",
  /*  639 */  "vabsD",
  /*  640 */  "vnegF",
  /*  641 */  "vnegD",
  /*  642 */  "vpopcountI",
  /*  643 */  "vshiftcntB",
  /*  644 */  "vshiftcntB_0",
  /*  645 */  "vshiftcntS",
  /*  646 */  "vshiftcntS_0",
  /*  647 */  "vshiftcntI",
  /*  648 */  "vshiftcntI_0",
  /*  649 */  "vshiftcntL",
  /*  650 */  "vshiftcntL_0",
  /*  651 */  "vsqrtF",
  /*  652 */  "vsqrtD",
  /*  653 */  "vmaskcast",
  /*  654 */  "vmaskcast_extend",
  /*  655 */  "vmaskcast_narrow",
  /*  656 */  "vcvtBtoX_extend",
  /*  657 */  "vcvtStoX_extend",
  /*  658 */  "vcvtItoL",
  /*  659 */  "vcvtItoF",
  /*  660 */  "vcvtItoD",
  /*  661 */  "vcvtLtoD",
  /*  662 */  "vcvtFtoI",
  /*  663 */  "vcvtFtoL",
  /*  664 */  "vcvtFtoD",
  /*  665 */  "vcvtDtoL",
  /*  666 */  "loadshuffle",
  /*  667 */  "loadconB",
  /*  668 */  "vmask_truecount",
  /*  669 */  "loadB",
  /*  670 */  "loadB2L",
  /*  671 */  "loadUB",
  /*  672 */  "loadUB2L",
  /*  673 */  "loadS",
  /*  674 */  "loadS2L",
  /*  675 */  "loadUS",
  /*  676 */  "loadUS2L",
  /*  677 */  "loadI",
  /*  678 */  "loadI2L",
  /*  679 */  "loadUI2L",
  /*  680 */  "loadL",
  /*  681 */  "loadRange",
  /*  682 */  "loadP",
  /*  683 */  "loadN",
  /*  684 */  "loadKlass",
  /*  685 */  "loadNKlass",
  /*  686 */  "loadF",
  /*  687 */  "loadD",
  /*  688 */  "storeimmCM0",
  /*  689 */  "storeimmCM0_ordered",
  /*  690 */  "storeB",
  /*  691 */  "storeimmB0",
  /*  692 */  "storeC",
  /*  693 */  "storeimmC0",
  /*  694 */  "storeI",
  /*  695 */  "storeimmI0",
  /*  696 */  "storeL",
  /*  697 */  "storeimmL0",
  /*  698 */  "storeP",
  /*  699 */  "storeimmP0",
  /*  700 */  "storeN",
  /*  701 */  "storeImmN0",
  /*  702 */  "storeF",
  /*  703 */  "storeD",
  /*  704 */  "storeNKlass",
  /*  705 */  "prefetchalloc",
  /*  706 */  "loadB_volatile",
  /*  707 */  "loadB2L_volatile",
  /*  708 */  "loadUB_volatile",
  /*  709 */  "loadUB2L_volatile",
  /*  710 */  "loadS_volatile",
  /*  711 */  "loadUS_volatile",
  /*  712 */  "loadUS2L_volatile",
  /*  713 */  "loadS2L_volatile",
  /*  714 */  "loadI_volatile",
  /*  715 */  "loadUI2L_volatile",
  /*  716 */  "loadL_volatile",
  /*  717 */  "loadP_volatile",
  /*  718 */  "loadN_volatile",
  /*  719 */  "loadF_volatile",
  /*  720 */  "loadD_volatile",
  /*  721 */  "storeB_volatile",
  /*  722 */  "storeC_volatile",
  /*  723 */  "storeI_volatile",
  /*  724 */  "storeL_volatile",
  /*  725 */  "storeP_volatile",
  /*  726 */  "storeN_volatile",
  /*  727 */  "storeF_volatile",
  /*  728 */  "storeD_volatile",
  /*  729 */  "cacheWB",
  /*  730 */  "cacheWBPreSync",
  /*  731 */  "cacheWBPostSync",
  /*  732 */  "bytes_reverse_int",
  /*  733 */  "bytes_reverse_long",
  /*  734 */  "bytes_reverse_unsigned_short",
  /*  735 */  "bytes_reverse_short",
  /*  736 */  "popCountI",
  /*  737 */  "popCountI_mem",
  /*  738 */  "popCountL",
  /*  739 */  "popCountL_mem",
  /*  740 */  "load_fence",
  /*  741 */  "unnecessary_membar_acquire",
  /*  742 */  "membar_acquire",
  /*  743 */  "membar_acquire_lock",
  /*  744 */  "store_fence",
  /*  745 */  "unnecessary_membar_release",
  /*  746 */  "membar_release",
  /*  747 */  "membar_storestore",
  /*  748 */  "membar_storestore_0",
  /*  749 */  "membar_release_lock",
  /*  750 */  "unnecessary_membar_volatile",
  /*  751 */  "membar_volatile",
  /*  752 */  "convP2I",
  /*  753 */  "convN2I",
  /*  754 */  "encodeHeapOop",
  /*  755 */  "encodeHeapOop_not_null",
  /*  756 */  "decodeHeapOop",
  /*  757 */  "decodeHeapOop_not_null",
  /*  758 */  "encodeKlass_not_null",
  /*  759 */  "decodeKlass_not_null",
  /*  760 */  "loadPLocked",
  /*  761 */  "compareAndSwapB",
  /*  762 */  "compareAndSwapS",
  /*  763 */  "compareAndSwapI",
  /*  764 */  "compareAndSwapL",
  /*  765 */  "compareAndSwapP",
  /*  766 */  "compareAndSwapN",
  /*  767 */  "compareAndSwapBAcq",
  /*  768 */  "compareAndSwapSAcq",
  /*  769 */  "compareAndSwapIAcq",
  /*  770 */  "compareAndSwapLAcq",
  /*  771 */  "compareAndSwapPAcq",
  /*  772 */  "compareAndSwapNAcq",
  /*  773 */  "compareAndExchangeB",
  /*  774 */  "compareAndExchangeS",
  /*  775 */  "compareAndExchangeI",
  /*  776 */  "compareAndExchangeL",
  /*  777 */  "compareAndExchangeN",
  /*  778 */  "compareAndExchangeP",
  /*  779 */  "compareAndExchangeBAcq",
  /*  780 */  "compareAndExchangeSAcq",
  /*  781 */  "compareAndExchangeIAcq",
  /*  782 */  "compareAndExchangeLAcq",
  /*  783 */  "compareAndExchangeNAcq",
  /*  784 */  "compareAndExchangePAcq",
  /*  785 */  "weakCompareAndSwapB",
  /*  786 */  "weakCompareAndSwapS",
  /*  787 */  "weakCompareAndSwapI",
  /*  788 */  "weakCompareAndSwapL",
  /*  789 */  "weakCompareAndSwapN",
  /*  790 */  "weakCompareAndSwapP",
  /*  791 */  "weakCompareAndSwapBAcq",
  /*  792 */  "weakCompareAndSwapSAcq",
  /*  793 */  "weakCompareAndSwapIAcq",
  /*  794 */  "weakCompareAndSwapLAcq",
  /*  795 */  "weakCompareAndSwapNAcq",
  /*  796 */  "weakCompareAndSwapPAcq",
  /*  797 */  "get_and_setI",
  /*  798 */  "get_and_setL",
  /*  799 */  "get_and_setN",
  /*  800 */  "get_and_setP",
  /*  801 */  "get_and_setIAcq",
  /*  802 */  "get_and_setLAcq",
  /*  803 */  "get_and_setNAcq",
  /*  804 */  "get_and_setPAcq",
  /*  805 */  "get_and_addL",
  /*  806 */  "get_and_addL_no_res",
  /*  807 */  "get_and_addLi",
  /*  808 */  "get_and_addLi_no_res",
  /*  809 */  "get_and_addI",
  /*  810 */  "get_and_addI_no_res",
  /*  811 */  "get_and_addIi",
  /*  812 */  "get_and_addIi_no_res",
  /*  813 */  "get_and_addLAcq",
  /*  814 */  "get_and_addL_no_resAcq",
  /*  815 */  "get_and_addLiAcq",
  /*  816 */  "get_and_addLi_no_resAcq",
  /*  817 */  "get_and_addIAcq",
  /*  818 */  "get_and_addI_no_resAcq",
  /*  819 */  "get_and_addIiAcq",
  /*  820 */  "get_and_addIi_no_resAcq",
  /*  821 */  "cmpL3_reg_reg",
  /*  822 */  "cmpL3_reg_imm",
  /*  823 */  "cmovI_reg_reg",
  /*  824 */  "cmovUI_reg_reg",
  /*  825 */  "cmovI_zero_reg",
  /*  826 */  "cmovUI_zero_reg",
  /*  827 */  "cmovI_reg_zero",
  /*  828 */  "cmovUI_reg_zero",
  /*  829 */  "cmovI_reg_zero_one",
  /*  830 */  "cmovUI_reg_zero_one",
  /*  831 */  "cmovL_reg_reg",
  /*  832 */  "cmovUL_reg_reg",
  /*  833 */  "cmovL_reg_zero",
  /*  834 */  "cmovUL_reg_zero",
  /*  835 */  "cmovL_zero_reg",
  /*  836 */  "cmovUL_zero_reg",
  /*  837 */  "cmovP_reg_reg",
  /*  838 */  "cmovUP_reg_reg",
  /*  839 */  "cmovP_reg_zero",
  /*  840 */  "cmovUP_reg_zero",
  /*  841 */  "cmovP_zero_reg",
  /*  842 */  "cmovUP_zero_reg",
  /*  843 */  "cmovN_reg_reg",
  /*  844 */  "cmovUN_reg_reg",
  /*  845 */  "cmovN_reg_zero",
  /*  846 */  "cmovUN_reg_zero",
  /*  847 */  "cmovN_zero_reg",
  /*  848 */  "cmovUN_zero_reg",
  /*  849 */  "cmovF_reg",
  /*  850 */  "cmovUF_reg",
  /*  851 */  "cmovD_reg",
  /*  852 */  "cmovUD_reg",
  /*  853 */  "addI_reg_reg",
  /*  854 */  "addI_reg_imm",
  /*  855 */  "addI_reg_imm_i2l",
  /*  856 */  "addP_reg_reg",
  /*  857 */  "addP_reg_reg_ext",
  /*  858 */  "addP_reg_reg_lsl",
  /*  859 */  "addP_reg_reg_ext_shift",
  /*  860 */  "lshift_ext",
  /*  861 */  "addP_reg_imm",
  /*  862 */  "addL_reg_reg",
  /*  863 */  "addL_reg_imm",
  /*  864 */  "subI_reg_reg",
  /*  865 */  "subI_reg_imm",
  /*  866 */  "subL_reg_reg",
  /*  867 */  "subL_reg_imm",
  /*  868 */  "negI_reg",
  /*  869 */  "negL_reg",
  /*  870 */  "mulI",
  /*  871 */  "smulI",
  /*  872 */  "smulI_0",
  /*  873 */  "mulL",
  /*  874 */  "mulHiL_rReg",
  /*  875 */  "maddI",
  /*  876 */  "maddI_0",
  /*  877 */  "msubI",
  /*  878 */  "mnegI",
  /*  879 */  "mnegI_0",
  /*  880 */  "maddL",
  /*  881 */  "maddL_0",
  /*  882 */  "msubL",
  /*  883 */  "mnegL",
  /*  884 */  "mnegL_0",
  /*  885 */  "smaddL",
  /*  886 */  "smaddL_1",
  /*  887 */  "smaddL_0",
  /*  888 */  "smaddL_2",
  /*  889 */  "smsubL",
  /*  890 */  "smsubL_0",
  /*  891 */  "smnegL",
  /*  892 */  "smnegL_0",
  /*  893 */  "muladdS2I",
  /*  894 */  "divI",
  /*  895 */  "divL",
  /*  896 */  "modI",
  /*  897 */  "modL",
  /*  898 */  "lShiftI_reg_reg",
  /*  899 */  "lShiftI_reg_imm",
  /*  900 */  "urShiftI_reg_reg",
  /*  901 */  "urShiftI_reg_imm",
  /*  902 */  "rShiftI_reg_reg",
  /*  903 */  "rShiftI_reg_imm",
  /*  904 */  "lShiftL_reg_reg",
  /*  905 */  "lShiftL_reg_imm",
  /*  906 */  "urShiftL_reg_reg",
  /*  907 */  "urShiftL_reg_imm",
  /*  908 */  "urShiftP_reg_imm",
  /*  909 */  "rShiftL_reg_reg",
  /*  910 */  "rShiftL_reg_imm",
  /*  911 */  "regL_not_reg",
  /*  912 */  "regI_not_reg",
  /*  913 */  "AndI_reg_not_reg",
  /*  914 */  "AndI_reg_not_reg_0",
  /*  915 */  "AndL_reg_not_reg",
  /*  916 */  "AndL_reg_not_reg_0",
  /*  917 */  "OrI_reg_not_reg",
  /*  918 */  "OrI_reg_not_reg_0",
  /*  919 */  "OrL_reg_not_reg",
  /*  920 */  "OrL_reg_not_reg_0",
  /*  921 */  "XorI_reg_not_reg",
  /*  922 */  "XorI_reg_not_reg_0",
  /*  923 */  "XorL_reg_not_reg",
  /*  924 */  "XorL_reg_not_reg_0",
  /*  925 */  "AndI_reg_URShift_not_reg",
  /*  926 */  "AndI_reg_URShift_not_reg_0",
  /*  927 */  "AndL_reg_URShift_not_reg",
  /*  928 */  "AndL_reg_URShift_not_reg_0",
  /*  929 */  "AndI_reg_RShift_not_reg",
  /*  930 */  "AndI_reg_RShift_not_reg_0",
  /*  931 */  "AndL_reg_RShift_not_reg",
  /*  932 */  "AndL_reg_RShift_not_reg_0",
  /*  933 */  "AndI_reg_RotateRight_not_reg",
  /*  934 */  "AndI_reg_RotateRight_not_reg_0",
  /*  935 */  "AndL_reg_RotateRight_not_reg",
  /*  936 */  "AndL_reg_RotateRight_not_reg_0",
  /*  937 */  "AndI_reg_LShift_not_reg",
  /*  938 */  "AndI_reg_LShift_not_reg_0",
  /*  939 */  "AndL_reg_LShift_not_reg",
  /*  940 */  "AndL_reg_LShift_not_reg_0",
  /*  941 */  "XorI_reg_URShift_not_reg",
  /*  942 */  "XorI_reg_URShift_not_reg_1",
  /*  943 */  "XorI_reg_URShift_not_reg_0",
  /*  944 */  "XorI_reg_URShift_not_reg_2",
  /*  945 */  "XorL_reg_URShift_not_reg",
  /*  946 */  "XorL_reg_URShift_not_reg_1",
  /*  947 */  "XorL_reg_URShift_not_reg_0",
  /*  948 */  "XorL_reg_URShift_not_reg_2",
  /*  949 */  "XorI_reg_RShift_not_reg",
  /*  950 */  "XorI_reg_RShift_not_reg_1",
  /*  951 */  "XorI_reg_RShift_not_reg_0",
  /*  952 */  "XorI_reg_RShift_not_reg_2",
  /*  953 */  "XorL_reg_RShift_not_reg",
  /*  954 */  "XorL_reg_RShift_not_reg_1",
  /*  955 */  "XorL_reg_RShift_not_reg_0",
  /*  956 */  "XorL_reg_RShift_not_reg_2",
  /*  957 */  "XorI_reg_RotateRight_not_reg",
  /*  958 */  "XorI_reg_RotateRight_not_reg_1",
  /*  959 */  "XorI_reg_RotateRight_not_reg_0",
  /*  960 */  "XorI_reg_RotateRight_not_reg_2",
  /*  961 */  "XorL_reg_RotateRight_not_reg",
  /*  962 */  "XorL_reg_RotateRight_not_reg_1",
  /*  963 */  "XorL_reg_RotateRight_not_reg_0",
  /*  964 */  "XorL_reg_RotateRight_not_reg_2",
  /*  965 */  "XorI_reg_LShift_not_reg",
  /*  966 */  "XorI_reg_LShift_not_reg_1",
  /*  967 */  "XorI_reg_LShift_not_reg_0",
  /*  968 */  "XorI_reg_LShift_not_reg_2",
  /*  969 */  "XorL_reg_LShift_not_reg",
  /*  970 */  "XorL_reg_LShift_not_reg_1",
  /*  971 */  "XorL_reg_LShift_not_reg_0",
  /*  972 */  "XorL_reg_LShift_not_reg_2",
  /*  973 */  "OrI_reg_URShift_not_reg",
  /*  974 */  "OrI_reg_URShift_not_reg_0",
  /*  975 */  "OrL_reg_URShift_not_reg",
  /*  976 */  "OrL_reg_URShift_not_reg_0",
  /*  977 */  "OrI_reg_RShift_not_reg",
  /*  978 */  "OrI_reg_RShift_not_reg_0",
  /*  979 */  "OrL_reg_RShift_not_reg",
  /*  980 */  "OrL_reg_RShift_not_reg_0",
  /*  981 */  "OrI_reg_RotateRight_not_reg",
  /*  982 */  "OrI_reg_RotateRight_not_reg_0",
  /*  983 */  "OrL_reg_RotateRight_not_reg",
  /*  984 */  "OrL_reg_RotateRight_not_reg_0",
  /*  985 */  "OrI_reg_LShift_not_reg",
  /*  986 */  "OrI_reg_LShift_not_reg_0",
  /*  987 */  "OrL_reg_LShift_not_reg",
  /*  988 */  "OrL_reg_LShift_not_reg_0",
  /*  989 */  "AndI_reg_URShift_reg",
  /*  990 */  "AndI_reg_URShift_reg_0",
  /*  991 */  "AndL_reg_URShift_reg",
  /*  992 */  "AndL_reg_URShift_reg_0",
  /*  993 */  "AndI_reg_RShift_reg",
  /*  994 */  "AndI_reg_RShift_reg_0",
  /*  995 */  "AndL_reg_RShift_reg",
  /*  996 */  "AndL_reg_RShift_reg_0",
  /*  997 */  "AndI_reg_LShift_reg",
  /*  998 */  "AndI_reg_LShift_reg_0",
  /*  999 */  "AndL_reg_LShift_reg",
  /* 1000 */  "AndL_reg_LShift_reg_0",
  /* 1001 */  "AndI_reg_RotateRight_reg",
  /* 1002 */  "AndI_reg_RotateRight_reg_0",
  /* 1003 */  "AndL_reg_RotateRight_reg",
  /* 1004 */  "AndL_reg_RotateRight_reg_0",
  /* 1005 */  "XorI_reg_URShift_reg",
  /* 1006 */  "XorI_reg_URShift_reg_0",
  /* 1007 */  "XorL_reg_URShift_reg",
  /* 1008 */  "XorL_reg_URShift_reg_0",
  /* 1009 */  "XorI_reg_RShift_reg",
  /* 1010 */  "XorI_reg_RShift_reg_0",
  /* 1011 */  "XorL_reg_RShift_reg",
  /* 1012 */  "XorL_reg_RShift_reg_0",
  /* 1013 */  "XorI_reg_LShift_reg",
  /* 1014 */  "XorI_reg_LShift_reg_0",
  /* 1015 */  "XorL_reg_LShift_reg",
  /* 1016 */  "XorL_reg_LShift_reg_0",
  /* 1017 */  "XorI_reg_RotateRight_reg",
  /* 1018 */  "XorI_reg_RotateRight_reg_0",
  /* 1019 */  "XorL_reg_RotateRight_reg",
  /* 1020 */  "XorL_reg_RotateRight_reg_0",
  /* 1021 */  "OrI_reg_URShift_reg",
  /* 1022 */  "OrI_reg_URShift_reg_0",
  /* 1023 */  "OrL_reg_URShift_reg",
  /* 1024 */  "OrL_reg_URShift_reg_0",
  /* 1025 */  "OrI_reg_RShift_reg",
  /* 1026 */  "OrI_reg_RShift_reg_0",
  /* 1027 */  "OrL_reg_RShift_reg",
  /* 1028 */  "OrL_reg_RShift_reg_0",
  /* 1029 */  "OrI_reg_LShift_reg",
  /* 1030 */  "OrI_reg_LShift_reg_0",
  /* 1031 */  "OrL_reg_LShift_reg",
  /* 1032 */  "OrL_reg_LShift_reg_0",
  /* 1033 */  "OrI_reg_RotateRight_reg",
  /* 1034 */  "OrI_reg_RotateRight_reg_0",
  /* 1035 */  "OrL_reg_RotateRight_reg",
  /* 1036 */  "OrL_reg_RotateRight_reg_0",
  /* 1037 */  "AddI_reg_URShift_reg",
  /* 1038 */  "AddI_reg_URShift_reg_0",
  /* 1039 */  "AddL_reg_URShift_reg",
  /* 1040 */  "AddL_reg_URShift_reg_0",
  /* 1041 */  "AddI_reg_RShift_reg",
  /* 1042 */  "AddI_reg_RShift_reg_0",
  /* 1043 */  "AddL_reg_RShift_reg",
  /* 1044 */  "AddL_reg_RShift_reg_0",
  /* 1045 */  "AddI_reg_LShift_reg",
  /* 1046 */  "AddI_reg_LShift_reg_0",
  /* 1047 */  "AddL_reg_LShift_reg",
  /* 1048 */  "AddL_reg_LShift_reg_0",
  /* 1049 */  "SubI_reg_URShift_reg",
  /* 1050 */  "SubL_reg_URShift_reg",
  /* 1051 */  "SubI_reg_RShift_reg",
  /* 1052 */  "SubL_reg_RShift_reg",
  /* 1053 */  "SubI_reg_LShift_reg",
  /* 1054 */  "SubL_reg_LShift_reg",
  /* 1055 */  "sbfmL",
  /* 1056 */  "sbfmwI",
  /* 1057 */  "ubfmL",
  /* 1058 */  "ubfmwI",
  /* 1059 */  "ubfxwI",
  /* 1060 */  "ubfxL",
  /* 1061 */  "ubfxIConvI2L",
  /* 1062 */  "ubfizwI",
  /* 1063 */  "ubfizL",
  /* 1064 */  "ubfizwIConvI2L",
  /* 1065 */  "ubfizLConvL2I",
  /* 1066 */  "ubfizIConvI2L",
  /* 1067 */  "ubfizLConvL2Ix",
  /* 1068 */  "ubfizIConvI2LAndI",
  /* 1069 */  "extrOrL",
  /* 1070 */  "extrOrL_0",
  /* 1071 */  "extrOrI",
  /* 1072 */  "extrOrI_0",
  /* 1073 */  "extrAddL",
  /* 1074 */  "extrAddL_0",
  /* 1075 */  "extrAddI",
  /* 1076 */  "extrAddI_0",
  /* 1077 */  "rorI_imm",
  /* 1078 */  "rorL_imm",
  /* 1079 */  "rorI_reg",
  /* 1080 */  "rorL_reg",
  /* 1081 */  "rolI_reg",
  /* 1082 */  "rolL_reg",
  /* 1083 */  "AddExtI",
  /* 1084 */  "AddExtI_0",
  /* 1085 */  "SubExtI",
  /* 1086 */  "AddExtI_sxth",
  /* 1087 */  "AddExtI_sxth_0",
  /* 1088 */  "AddExtI_sxtb",
  /* 1089 */  "AddExtI_sxtb_0",
  /* 1090 */  "AddExtI_uxtb",
  /* 1091 */  "AddExtI_uxtb_0",
  /* 1092 */  "AddExtL_sxth",
  /* 1093 */  "AddExtL_sxth_0",
  /* 1094 */  "AddExtL_sxtw",
  /* 1095 */  "AddExtL_sxtw_0",
  /* 1096 */  "AddExtL_sxtb",
  /* 1097 */  "AddExtL_sxtb_0",
  /* 1098 */  "AddExtL_uxtb",
  /* 1099 */  "AddExtL_uxtb_0",
  /* 1100 */  "AddExtI_uxtb_and",
  /* 1101 */  "AddExtI_uxtb_and_0",
  /* 1102 */  "AddExtI_uxth_and",
  /* 1103 */  "AddExtI_uxth_and_0",
  /* 1104 */  "AddExtL_uxtb_and",
  /* 1105 */  "AddExtL_uxtb_and_0",
  /* 1106 */  "AddExtL_uxth_and",
  /* 1107 */  "AddExtL_uxth_and_0",
  /* 1108 */  "AddExtL_uxtw_and",
  /* 1109 */  "AddExtL_uxtw_and_0",
  /* 1110 */  "SubExtI_uxtb_and",
  /* 1111 */  "SubExtI_uxth_and",
  /* 1112 */  "SubExtL_uxtb_and",
  /* 1113 */  "SubExtL_uxth_and",
  /* 1114 */  "SubExtL_uxtw_and",
  /* 1115 */  "AddExtL_sxtb_shift",
  /* 1116 */  "AddExtL_sxtb_shift_0",
  /* 1117 */  "AddExtL_sxth_shift",
  /* 1118 */  "AddExtL_sxth_shift_0",
  /* 1119 */  "AddExtL_sxtw_shift",
  /* 1120 */  "AddExtL_sxtw_shift_0",
  /* 1121 */  "SubExtL_sxtb_shift",
  /* 1122 */  "SubExtL_sxth_shift",
  /* 1123 */  "SubExtL_sxtw_shift",
  /* 1124 */  "AddExtI_sxtb_shift",
  /* 1125 */  "AddExtI_sxtb_shift_0",
  /* 1126 */  "AddExtI_sxth_shift",
  /* 1127 */  "AddExtI_sxth_shift_0",
  /* 1128 */  "SubExtI_sxtb_shift",
  /* 1129 */  "SubExtI_sxth_shift",
  /* 1130 */  "AddExtI_shift",
  /* 1131 */  "AddExtI_shift_0",
  /* 1132 */  "SubExtI_shift",
  /* 1133 */  "AddExtL_uxtb_and_shift",
  /* 1134 */  "AddExtL_uxtb_and_shift_0",
  /* 1135 */  "AddExtL_uxth_and_shift",
  /* 1136 */  "AddExtL_uxth_and_shift_0",
  /* 1137 */  "AddExtL_uxtw_and_shift",
  /* 1138 */  "AddExtL_uxtw_and_shift_0",
  /* 1139 */  "SubExtL_uxtb_and_shift",
  /* 1140 */  "SubExtL_uxth_and_shift",
  /* 1141 */  "SubExtL_uxtw_and_shift",
  /* 1142 */  "AddExtI_uxtb_and_shift",
  /* 1143 */  "AddExtI_uxtb_and_shift_0",
  /* 1144 */  "AddExtI_uxth_and_shift",
  /* 1145 */  "AddExtI_uxth_and_shift_0",
  /* 1146 */  "SubExtI_uxtb_and_shift",
  /* 1147 */  "SubExtI_uxth_and_shift",
  /* 1148 */  "addF_reg_reg",
  /* 1149 */  "addD_reg_reg",
  /* 1150 */  "subF_reg_reg",
  /* 1151 */  "subD_reg_reg",
  /* 1152 */  "mulF_reg_reg",
  /* 1153 */  "mulD_reg_reg",
  /* 1154 */  "maddF_reg_reg",
  /* 1155 */  "maddD_reg_reg",
  /* 1156 */  "msubF_reg_reg",
  /* 1157 */  "msubF_reg_reg_0",
  /* 1158 */  "msubD_reg_reg",
  /* 1159 */  "msubD_reg_reg_0",
  /* 1160 */  "mnaddF_reg_reg",
  /* 1161 */  "mnaddF_reg_reg_0",
  /* 1162 */  "mnaddD_reg_reg",
  /* 1163 */  "mnaddD_reg_reg_0",
  /* 1164 */  "mnsubF_reg_reg",
  /* 1165 */  "mnsubD_reg_reg",
  /* 1166 */  "maxF_reg_reg",
  /* 1167 */  "minF_reg_reg",
  /* 1168 */  "maxD_reg_reg",
  /* 1169 */  "minD_reg_reg",
  /* 1170 */  "divF_reg_reg",
  /* 1171 */  "divD_reg_reg",
  /* 1172 */  "absI_reg",
  /* 1173 */  "absL_reg",
  /* 1174 */  "absdF_reg",
  /* 1175 */  "absdD_reg",
  /* 1176 */  "sqrtD_reg",
  /* 1177 */  "sqrtF_reg",
  /* 1178 */  "roundD_reg",
  /* 1179 */  "copySignD_reg",
  /* 1180 */  "copySignF_reg",
  /* 1181 */  "signumD_reg",
  /* 1182 */  "signumF_reg",
  /* 1183 */  "onspinwait",
  /* 1184 */  "andI_reg_reg",
  /* 1185 */  "andI_reg_imm",
  /* 1186 */  "orI_reg_reg",
  /* 1187 */  "orI_reg_imm",
  /* 1188 */  "xorI_reg_reg",
  /* 1189 */  "xorI_reg_imm",
  /* 1190 */  "andL_reg_reg",
  /* 1191 */  "andL_reg_imm",
  /* 1192 */  "orL_reg_reg",
  /* 1193 */  "orL_reg_imm",
  /* 1194 */  "xorL_reg_reg",
  /* 1195 */  "xorL_reg_imm",
  /* 1196 */  "convI2L_reg_reg",
  /* 1197 */  "convUI2L_reg_reg",
  /* 1198 */  "convL2I_reg",
  /* 1199 */  "convI2B",
  /* 1200 */  "convP2B",
  /* 1201 */  "convD2F_reg",
  /* 1202 */  "convF2D_reg",
  /* 1203 */  "convF2I_reg_reg",
  /* 1204 */  "convF2L_reg_reg",
  /* 1205 */  "convI2F_reg_reg",
  /* 1206 */  "convL2F_reg_reg",
  /* 1207 */  "convD2I_reg_reg",
  /* 1208 */  "convD2L_reg_reg",
  /* 1209 */  "convI2D_reg_reg",
  /* 1210 */  "convL2D_reg_reg",
  /* 1211 */  "MoveF2I_reg_stack",
  /* 1212 */  "MoveI2F_reg_stack",
  /* 1213 */  "MoveD2L_reg_stack",
  /* 1214 */  "MoveL2D_reg_stack",
  /* 1215 */  "clearArray_reg_reg",
  /* 1216 */  "clearArray_imm_reg",
  /* 1217 */  "overflowMulI_reg_branch",
  /* 1218 */  "overflowMulL_reg_branch",
  /* 1219 */  "compF3_reg_reg",
  /* 1220 */  "compD3_reg_reg",
  /* 1221 */  "compF3_reg_immF0",
  /* 1222 */  "compD3_reg_immD0",
  /* 1223 */  "cmpLTMask_reg_reg",
  /* 1224 */  "cmpLTMask_reg_zero",
  /* 1225 */  "cmovI_reg_reg_lt",
  /* 1226 */  "minI_rReg",
  /* 1227 */  "cmovI_reg_reg_gt",
  /* 1228 */  "maxI_rReg",
  /* 1229 */  "branch",
  /* 1230 */  "branchCon",
  /* 1231 */  "branchConU",
  /* 1232 */  "cmpI_imm0_branch",
  /* 1233 */  "cmpL_imm0_branch",
  /* 1234 */  "cmpP_imm0_branch",
  /* 1235 */  "cmpN_imm0_branch",
  /* 1236 */  "cmpP_narrowOop_imm0_branch",
  /* 1237 */  "cmpUI_imm0_branch",
  /* 1238 */  "cmpUL_imm0_branch",
  /* 1239 */  "cmpL_branch_sign",
  /* 1240 */  "cmpI_branch_sign",
  /* 1241 */  "cmpL_branch_bit",
  /* 1242 */  "cmpI_branch_bit",
  /* 1243 */  "far_cmpL_branch_sign",
  /* 1244 */  "far_cmpI_branch_sign",
  /* 1245 */  "far_cmpL_branch_bit",
  /* 1246 */  "far_cmpI_branch_bit",
  /* 1247 */  "branchLoopEnd",
  /* 1248 */  "branchLoopEndU",
  /* 1249 */  "safePoint",
  /* 1250 */  "CallStaticJavaDirect",
  /* 1251 */  "CallDynamicJavaDirect",
  /* 1252 */  "CallRuntimeDirect",
  /* 1253 */  "CallLeafDirect",
  /* 1254 */  "CallLeafNoFPDirect",
  /* 1255 */  "CallNativeDirect",
  /* 1256 */  "TailCalljmpInd",
  /* 1257 */  "TailjmpInd",
  /* 1258 */  "CreateException",
  /* 1259 */  "RethrowException",
  /* 1260 */  "Ret",
  /* 1261 */  "ShouldNotReachHere",
  /* 1262 */  "partialSubtypeCheck",
  /* 1263 */  "string_compareU",
  /* 1264 */  "string_compareL",
  /* 1265 */  "string_compareUL",
  /* 1266 */  "string_compareLU",
  /* 1267 */  "string_indexofUU",
  /* 1268 */  "string_indexofLL",
  /* 1269 */  "string_indexofUL",
  /* 1270 */  "string_indexof_conUU",
  /* 1271 */  "string_indexof_conLL",
  /* 1272 */  "string_indexof_conUL",
  /* 1273 */  "string_indexof_char",
  /* 1274 */  "stringL_indexof_char",
  /* 1275 */  "string_equalsL",
  /* 1276 */  "string_equalsU",
  /* 1277 */  "array_equalsB",
  /* 1278 */  "array_equalsC",
  /* 1279 */  "has_negatives",
  /* 1280 */  "string_compress",
  /* 1281 */  "string_inflate",
  /* 1282 */  "encode_iso_array",
  /* 1283 */  "loadV2",
  /* 1284 */  "loadV4",
  /* 1285 */  "loadV8",
  /* 1286 */  "loadV16",
  /* 1287 */  "storeV2",
  /* 1288 */  "storeV4",
  /* 1289 */  "storeV8",
  /* 1290 */  "storeV16",
  /* 1291 */  "vcvt2Dto2I",
  /* 1292 */  "reduce_add8B",
  /* 1293 */  "reduce_add16B",
  /* 1294 */  "reduce_add4S",
  /* 1295 */  "reduce_add8S",
  /* 1296 */  "reduce_add2L",
  /* 1297 */  "reduce_mul8B",
  /* 1298 */  "reduce_mul16B",
  /* 1299 */  "reduce_mul4S",
  /* 1300 */  "reduce_mul8S",
  /* 1301 */  "reduce_mul2L",
  /* 1302 */  "reduce_max8B",
  /* 1303 */  "reduce_max16B",
  /* 1304 */  "reduce_max4S",
  /* 1305 */  "reduce_max8S",
  /* 1306 */  "reduce_max4I",
  /* 1307 */  "reduce_min8B",
  /* 1308 */  "reduce_min16B",
  /* 1309 */  "reduce_min4S",
  /* 1310 */  "reduce_min8S",
  /* 1311 */  "reduce_min4I",
  /* 1312 */  "reduce_max2I",
  /* 1313 */  "reduce_min2I",
  /* 1314 */  "reduce_max2L",
  /* 1315 */  "reduce_min2L",
  /* 1316 */  "reduce_max2F",
  /* 1317 */  "reduce_max4F",
  /* 1318 */  "reduce_max2D",
  /* 1319 */  "reduce_min2F",
  /* 1320 */  "reduce_min4F",
  /* 1321 */  "reduce_min2D",
  /* 1322 */  "reduce_and8B",
  /* 1323 */  "reduce_orr8B",
  /* 1324 */  "reduce_eor8B",
  /* 1325 */  "reduce_and16B",
  /* 1326 */  "reduce_orr16B",
  /* 1327 */  "reduce_eor16B",
  /* 1328 */  "reduce_and4S",
  /* 1329 */  "reduce_orr4S",
  /* 1330 */  "reduce_eor4S",
  /* 1331 */  "reduce_and8S",
  /* 1332 */  "reduce_orr8S",
  /* 1333 */  "reduce_eor8S",
  /* 1334 */  "reduce_and2I",
  /* 1335 */  "reduce_orr2I",
  /* 1336 */  "reduce_eor2I",
  /* 1337 */  "reduce_and4I",
  /* 1338 */  "reduce_orr4I",
  /* 1339 */  "reduce_eor4I",
  /* 1340 */  "reduce_and2L",
  /* 1341 */  "reduce_orr2L",
  /* 1342 */  "reduce_eor2L",
  /* 1343 */  "insert8B",
  /* 1344 */  "insert16B",
  /* 1345 */  "insert4S",
  /* 1346 */  "insert8S",
  /* 1347 */  "insert2I",
  /* 1348 */  "insert4I",
  /* 1349 */  "insert2L",
  /* 1350 */  "insert2F",
  /* 1351 */  "insert4F",
  /* 1352 */  "insert2D",
  /* 1353 */  "extract8B",
  /* 1354 */  "extract16B",
  /* 1355 */  "extract4S",
  /* 1356 */  "extract8S",
  /* 1357 */  "extract2I",
  /* 1358 */  "extract4I",
  /* 1359 */  "extract2L",
  /* 1360 */  "extract2F",
  /* 1361 */  "extract4F",
  /* 1362 */  "extract2D",
  /* 1363 */  "vcmpD",
  /* 1364 */  "vcmpX",
  /* 1365 */  "vmul2L",
  /* 1366 */  "vnot2I",
  /* 1367 */  "vnot2I_0",
  /* 1368 */  "vnot2I_1",
  /* 1369 */  "vnot2I_2",
  /* 1370 */  "vnot2I_3",
  /* 1371 */  "vnot2I_4",
  /* 1372 */  "vnot4I",
  /* 1373 */  "vnot4I_0",
  /* 1374 */  "vnot4I_1",
  /* 1375 */  "vnot4I_2",
  /* 1376 */  "vnot4I_3",
  /* 1377 */  "vnot4I_4",
  /* 1378 */  "vnot2L",
  /* 1379 */  "vnot2L_0",
  /* 1380 */  "vand_not2I",
  /* 1381 */  "vand_not2I_1",
  /* 1382 */  "vand_not2I_0",
  /* 1383 */  "vand_not2I_2",
  /* 1384 */  "vand_not2I_3",
  /* 1385 */  "vand_not2I_5",
  /* 1386 */  "vand_not2I_4",
  /* 1387 */  "vand_not2I_6",
  /* 1388 */  "vand_not2I_7",
  /* 1389 */  "vand_not2I_9",
  /* 1390 */  "vand_not2I_8",
  /* 1391 */  "vand_not2I_10",
  /* 1392 */  "vand_not4I",
  /* 1393 */  "vand_not4I_1",
  /* 1394 */  "vand_not4I_0",
  /* 1395 */  "vand_not4I_2",
  /* 1396 */  "vand_not4I_3",
  /* 1397 */  "vand_not4I_5",
  /* 1398 */  "vand_not4I_4",
  /* 1399 */  "vand_not4I_6",
  /* 1400 */  "vand_not4I_7",
  /* 1401 */  "vand_not4I_9",
  /* 1402 */  "vand_not4I_8",
  /* 1403 */  "vand_not4I_10",
  /* 1404 */  "vand_not2L",
  /* 1405 */  "vand_not2L_1",
  /* 1406 */  "vand_not2L_0",
  /* 1407 */  "vand_not2L_2",
  /* 1408 */  "vmax8B",
  /* 1409 */  "vmax16B",
  /* 1410 */  "vmax4S",
  /* 1411 */  "vmax8S",
  /* 1412 */  "vmax2I",
  /* 1413 */  "vmax4I",
  /* 1414 */  "vmin8B",
  /* 1415 */  "vmin16B",
  /* 1416 */  "vmin4S",
  /* 1417 */  "vmin8S",
  /* 1418 */  "vmin2I",
  /* 1419 */  "vmin4I",
  /* 1420 */  "vmax2L",
  /* 1421 */  "vmin2L",
  /* 1422 */  "vbsl8B",
  /* 1423 */  "vbsl16B",
  /* 1424 */  "storemask8B",
  /* 1425 */  "storemask16B",
  /* 1426 */  "storemask4S",
  /* 1427 */  "storemask8S",
  /* 1428 */  "storemask2I",
  /* 1429 */  "storemask4I",
  /* 1430 */  "storemask2L",
  /* 1431 */  "rearrange8B",
  /* 1432 */  "rearrange16B",
  /* 1433 */  "rearrange4S",
  /* 1434 */  "rearrange8S",
  /* 1435 */  "rearrange4I",
  /* 1436 */  "anytrue_in_mask8B",
  /* 1437 */  "anytrue_in_mask16B",
  /* 1438 */  "alltrue_in_mask8B",
  /* 1439 */  "alltrue_in_mask16B",
  /* 1440 */  "vabd2F",
  /* 1441 */  "vabd4F",
  /* 1442 */  "vabd2D",
  /* 1443 */  "replicate8B",
  /* 1444 */  "replicate16B",
  /* 1445 */  "replicate8B_imm",
  /* 1446 */  "replicate16B_imm",
  /* 1447 */  "replicate4S",
  /* 1448 */  "replicate8S",
  /* 1449 */  "replicate4S_imm",
  /* 1450 */  "replicate8S_imm",
  /* 1451 */  "replicate2I",
  /* 1452 */  "replicate4I",
  /* 1453 */  "replicate2I_imm",
  /* 1454 */  "replicate4I_imm",
  /* 1455 */  "replicate2L",
  /* 1456 */  "replicate2L_zero",
  /* 1457 */  "replicate2F",
  /* 1458 */  "replicate4F",
  /* 1459 */  "replicate2D",
  /* 1460 */  "reduce_add2I",
  /* 1461 */  "reduce_add4I",
  /* 1462 */  "reduce_mul2I",
  /* 1463 */  "reduce_mul4I",
  /* 1464 */  "reduce_add2F",
  /* 1465 */  "reduce_add4F",
  /* 1466 */  "reduce_mul2F",
  /* 1467 */  "reduce_mul4F",
  /* 1468 */  "reduce_add2D",
  /* 1469 */  "reduce_mul2D",
  /* 1470 */  "vadd8B",
  /* 1471 */  "vadd16B",
  /* 1472 */  "vadd4S",
  /* 1473 */  "vadd8S",
  /* 1474 */  "vadd2I",
  /* 1475 */  "vadd4I",
  /* 1476 */  "vadd2L",
  /* 1477 */  "vadd2F",
  /* 1478 */  "vadd4F",
  /* 1479 */  "vadd2D",
  /* 1480 */  "vsub8B",
  /* 1481 */  "vsub16B",
  /* 1482 */  "vsub4S",
  /* 1483 */  "vsub8S",
  /* 1484 */  "vsub2I",
  /* 1485 */  "vsub4I",
  /* 1486 */  "vsub2L",
  /* 1487 */  "vsub2F",
  /* 1488 */  "vsub4F",
  /* 1489 */  "vsub2D",
  /* 1490 */  "vmul8B",
  /* 1491 */  "vmul16B",
  /* 1492 */  "vmul4S",
  /* 1493 */  "vmul8S",
  /* 1494 */  "vmul2I",
  /* 1495 */  "vmul4I",
  /* 1496 */  "vmul2F",
  /* 1497 */  "vmul4F",
  /* 1498 */  "vmul2D",
  /* 1499 */  "vmla4S",
  /* 1500 */  "vmla4S_0",
  /* 1501 */  "vmla8S",
  /* 1502 */  "vmla8S_0",
  /* 1503 */  "vmla2I",
  /* 1504 */  "vmla2I_0",
  /* 1505 */  "vmla4I",
  /* 1506 */  "vmla4I_0",
  /* 1507 */  "vmla2F",
  /* 1508 */  "vmla4F",
  /* 1509 */  "vmla2D",
  /* 1510 */  "vmls4S",
  /* 1511 */  "vmls8S",
  /* 1512 */  "vmls2I",
  /* 1513 */  "vmls4I",
  /* 1514 */  "vmls2F",
  /* 1515 */  "vmls2F_0",
  /* 1516 */  "vmls4F",
  /* 1517 */  "vmls4F_0",
  /* 1518 */  "vmls2D",
  /* 1519 */  "vmls2D_0",
  /* 1520 */  "vmuladdS2I",
  /* 1521 */  "vdiv2F",
  /* 1522 */  "vdiv4F",
  /* 1523 */  "vdiv2D",
  /* 1524 */  "vand8B",
  /* 1525 */  "vand16B",
  /* 1526 */  "vor8B",
  /* 1527 */  "vor16B",
  /* 1528 */  "vxor8B",
  /* 1529 */  "vxor16B",
  /* 1530 */  "vsll8B",
  /* 1531 */  "vsll16B",
  /* 1532 */  "vsra8B",
  /* 1533 */  "vsra16B",
  /* 1534 */  "vsrl8B",
  /* 1535 */  "vsrl16B",
  /* 1536 */  "vsll8B_imm",
  /* 1537 */  "vsll16B_imm",
  /* 1538 */  "vsra8B_imm",
  /* 1539 */  "vsra16B_imm",
  /* 1540 */  "vsrl8B_imm",
  /* 1541 */  "vsrl16B_imm",
  /* 1542 */  "vsll4S",
  /* 1543 */  "vsll8S",
  /* 1544 */  "vsra4S",
  /* 1545 */  "vsra8S",
  /* 1546 */  "vsrl4S",
  /* 1547 */  "vsrl8S",
  /* 1548 */  "vsll4S_imm",
  /* 1549 */  "vsll8S_imm",
  /* 1550 */  "vsra4S_imm",
  /* 1551 */  "vsra8S_imm",
  /* 1552 */  "vsrl4S_imm",
  /* 1553 */  "vsrl8S_imm",
  /* 1554 */  "vsll2I",
  /* 1555 */  "vsll4I",
  /* 1556 */  "vsra2I",
  /* 1557 */  "vsra4I",
  /* 1558 */  "vsrl2I",
  /* 1559 */  "vsrl4I",
  /* 1560 */  "vsll2I_imm",
  /* 1561 */  "vsll4I_imm",
  /* 1562 */  "vsra2I_imm",
  /* 1563 */  "vsra4I_imm",
  /* 1564 */  "vsrl2I_imm",
  /* 1565 */  "vsrl4I_imm",
  /* 1566 */  "vsll2L",
  /* 1567 */  "vsra2L",
  /* 1568 */  "vsrl2L",
  /* 1569 */  "vsll2L_imm",
  /* 1570 */  "vsra2L_imm",
  /* 1571 */  "vsrl2L_imm",
  /* 1572 */  "vsraa8B_imm",
  /* 1573 */  "vsraa8B_imm_0",
  /* 1574 */  "vsraa16B_imm",
  /* 1575 */  "vsraa16B_imm_0",
  /* 1576 */  "vsraa4S_imm",
  /* 1577 */  "vsraa4S_imm_0",
  /* 1578 */  "vsraa8S_imm",
  /* 1579 */  "vsraa8S_imm_0",
  /* 1580 */  "vsraa2I_imm",
  /* 1581 */  "vsraa2I_imm_0",
  /* 1582 */  "vsraa4I_imm",
  /* 1583 */  "vsraa4I_imm_0",
  /* 1584 */  "vsraa2L_imm",
  /* 1585 */  "vsraa2L_imm_0",
  /* 1586 */  "vsrla8B_imm",
  /* 1587 */  "vsrla8B_imm_0",
  /* 1588 */  "vsrla16B_imm",
  /* 1589 */  "vsrla16B_imm_0",
  /* 1590 */  "vsrla4S_imm",
  /* 1591 */  "vsrla4S_imm_0",
  /* 1592 */  "vsrla8S_imm",
  /* 1593 */  "vsrla8S_imm_0",
  /* 1594 */  "vsrla2I_imm",
  /* 1595 */  "vsrla2I_imm_0",
  /* 1596 */  "vsrla4I_imm",
  /* 1597 */  "vsrla4I_imm_0",
  /* 1598 */  "vsrla2L_imm",
  /* 1599 */  "vsrla2L_imm_0",
  /* 1600 */  "vmax2F",
  /* 1601 */  "vmax4F",
  /* 1602 */  "vmax2D",
  /* 1603 */  "vmin2F",
  /* 1604 */  "vmin4F",
  /* 1605 */  "vmin2D",
  /* 1606 */  "vround2D_reg",
  /* 1607 */  "vmask_truecount8B",
  /* 1608 */  "vmask_truecount16B",
  /* 1609 */  "vmask_firsttrue_LT8B",
  /* 1610 */  "loadV",
  /* 1611 */  "storeV",
  /* 1612 */  "loadV2_vreg",
  /* 1613 */  "storeV2_vreg",
  /* 1614 */  "loadV4_vreg",
  /* 1615 */  "storeV4_vreg",
  /* 1616 */  "loadV8_vreg",
  /* 1617 */  "storeV8_vreg",
  /* 1618 */  "loadV16_vreg",
  /* 1619 */  "storeV16_vreg",
  /* 1620 */  "loadV_partial",
  /* 1621 */  "storeV_partial",
  /* 1622 */  "loadV_masked",
  /* 1623 */  "loadV_masked_partial",
  /* 1624 */  "storeV_masked",
  /* 1625 */  "storeV_masked_partial",
  /* 1626 */  "vmaskAll_immI",
  /* 1627 */  "vmaskAllI",
  /* 1628 */  "vmaskAll_immL",
  /* 1629 */  "vmaskAllL",
  /* 1630 */  "vmask_and",
  /* 1631 */  "vmask_or",
  /* 1632 */  "vmask_xor",
  /* 1633 */  "vmask_and_notI",
  /* 1634 */  "vmask_and_notL",
  /* 1635 */  "reinterpretResize",
  /* 1636 */  "vmask_reinterpret_diff_esize",
  /* 1637 */  "vabsB_masked",
  /* 1638 */  "vabsS_masked",
  /* 1639 */  "vabsI_masked",
  /* 1640 */  "vabsL_masked",
  /* 1641 */  "vabsF_masked",
  /* 1642 */  "vabsD_masked",
  /* 1643 */  "vaddB",
  /* 1644 */  "vaddS",
  /* 1645 */  "vaddI",
  /* 1646 */  "vaddL",
  /* 1647 */  "vaddF",
  /* 1648 */  "vaddD",
  /* 1649 */  "vaddB_masked",
  /* 1650 */  "vaddS_masked",
  /* 1651 */  "vaddI_masked",
  /* 1652 */  "vaddL_masked",
  /* 1653 */  "vaddF_masked",
  /* 1654 */  "vaddD_masked",
  /* 1655 */  "vaddImmB",
  /* 1656 */  "vaddImmB_0",
  /* 1657 */  "vaddImmS",
  /* 1658 */  "vaddImmS_0",
  /* 1659 */  "vaddImmI",
  /* 1660 */  "vaddImmI_0",
  /* 1661 */  "vaddImmL",
  /* 1662 */  "vaddImmL_0",
  /* 1663 */  "vandB",
  /* 1664 */  "vandB_0",
  /* 1665 */  "vandH",
  /* 1666 */  "vandH_0",
  /* 1667 */  "vandS",
  /* 1668 */  "vandS_0",
  /* 1669 */  "vandD",
  /* 1670 */  "vandD_0",
  /* 1671 */  "vorB",
  /* 1672 */  "vorB_0",
  /* 1673 */  "vorH",
  /* 1674 */  "vorH_0",
  /* 1675 */  "vorS",
  /* 1676 */  "vorS_0",
  /* 1677 */  "vorD",
  /* 1678 */  "vorD_0",
  /* 1679 */  "vxorB",
  /* 1680 */  "vxorB_0",
  /* 1681 */  "vxorH",
  /* 1682 */  "vxorH_0",
  /* 1683 */  "vxorS",
  /* 1684 */  "vxorS_0",
  /* 1685 */  "vxorD",
  /* 1686 */  "vxorD_0",
  /* 1687 */  "vand",
  /* 1688 */  "vor",
  /* 1689 */  "vxor",
  /* 1690 */  "vand_masked",
  /* 1691 */  "vor_masked",
  /* 1692 */  "vxor_masked",
  /* 1693 */  "vnotI",
  /* 1694 */  "vnotI_0",
  /* 1695 */  "vnotI_1",
  /* 1696 */  "vnotI_2",
  /* 1697 */  "vnotI_3",
  /* 1698 */  "vnotI_4",
  /* 1699 */  "vnotL",
  /* 1700 */  "vnotL_0",
  /* 1701 */  "vand_notI",
  /* 1702 */  "vand_notI_1",
  /* 1703 */  "vand_notI_0",
  /* 1704 */  "vand_notI_2",
  /* 1705 */  "vand_notI_3",
  /* 1706 */  "vand_notI_5",
  /* 1707 */  "vand_notI_4",
  /* 1708 */  "vand_notI_6",
  /* 1709 */  "vand_notI_7",
  /* 1710 */  "vand_notI_9",
  /* 1711 */  "vand_notI_8",
  /* 1712 */  "vand_notI_10",
  /* 1713 */  "vand_notL",
  /* 1714 */  "vand_notL_1",
  /* 1715 */  "vand_notL_0",
  /* 1716 */  "vand_notL_2",
  /* 1717 */  "vdivF",
  /* 1718 */  "vdivD",
  /* 1719 */  "vfdivF_masked",
  /* 1720 */  "vfdivD_masked",
  /* 1721 */  "vmin",
  /* 1722 */  "vmax",
  /* 1723 */  "vmin_masked",
  /* 1724 */  "vmax_masked",
  /* 1725 */  "vfmlaF",
  /* 1726 */  "vfmlaD",
  /* 1727 */  "vfmlaF_masked",
  /* 1728 */  "vfmlaD_masked",
  /* 1729 */  "vfmlsF",
  /* 1730 */  "vfmlsF_0",
  /* 1731 */  "vfmlsD",
  /* 1732 */  "vfmlsD_0",
  /* 1733 */  "vfnmlaF",
  /* 1734 */  "vfnmlaF_0",
  /* 1735 */  "vfnmlaD",
  /* 1736 */  "vfnmlaD_0",
  /* 1737 */  "vfnmlsF",
  /* 1738 */  "vfnmlsD",
  /* 1739 */  "vmlaB",
  /* 1740 */  "vmlaB_0",
  /* 1741 */  "vmlaS",
  /* 1742 */  "vmlaS_0",
  /* 1743 */  "vmlaI",
  /* 1744 */  "vmlaI_0",
  /* 1745 */  "vmlaL",
  /* 1746 */  "vmlaL_0",
  /* 1747 */  "vmlsB",
  /* 1748 */  "vmlsS",
  /* 1749 */  "vmlsI",
  /* 1750 */  "vmlsL",
  /* 1751 */  "vmulB",
  /* 1752 */  "vmulS",
  /* 1753 */  "vmulI",
  /* 1754 */  "vmulL",
  /* 1755 */  "vmulF",
  /* 1756 */  "vmulD",
  /* 1757 */  "vmulB_masked",
  /* 1758 */  "vmulS_masked",
  /* 1759 */  "vmulI_masked",
  /* 1760 */  "vmulL_masked",
  /* 1761 */  "vmulF_masked",
  /* 1762 */  "vmulD_masked",
  /* 1763 */  "vnegF_masked",
  /* 1764 */  "vnegD_masked",
  /* 1765 */  "vmaskcmp",
  /* 1766 */  "vmaskcmp_masked",
  /* 1767 */  "vblend",
  /* 1768 */  "vloadmaskB",
  /* 1769 */  "vloadmask_extend",
  /* 1770 */  "vstoremaskB",
  /* 1771 */  "vstoremask_narrow",
  /* 1772 */  "vloadmask_loadV",
  /* 1773 */  "vloadmask_loadV_partial",
  /* 1774 */  "storeV_vstoremask",
  /* 1775 */  "storeV_vstoremask_partial",
  /* 1776 */  "reduce_addI",
  /* 1777 */  "reduce_addL",
  /* 1778 */  "reduce_addF",
  /* 1779 */  "reduce_addD",
  /* 1780 */  "reduce_addI_partial",
  /* 1781 */  "reduce_addL_partial",
  /* 1782 */  "reduce_addF_partial",
  /* 1783 */  "reduce_addD_partial",
  /* 1784 */  "reduce_addI_masked",
  /* 1785 */  "reduce_addL_masked",
  /* 1786 */  "reduce_addF_masked",
  /* 1787 */  "reduce_addD_masked",
  /* 1788 */  "reduce_addI_masked_partial",
  /* 1789 */  "reduce_addL_masked_partial",
  /* 1790 */  "reduce_addF_masked_partial",
  /* 1791 */  "reduce_addD_masked_partial",
  /* 1792 */  "reduce_andI",
  /* 1793 */  "reduce_andL",
  /* 1794 */  "reduce_andI_partial",
  /* 1795 */  "reduce_andL_partial",
  /* 1796 */  "reduce_andI_masked",
  /* 1797 */  "reduce_andL_masked",
  /* 1798 */  "reduce_andI_masked_partial",
  /* 1799 */  "reduce_andL_masked_partial",
  /* 1800 */  "reduce_orI",
  /* 1801 */  "reduce_orL",
  /* 1802 */  "reduce_orI_partial",
  /* 1803 */  "reduce_orL_partial",
  /* 1804 */  "reduce_orI_masked",
  /* 1805 */  "reduce_orL_masked",
  /* 1806 */  "reduce_orI_masked_partial",
  /* 1807 */  "reduce_orL_masked_partial",
  /* 1808 */  "reduce_eorI",
  /* 1809 */  "reduce_eorL",
  /* 1810 */  "reduce_eorI_partial",
  /* 1811 */  "reduce_eorL_partial",
  /* 1812 */  "reduce_eorI_masked",
  /* 1813 */  "reduce_eorL_masked",
  /* 1814 */  "reduce_eorI_masked_partial",
  /* 1815 */  "reduce_eorL_masked_partial",
  /* 1816 */  "reduce_maxI",
  /* 1817 */  "reduce_maxL",
  /* 1818 */  "reduce_maxI_partial",
  /* 1819 */  "reduce_maxL_partial",
  /* 1820 */  "reduce_maxF",
  /* 1821 */  "reduce_maxF_partial",
  /* 1822 */  "reduce_maxD",
  /* 1823 */  "reduce_maxD_partial",
  /* 1824 */  "reduce_maxI_masked",
  /* 1825 */  "reduce_maxL_masked",
  /* 1826 */  "reduce_maxI_masked_partial",
  /* 1827 */  "reduce_maxL_masked_partial",
  /* 1828 */  "reduce_maxF_masked",
  /* 1829 */  "reduce_maxD_masked",
  /* 1830 */  "reduce_maxF_masked_partial",
  /* 1831 */  "reduce_maxD_masked_partial",
  /* 1832 */  "reduce_minI",
  /* 1833 */  "reduce_minL",
  /* 1834 */  "reduce_minI_partial",
  /* 1835 */  "reduce_minL_partial",
  /* 1836 */  "reduce_minF",
  /* 1837 */  "reduce_minF_partial",
  /* 1838 */  "reduce_minD",
  /* 1839 */  "reduce_minD_partial",
  /* 1840 */  "reduce_minI_masked",
  /* 1841 */  "reduce_minL_masked",
  /* 1842 */  "reduce_minI_masked_partial",
  /* 1843 */  "reduce_minL_masked_partial",
  /* 1844 */  "reduce_minF_masked",
  /* 1845 */  "reduce_minD_masked",
  /* 1846 */  "reduce_minF_masked_partial",
  /* 1847 */  "reduce_minD_masked_partial",
  /* 1848 */  "vroundD",
  /* 1849 */  "replicateB",
  /* 1850 */  "replicateS",
  /* 1851 */  "replicateI",
  /* 1852 */  "replicateL",
  /* 1853 */  "replicateB_imm8",
  /* 1854 */  "replicateS_imm8",
  /* 1855 */  "replicateI_imm8",
  /* 1856 */  "replicateL_imm8",
  /* 1857 */  "replicateF",
  /* 1858 */  "replicateD",
  /* 1859 */  "vasrB",
  /* 1860 */  "vasrS",
  /* 1861 */  "vasrI",
  /* 1862 */  "vasrL",
  /* 1863 */  "vlslB",
  /* 1864 */  "vlslS",
  /* 1865 */  "vlslI",
  /* 1866 */  "vlslL",
  /* 1867 */  "vlsrB",
  /* 1868 */  "vlsrS",
  /* 1869 */  "vlsrI",
  /* 1870 */  "vlsrL",
  /* 1871 */  "vasrB_imm",
  /* 1872 */  "vasrS_imm",
  /* 1873 */  "vasrI_imm",
  /* 1874 */  "vasrL_imm",
  /* 1875 */  "vlsrB_imm",
  /* 1876 */  "vlsrS_imm",
  /* 1877 */  "vlsrI_imm",
  /* 1878 */  "vlsrL_imm",
  /* 1879 */  "vlslB_imm",
  /* 1880 */  "vlslS_imm",
  /* 1881 */  "vlslI_imm",
  /* 1882 */  "vlslL_imm",
  /* 1883 */  "vasrB_masked",
  /* 1884 */  "vasrS_masked",
  /* 1885 */  "vasrI_masked",
  /* 1886 */  "vasrL_masked",
  /* 1887 */  "vlslB_masked",
  /* 1888 */  "vlslS_masked",
  /* 1889 */  "vlslI_masked",
  /* 1890 */  "vlslL_masked",
  /* 1891 */  "vlsrB_masked",
  /* 1892 */  "vlsrS_masked",
  /* 1893 */  "vlsrI_masked",
  /* 1894 */  "vlsrL_masked",
  /* 1895 */  "vasrB_imm_masked",
  /* 1896 */  "vasrS_imm_masked",
  /* 1897 */  "vasrI_imm_masked",
  /* 1898 */  "vasrL_imm_masked",
  /* 1899 */  "vlsrB_imm_masked",
  /* 1900 */  "vlsrS_imm_masked",
  /* 1901 */  "vlsrI_imm_masked",
  /* 1902 */  "vlsrL_imm_masked",
  /* 1903 */  "vlslB_imm_masked",
  /* 1904 */  "vlslS_imm_masked",
  /* 1905 */  "vlslI_imm_masked",
  /* 1906 */  "vlslL_imm_masked",
  /* 1907 */  "vsqrtF_masked",
  /* 1908 */  "vsqrtD_masked",
  /* 1909 */  "vsubB",
  /* 1910 */  "vsubS",
  /* 1911 */  "vsubI",
  /* 1912 */  "vsubL",
  /* 1913 */  "vsubF",
  /* 1914 */  "vsubD",
  /* 1915 */  "vsubB_masked",
  /* 1916 */  "vsubS_masked",
  /* 1917 */  "vsubI_masked",
  /* 1918 */  "vsubL_masked",
  /* 1919 */  "vsubF_masked",
  /* 1920 */  "vsubD_masked",
  /* 1921 */  "vcvtStoB",
  /* 1922 */  "vcvtItoB",
  /* 1923 */  "vcvtItoS",
  /* 1924 */  "vcvtLtoX_narrow",
  /* 1925 */  "vcvtLtoF",
  /* 1926 */  "vcvtFtoX_narrow",
  /* 1927 */  "vcvtDtoX_narrow",
  /* 1928 */  "vcvtDtoF",
  /* 1929 */  "extractB",
  /* 1930 */  "extractS",
  /* 1931 */  "extractI",
  /* 1932 */  "extractL",
  /* 1933 */  "extractF",
  /* 1934 */  "extractD",
  /* 1935 */  "vtest_alltrue",
  /* 1936 */  "vtest_anytrue",
  /* 1937 */  "vtest_alltrue_partial",
  /* 1938 */  "vtest_anytrue_partial",
  /* 1939 */  "insertI_small",
  /* 1940 */  "insertF_small",
  /* 1941 */  "insertI",
  /* 1942 */  "insertL",
  /* 1943 */  "insertD",
  /* 1944 */  "insertF",
  /* 1945 */  "rearrange",
  /* 1946 */  "gatherI",
  /* 1947 */  "gatherL",
  /* 1948 */  "gatherI_partial",
  /* 1949 */  "gatherL_partial",
  /* 1950 */  "gatherI_masked",
  /* 1951 */  "gatherL_masked",
  /* 1952 */  "gatherI_masked_partial",
  /* 1953 */  "gatherL_masked_partial",
  /* 1954 */  "scatterI",
  /* 1955 */  "scatterL",
  /* 1956 */  "scatterI_partial",
  /* 1957 */  "scatterL_partial",
  /* 1958 */  "scatterI_masked",
  /* 1959 */  "scatterL_masked",
  /* 1960 */  "scatterI_masked_partial",
  /* 1961 */  "scatterL_masked_partial",
  /* 1962 */  "stringL_indexof_char_sve",
  /* 1963 */  "stringU_indexof_char_sve",
  /* 1964 */  "string_compareLL_sve",
  /* 1965 */  "string_compareLU_sve",
  /* 1966 */  "string_compareUL_sve",
  /* 1967 */  "string_compareUU_sve",
  /* 1968 */  "vmask_firsttrue",
  /* 1969 */  "vmask_lasttrue",
  /* 1970 */  "vmask_truecount_partial",
  /* 1971 */  "vmask_firsttrue_partial",
  /* 1972 */  "vmask_lasttrue_partial",
  /* 1973 */  "vmask_tolong",
  /* 1974 */  "vmask_gen",
  /* 1975 */  "compareAndSwapP_shenandoah",
  /* 1976 */  "compareAndSwapN_shenandoah",
  /* 1977 */  "compareAndSwapPAcq_shenandoah",
  /* 1978 */  "compareAndSwapNAcq_shenandoah",
  /* 1979 */  "compareAndExchangeN_shenandoah",
  /* 1980 */  "compareAndExchangeP_shenandoah",
  /* 1981 */  "compareAndExchangeNAcq_shenandoah",
  /* 1982 */  "compareAndExchangePAcq_shenandoah",
  /* 1983 */  "weakCompareAndSwapN_shenandoah",
  /* 1984 */  "weakCompareAndSwapP_shenandoah",
  /* 1985 */  "weakCompareAndSwapNAcq_shenandoah",
  /* 1986 */  "weakCompareAndSwapPAcq_shenandoah",
  /* 1987 */  "zLoadP",
  /* 1988 */  "zLoadPVolatile",
  /* 1989 */  "zCompareAndSwapP",
  /* 1990 */  "zCompareAndSwapP_0",
  /* 1991 */  "zCompareAndSwapPAcq",
  /* 1992 */  "zCompareAndSwapPAcq_0",
  /* 1993 */  "zCompareAndExchangeP",
  /* 1994 */  "zCompareAndExchangePAcq",
  /* 1995 */  "zGetAndSetP",
  /* 1996 */  "zGetAndSetPAcq",
  // last instruction
  "invalid rule name" // no trailing comma
};

const        bool  swallowed[] = {
  /*    0 */  false,
  /*    1 */  false,
  /*    2 */  false,
  /*    3 */  false,
  /*    4 */  false,
  /*    5 */  false,
  /*    6 */  false,
  /*    7 */  false,
  /*    8 */  true,
  /*    9 */  true,
  /*   10 */  true,
  /*   11 */  true,
  /*   12 */  true,
  /*   13 */  true,
  /*   14 */  true,
  /*   15 */  true,
  /*   16 */  true,
  /*   17 */  true,
  /*   18 */  true,
  /*   19 */  true,
  /*   20 */  true,
  /*   21 */  true,
  /*   22 */  true,
  /*   23 */  true,
  /*   24 */  true,
  /*   25 */  true,
  /*   26 */  true,
  /*   27 */  true,
  /*   28 */  true,
  /*   29 */  true,
  /*   30 */  true,
  /*   31 */  true,
  /*   32 */  true,
  /*   33 */  true,
  /*   34 */  true,
  /*   35 */  true,
  /*   36 */  true,
  /*   37 */  true,
  /*   38 */  true,
  /*   39 */  true,
  /*   40 */  true,
  /*   41 */  true,
  /*   42 */  true,
  /*   43 */  true,
  /*   44 */  true,
  /*   45 */  true,
  /*   46 */  true,
  /*   47 */  true,
  /*   48 */  true,
  /*   49 */  true,
  /*   50 */  true,
  /*   51 */  true,
  /*   52 */  true,
  /*   53 */  true,
  /*   54 */  true,
  /*   55 */  true,
  /*   56 */  true,
  /*   57 */  true,
  /*   58 */  true,
  /*   59 */  true,
  /*   60 */  true,
  /*   61 */  true,
  /*   62 */  true,
  /*   63 */  true,
  /*   64 */  true,
  /*   65 */  true,
  /*   66 */  true,
  /*   67 */  true,
  /*   68 */  true,
  /*   69 */  true,
  /*   70 */  true,
  /*   71 */  true,
  /*   72 */  true,
  /*   73 */  true,
  /*   74 */  true,
  /*   75 */  true,
  /*   76 */  true,
  /*   77 */  true,
  /*   78 */  true,
  /*   79 */  true,
  /*   80 */  true,
  /*   81 */  true,
  /*   82 */  true,
  /*   83 */  true,
  /*   84 */  false,
  /*   85 */  false,
  /*   86 */  false,
  /*   87 */  false,
  /*   88 */  false,
  /*   89 */  false,
  /*   90 */  false,
  /*   91 */  false,
  /*   92 */  false,
  /*   93 */  false,
  /*   94 */  false,
  /*   95 */  false,
  /*   96 */  false,
  /*   97 */  false,
  /*   98 */  false,
  /*   99 */  false,
  /*  100 */  false,
  /*  101 */  false,
  /*  102 */  false,
  /*  103 */  false,
  /*  104 */  false,
  /*  105 */  false,
  /*  106 */  false,
  /*  107 */  false,
  /*  108 */  false,
  /*  109 */  false,
  /*  110 */  false,
  /*  111 */  false,
  /*  112 */  false,
  /*  113 */  false,
  /*  114 */  false,
  /*  115 */  false,
  /*  116 */  false,
  /*  117 */  false,
  /*  118 */  false,
  /*  119 */  false,
  /*  120 */  false,
  /*  121 */  false,
  /*  122 */  false,
  /*  123 */  false,
  /*  124 */  false,
  /*  125 */  false,
  /*  126 */  false,
  /*  127 */  false,
  /*  128 */  false,
  /*  129 */  false,
  /*  130 */  false,
  /*  131 */  false,
  /*  132 */  false,
  /*  133 */  false,
  /*  134 */  false,
  /*  135 */  false,
  /*  136 */  false,
  /*  137 */  false,
  /*  138 */  false,
  /*  139 */  false,
  /*  140 */  false,
  /*  141 */  false,
  /*  142 */  false,
  /*  143 */  false,
  /*  144 */  false,
  /*  145 */  false,
  /*  146 */  false,
  /*  147 */  false,
  /*  148 */  false,
  /*  149 */  false,
  /*  150 */  false,
  /*  151 */  false,
  /*  152 */  false,
  /*  153 */  false,
  /*  154 */  false,
  /*  155 */  false,
  /*  156 */  false,
  /*  157 */  false,
  /*  158 */  false,
  /*  159 */  false,
  /*  160 */  false,
  /*  161 */  false,
  /*  162 */  false,
  /*  163 */  false,
  /*  164 */  false,
  /*  165 */  false,
  /*  166 */  false,
  /*  167 */  false,
  /*  168 */  false,
  /*  169 */  false,
  /*  170 */  false,
  /*  171 */  false,
  /*  172 */  false,
  /*  173 */  false,
  /*  174 */  false,
  /*  175 */  false,
  /*  176 */  false,
  /*  177 */  false,
  /*  178 */  false,
  /*  179 */  false,
  /*  180 */  false,
  /*  181 */  false,
  /*  182 */  false,
  /*  183 */  false,
  /*  184 */  false,
  /*  185 */  false,
  /*  186 */  false,
  /*  187 */  false,
  /*  188 */  true,
  /*  189 */  true,
  /*  190 */  true,
  /*  191 */  true,
  /*  192 */  true,
  /*  193 */  false,
  /*  194 */  true,
  /*  195 */  true,
  /*  196 */  false,
  /*  197 */  false,
  // last operand
  /*  198 */  false,
  /*  199 */  false,
  /*  200 */  false,
  /*  201 */  false,
  /*  202 */  false,
  /*  203 */  false,
  /*  204 */  false,
  /*  205 */  false,
  /*  206 */  false,
  /*  207 */  false,
  /*  208 */  false,
  // last operand class
  /*  209 */  false,
  /*  210 */  false,
  /*  211 */  false,
  /*  212 */  false,
  /*  213 */  false,
  /*  214 */  false,
  /*  215 */  false,
  /*  216 */  false,
  /*  217 */  false,
  /*  218 */  false,
  /*  219 */  false,
  /*  220 */  false,
  /*  221 */  false,
  /*  222 */  false,
  /*  223 */  false,
  /*  224 */  false,
  /*  225 */  false,
  /*  226 */  false,
  /*  227 */  false,
  /*  228 */  false,
  /*  229 */  false,
  /*  230 */  false,
  /*  231 */  false,
  /*  232 */  false,
  /*  233 */  false,
  /*  234 */  false,
  /*  235 */  false,
  /*  236 */  false,
  /*  237 */  false,
  /*  238 */  false,
  /*  239 */  false,
  /*  240 */  false,
  /*  241 */  false,
  /*  242 */  false,
  /*  243 */  false,
  /*  244 */  false,
  /*  245 */  false,
  /*  246 */  false,
  /*  247 */  false,
  /*  248 */  false,
  /*  249 */  false,
  /*  250 */  false,
  /*  251 */  false,
  /*  252 */  false,
  /*  253 */  false,
  /*  254 */  false,
  /*  255 */  false,
  /*  256 */  false,
  /*  257 */  false,
  /*  258 */  false,
  /*  259 */  false,
  /*  260 */  false,
  /*  261 */  false,
  /*  262 */  false,
  /*  263 */  false,
  /*  264 */  false,
  /*  265 */  false,
  /*  266 */  false,
  /*  267 */  false,
  /*  268 */  false,
  /*  269 */  false,
  /*  270 */  false,
  /*  271 */  false,
  /*  272 */  false,
  /*  273 */  false,
  /*  274 */  false,
  /*  275 */  false,
  /*  276 */  false,
  /*  277 */  false,
  /*  278 */  false,
  /*  279 */  false,
  /*  280 */  false,
  /*  281 */  false,
  /*  282 */  false,
  /*  283 */  false,
  /*  284 */  false,
  /*  285 */  false,
  /*  286 */  false,
  /*  287 */  false,
  /*  288 */  false,
  /*  289 */  false,
  /*  290 */  false,
  /*  291 */  false,
  /*  292 */  false,
  /*  293 */  false,
  /*  294 */  false,
  /*  295 */  false,
  /*  296 */  false,
  /*  297 */  false,
  /*  298 */  false,
  /*  299 */  false,
  /*  300 */  false,
  /*  301 */  false,
  /*  302 */  false,
  /*  303 */  false,
  /*  304 */  false,
  /*  305 */  false,
  /*  306 */  false,
  /*  307 */  false,
  /*  308 */  false,
  /*  309 */  false,
  /*  310 */  false,
  /*  311 */  false,
  /*  312 */  false,
  /*  313 */  false,
  /*  314 */  false,
  /*  315 */  false,
  /*  316 */  false,
  /*  317 */  false,
  /*  318 */  false,
  /*  319 */  false,
  /*  320 */  false,
  /*  321 */  false,
  /*  322 */  false,
  /*  323 */  false,
  /*  324 */  false,
  /*  325 */  false,
  /*  326 */  false,
  /*  327 */  false,
  /*  328 */  false,
  /*  329 */  false,
  /*  330 */  false,
  /*  331 */  false,
  /*  332 */  false,
  /*  333 */  false,
  /*  334 */  false,
  /*  335 */  false,
  /*  336 */  false,
  /*  337 */  false,
  /*  338 */  false,
  /*  339 */  false,
  /*  340 */  false,
  /*  341 */  false,
  /*  342 */  false,
  /*  343 */  false,
  /*  344 */  false,
  /*  345 */  false,
  /*  346 */  false,
  /*  347 */  false,
  /*  348 */  false,
  /*  349 */  false,
  /*  350 */  false,
  /*  351 */  false,
  /*  352 */  false,
  /*  353 */  false,
  /*  354 */  false,
  /*  355 */  false,
  /*  356 */  false,
  /*  357 */  false,
  /*  358 */  false,
  /*  359 */  false,
  /*  360 */  false,
  /*  361 */  false,
  /*  362 */  false,
  /*  363 */  false,
  /*  364 */  false,
  /*  365 */  false,
  /*  366 */  false,
  /*  367 */  false,
  /*  368 */  false,
  /*  369 */  false,
  /*  370 */  false,
  /*  371 */  false,
  /*  372 */  false,
  /*  373 */  false,
  /*  374 */  false,
  /*  375 */  false,
  /*  376 */  false,
  /*  377 */  false,
  /*  378 */  false,
  /*  379 */  false,
  /*  380 */  false,
  /*  381 */  false,
  /*  382 */  false,
  /*  383 */  false,
  /*  384 */  false,
  /*  385 */  false,
  /*  386 */  false,
  /*  387 */  false,
  /*  388 */  false,
  /*  389 */  false,
  /*  390 */  false,
  /*  391 */  false,
  /*  392 */  false,
  /*  393 */  false,
  /*  394 */  false,
  /*  395 */  false,
  /*  396 */  false,
  /*  397 */  false,
  /*  398 */  false,
  /*  399 */  false,
  /*  400 */  false,
  /*  401 */  false,
  /*  402 */  false,
  /*  403 */  false,
  /*  404 */  false,
  /*  405 */  false,
  /*  406 */  false,
  /*  407 */  false,
  /*  408 */  false,
  /*  409 */  false,
  /*  410 */  false,
  /*  411 */  false,
  /*  412 */  false,
  /*  413 */  false,
  /*  414 */  false,
  /*  415 */  false,
  /*  416 */  false,
  /*  417 */  false,
  /*  418 */  false,
  /*  419 */  false,
  /*  420 */  false,
  /*  421 */  false,
  /*  422 */  false,
  /*  423 */  false,
  /*  424 */  false,
  /*  425 */  false,
  /*  426 */  false,
  /*  427 */  false,
  /*  428 */  false,
  /*  429 */  false,
  /*  430 */  false,
  /*  431 */  false,
  /*  432 */  false,
  /*  433 */  false,
  /*  434 */  false,
  /*  435 */  false,
  /*  436 */  false,
  /*  437 */  false,
  /*  438 */  false,
  /*  439 */  false,
  /*  440 */  false,
  /*  441 */  false,
  /*  442 */  false,
  /*  443 */  false,
  /*  444 */  false,
  /*  445 */  false,
  /*  446 */  false,
  /*  447 */  false,
  /*  448 */  false,
  /*  449 */  false,
  /*  450 */  false,
  /*  451 */  false,
  /*  452 */  false,
  /*  453 */  false,
  /*  454 */  false,
  /*  455 */  false,
  /*  456 */  false,
  /*  457 */  false,
  /*  458 */  false,
  /*  459 */  false,
  /*  460 */  false,
  /*  461 */  false,
  /*  462 */  false,
  /*  463 */  false,
  /*  464 */  false,
  /*  465 */  false,
  /*  466 */  false,
  // last internally defined operand
  /*  467 */  false,
  /*  468 */  false,
  /*  469 */  false,
  /*  470 */  false,
  /*  471 */  false,
  /*  472 */  false,
  /*  473 */  false,
  /*  474 */  false,
  /*  475 */  false,
  /*  476 */  false,
  /*  477 */  false,
  /*  478 */  false,
  /*  479 */  false,
  /*  480 */  false,
  /*  481 */  false,
  /*  482 */  false,
  /*  483 */  false,
  /*  484 */  false,
  /*  485 */  false,
  /*  486 */  false,
  /*  487 */  false,
  /*  488 */  false,
  /*  489 */  false,
  /*  490 */  false,
  /*  491 */  false,
  /*  492 */  false,
  /*  493 */  false,
  /*  494 */  false,
  /*  495 */  false,
  /*  496 */  false,
  /*  497 */  false,
  /*  498 */  false,
  /*  499 */  false,
  /*  500 */  false,
  /*  501 */  false,
  /*  502 */  false,
  /*  503 */  false,
  /*  504 */  false,
  /*  505 */  false,
  /*  506 */  false,
  /*  507 */  false,
  /*  508 */  false,
  /*  509 */  false,
  /*  510 */  false,
  /*  511 */  false,
  /*  512 */  false,
  /*  513 */  false,
  /*  514 */  false,
  /*  515 */  false,
  /*  516 */  false,
  /*  517 */  false,
  /*  518 */  false,
  /*  519 */  false,
  /*  520 */  false,
  /*  521 */  false,
  /*  522 */  false,
  /*  523 */  false,
  /*  524 */  false,
  /*  525 */  false,
  /*  526 */  false,
  /*  527 */  false,
  /*  528 */  false,
  /*  529 */  false,
  /*  530 */  false,
  /*  531 */  false,
  /*  532 */  false,
  /*  533 */  false,
  /*  534 */  false,
  /*  535 */  false,
  /*  536 */  false,
  /*  537 */  false,
  /*  538 */  false,
  /*  539 */  false,
  /*  540 */  false,
  /*  541 */  false,
  /*  542 */  false,
  /*  543 */  false,
  /*  544 */  false,
  /*  545 */  false,
  /*  546 */  false,
  /*  547 */  false,
  /*  548 */  false,
  /*  549 */  false,
  /*  550 */  false,
  /*  551 */  false,
  /*  552 */  false,
  /*  553 */  false,
  /*  554 */  false,
  /*  555 */  false,
  /*  556 */  false,
  /*  557 */  false,
  /*  558 */  false,
  /*  559 */  false,
  /*  560 */  false,
  /*  561 */  false,
  /*  562 */  false,
  /*  563 */  false,
  /*  564 */  false,
  /*  565 */  false,
  /*  566 */  false,
  /*  567 */  false,
  /*  568 */  false,
  /*  569 */  false,
  /*  570 */  false,
  /*  571 */  false,
  /*  572 */  false,
  /*  573 */  false,
  /*  574 */  false,
  /*  575 */  false,
  /*  576 */  false,
  /*  577 */  false,
  /*  578 */  false,
  /*  579 */  false,
  /*  580 */  false,
  /*  581 */  false,
  /*  582 */  false,
  /*  583 */  false,
  /*  584 */  false,
  /*  585 */  false,
  /*  586 */  false,
  /*  587 */  false,
  /*  588 */  false,
  /*  589 */  false,
  /*  590 */  false,
  /*  591 */  false,
  /*  592 */  false,
  /*  593 */  false,
  /*  594 */  false,
  /*  595 */  false,
  /*  596 */  false,
  /*  597 */  false,
  /*  598 */  false,
  /*  599 */  false,
  /*  600 */  false,
  /*  601 */  false,
  /*  602 */  false,
  /*  603 */  false,
  /*  604 */  false,
  /*  605 */  false,
  /*  606 */  false,
  /*  607 */  false,
  /*  608 */  false,
  /*  609 */  false,
  /*  610 */  false,
  /*  611 */  false,
  /*  612 */  false,
  /*  613 */  false,
  /*  614 */  false,
  /*  615 */  false,
  /*  616 */  false,
  /*  617 */  false,
  /*  618 */  false,
  /*  619 */  false,
  /*  620 */  false,
  /*  621 */  false,
  /*  622 */  false,
  /*  623 */  false,
  /*  624 */  false,
  /*  625 */  false,
  /*  626 */  false,
  /*  627 */  false,
  /*  628 */  false,
  /*  629 */  false,
  /*  630 */  false,
  /*  631 */  false,
  /*  632 */  false,
  /*  633 */  false,
  /*  634 */  false,
  /*  635 */  false,
  /*  636 */  false,
  /*  637 */  false,
  /*  638 */  false,
  /*  639 */  false,
  /*  640 */  false,
  /*  641 */  false,
  /*  642 */  false,
  /*  643 */  false,
  /*  644 */  false,
  /*  645 */  false,
  /*  646 */  false,
  /*  647 */  false,
  /*  648 */  false,
  /*  649 */  false,
  /*  650 */  false,
  /*  651 */  false,
  /*  652 */  false,
  /*  653 */  false,
  /*  654 */  false,
  /*  655 */  false,
  /*  656 */  false,
  /*  657 */  false,
  /*  658 */  false,
  /*  659 */  false,
  /*  660 */  false,
  /*  661 */  false,
  /*  662 */  false,
  /*  663 */  false,
  /*  664 */  false,
  /*  665 */  false,
  /*  666 */  false,
  /*  667 */  false,
  /*  668 */  false,
  /*  669 */  false,
  /*  670 */  false,
  /*  671 */  false,
  /*  672 */  false,
  /*  673 */  false,
  /*  674 */  false,
  /*  675 */  false,
  /*  676 */  false,
  /*  677 */  false,
  /*  678 */  false,
  /*  679 */  false,
  /*  680 */  false,
  /*  681 */  false,
  /*  682 */  false,
  /*  683 */  false,
  /*  684 */  false,
  /*  685 */  false,
  /*  686 */  false,
  /*  687 */  false,
  /*  688 */  false,
  /*  689 */  false,
  /*  690 */  false,
  /*  691 */  false,
  /*  692 */  false,
  /*  693 */  false,
  /*  694 */  false,
  /*  695 */  false,
  /*  696 */  false,
  /*  697 */  false,
  /*  698 */  false,
  /*  699 */  false,
  /*  700 */  false,
  /*  701 */  false,
  /*  702 */  false,
  /*  703 */  false,
  /*  704 */  false,
  /*  705 */  false,
  /*  706 */  false,
  /*  707 */  false,
  /*  708 */  false,
  /*  709 */  false,
  /*  710 */  false,
  /*  711 */  false,
  /*  712 */  false,
  /*  713 */  false,
  /*  714 */  false,
  /*  715 */  false,
  /*  716 */  false,
  /*  717 */  false,
  /*  718 */  false,
  /*  719 */  false,
  /*  720 */  false,
  /*  721 */  false,
  /*  722 */  false,
  /*  723 */  false,
  /*  724 */  false,
  /*  725 */  false,
  /*  726 */  false,
  /*  727 */  false,
  /*  728 */  false,
  /*  729 */  false,
  /*  730 */  false,
  /*  731 */  false,
  /*  732 */  false,
  /*  733 */  false,
  /*  734 */  false,
  /*  735 */  false,
  /*  736 */  false,
  /*  737 */  false,
  /*  738 */  false,
  /*  739 */  false,
  /*  740 */  false,
  /*  741 */  false,
  /*  742 */  false,
  /*  743 */  false,
  /*  744 */  false,
  /*  745 */  false,
  /*  746 */  false,
  /*  747 */  false,
  /*  748 */  false,
  /*  749 */  false,
  /*  750 */  false,
  /*  751 */  false,
  /*  752 */  false,
  /*  753 */  false,
  /*  754 */  false,
  /*  755 */  false,
  /*  756 */  false,
  /*  757 */  false,
  /*  758 */  false,
  /*  759 */  false,
  /*  760 */  false,
  /*  761 */  false,
  /*  762 */  false,
  /*  763 */  false,
  /*  764 */  false,
  /*  765 */  false,
  /*  766 */  false,
  /*  767 */  false,
  /*  768 */  false,
  /*  769 */  false,
  /*  770 */  false,
  /*  771 */  false,
  /*  772 */  false,
  /*  773 */  false,
  /*  774 */  false,
  /*  775 */  false,
  /*  776 */  false,
  /*  777 */  false,
  /*  778 */  false,
  /*  779 */  false,
  /*  780 */  false,
  /*  781 */  false,
  /*  782 */  false,
  /*  783 */  false,
  /*  784 */  false,
  /*  785 */  false,
  /*  786 */  false,
  /*  787 */  false,
  /*  788 */  false,
  /*  789 */  false,
  /*  790 */  false,
  /*  791 */  false,
  /*  792 */  false,
  /*  793 */  false,
  /*  794 */  false,
  /*  795 */  false,
  /*  796 */  false,
  /*  797 */  false,
  /*  798 */  false,
  /*  799 */  false,
  /*  800 */  false,
  /*  801 */  false,
  /*  802 */  false,
  /*  803 */  false,
  /*  804 */  false,
  /*  805 */  false,
  /*  806 */  false,
  /*  807 */  false,
  /*  808 */  false,
  /*  809 */  false,
  /*  810 */  false,
  /*  811 */  false,
  /*  812 */  false,
  /*  813 */  false,
  /*  814 */  false,
  /*  815 */  false,
  /*  816 */  false,
  /*  817 */  false,
  /*  818 */  false,
  /*  819 */  false,
  /*  820 */  false,
  /*  821 */  false,
  /*  822 */  false,
  /*  823 */  false,
  /*  824 */  false,
  /*  825 */  false,
  /*  826 */  false,
  /*  827 */  false,
  /*  828 */  false,
  /*  829 */  false,
  /*  830 */  false,
  /*  831 */  false,
  /*  832 */  false,
  /*  833 */  false,
  /*  834 */  false,
  /*  835 */  false,
  /*  836 */  false,
  /*  837 */  false,
  /*  838 */  false,
  /*  839 */  false,
  /*  840 */  false,
  /*  841 */  false,
  /*  842 */  false,
  /*  843 */  false,
  /*  844 */  false,
  /*  845 */  false,
  /*  846 */  false,
  /*  847 */  false,
  /*  848 */  false,
  /*  849 */  false,
  /*  850 */  false,
  /*  851 */  false,
  /*  852 */  false,
  /*  853 */  false,
  /*  854 */  false,
  /*  855 */  false,
  /*  856 */  false,
  /*  857 */  false,
  /*  858 */  false,
  /*  859 */  false,
  /*  860 */  false,
  /*  861 */  false,
  /*  862 */  false,
  /*  863 */  false,
  /*  864 */  false,
  /*  865 */  false,
  /*  866 */  false,
  /*  867 */  false,
  /*  868 */  false,
  /*  869 */  false,
  /*  870 */  false,
  /*  871 */  false,
  /*  872 */  false,
  /*  873 */  false,
  /*  874 */  false,
  /*  875 */  false,
  /*  876 */  false,
  /*  877 */  false,
  /*  878 */  false,
  /*  879 */  false,
  /*  880 */  false,
  /*  881 */  false,
  /*  882 */  false,
  /*  883 */  false,
  /*  884 */  false,
  /*  885 */  false,
  /*  886 */  false,
  /*  887 */  false,
  /*  888 */  false,
  /*  889 */  false,
  /*  890 */  false,
  /*  891 */  false,
  /*  892 */  false,
  /*  893 */  false,
  /*  894 */  false,
  /*  895 */  false,
  /*  896 */  false,
  /*  897 */  false,
  /*  898 */  false,
  /*  899 */  false,
  /*  900 */  false,
  /*  901 */  false,
  /*  902 */  false,
  /*  903 */  false,
  /*  904 */  false,
  /*  905 */  false,
  /*  906 */  false,
  /*  907 */  false,
  /*  908 */  false,
  /*  909 */  false,
  /*  910 */  false,
  /*  911 */  false,
  /*  912 */  false,
  /*  913 */  false,
  /*  914 */  false,
  /*  915 */  false,
  /*  916 */  false,
  /*  917 */  false,
  /*  918 */  false,
  /*  919 */  false,
  /*  920 */  false,
  /*  921 */  false,
  /*  922 */  false,
  /*  923 */  false,
  /*  924 */  false,
  /*  925 */  false,
  /*  926 */  false,
  /*  927 */  false,
  /*  928 */  false,
  /*  929 */  false,
  /*  930 */  false,
  /*  931 */  false,
  /*  932 */  false,
  /*  933 */  false,
  /*  934 */  false,
  /*  935 */  false,
  /*  936 */  false,
  /*  937 */  false,
  /*  938 */  false,
  /*  939 */  false,
  /*  940 */  false,
  /*  941 */  false,
  /*  942 */  false,
  /*  943 */  false,
  /*  944 */  false,
  /*  945 */  false,
  /*  946 */  false,
  /*  947 */  false,
  /*  948 */  false,
  /*  949 */  false,
  /*  950 */  false,
  /*  951 */  false,
  /*  952 */  false,
  /*  953 */  false,
  /*  954 */  false,
  /*  955 */  false,
  /*  956 */  false,
  /*  957 */  false,
  /*  958 */  false,
  /*  959 */  false,
  /*  960 */  false,
  /*  961 */  false,
  /*  962 */  false,
  /*  963 */  false,
  /*  964 */  false,
  /*  965 */  false,
  /*  966 */  false,
  /*  967 */  false,
  /*  968 */  false,
  /*  969 */  false,
  /*  970 */  false,
  /*  971 */  false,
  /*  972 */  false,
  /*  973 */  false,
  /*  974 */  false,
  /*  975 */  false,
  /*  976 */  false,
  /*  977 */  false,
  /*  978 */  false,
  /*  979 */  false,
  /*  980 */  false,
  /*  981 */  false,
  /*  982 */  false,
  /*  983 */  false,
  /*  984 */  false,
  /*  985 */  false,
  /*  986 */  false,
  /*  987 */  false,
  /*  988 */  false,
  /*  989 */  false,
  /*  990 */  false,
  /*  991 */  false,
  /*  992 */  false,
  /*  993 */  false,
  /*  994 */  false,
  /*  995 */  false,
  /*  996 */  false,
  /*  997 */  false,
  /*  998 */  false,
  /*  999 */  false,
  /* 1000 */  false,
  /* 1001 */  false,
  /* 1002 */  false,
  /* 1003 */  false,
  /* 1004 */  false,
  /* 1005 */  false,
  /* 1006 */  false,
  /* 1007 */  false,
  /* 1008 */  false,
  /* 1009 */  false,
  /* 1010 */  false,
  /* 1011 */  false,
  /* 1012 */  false,
  /* 1013 */  false,
  /* 1014 */  false,
  /* 1015 */  false,
  /* 1016 */  false,
  /* 1017 */  false,
  /* 1018 */  false,
  /* 1019 */  false,
  /* 1020 */  false,
  /* 1021 */  false,
  /* 1022 */  false,
  /* 1023 */  false,
  /* 1024 */  false,
  /* 1025 */  false,
  /* 1026 */  false,
  /* 1027 */  false,
  /* 1028 */  false,
  /* 1029 */  false,
  /* 1030 */  false,
  /* 1031 */  false,
  /* 1032 */  false,
  /* 1033 */  false,
  /* 1034 */  false,
  /* 1035 */  false,
  /* 1036 */  false,
  /* 1037 */  false,
  /* 1038 */  false,
  /* 1039 */  false,
  /* 1040 */  false,
  /* 1041 */  false,
  /* 1042 */  false,
  /* 1043 */  false,
  /* 1044 */  false,
  /* 1045 */  false,
  /* 1046 */  false,
  /* 1047 */  false,
  /* 1048 */  false,
  /* 1049 */  false,
  /* 1050 */  false,
  /* 1051 */  false,
  /* 1052 */  false,
  /* 1053 */  false,
  /* 1054 */  false,
  /* 1055 */  false,
  /* 1056 */  false,
  /* 1057 */  false,
  /* 1058 */  false,
  /* 1059 */  false,
  /* 1060 */  false,
  /* 1061 */  false,
  /* 1062 */  false,
  /* 1063 */  false,
  /* 1064 */  false,
  /* 1065 */  false,
  /* 1066 */  false,
  /* 1067 */  false,
  /* 1068 */  false,
  /* 1069 */  false,
  /* 1070 */  false,
  /* 1071 */  false,
  /* 1072 */  false,
  /* 1073 */  false,
  /* 1074 */  false,
  /* 1075 */  false,
  /* 1076 */  false,
  /* 1077 */  false,
  /* 1078 */  false,
  /* 1079 */  false,
  /* 1080 */  false,
  /* 1081 */  false,
  /* 1082 */  false,
  /* 1083 */  false,
  /* 1084 */  false,
  /* 1085 */  false,
  /* 1086 */  false,
  /* 1087 */  false,
  /* 1088 */  false,
  /* 1089 */  false,
  /* 1090 */  false,
  /* 1091 */  false,
  /* 1092 */  false,
  /* 1093 */  false,
  /* 1094 */  false,
  /* 1095 */  false,
  /* 1096 */  false,
  /* 1097 */  false,
  /* 1098 */  false,
  /* 1099 */  false,
  /* 1100 */  false,
  /* 1101 */  false,
  /* 1102 */  false,
  /* 1103 */  false,
  /* 1104 */  false,
  /* 1105 */  false,
  /* 1106 */  false,
  /* 1107 */  false,
  /* 1108 */  false,
  /* 1109 */  false,
  /* 1110 */  false,
  /* 1111 */  false,
  /* 1112 */  false,
  /* 1113 */  false,
  /* 1114 */  false,
  /* 1115 */  false,
  /* 1116 */  false,
  /* 1117 */  false,
  /* 1118 */  false,
  /* 1119 */  false,
  /* 1120 */  false,
  /* 1121 */  false,
  /* 1122 */  false,
  /* 1123 */  false,
  /* 1124 */  false,
  /* 1125 */  false,
  /* 1126 */  false,
  /* 1127 */  false,
  /* 1128 */  false,
  /* 1129 */  false,
  /* 1130 */  false,
  /* 1131 */  false,
  /* 1132 */  false,
  /* 1133 */  false,
  /* 1134 */  false,
  /* 1135 */  false,
  /* 1136 */  false,
  /* 1137 */  false,
  /* 1138 */  false,
  /* 1139 */  false,
  /* 1140 */  false,
  /* 1141 */  false,
  /* 1142 */  false,
  /* 1143 */  false,
  /* 1144 */  false,
  /* 1145 */  false,
  /* 1146 */  false,
  /* 1147 */  false,
  /* 1148 */  false,
  /* 1149 */  false,
  /* 1150 */  false,
  /* 1151 */  false,
  /* 1152 */  false,
  /* 1153 */  false,
  /* 1154 */  false,
  /* 1155 */  false,
  /* 1156 */  false,
  /* 1157 */  false,
  /* 1158 */  false,
  /* 1159 */  false,
  /* 1160 */  false,
  /* 1161 */  false,
  /* 1162 */  false,
  /* 1163 */  false,
  /* 1164 */  false,
  /* 1165 */  false,
  /* 1166 */  false,
  /* 1167 */  false,
  /* 1168 */  false,
  /* 1169 */  false,
  /* 1170 */  false,
  /* 1171 */  false,
  /* 1172 */  false,
  /* 1173 */  false,
  /* 1174 */  false,
  /* 1175 */  false,
  /* 1176 */  false,
  /* 1177 */  false,
  /* 1178 */  false,
  /* 1179 */  false,
  /* 1180 */  false,
  /* 1181 */  false,
  /* 1182 */  false,
  /* 1183 */  false,
  /* 1184 */  false,
  /* 1185 */  false,
  /* 1186 */  false,
  /* 1187 */  false,
  /* 1188 */  false,
  /* 1189 */  false,
  /* 1190 */  false,
  /* 1191 */  false,
  /* 1192 */  false,
  /* 1193 */  false,
  /* 1194 */  false,
  /* 1195 */  false,
  /* 1196 */  false,
  /* 1197 */  false,
  /* 1198 */  false,
  /* 1199 */  false,
  /* 1200 */  false,
  /* 1201 */  false,
  /* 1202 */  false,
  /* 1203 */  false,
  /* 1204 */  false,
  /* 1205 */  false,
  /* 1206 */  false,
  /* 1207 */  false,
  /* 1208 */  false,
  /* 1209 */  false,
  /* 1210 */  false,
  /* 1211 */  false,
  /* 1212 */  false,
  /* 1213 */  false,
  /* 1214 */  false,
  /* 1215 */  false,
  /* 1216 */  false,
  /* 1217 */  false,
  /* 1218 */  false,
  /* 1219 */  false,
  /* 1220 */  false,
  /* 1221 */  false,
  /* 1222 */  false,
  /* 1223 */  false,
  /* 1224 */  false,
  /* 1225 */  false,
  /* 1226 */  false,
  /* 1227 */  false,
  /* 1228 */  false,
  /* 1229 */  false,
  /* 1230 */  false,
  /* 1231 */  false,
  /* 1232 */  false,
  /* 1233 */  false,
  /* 1234 */  false,
  /* 1235 */  false,
  /* 1236 */  false,
  /* 1237 */  false,
  /* 1238 */  false,
  /* 1239 */  false,
  /* 1240 */  false,
  /* 1241 */  false,
  /* 1242 */  false,
  /* 1243 */  false,
  /* 1244 */  false,
  /* 1245 */  false,
  /* 1246 */  false,
  /* 1247 */  false,
  /* 1248 */  false,
  /* 1249 */  false,
  /* 1250 */  false,
  /* 1251 */  false,
  /* 1252 */  false,
  /* 1253 */  false,
  /* 1254 */  false,
  /* 1255 */  false,
  /* 1256 */  false,
  /* 1257 */  false,
  /* 1258 */  false,
  /* 1259 */  false,
  /* 1260 */  false,
  /* 1261 */  false,
  /* 1262 */  false,
  /* 1263 */  false,
  /* 1264 */  false,
  /* 1265 */  false,
  /* 1266 */  false,
  /* 1267 */  false,
  /* 1268 */  false,
  /* 1269 */  false,
  /* 1270 */  false,
  /* 1271 */  false,
  /* 1272 */  false,
  /* 1273 */  false,
  /* 1274 */  false,
  /* 1275 */  false,
  /* 1276 */  false,
  /* 1277 */  false,
  /* 1278 */  false,
  /* 1279 */  false,
  /* 1280 */  false,
  /* 1281 */  false,
  /* 1282 */  false,
  /* 1283 */  false,
  /* 1284 */  false,
  /* 1285 */  false,
  /* 1286 */  false,
  /* 1287 */  false,
  /* 1288 */  false,
  /* 1289 */  false,
  /* 1290 */  false,
  /* 1291 */  false,
  /* 1292 */  false,
  /* 1293 */  false,
  /* 1294 */  false,
  /* 1295 */  false,
  /* 1296 */  false,
  /* 1297 */  false,
  /* 1298 */  false,
  /* 1299 */  false,
  /* 1300 */  false,
  /* 1301 */  false,
  /* 1302 */  false,
  /* 1303 */  false,
  /* 1304 */  false,
  /* 1305 */  false,
  /* 1306 */  false,
  /* 1307 */  false,
  /* 1308 */  false,
  /* 1309 */  false,
  /* 1310 */  false,
  /* 1311 */  false,
  /* 1312 */  false,
  /* 1313 */  false,
  /* 1314 */  false,
  /* 1315 */  false,
  /* 1316 */  false,
  /* 1317 */  false,
  /* 1318 */  false,
  /* 1319 */  false,
  /* 1320 */  false,
  /* 1321 */  false,
  /* 1322 */  false,
  /* 1323 */  false,
  /* 1324 */  false,
  /* 1325 */  false,
  /* 1326 */  false,
  /* 1327 */  false,
  /* 1328 */  false,
  /* 1329 */  false,
  /* 1330 */  false,
  /* 1331 */  false,
  /* 1332 */  false,
  /* 1333 */  false,
  /* 1334 */  false,
  /* 1335 */  false,
  /* 1336 */  false,
  /* 1337 */  false,
  /* 1338 */  false,
  /* 1339 */  false,
  /* 1340 */  false,
  /* 1341 */  false,
  /* 1342 */  false,
  /* 1343 */  false,
  /* 1344 */  false,
  /* 1345 */  false,
  /* 1346 */  false,
  /* 1347 */  false,
  /* 1348 */  false,
  /* 1349 */  false,
  /* 1350 */  false,
  /* 1351 */  false,
  /* 1352 */  false,
  /* 1353 */  false,
  /* 1354 */  false,
  /* 1355 */  false,
  /* 1356 */  false,
  /* 1357 */  false,
  /* 1358 */  false,
  /* 1359 */  false,
  /* 1360 */  false,
  /* 1361 */  false,
  /* 1362 */  false,
  /* 1363 */  false,
  /* 1364 */  false,
  /* 1365 */  false,
  /* 1366 */  false,
  /* 1367 */  false,
  /* 1368 */  false,
  /* 1369 */  false,
  /* 1370 */  false,
  /* 1371 */  false,
  /* 1372 */  false,
  /* 1373 */  false,
  /* 1374 */  false,
  /* 1375 */  false,
  /* 1376 */  false,
  /* 1377 */  false,
  /* 1378 */  false,
  /* 1379 */  false,
  /* 1380 */  false,
  /* 1381 */  false,
  /* 1382 */  false,
  /* 1383 */  false,
  /* 1384 */  false,
  /* 1385 */  false,
  /* 1386 */  false,
  /* 1387 */  false,
  /* 1388 */  false,
  /* 1389 */  false,
  /* 1390 */  false,
  /* 1391 */  false,
  /* 1392 */  false,
  /* 1393 */  false,
  /* 1394 */  false,
  /* 1395 */  false,
  /* 1396 */  false,
  /* 1397 */  false,
  /* 1398 */  false,
  /* 1399 */  false,
  /* 1400 */  false,
  /* 1401 */  false,
  /* 1402 */  false,
  /* 1403 */  false,
  /* 1404 */  false,
  /* 1405 */  false,
  /* 1406 */  false,
  /* 1407 */  false,
  /* 1408 */  false,
  /* 1409 */  false,
  /* 1410 */  false,
  /* 1411 */  false,
  /* 1412 */  false,
  /* 1413 */  false,
  /* 1414 */  false,
  /* 1415 */  false,
  /* 1416 */  false,
  /* 1417 */  false,
  /* 1418 */  false,
  /* 1419 */  false,
  /* 1420 */  false,
  /* 1421 */  false,
  /* 1422 */  false,
  /* 1423 */  false,
  /* 1424 */  false,
  /* 1425 */  false,
  /* 1426 */  false,
  /* 1427 */  false,
  /* 1428 */  false,
  /* 1429 */  false,
  /* 1430 */  false,
  /* 1431 */  false,
  /* 1432 */  false,
  /* 1433 */  false,
  /* 1434 */  false,
  /* 1435 */  false,
  /* 1436 */  false,
  /* 1437 */  false,
  /* 1438 */  false,
  /* 1439 */  false,
  /* 1440 */  false,
  /* 1441 */  false,
  /* 1442 */  false,
  /* 1443 */  false,
  /* 1444 */  false,
  /* 1445 */  false,
  /* 1446 */  false,
  /* 1447 */  false,
  /* 1448 */  false,
  /* 1449 */  false,
  /* 1450 */  false,
  /* 1451 */  false,
  /* 1452 */  false,
  /* 1453 */  false,
  /* 1454 */  false,
  /* 1455 */  false,
  /* 1456 */  false,
  /* 1457 */  false,
  /* 1458 */  false,
  /* 1459 */  false,
  /* 1460 */  false,
  /* 1461 */  false,
  /* 1462 */  false,
  /* 1463 */  false,
  /* 1464 */  false,
  /* 1465 */  false,
  /* 1466 */  false,
  /* 1467 */  false,
  /* 1468 */  false,
  /* 1469 */  false,
  /* 1470 */  false,
  /* 1471 */  false,
  /* 1472 */  false,
  /* 1473 */  false,
  /* 1474 */  false,
  /* 1475 */  false,
  /* 1476 */  false,
  /* 1477 */  false,
  /* 1478 */  false,
  /* 1479 */  false,
  /* 1480 */  false,
  /* 1481 */  false,
  /* 1482 */  false,
  /* 1483 */  false,
  /* 1484 */  false,
  /* 1485 */  false,
  /* 1486 */  false,
  /* 1487 */  false,
  /* 1488 */  false,
  /* 1489 */  false,
  /* 1490 */  false,
  /* 1491 */  false,
  /* 1492 */  false,
  /* 1493 */  false,
  /* 1494 */  false,
  /* 1495 */  false,
  /* 1496 */  false,
  /* 1497 */  false,
  /* 1498 */  false,
  /* 1499 */  false,
  /* 1500 */  false,
  /* 1501 */  false,
  /* 1502 */  false,
  /* 1503 */  false,
  /* 1504 */  false,
  /* 1505 */  false,
  /* 1506 */  false,
  /* 1507 */  false,
  /* 1508 */  false,
  /* 1509 */  false,
  /* 1510 */  false,
  /* 1511 */  false,
  /* 1512 */  false,
  /* 1513 */  false,
  /* 1514 */  false,
  /* 1515 */  false,
  /* 1516 */  false,
  /* 1517 */  false,
  /* 1518 */  false,
  /* 1519 */  false,
  /* 1520 */  false,
  /* 1521 */  false,
  /* 1522 */  false,
  /* 1523 */  false,
  /* 1524 */  false,
  /* 1525 */  false,
  /* 1526 */  false,
  /* 1527 */  false,
  /* 1528 */  false,
  /* 1529 */  false,
  /* 1530 */  false,
  /* 1531 */  false,
  /* 1532 */  false,
  /* 1533 */  false,
  /* 1534 */  false,
  /* 1535 */  false,
  /* 1536 */  false,
  /* 1537 */  false,
  /* 1538 */  false,
  /* 1539 */  false,
  /* 1540 */  false,
  /* 1541 */  false,
  /* 1542 */  false,
  /* 1543 */  false,
  /* 1544 */  false,
  /* 1545 */  false,
  /* 1546 */  false,
  /* 1547 */  false,
  /* 1548 */  false,
  /* 1549 */  false,
  /* 1550 */  false,
  /* 1551 */  false,
  /* 1552 */  false,
  /* 1553 */  false,
  /* 1554 */  false,
  /* 1555 */  false,
  /* 1556 */  false,
  /* 1557 */  false,
  /* 1558 */  false,
  /* 1559 */  false,
  /* 1560 */  false,
  /* 1561 */  false,
  /* 1562 */  false,
  /* 1563 */  false,
  /* 1564 */  false,
  /* 1565 */  false,
  /* 1566 */  false,
  /* 1567 */  false,
  /* 1568 */  false,
  /* 1569 */  false,
  /* 1570 */  false,
  /* 1571 */  false,
  /* 1572 */  false,
  /* 1573 */  false,
  /* 1574 */  false,
  /* 1575 */  false,
  /* 1576 */  false,
  /* 1577 */  false,
  /* 1578 */  false,
  /* 1579 */  false,
  /* 1580 */  false,
  /* 1581 */  false,
  /* 1582 */  false,
  /* 1583 */  false,
  /* 1584 */  false,
  /* 1585 */  false,
  /* 1586 */  false,
  /* 1587 */  false,
  /* 1588 */  false,
  /* 1589 */  false,
  /* 1590 */  false,
  /* 1591 */  false,
  /* 1592 */  false,
  /* 1593 */  false,
  /* 1594 */  false,
  /* 1595 */  false,
  /* 1596 */  false,
  /* 1597 */  false,
  /* 1598 */  false,
  /* 1599 */  false,
  /* 1600 */  false,
  /* 1601 */  false,
  /* 1602 */  false,
  /* 1603 */  false,
  /* 1604 */  false,
  /* 1605 */  false,
  /* 1606 */  false,
  /* 1607 */  false,
  /* 1608 */  false,
  /* 1609 */  false,
  /* 1610 */  false,
  /* 1611 */  false,
  /* 1612 */  false,
  /* 1613 */  false,
  /* 1614 */  false,
  /* 1615 */  false,
  /* 1616 */  false,
  /* 1617 */  false,
  /* 1618 */  false,
  /* 1619 */  false,
  /* 1620 */  false,
  /* 1621 */  false,
  /* 1622 */  false,
  /* 1623 */  false,
  /* 1624 */  false,
  /* 1625 */  false,
  /* 1626 */  false,
  /* 1627 */  false,
  /* 1628 */  false,
  /* 1629 */  false,
  /* 1630 */  false,
  /* 1631 */  false,
  /* 1632 */  false,
  /* 1633 */  false,
  /* 1634 */  false,
  /* 1635 */  false,
  /* 1636 */  false,
  /* 1637 */  false,
  /* 1638 */  false,
  /* 1639 */  false,
  /* 1640 */  false,
  /* 1641 */  false,
  /* 1642 */  false,
  /* 1643 */  false,
  /* 1644 */  false,
  /* 1645 */  false,
  /* 1646 */  false,
  /* 1647 */  false,
  /* 1648 */  false,
  /* 1649 */  false,
  /* 1650 */  false,
  /* 1651 */  false,
  /* 1652 */  false,
  /* 1653 */  false,
  /* 1654 */  false,
  /* 1655 */  false,
  /* 1656 */  false,
  /* 1657 */  false,
  /* 1658 */  false,
  /* 1659 */  false,
  /* 1660 */  false,
  /* 1661 */  false,
  /* 1662 */  false,
  /* 1663 */  false,
  /* 1664 */  false,
  /* 1665 */  false,
  /* 1666 */  false,
  /* 1667 */  false,
  /* 1668 */  false,
  /* 1669 */  false,
  /* 1670 */  false,
  /* 1671 */  false,
  /* 1672 */  false,
  /* 1673 */  false,
  /* 1674 */  false,
  /* 1675 */  false,
  /* 1676 */  false,
  /* 1677 */  false,
  /* 1678 */  false,
  /* 1679 */  false,
  /* 1680 */  false,
  /* 1681 */  false,
  /* 1682 */  false,
  /* 1683 */  false,
  /* 1684 */  false,
  /* 1685 */  false,
  /* 1686 */  false,
  /* 1687 */  false,
  /* 1688 */  false,
  /* 1689 */  false,
  /* 1690 */  false,
  /* 1691 */  false,
  /* 1692 */  false,
  /* 1693 */  false,
  /* 1694 */  false,
  /* 1695 */  false,
  /* 1696 */  false,
  /* 1697 */  false,
  /* 1698 */  false,
  /* 1699 */  false,
  /* 1700 */  false,
  /* 1701 */  false,
  /* 1702 */  false,
  /* 1703 */  false,
  /* 1704 */  false,
  /* 1705 */  false,
  /* 1706 */  false,
  /* 1707 */  false,
  /* 1708 */  false,
  /* 1709 */  false,
  /* 1710 */  false,
  /* 1711 */  false,
  /* 1712 */  false,
  /* 1713 */  false,
  /* 1714 */  false,
  /* 1715 */  false,
  /* 1716 */  false,
  /* 1717 */  false,
  /* 1718 */  false,
  /* 1719 */  false,
  /* 1720 */  false,
  /* 1721 */  false,
  /* 1722 */  false,
  /* 1723 */  false,
  /* 1724 */  false,
  /* 1725 */  false,
  /* 1726 */  false,
  /* 1727 */  false,
  /* 1728 */  false,
  /* 1729 */  false,
  /* 1730 */  false,
  /* 1731 */  false,
  /* 1732 */  false,
  /* 1733 */  false,
  /* 1734 */  false,
  /* 1735 */  false,
  /* 1736 */  false,
  /* 1737 */  false,
  /* 1738 */  false,
  /* 1739 */  false,
  /* 1740 */  false,
  /* 1741 */  false,
  /* 1742 */  false,
  /* 1743 */  false,
  /* 1744 */  false,
  /* 1745 */  false,
  /* 1746 */  false,
  /* 1747 */  false,
  /* 1748 */  false,
  /* 1749 */  false,
  /* 1750 */  false,
  /* 1751 */  false,
  /* 1752 */  false,
  /* 1753 */  false,
  /* 1754 */  false,
  /* 1755 */  false,
  /* 1756 */  false,
  /* 1757 */  false,
  /* 1758 */  false,
  /* 1759 */  false,
  /* 1760 */  false,
  /* 1761 */  false,
  /* 1762 */  false,
  /* 1763 */  false,
  /* 1764 */  false,
  /* 1765 */  false,
  /* 1766 */  false,
  /* 1767 */  false,
  /* 1768 */  false,
  /* 1769 */  false,
  /* 1770 */  false,
  /* 1771 */  false,
  /* 1772 */  false,
  /* 1773 */  false,
  /* 1774 */  false,
  /* 1775 */  false,
  /* 1776 */  false,
  /* 1777 */  false,
  /* 1778 */  false,
  /* 1779 */  false,
  /* 1780 */  false,
  /* 1781 */  false,
  /* 1782 */  false,
  /* 1783 */  false,
  /* 1784 */  false,
  /* 1785 */  false,
  /* 1786 */  false,
  /* 1787 */  false,
  /* 1788 */  false,
  /* 1789 */  false,
  /* 1790 */  false,
  /* 1791 */  false,
  /* 1792 */  false,
  /* 1793 */  false,
  /* 1794 */  false,
  /* 1795 */  false,
  /* 1796 */  false,
  /* 1797 */  false,
  /* 1798 */  false,
  /* 1799 */  false,
  /* 1800 */  false,
  /* 1801 */  false,
  /* 1802 */  false,
  /* 1803 */  false,
  /* 1804 */  false,
  /* 1805 */  false,
  /* 1806 */  false,
  /* 1807 */  false,
  /* 1808 */  false,
  /* 1809 */  false,
  /* 1810 */  false,
  /* 1811 */  false,
  /* 1812 */  false,
  /* 1813 */  false,
  /* 1814 */  false,
  /* 1815 */  false,
  /* 1816 */  false,
  /* 1817 */  false,
  /* 1818 */  false,
  /* 1819 */  false,
  /* 1820 */  false,
  /* 1821 */  false,
  /* 1822 */  false,
  /* 1823 */  false,
  /* 1824 */  false,
  /* 1825 */  false,
  /* 1826 */  false,
  /* 1827 */  false,
  /* 1828 */  false,
  /* 1829 */  false,
  /* 1830 */  false,
  /* 1831 */  false,
  /* 1832 */  false,
  /* 1833 */  false,
  /* 1834 */  false,
  /* 1835 */  false,
  /* 1836 */  false,
  /* 1837 */  false,
  /* 1838 */  false,
  /* 1839 */  false,
  /* 1840 */  false,
  /* 1841 */  false,
  /* 1842 */  false,
  /* 1843 */  false,
  /* 1844 */  false,
  /* 1845 */  false,
  /* 1846 */  false,
  /* 1847 */  false,
  /* 1848 */  false,
  /* 1849 */  false,
  /* 1850 */  false,
  /* 1851 */  false,
  /* 1852 */  false,
  /* 1853 */  false,
  /* 1854 */  false,
  /* 1855 */  false,
  /* 1856 */  false,
  /* 1857 */  false,
  /* 1858 */  false,
  /* 1859 */  false,
  /* 1860 */  false,
  /* 1861 */  false,
  /* 1862 */  false,
  /* 1863 */  false,
  /* 1864 */  false,
  /* 1865 */  false,
  /* 1866 */  false,
  /* 1867 */  false,
  /* 1868 */  false,
  /* 1869 */  false,
  /* 1870 */  false,
  /* 1871 */  false,
  /* 1872 */  false,
  /* 1873 */  false,
  /* 1874 */  false,
  /* 1875 */  false,
  /* 1876 */  false,
  /* 1877 */  false,
  /* 1878 */  false,
  /* 1879 */  false,
  /* 1880 */  false,
  /* 1881 */  false,
  /* 1882 */  false,
  /* 1883 */  false,
  /* 1884 */  false,
  /* 1885 */  false,
  /* 1886 */  false,
  /* 1887 */  false,
  /* 1888 */  false,
  /* 1889 */  false,
  /* 1890 */  false,
  /* 1891 */  false,
  /* 1892 */  false,
  /* 1893 */  false,
  /* 1894 */  false,
  /* 1895 */  false,
  /* 1896 */  false,
  /* 1897 */  false,
  /* 1898 */  false,
  /* 1899 */  false,
  /* 1900 */  false,
  /* 1901 */  false,
  /* 1902 */  false,
  /* 1903 */  false,
  /* 1904 */  false,
  /* 1905 */  false,
  /* 1906 */  false,
  /* 1907 */  false,
  /* 1908 */  false,
  /* 1909 */  false,
  /* 1910 */  false,
  /* 1911 */  false,
  /* 1912 */  false,
  /* 1913 */  false,
  /* 1914 */  false,
  /* 1915 */  false,
  /* 1916 */  false,
  /* 1917 */  false,
  /* 1918 */  false,
  /* 1919 */  false,
  /* 1920 */  false,
  /* 1921 */  false,
  /* 1922 */  false,
  /* 1923 */  false,
  /* 1924 */  false,
  /* 1925 */  false,
  /* 1926 */  false,
  /* 1927 */  false,
  /* 1928 */  false,
  /* 1929 */  false,
  /* 1930 */  false,
  /* 1931 */  false,
  /* 1932 */  false,
  /* 1933 */  false,
  /* 1934 */  false,
  /* 1935 */  false,
  /* 1936 */  false,
  /* 1937 */  false,
  /* 1938 */  false,
  /* 1939 */  false,
  /* 1940 */  false,
  /* 1941 */  false,
  /* 1942 */  false,
  /* 1943 */  false,
  /* 1944 */  false,
  /* 1945 */  false,
  /* 1946 */  false,
  /* 1947 */  false,
  /* 1948 */  false,
  /* 1949 */  false,
  /* 1950 */  false,
  /* 1951 */  false,
  /* 1952 */  false,
  /* 1953 */  false,
  /* 1954 */  false,
  /* 1955 */  false,
  /* 1956 */  false,
  /* 1957 */  false,
  /* 1958 */  false,
  /* 1959 */  false,
  /* 1960 */  false,
  /* 1961 */  false,
  /* 1962 */  false,
  /* 1963 */  false,
  /* 1964 */  false,
  /* 1965 */  false,
  /* 1966 */  false,
  /* 1967 */  false,
  /* 1968 */  false,
  /* 1969 */  false,
  /* 1970 */  false,
  /* 1971 */  false,
  /* 1972 */  false,
  /* 1973 */  false,
  /* 1974 */  false,
  /* 1975 */  false,
  /* 1976 */  false,
  /* 1977 */  false,
  /* 1978 */  false,
  /* 1979 */  false,
  /* 1980 */  false,
  /* 1981 */  false,
  /* 1982 */  false,
  /* 1983 */  false,
  /* 1984 */  false,
  /* 1985 */  false,
  /* 1986 */  false,
  /* 1987 */  false,
  /* 1988 */  false,
  /* 1989 */  false,
  /* 1990 */  false,
  /* 1991 */  false,
  /* 1992 */  false,
  /* 1993 */  false,
  /* 1994 */  false,
  /* 1995 */  false,
  /* 1996 */  false,
  // last instruction
  false // no trailing comma
};

// Mapping from machine-independent opcode to boolean
const        char must_clone[] = {
  0, // Node: 0
  0, // Set: 1
  0, // RegN: 2
  0, // RegI: 3
  0, // RegP: 4
  0, // RegF: 5
  0, // RegD: 6
  0, // RegL: 7
  0, // VecA: 8
  0, // VecS: 9
  0, // VecD: 10
  0, // VecX: 11
  0, // VecY: 12
  0, // VecZ: 13
  0, // RegVectMask: 14
  0, // RegFlags: 15
  0, // _last_machine_leaf: 16
  0, // AbsD: 17
  0, // AbsF: 18
  0, // AbsI: 19
  0, // AbsL: 20
  0, // AddD: 21
  0, // AddF: 22
  0, // AddI: 23
  0, // AddL: 24
  0, // AddP: 25
  0, // Allocate: 26
  0, // AllocateArray: 27
  0, // AndI: 28
  0, // AndL: 29
  0, // ArrayCopy: 30
  0, // AryEq: 31
  0, // AtanD: 32
  1, // Binary: 33
  0, // Blackhole: 34
  1, // Bool: 35
  0, // BoxLock: 36
  0, // ReverseBytesI: 37
  0, // ReverseBytesL: 38
  0, // ReverseBytesUS: 39
  0, // ReverseBytesS: 40
  0, // CProj: 41
  0, // CacheWB: 42
  0, // CacheWBPreSync: 43
  0, // CacheWBPostSync: 44
  0, // CallDynamicJava: 45
  0, // CallJava: 46
  0, // CallLeaf: 47
  0, // CallLeafNoFP: 48
  0, // CallLeafVector: 49
  0, // CallRuntime: 50
  0, // CallNative: 51
  0, // CallStaticJava: 52
  0, // CastDD: 53
  0, // CastFF: 54
  0, // CastII: 55
  0, // CastLL: 56
  0, // CastVV: 57
  0, // CastX2P: 58
  0, // CastP2X: 59
  0, // CastPP: 60
  0, // Catch: 61
  0, // CatchProj: 62
  0, // CheckCastPP: 63
  0, // ClearArray: 64
  0, // ConstraintCast: 65
  0, // CMoveD: 66
  0, // CMoveVD: 67
  0, // CMoveF: 68
  0, // CMoveVF: 69
  0, // CMoveI: 70
  0, // CMoveL: 71
  0, // CMoveP: 72
  0, // CMoveN: 73
  1, // CmpN: 74
  1, // CmpD: 75
  0, // CmpD3: 76
  1, // CmpF: 77
  0, // CmpF3: 78
  1, // CmpI: 79
  1, // CmpL: 80
  0, // CmpL3: 81
  0, // CmpLTMask: 82
  1, // CmpP: 83
  1, // CmpU: 84
  1, // CmpUL: 85
  0, // CompareAndSwapB: 86
  0, // CompareAndSwapS: 87
  0, // CompareAndSwapI: 88
  0, // CompareAndSwapL: 89
  0, // CompareAndSwapP: 90
  0, // CompareAndSwapN: 91
  0, // WeakCompareAndSwapB: 92
  0, // WeakCompareAndSwapS: 93
  0, // WeakCompareAndSwapI: 94
  0, // WeakCompareAndSwapL: 95
  0, // WeakCompareAndSwapP: 96
  0, // WeakCompareAndSwapN: 97
  0, // CompareAndExchangeB: 98
  0, // CompareAndExchangeS: 99
  0, // CompareAndExchangeI: 100
  0, // CompareAndExchangeL: 101
  0, // CompareAndExchangeP: 102
  0, // CompareAndExchangeN: 103
  0, // GetAndAddB: 104
  0, // GetAndAddS: 105
  0, // GetAndAddI: 106
  0, // GetAndAddL: 107
  0, // GetAndSetB: 108
  0, // GetAndSetS: 109
  0, // GetAndSetI: 110
  0, // GetAndSetL: 111
  0, // GetAndSetP: 112
  0, // GetAndSetN: 113
  0, // Con: 114
  0, // ConN: 115
  0, // ConNKlass: 116
  0, // ConD: 117
  0, // ConF: 118
  0, // ConI: 119
  0, // ConL: 120
  0, // ConP: 121
  0, // Conv2B: 122
  0, // ConvD2F: 123
  0, // ConvD2I: 124
  0, // ConvD2L: 125
  0, // ConvF2D: 126
  0, // ConvF2I: 127
  0, // ConvF2L: 128
  0, // ConvI2D: 129
  0, // ConvI2F: 130
  0, // ConvI2L: 131
  0, // ConvL2D: 132
  0, // ConvL2F: 133
  0, // ConvL2I: 134
  0, // CountedLoop: 135
  0, // CountedLoopEnd: 136
  0, // OuterStripMinedLoop: 137
  0, // OuterStripMinedLoopEnd: 138
  0, // LongCountedLoop: 139
  0, // LongCountedLoopEnd: 140
  0, // CountLeadingZerosI: 141
  0, // CountLeadingZerosL: 142
  0, // CountTrailingZerosI: 143
  0, // CountTrailingZerosL: 144
  0, // CreateEx: 145
  0, // DecodeN: 146
  0, // DecodeNKlass: 147
  0, // DivD: 148
  0, // DivF: 149
  0, // DivI: 150
  0, // DivL: 151
  0, // DivMod: 152
  0, // DivModI: 153
  0, // DivModL: 154
  0, // EncodeISOArray: 155
  0, // EncodeP: 156
  0, // EncodePKlass: 157
  1, // FastLock: 158
  1, // FastUnlock: 159
  0, // FmaD: 160
  0, // FmaF: 161
  0, // Goto: 162
  0, // Halt: 163
  0, // HasNegatives: 164
  0, // If: 165
  0, // RangeCheck: 166
  0, // IfFalse: 167
  0, // IfTrue: 168
  0, // Initialize: 169
  0, // JProj: 170
  0, // Jump: 171
  0, // JumpProj: 172
  0, // LShiftI: 173
  0, // LShiftL: 174
  0, // LoadB: 175
  0, // LoadUB: 176
  0, // LoadUS: 177
  0, // LoadD: 178
  0, // LoadD_unaligned: 179
  0, // LoadF: 180
  0, // LoadI: 181
  0, // LoadKlass: 182
  0, // LoadNKlass: 183
  0, // LoadL: 184
  0, // LoadL_unaligned: 185
  0, // LoadPLocked: 186
  0, // LoadP: 187
  0, // LoadN: 188
  0, // LoadRange: 189
  0, // LoadS: 190
  0, // Lock: 191
  0, // Loop: 192
  0, // LoopLimit: 193
  0, // Mach: 194
  0, // MachNullCheck: 195
  0, // MachProj: 196
  0, // MulAddS2I: 197
  0, // MaxI: 198
  0, // MaxL: 199
  0, // MaxD: 200
  0, // MaxF: 201
  0, // MemBarAcquire: 202
  0, // LoadFence: 203
  0, // SetVectMaskI: 204
  0, // MemBarAcquireLock: 205
  0, // MemBarCPUOrder: 206
  0, // MemBarRelease: 207
  0, // StoreFence: 208
  0, // StoreStoreFence: 209
  0, // MemBarReleaseLock: 210
  0, // MemBarVolatile: 211
  0, // MemBarStoreStore: 212
  0, // MergeMem: 213
  0, // MinI: 214
  0, // MinL: 215
  0, // MinF: 216
  0, // MinD: 217
  0, // ModD: 218
  0, // ModF: 219
  0, // ModI: 220
  0, // ModL: 221
  0, // MoveI2F: 222
  0, // MoveF2I: 223
  0, // MoveL2D: 224
  0, // MoveD2L: 225
  0, // MulD: 226
  0, // MulF: 227
  0, // MulHiL: 228
  0, // UMulHiL: 229
  0, // MulI: 230
  0, // MulL: 231
  0, // Multi: 232
  0, // NegI: 233
  0, // NegL: 234
  0, // NegD: 235
  0, // NegF: 236
  0, // NeverBranch: 237
  0, // OnSpinWait: 238
  0, // Opaque1: 239
  0, // OpaqueLoopInit: 240
  0, // OpaqueLoopStride: 241
  0, // Opaque2: 242
  0, // Opaque3: 243
  0, // Opaque4: 244
  0, // ProfileBoolean: 245
  0, // OrI: 246
  0, // OrL: 247
  1, // OverflowAddI: 248
  1, // OverflowSubI: 249
  1, // OverflowMulI: 250
  1, // OverflowAddL: 251
  1, // OverflowSubL: 252
  1, // OverflowMulL: 253
  0, // PCTable: 254
  0, // Parm: 255
  0, // PartialSubtypeCheck: 256
  0, // SubTypeCheck: 257
  0, // Phi: 258
  0, // PopCountI: 259
  0, // PopCountL: 260
  0, // PopCountVI: 261
  0, // PrefetchAllocation: 262
  0, // Proj: 263
  0, // RShiftI: 264
  0, // RShiftL: 265
  0, // Region: 266
  0, // Rethrow: 267
  0, // Return: 268
  0, // Root: 269
  0, // RoundDouble: 270
  0, // RoundDoubleMode: 271
  0, // RoundDoubleModeV: 272
  0, // RoundFloat: 273
  0, // RotateLeft: 274
  0, // RotateLeftV: 275
  0, // RotateRight: 276
  0, // RotateRightV: 277
  0, // SafePoint: 278
  0, // SafePointScalarObject: 279
  0, // ShenandoahCompareAndExchangeP: 280
  0, // ShenandoahCompareAndExchangeN: 281
  0, // ShenandoahCompareAndSwapN: 282
  0, // ShenandoahCompareAndSwapP: 283
  0, // ShenandoahWeakCompareAndSwapN: 284
  0, // ShenandoahWeakCompareAndSwapP: 285
  0, // ShenandoahIUBarrier: 286
  0, // ShenandoahLoadReferenceBarrier: 287
  0, // SCMemProj: 288
  0, // CopySignD: 289
  0, // CopySignF: 290
  0, // SignumD: 291
  0, // SignumF: 292
  0, // SqrtD: 293
  0, // SqrtF: 294
  0, // Start: 295
  0, // StartOSR: 296
  0, // StoreB: 297
  0, // StoreC: 298
  0, // StoreCM: 299
  0, // StorePConditional: 300
  0, // StoreIConditional: 301
  0, // StoreLConditional: 302
  0, // StoreD: 303
  0, // StoreF: 304
  0, // StoreI: 305
  0, // StoreL: 306
  0, // StoreP: 307
  0, // StoreN: 308
  0, // StoreNKlass: 309
  0, // StrComp: 310
  0, // StrCompressedCopy: 311
  0, // StrEquals: 312
  0, // StrIndexOf: 313
  0, // StrIndexOfChar: 314
  0, // StrInflatedCopy: 315
  0, // SubD: 316
  0, // SubF: 317
  0, // SubI: 318
  0, // SubL: 319
  0, // TailCall: 320
  0, // TailJump: 321
  0, // MacroLogicV: 322
  0, // ThreadLocal: 323
  0, // Unlock: 324
  0, // URShiftB: 325
  0, // URShiftS: 326
  0, // URShiftI: 327
  0, // URShiftL: 328
  0, // XorI: 329
  0, // XorL: 330
  0, // Vector: 331
  0, // AddVB: 332
  0, // AddVS: 333
  0, // AddVI: 334
  0, // AddReductionVI: 335
  0, // AddVL: 336
  0, // AddReductionVL: 337
  0, // AddVF: 338
  0, // AddReductionVF: 339
  0, // AddVD: 340
  0, // AddReductionVD: 341
  0, // SubVB: 342
  0, // SubVS: 343
  0, // SubVI: 344
  0, // SubVL: 345
  0, // SubVF: 346
  0, // SubVD: 347
  0, // MulVB: 348
  0, // MulVS: 349
  0, // MulVI: 350
  0, // MulReductionVI: 351
  0, // MulVL: 352
  0, // MulReductionVL: 353
  0, // MulVF: 354
  0, // MulReductionVF: 355
  0, // MulVD: 356
  0, // MulReductionVD: 357
  0, // MulAddVS2VI: 358
  0, // FmaVD: 359
  0, // FmaVF: 360
  0, // DivVF: 361
  0, // DivVD: 362
  0, // AbsVB: 363
  0, // AbsVS: 364
  0, // AbsVI: 365
  0, // AbsVL: 366
  0, // AbsVF: 367
  0, // AbsVD: 368
  0, // NegVI: 369
  0, // NegVF: 370
  0, // NegVD: 371
  0, // SqrtVD: 372
  0, // SqrtVF: 373
  0, // LShiftCntV: 374
  0, // RShiftCntV: 375
  0, // LShiftVB: 376
  0, // LShiftVS: 377
  0, // LShiftVI: 378
  0, // LShiftVL: 379
  0, // RShiftVB: 380
  0, // RShiftVS: 381
  0, // RShiftVI: 382
  0, // RShiftVL: 383
  0, // URShiftVB: 384
  0, // URShiftVS: 385
  0, // URShiftVI: 386
  0, // URShiftVL: 387
  0, // AndV: 388
  0, // AndReductionV: 389
  0, // OrV: 390
  0, // OrReductionV: 391
  0, // XorV: 392
  0, // XorReductionV: 393
  0, // MinV: 394
  0, // MaxV: 395
  0, // MinReductionV: 396
  0, // MaxReductionV: 397
  0, // LoadVector: 398
  0, // LoadVectorGather: 399
  0, // LoadVectorGatherMasked: 400
  0, // StoreVector: 401
  0, // StoreVectorScatter: 402
  0, // StoreVectorScatterMasked: 403
  0, // LoadVectorMasked: 404
  0, // StoreVectorMasked: 405
  0, // VectorCmpMasked: 406
  0, // VectorMaskGen: 407
  0, // VectorMaskOp: 408
  0, // VectorMaskTrueCount: 409
  0, // VectorMaskFirstTrue: 410
  0, // VectorMaskLastTrue: 411
  0, // VectorMaskToLong: 412
  0, // VectorLongToMask: 413
  0, // Pack: 414
  0, // PackB: 415
  0, // PackS: 416
  0, // PackI: 417
  0, // PackL: 418
  0, // PackF: 419
  0, // PackD: 420
  0, // Pack2L: 421
  0, // Pack2D: 422
  0, // ReplicateB: 423
  0, // ReplicateS: 424
  0, // ReplicateI: 425
  0, // ReplicateL: 426
  0, // ReplicateF: 427
  0, // ReplicateD: 428
  0, // Extract: 429
  0, // ExtractB: 430
  0, // ExtractUB: 431
  0, // ExtractC: 432
  0, // ExtractS: 433
  0, // ExtractI: 434
  0, // ExtractL: 435
  0, // ExtractF: 436
  0, // ExtractD: 437
  0, // Digit: 438
  0, // LowerCase: 439
  0, // UpperCase: 440
  0, // Whitespace: 441
  0, // VectorBox: 442
  0, // VectorBoxAllocate: 443
  0, // VectorUnbox: 444
  0, // VectorMaskWrapper: 445
  0, // VectorMaskCmp: 446
  0, // VectorMaskCast: 447
  0, // VectorTest: 448
  0, // VectorBlend: 449
  0, // VectorRearrange: 450
  0, // VectorLoadMask: 451
  0, // VectorLoadShuffle: 452
  0, // VectorLoadConst: 453
  0, // VectorStoreMask: 454
  0, // VectorReinterpret: 455
  0, // VectorCast: 456
  0, // VectorCastB2X: 457
  0, // VectorCastS2X: 458
  0, // VectorCastI2X: 459
  0, // VectorCastL2X: 460
  0, // VectorCastF2X: 461
  0, // VectorCastD2X: 462
  0, // VectorInsert: 463
  0, // MaskAll: 464
  0, // AndVMask: 465
  0, // OrVMask: 466
  0 // no trailing comma // XorVMask: 467
};
//  The following instructions can cisc-spill



// An array of character pointers to machine register names.
const char *Matcher::regName[REG_COUNT] = {
  "R10",
  "R10_H",
  "R11",
  "R11_H",
  "R12",
  "R12_H",
  "R13",
  "R13_H",
  "R14",
  "R14_H",
  "R15",
  "R15_H",
  "R16",
  "R16_H",
  "R17",
  "R17_H",
  "R18",
  "R18_H",
  "R0",
  "R0_H",
  "R1",
  "R1_H",
  "R2",
  "R2_H",
  "R3",
  "R3_H",
  "R4",
  "R4_H",
  "R5",
  "R5_H",
  "R6",
  "R6_H",
  "R7",
  "R7_H",
  "R19",
  "R19_H",
  "R20",
  "R20_H",
  "R21",
  "R21_H",
  "R22",
  "R22_H",
  "R23",
  "R23_H",
  "R24",
  "R24_H",
  "R25",
  "R25_H",
  "R26",
  "R26_H",
  "R27",
  "R27_H",
  "R28",
  "R28_H",
  "R29",
  "R29_H",
  "R30",
  "R30_H",
  "R31",
  "R31_H",
  "R8",
  "R8_H",
  "R9",
  "R9_H",
  "V16",
  "V16_H",
  "V16_J",
  "V16_K",
  "V16_L",
  "V16_M",
  "V16_N",
  "V16_O",
  "V17",
  "V17_H",
  "V17_J",
  "V17_K",
  "V17_L",
  "V17_M",
  "V17_N",
  "V17_O",
  "V18",
  "V18_H",
  "V18_J",
  "V18_K",
  "V18_L",
  "V18_M",
  "V18_N",
  "V18_O",
  "V19",
  "V19_H",
  "V19_J",
  "V19_K",
  "V19_L",
  "V19_M",
  "V19_N",
  "V19_O",
  "V20",
  "V20_H",
  "V20_J",
  "V20_K",
  "V20_L",
  "V20_M",
  "V20_N",
  "V20_O",
  "V21",
  "V21_H",
  "V21_J",
  "V21_K",
  "V21_L",
  "V21_M",
  "V21_N",
  "V21_O",
  "V22",
  "V22_H",
  "V22_J",
  "V22_K",
  "V22_L",
  "V22_M",
  "V22_N",
  "V22_O",
  "V23",
  "V23_H",
  "V23_J",
  "V23_K",
  "V23_L",
  "V23_M",
  "V23_N",
  "V23_O",
  "V24",
  "V24_H",
  "V24_J",
  "V24_K",
  "V24_L",
  "V24_M",
  "V24_N",
  "V24_O",
  "V25",
  "V25_H",
  "V25_J",
  "V25_K",
  "V25_L",
  "V25_M",
  "V25_N",
  "V25_O",
  "V26",
  "V26_H",
  "V26_J",
  "V26_K",
  "V26_L",
  "V26_M",
  "V26_N",
  "V26_O",
  "V27",
  "V27_H",
  "V27_J",
  "V27_K",
  "V27_L",
  "V27_M",
  "V27_N",
  "V27_O",
  "V28",
  "V28_H",
  "V28_J",
  "V28_K",
  "V28_L",
  "V28_M",
  "V28_N",
  "V28_O",
  "V29",
  "V29_H",
  "V29_J",
  "V29_K",
  "V29_L",
  "V29_M",
  "V29_N",
  "V29_O",
  "V30",
  "V30_H",
  "V30_J",
  "V30_K",
  "V30_L",
  "V30_M",
  "V30_N",
  "V30_O",
  "V31",
  "V31_H",
  "V31_J",
  "V31_K",
  "V31_L",
  "V31_M",
  "V31_N",
  "V31_O",
  "V0",
  "V0_H",
  "V0_J",
  "V0_K",
  "V0_L",
  "V0_M",
  "V0_N",
  "V0_O",
  "V1",
  "V1_H",
  "V1_J",
  "V1_K",
  "V1_L",
  "V1_M",
  "V1_N",
  "V1_O",
  "V2",
  "V2_H",
  "V2_J",
  "V2_K",
  "V2_L",
  "V2_M",
  "V2_N",
  "V2_O",
  "V3",
  "V3_H",
  "V3_J",
  "V3_K",
  "V3_L",
  "V3_M",
  "V3_N",
  "V3_O",
  "V4",
  "V4_H",
  "V4_J",
  "V4_K",
  "V4_L",
  "V4_M",
  "V4_N",
  "V4_O",
  "V5",
  "V5_H",
  "V5_J",
  "V5_K",
  "V5_L",
  "V5_M",
  "V5_N",
  "V5_O",
  "V6",
  "V6_H",
  "V6_J",
  "V6_K",
  "V6_L",
  "V6_M",
  "V6_N",
  "V6_O",
  "V7",
  "V7_H",
  "V7_J",
  "V7_K",
  "V7_L",
  "V7_M",
  "V7_N",
  "V7_O",
  "V8",
  "V8_H",
  "V8_J",
  "V8_K",
  "V8_L",
  "V8_M",
  "V8_N",
  "V8_O",
  "V9",
  "V9_H",
  "V9_J",
  "V9_K",
  "V9_L",
  "V9_M",
  "V9_N",
  "V9_O",
  "V10",
  "V10_H",
  "V10_J",
  "V10_K",
  "V10_L",
  "V10_M",
  "V10_N",
  "V10_O",
  "V11",
  "V11_H",
  "V11_J",
  "V11_K",
  "V11_L",
  "V11_M",
  "V11_N",
  "V11_O",
  "V12",
  "V12_H",
  "V12_J",
  "V12_K",
  "V12_L",
  "V12_M",
  "V12_N",
  "V12_O",
  "V13",
  "V13_H",
  "V13_J",
  "V13_K",
  "V13_L",
  "V13_M",
  "V13_N",
  "V13_O",
  "V14",
  "V14_H",
  "V14_J",
  "V14_K",
  "V14_L",
  "V14_M",
  "V14_N",
  "V14_O",
  "V15",
  "V15_H",
  "V15_J",
  "V15_K",
  "V15_L",
  "V15_M",
  "V15_N",
  "V15_O",
  "P0",
  "P1",
  "P2",
  "P3",
  "P4",
  "P5",
  "P6",
  "P7",
  "P8",
  "P9",
  "P10",
  "P11",
  "P12",
  "P13",
  "P14",
  "P15",
  "RFLAGS" // no trailing comma
};

// An array of character pointers to machine register names.
const VMReg OptoReg::opto2vm[REG_COUNT] = {
	r10->as_VMReg()        ,
	r10->as_VMReg()->next(),
	r11->as_VMReg()        ,
	r11->as_VMReg()->next(),
	r12->as_VMReg()        ,
	r12->as_VMReg()->next(),
	r13->as_VMReg()        ,
	r13->as_VMReg()->next(),
	r14->as_VMReg()        ,
	r14->as_VMReg()->next(),
	r15->as_VMReg()        ,
	r15->as_VMReg()->next(),
	r16->as_VMReg()        ,
	r16->as_VMReg()->next(),
	r17->as_VMReg()        ,
	r17->as_VMReg()->next(),
	r18_tls->as_VMReg()        ,
	r18_tls->as_VMReg()->next(),
	r0->as_VMReg()         ,
	r0->as_VMReg()->next() ,
	r1->as_VMReg()         ,
	r1->as_VMReg()->next() ,
	r2->as_VMReg()         ,
	r2->as_VMReg()->next() ,
	r3->as_VMReg()         ,
	r3->as_VMReg()->next() ,
	r4->as_VMReg()         ,
	r4->as_VMReg()->next() ,
	r5->as_VMReg()         ,
	r5->as_VMReg()->next() ,
	r6->as_VMReg()         ,
	r6->as_VMReg()->next() ,
	r7->as_VMReg()         ,
	r7->as_VMReg()->next() ,
	r19->as_VMReg()        ,
	r19->as_VMReg()->next(),
	r20->as_VMReg()        ,
	r20->as_VMReg()->next(),
	r21->as_VMReg()        ,
	r21->as_VMReg()->next(),
	r22->as_VMReg()        ,
	r22->as_VMReg()->next(),
	r23->as_VMReg()        ,
	r23->as_VMReg()->next(),
	r24->as_VMReg()        ,
	r24->as_VMReg()->next(),
	r25->as_VMReg()        ,
	r25->as_VMReg()->next(),
	r26->as_VMReg()        ,
	r26->as_VMReg()->next(),
	r27->as_VMReg()        ,
	r27->as_VMReg()->next(),
	r28->as_VMReg()        ,
	r28->as_VMReg()->next(),
	r29->as_VMReg()        ,
	r29->as_VMReg()->next(),
	r30->as_VMReg()        ,
	r30->as_VMReg()->next(),
	r31_sp->as_VMReg()     ,
	r31_sp->as_VMReg()->next(),
	r8->as_VMReg()         ,
	r8->as_VMReg()->next() ,
	r9->as_VMReg()         ,
	r9->as_VMReg()->next() ,
	v16->as_VMReg()          ,
	v16->as_VMReg()->next()  ,
	v16->as_VMReg()->next(2) ,
	v16->as_VMReg()->next(3) ,
	v16->as_VMReg()->next(4) ,
	v16->as_VMReg()->next(5) ,
	v16->as_VMReg()->next(6) ,
	v16->as_VMReg()->next(7) ,
	v17->as_VMReg()          ,
	v17->as_VMReg()->next()  ,
	v17->as_VMReg()->next(2) ,
	v17->as_VMReg()->next(3) ,
	v17->as_VMReg()->next(4) ,
	v17->as_VMReg()->next(5) ,
	v17->as_VMReg()->next(6) ,
	v17->as_VMReg()->next(7) ,
	v18->as_VMReg()          ,
	v18->as_VMReg()->next()  ,
	v18->as_VMReg()->next(2) ,
	v18->as_VMReg()->next(3) ,
	v18->as_VMReg()->next(4) ,
	v18->as_VMReg()->next(5) ,
	v18->as_VMReg()->next(6) ,
	v18->as_VMReg()->next(7) ,
	v19->as_VMReg()          ,
	v19->as_VMReg()->next()  ,
	v19->as_VMReg()->next(2) ,
	v19->as_VMReg()->next(3) ,
	v19->as_VMReg()->next(4) ,
	v19->as_VMReg()->next(5) ,
	v19->as_VMReg()->next(6) ,
	v19->as_VMReg()->next(7) ,
	v20->as_VMReg()          ,
	v20->as_VMReg()->next()  ,
	v20->as_VMReg()->next(2) ,
	v20->as_VMReg()->next(3) ,
	v20->as_VMReg()->next(4) ,
	v20->as_VMReg()->next(5) ,
	v20->as_VMReg()->next(6) ,
	v20->as_VMReg()->next(7) ,
	v21->as_VMReg()          ,
	v21->as_VMReg()->next()  ,
	v21->as_VMReg()->next(2) ,
	v21->as_VMReg()->next(3) ,
	v21->as_VMReg()->next(4) ,
	v21->as_VMReg()->next(5) ,
	v21->as_VMReg()->next(6) ,
	v21->as_VMReg()->next(7) ,
	v22->as_VMReg()          ,
	v22->as_VMReg()->next()  ,
	v22->as_VMReg()->next(2) ,
	v22->as_VMReg()->next(3) ,
	v22->as_VMReg()->next(4) ,
	v22->as_VMReg()->next(5) ,
	v22->as_VMReg()->next(6) ,
	v22->as_VMReg()->next(7) ,
	v23->as_VMReg()          ,
	v23->as_VMReg()->next()  ,
	v23->as_VMReg()->next(2) ,
	v23->as_VMReg()->next(3) ,
	v23->as_VMReg()->next(4) ,
	v23->as_VMReg()->next(5) ,
	v23->as_VMReg()->next(6) ,
	v23->as_VMReg()->next(7) ,
	v24->as_VMReg()          ,
	v24->as_VMReg()->next()  ,
	v24->as_VMReg()->next(2) ,
	v24->as_VMReg()->next(3) ,
	v24->as_VMReg()->next(4) ,
	v24->as_VMReg()->next(5) ,
	v24->as_VMReg()->next(6) ,
	v24->as_VMReg()->next(7) ,
	v25->as_VMReg()          ,
	v25->as_VMReg()->next()  ,
	v25->as_VMReg()->next(2) ,
	v25->as_VMReg()->next(3) ,
	v25->as_VMReg()->next(4) ,
	v25->as_VMReg()->next(5) ,
	v25->as_VMReg()->next(6) ,
	v25->as_VMReg()->next(7) ,
	v26->as_VMReg()          ,
	v26->as_VMReg()->next()  ,
	v26->as_VMReg()->next(2) ,
	v26->as_VMReg()->next(3) ,
	v26->as_VMReg()->next(4) ,
	v26->as_VMReg()->next(5) ,
	v26->as_VMReg()->next(6) ,
	v26->as_VMReg()->next(7) ,
	v27->as_VMReg()          ,
	v27->as_VMReg()->next()  ,
	v27->as_VMReg()->next(2) ,
	v27->as_VMReg()->next(3) ,
	v27->as_VMReg()->next(4) ,
	v27->as_VMReg()->next(5) ,
	v27->as_VMReg()->next(6) ,
	v27->as_VMReg()->next(7) ,
	v28->as_VMReg()          ,
	v28->as_VMReg()->next()  ,
	v28->as_VMReg()->next(2) ,
	v28->as_VMReg()->next(3) ,
	v28->as_VMReg()->next(4) ,
	v28->as_VMReg()->next(5) ,
	v28->as_VMReg()->next(6) ,
	v28->as_VMReg()->next(7) ,
	v29->as_VMReg()          ,
	v29->as_VMReg()->next()  ,
	v29->as_VMReg()->next(2) ,
	v29->as_VMReg()->next(3) ,
	v29->as_VMReg()->next(4) ,
	v29->as_VMReg()->next(5) ,
	v29->as_VMReg()->next(6) ,
	v29->as_VMReg()->next(7) ,
	v30->as_VMReg()          ,
	v30->as_VMReg()->next()  ,
	v30->as_VMReg()->next(2) ,
	v30->as_VMReg()->next(3) ,
	v30->as_VMReg()->next(4) ,
	v30->as_VMReg()->next(5) ,
	v30->as_VMReg()->next(6) ,
	v30->as_VMReg()->next(7) ,
	v31->as_VMReg()          ,
	v31->as_VMReg()->next()  ,
	v31->as_VMReg()->next(2) ,
	v31->as_VMReg()->next(3) ,
	v31->as_VMReg()->next(4) ,
	v31->as_VMReg()->next(5) ,
	v31->as_VMReg()->next(6) ,
	v31->as_VMReg()->next(7) ,
	v0->as_VMReg()          ,
	v0->as_VMReg()->next()  ,
	v0->as_VMReg()->next(2) ,
	v0->as_VMReg()->next(3) ,
	v0->as_VMReg()->next(4) ,
	v0->as_VMReg()->next(5) ,
	v0->as_VMReg()->next(6) ,
	v0->as_VMReg()->next(7) ,
	v1->as_VMReg()          ,
	v1->as_VMReg()->next()  ,
	v1->as_VMReg()->next(2) ,
	v1->as_VMReg()->next(3) ,
	v1->as_VMReg()->next(4) ,
	v1->as_VMReg()->next(5) ,
	v1->as_VMReg()->next(6) ,
	v1->as_VMReg()->next(7) ,
	v2->as_VMReg()          ,
	v2->as_VMReg()->next()  ,
	v2->as_VMReg()->next(2) ,
	v2->as_VMReg()->next(3) ,
	v2->as_VMReg()->next(4) ,
	v2->as_VMReg()->next(5) ,
	v2->as_VMReg()->next(6) ,
	v2->as_VMReg()->next(7) ,
	v3->as_VMReg()          ,
	v3->as_VMReg()->next()  ,
	v3->as_VMReg()->next(2) ,
	v3->as_VMReg()->next(3) ,
	v3->as_VMReg()->next(4) ,
	v3->as_VMReg()->next(5) ,
	v3->as_VMReg()->next(6) ,
	v3->as_VMReg()->next(7) ,
	v4->as_VMReg()          ,
	v4->as_VMReg()->next()  ,
	v4->as_VMReg()->next(2) ,
	v4->as_VMReg()->next(3) ,
	v4->as_VMReg()->next(4) ,
	v4->as_VMReg()->next(5) ,
	v4->as_VMReg()->next(6) ,
	v4->as_VMReg()->next(7) ,
	v5->as_VMReg()          ,
	v5->as_VMReg()->next()  ,
	v5->as_VMReg()->next(2) ,
	v5->as_VMReg()->next(3) ,
	v5->as_VMReg()->next(4) ,
	v5->as_VMReg()->next(5) ,
	v5->as_VMReg()->next(6) ,
	v5->as_VMReg()->next(7) ,
	v6->as_VMReg()          ,
	v6->as_VMReg()->next()  ,
	v6->as_VMReg()->next(2) ,
	v6->as_VMReg()->next(3) ,
	v6->as_VMReg()->next(4) ,
	v6->as_VMReg()->next(5) ,
	v6->as_VMReg()->next(6) ,
	v6->as_VMReg()->next(7) ,
	v7->as_VMReg()          ,
	v7->as_VMReg()->next()  ,
	v7->as_VMReg()->next(2) ,
	v7->as_VMReg()->next(3) ,
	v7->as_VMReg()->next(4) ,
	v7->as_VMReg()->next(5) ,
	v7->as_VMReg()->next(6) ,
	v7->as_VMReg()->next(7) ,
	v8->as_VMReg()          ,
	v8->as_VMReg()->next()  ,
	v8->as_VMReg()->next(2) ,
	v8->as_VMReg()->next(3) ,
	v8->as_VMReg()->next(4) ,
	v8->as_VMReg()->next(5) ,
	v8->as_VMReg()->next(6) ,
	v8->as_VMReg()->next(7) ,
	v9->as_VMReg()          ,
	v9->as_VMReg()->next()  ,
	v9->as_VMReg()->next(2) ,
	v9->as_VMReg()->next(3) ,
	v9->as_VMReg()->next(4) ,
	v9->as_VMReg()->next(5) ,
	v9->as_VMReg()->next(6) ,
	v9->as_VMReg()->next(7) ,
	v10->as_VMReg()          ,
	v10->as_VMReg()->next()  ,
	v10->as_VMReg()->next(2) ,
	v10->as_VMReg()->next(3) ,
	v10->as_VMReg()->next(4) ,
	v10->as_VMReg()->next(5) ,
	v10->as_VMReg()->next(6) ,
	v10->as_VMReg()->next(7) ,
	v11->as_VMReg()          ,
	v11->as_VMReg()->next()  ,
	v11->as_VMReg()->next(2) ,
	v11->as_VMReg()->next(3) ,
	v11->as_VMReg()->next(4) ,
	v11->as_VMReg()->next(5) ,
	v11->as_VMReg()->next(6) ,
	v11->as_VMReg()->next(7) ,
	v12->as_VMReg()          ,
	v12->as_VMReg()->next()  ,
	v12->as_VMReg()->next(2) ,
	v12->as_VMReg()->next(3) ,
	v12->as_VMReg()->next(4) ,
	v12->as_VMReg()->next(5) ,
	v12->as_VMReg()->next(6) ,
	v12->as_VMReg()->next(7) ,
	v13->as_VMReg()          ,
	v13->as_VMReg()->next()  ,
	v13->as_VMReg()->next(2) ,
	v13->as_VMReg()->next(3) ,
	v13->as_VMReg()->next(4) ,
	v13->as_VMReg()->next(5) ,
	v13->as_VMReg()->next(6) ,
	v13->as_VMReg()->next(7) ,
	v14->as_VMReg()          ,
	v14->as_VMReg()->next()  ,
	v14->as_VMReg()->next(2) ,
	v14->as_VMReg()->next(3) ,
	v14->as_VMReg()->next(4) ,
	v14->as_VMReg()->next(5) ,
	v14->as_VMReg()->next(6) ,
	v14->as_VMReg()->next(7) ,
	v15->as_VMReg()          ,
	v15->as_VMReg()->next()  ,
	v15->as_VMReg()->next(2) ,
	v15->as_VMReg()->next(3) ,
	v15->as_VMReg()->next(4) ,
	v15->as_VMReg()->next(5) ,
	v15->as_VMReg()->next(6) ,
	v15->as_VMReg()->next(7) ,
	p0->as_VMReg(),
	p1->as_VMReg(),
	p2->as_VMReg(),
	p3->as_VMReg(),
	p4->as_VMReg(),
	p5->as_VMReg(),
	p6->as_VMReg(),
	p7->as_VMReg(),
	p8->as_VMReg(),
	p9->as_VMReg(),
	p10->as_VMReg(),
	p11->as_VMReg(),
	p12->as_VMReg(),
	p13->as_VMReg(),
	p14->as_VMReg(),
	p15->as_VMReg(),
	VMRegImpl::Bad() // no trailing comma
	};

 OptoReg::Name OptoReg::vm2opto[ConcreteRegisterImpl::number_of_registers];

// An array of the machine register encode values
const unsigned char Matcher::_regEncode[REG_COUNT] = {
  (unsigned char)'\xA',  // R10
  (unsigned char)'\xA',  // R10_H
  (unsigned char)'\xB',  // R11
  (unsigned char)'\xB',  // R11_H
  (unsigned char)'\xC',  // R12
  (unsigned char)'\xC',  // R12_H
  (unsigned char)'\xD',  // R13
  (unsigned char)'\xD',  // R13_H
  (unsigned char)'\xE',  // R14
  (unsigned char)'\xE',  // R14_H
  (unsigned char)'\xF',  // R15
  (unsigned char)'\xF',  // R15_H
  (unsigned char)'\x10',  // R16
  (unsigned char)'\x10',  // R16_H
  (unsigned char)'\x11',  // R17
  (unsigned char)'\x11',  // R17_H
  (unsigned char)'\x12',  // R18
  (unsigned char)'\x12',  // R18_H
  (unsigned char)'\x0',  // R0
  (unsigned char)'\x0',  // R0_H
  (unsigned char)'\x1',  // R1
  (unsigned char)'\x1',  // R1_H
  (unsigned char)'\x2',  // R2
  (unsigned char)'\x2',  // R2_H
  (unsigned char)'\x3',  // R3
  (unsigned char)'\x3',  // R3_H
  (unsigned char)'\x4',  // R4
  (unsigned char)'\x4',  // R4_H
  (unsigned char)'\x5',  // R5
  (unsigned char)'\x5',  // R5_H
  (unsigned char)'\x6',  // R6
  (unsigned char)'\x6',  // R6_H
  (unsigned char)'\x7',  // R7
  (unsigned char)'\x7',  // R7_H
  (unsigned char)'\x13',  // R19
  (unsigned char)'\x13',  // R19_H
  (unsigned char)'\x14',  // R20
  (unsigned char)'\x14',  // R20_H
  (unsigned char)'\x15',  // R21
  (unsigned char)'\x15',  // R21_H
  (unsigned char)'\x16',  // R22
  (unsigned char)'\x16',  // R22_H
  (unsigned char)'\x17',  // R23
  (unsigned char)'\x17',  // R23_H
  (unsigned char)'\x18',  // R24
  (unsigned char)'\x18',  // R24_H
  (unsigned char)'\x19',  // R25
  (unsigned char)'\x19',  // R25_H
  (unsigned char)'\x1A',  // R26
  (unsigned char)'\x1A',  // R26_H
  (unsigned char)'\x1B',  // R27
  (unsigned char)'\x1B',  // R27_H
  (unsigned char)'\x1C',  // R28
  (unsigned char)'\x1C',  // R28_H
  (unsigned char)'\x1D',  // R29
  (unsigned char)'\x1D',  // R29_H
  (unsigned char)'\x1E',  // R30
  (unsigned char)'\x1E',  // R30_H
  (unsigned char)'\x1F',  // R31
  (unsigned char)'\x1F',  // R31_H
  (unsigned char)'\x8',  // R8
  (unsigned char)'\x8',  // R8_H
  (unsigned char)'\x9',  // R9
  (unsigned char)'\x9',  // R9_H
  (unsigned char)'\x10',  // V16
  (unsigned char)'\x10',  // V16_H
  (unsigned char)'\x10',  // V16_J
  (unsigned char)'\x10',  // V16_K
  (unsigned char)'\x10',  // V16_L
  (unsigned char)'\x10',  // V16_M
  (unsigned char)'\x10',  // V16_N
  (unsigned char)'\x10',  // V16_O
  (unsigned char)'\x11',  // V17
  (unsigned char)'\x11',  // V17_H
  (unsigned char)'\x11',  // V17_J
  (unsigned char)'\x11',  // V17_K
  (unsigned char)'\x11',  // V17_L
  (unsigned char)'\x11',  // V17_M
  (unsigned char)'\x11',  // V17_N
  (unsigned char)'\x11',  // V17_O
  (unsigned char)'\x12',  // V18
  (unsigned char)'\x12',  // V18_H
  (unsigned char)'\x12',  // V18_J
  (unsigned char)'\x12',  // V18_K
  (unsigned char)'\x12',  // V18_L
  (unsigned char)'\x12',  // V18_M
  (unsigned char)'\x12',  // V18_N
  (unsigned char)'\x12',  // V18_O
  (unsigned char)'\x13',  // V19
  (unsigned char)'\x13',  // V19_H
  (unsigned char)'\x13',  // V19_J
  (unsigned char)'\x13',  // V19_K
  (unsigned char)'\x13',  // V19_L
  (unsigned char)'\x13',  // V19_M
  (unsigned char)'\x13',  // V19_N
  (unsigned char)'\x13',  // V19_O
  (unsigned char)'\x14',  // V20
  (unsigned char)'\x14',  // V20_H
  (unsigned char)'\x14',  // V20_J
  (unsigned char)'\x14',  // V20_K
  (unsigned char)'\x14',  // V20_L
  (unsigned char)'\x14',  // V20_M
  (unsigned char)'\x14',  // V20_N
  (unsigned char)'\x14',  // V20_O
  (unsigned char)'\x15',  // V21
  (unsigned char)'\x15',  // V21_H
  (unsigned char)'\x15',  // V21_J
  (unsigned char)'\x15',  // V21_K
  (unsigned char)'\x15',  // V21_L
  (unsigned char)'\x15',  // V21_M
  (unsigned char)'\x15',  // V21_N
  (unsigned char)'\x15',  // V21_O
  (unsigned char)'\x16',  // V22
  (unsigned char)'\x16',  // V22_H
  (unsigned char)'\x16',  // V22_J
  (unsigned char)'\x16',  // V22_K
  (unsigned char)'\x16',  // V22_L
  (unsigned char)'\x16',  // V22_M
  (unsigned char)'\x16',  // V22_N
  (unsigned char)'\x16',  // V22_O
  (unsigned char)'\x17',  // V23
  (unsigned char)'\x17',  // V23_H
  (unsigned char)'\x17',  // V23_J
  (unsigned char)'\x17',  // V23_K
  (unsigned char)'\x17',  // V23_L
  (unsigned char)'\x17',  // V23_M
  (unsigned char)'\x17',  // V23_N
  (unsigned char)'\x17',  // V23_O
  (unsigned char)'\x18',  // V24
  (unsigned char)'\x18',  // V24_H
  (unsigned char)'\x18',  // V24_J
  (unsigned char)'\x18',  // V24_K
  (unsigned char)'\x18',  // V24_L
  (unsigned char)'\x18',  // V24_M
  (unsigned char)'\x18',  // V24_N
  (unsigned char)'\x18',  // V24_O
  (unsigned char)'\x19',  // V25
  (unsigned char)'\x19',  // V25_H
  (unsigned char)'\x19',  // V25_J
  (unsigned char)'\x19',  // V25_K
  (unsigned char)'\x19',  // V25_L
  (unsigned char)'\x19',  // V25_M
  (unsigned char)'\x19',  // V25_N
  (unsigned char)'\x19',  // V25_O
  (unsigned char)'\x1A',  // V26
  (unsigned char)'\x1A',  // V26_H
  (unsigned char)'\x1A',  // V26_J
  (unsigned char)'\x1A',  // V26_K
  (unsigned char)'\x1A',  // V26_L
  (unsigned char)'\x1A',  // V26_M
  (unsigned char)'\x1A',  // V26_N
  (unsigned char)'\x1A',  // V26_O
  (unsigned char)'\x1B',  // V27
  (unsigned char)'\x1B',  // V27_H
  (unsigned char)'\x1B',  // V27_J
  (unsigned char)'\x1B',  // V27_K
  (unsigned char)'\x1B',  // V27_L
  (unsigned char)'\x1B',  // V27_M
  (unsigned char)'\x1B',  // V27_N
  (unsigned char)'\x1B',  // V27_O
  (unsigned char)'\x1C',  // V28
  (unsigned char)'\x1C',  // V28_H
  (unsigned char)'\x1C',  // V28_J
  (unsigned char)'\x1C',  // V28_K
  (unsigned char)'\x1C',  // V28_L
  (unsigned char)'\x1C',  // V28_M
  (unsigned char)'\x1C',  // V28_N
  (unsigned char)'\x1C',  // V28_O
  (unsigned char)'\x1D',  // V29
  (unsigned char)'\x1D',  // V29_H
  (unsigned char)'\x1D',  // V29_J
  (unsigned char)'\x1D',  // V29_K
  (unsigned char)'\x1D',  // V29_L
  (unsigned char)'\x1D',  // V29_M
  (unsigned char)'\x1D',  // V29_N
  (unsigned char)'\x1D',  // V29_O
  (unsigned char)'\x1E',  // V30
  (unsigned char)'\x1E',  // V30_H
  (unsigned char)'\x1E',  // V30_J
  (unsigned char)'\x1E',  // V30_K
  (unsigned char)'\x1E',  // V30_L
  (unsigned char)'\x1E',  // V30_M
  (unsigned char)'\x1E',  // V30_N
  (unsigned char)'\x1E',  // V30_O
  (unsigned char)'\x1F',  // V31
  (unsigned char)'\x1F',  // V31_H
  (unsigned char)'\x1F',  // V31_J
  (unsigned char)'\x1F',  // V31_K
  (unsigned char)'\x1F',  // V31_L
  (unsigned char)'\x1F',  // V31_M
  (unsigned char)'\x1F',  // V31_N
  (unsigned char)'\x1F',  // V31_O
  (unsigned char)'\x0',  // V0
  (unsigned char)'\x0',  // V0_H
  (unsigned char)'\x0',  // V0_J
  (unsigned char)'\x0',  // V0_K
  (unsigned char)'\x0',  // V0_L
  (unsigned char)'\x0',  // V0_M
  (unsigned char)'\x0',  // V0_N
  (unsigned char)'\x0',  // V0_O
  (unsigned char)'\x1',  // V1
  (unsigned char)'\x1',  // V1_H
  (unsigned char)'\x1',  // V1_J
  (unsigned char)'\x1',  // V1_K
  (unsigned char)'\x1',  // V1_L
  (unsigned char)'\x1',  // V1_M
  (unsigned char)'\x1',  // V1_N
  (unsigned char)'\x1',  // V1_O
  (unsigned char)'\x2',  // V2
  (unsigned char)'\x2',  // V2_H
  (unsigned char)'\x2',  // V2_J
  (unsigned char)'\x2',  // V2_K
  (unsigned char)'\x2',  // V2_L
  (unsigned char)'\x2',  // V2_M
  (unsigned char)'\x2',  // V2_N
  (unsigned char)'\x2',  // V2_O
  (unsigned char)'\x3',  // V3
  (unsigned char)'\x3',  // V3_H
  (unsigned char)'\x3',  // V3_J
  (unsigned char)'\x3',  // V3_K
  (unsigned char)'\x3',  // V3_L
  (unsigned char)'\x3',  // V3_M
  (unsigned char)'\x3',  // V3_N
  (unsigned char)'\x3',  // V3_O
  (unsigned char)'\x4',  // V4
  (unsigned char)'\x4',  // V4_H
  (unsigned char)'\x4',  // V4_J
  (unsigned char)'\x4',  // V4_K
  (unsigned char)'\x4',  // V4_L
  (unsigned char)'\x4',  // V4_M
  (unsigned char)'\x4',  // V4_N
  (unsigned char)'\x4',  // V4_O
  (unsigned char)'\x5',  // V5
  (unsigned char)'\x5',  // V5_H
  (unsigned char)'\x5',  // V5_J
  (unsigned char)'\x5',  // V5_K
  (unsigned char)'\x5',  // V5_L
  (unsigned char)'\x5',  // V5_M
  (unsigned char)'\x5',  // V5_N
  (unsigned char)'\x5',  // V5_O
  (unsigned char)'\x6',  // V6
  (unsigned char)'\x6',  // V6_H
  (unsigned char)'\x6',  // V6_J
  (unsigned char)'\x6',  // V6_K
  (unsigned char)'\x6',  // V6_L
  (unsigned char)'\x6',  // V6_M
  (unsigned char)'\x6',  // V6_N
  (unsigned char)'\x6',  // V6_O
  (unsigned char)'\x7',  // V7
  (unsigned char)'\x7',  // V7_H
  (unsigned char)'\x7',  // V7_J
  (unsigned char)'\x7',  // V7_K
  (unsigned char)'\x7',  // V7_L
  (unsigned char)'\x7',  // V7_M
  (unsigned char)'\x7',  // V7_N
  (unsigned char)'\x7',  // V7_O
  (unsigned char)'\x8',  // V8
  (unsigned char)'\x8',  // V8_H
  (unsigned char)'\x8',  // V8_J
  (unsigned char)'\x8',  // V8_K
  (unsigned char)'\x8',  // V8_L
  (unsigned char)'\x8',  // V8_M
  (unsigned char)'\x8',  // V8_N
  (unsigned char)'\x8',  // V8_O
  (unsigned char)'\x9',  // V9
  (unsigned char)'\x9',  // V9_H
  (unsigned char)'\x9',  // V9_J
  (unsigned char)'\x9',  // V9_K
  (unsigned char)'\x9',  // V9_L
  (unsigned char)'\x9',  // V9_M
  (unsigned char)'\x9',  // V9_N
  (unsigned char)'\x9',  // V9_O
  (unsigned char)'\xA',  // V10
  (unsigned char)'\xA',  // V10_H
  (unsigned char)'\xA',  // V10_J
  (unsigned char)'\xA',  // V10_K
  (unsigned char)'\xA',  // V10_L
  (unsigned char)'\xA',  // V10_M
  (unsigned char)'\xA',  // V10_N
  (unsigned char)'\xA',  // V10_O
  (unsigned char)'\xB',  // V11
  (unsigned char)'\xB',  // V11_H
  (unsigned char)'\xB',  // V11_J
  (unsigned char)'\xB',  // V11_K
  (unsigned char)'\xB',  // V11_L
  (unsigned char)'\xB',  // V11_M
  (unsigned char)'\xB',  // V11_N
  (unsigned char)'\xB',  // V11_O
  (unsigned char)'\xC',  // V12
  (unsigned char)'\xC',  // V12_H
  (unsigned char)'\xC',  // V12_J
  (unsigned char)'\xC',  // V12_K
  (unsigned char)'\xC',  // V12_L
  (unsigned char)'\xC',  // V12_M
  (unsigned char)'\xC',  // V12_N
  (unsigned char)'\xC',  // V12_O
  (unsigned char)'\xD',  // V13
  (unsigned char)'\xD',  // V13_H
  (unsigned char)'\xD',  // V13_J
  (unsigned char)'\xD',  // V13_K
  (unsigned char)'\xD',  // V13_L
  (unsigned char)'\xD',  // V13_M
  (unsigned char)'\xD',  // V13_N
  (unsigned char)'\xD',  // V13_O
  (unsigned char)'\xE',  // V14
  (unsigned char)'\xE',  // V14_H
  (unsigned char)'\xE',  // V14_J
  (unsigned char)'\xE',  // V14_K
  (unsigned char)'\xE',  // V14_L
  (unsigned char)'\xE',  // V14_M
  (unsigned char)'\xE',  // V14_N
  (unsigned char)'\xE',  // V14_O
  (unsigned char)'\xF',  // V15
  (unsigned char)'\xF',  // V15_H
  (unsigned char)'\xF',  // V15_J
  (unsigned char)'\xF',  // V15_K
  (unsigned char)'\xF',  // V15_L
  (unsigned char)'\xF',  // V15_M
  (unsigned char)'\xF',  // V15_N
  (unsigned char)'\xF',  // V15_O
  (unsigned char)'\x0',  // P0
  (unsigned char)'\x1',  // P1
  (unsigned char)'\x2',  // P2
  (unsigned char)'\x3',  // P3
  (unsigned char)'\x4',  // P4
  (unsigned char)'\x5',  // P5
  (unsigned char)'\x6',  // P6
  (unsigned char)'\x7',  // P7
  (unsigned char)'\x8',  // P8
  (unsigned char)'\x9',  // P9
  (unsigned char)'\xA',  // P10
  (unsigned char)'\xB',  // P11
  (unsigned char)'\xC',  // P12
  (unsigned char)'\xD',  // P13
  (unsigned char)'\xE',  // P14
  (unsigned char)'\xF',  // P15
  (unsigned char)'\x20' // no trailing comma  // RFLAGS
};


//------------------Define classes derived from MachOper---------------------
MachOper  *labelOper::clone() const {
  return  new labelOper(_label, _block_num);
}
uint labelOper::opcode() const { return LABEL; }

const RegMask *sRegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

MachOper  *methodOper::clone() const {
  return  new methodOper(_method);
}
uint methodOper::opcode() const { return METHOD; }

const RegMask *iRegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *iRegINoSpOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &NO_SPECIAL_REG32_mask();
}

const RegMask *iRegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG_mask();
}

const RegMask *iRegLNoSpOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &NO_SPECIAL_REG_mask();
}

const RegMask *iRegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *iRegPNoSpOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &NO_SPECIAL_PTR_REG_mask();
}

const RegMask *iRegP_R0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R0_REG_mask();
}

const RegMask *iRegP_R1Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R1_REG_mask();
}

const RegMask *iRegP_R2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R2_REG_mask();
}

const RegMask *iRegP_R3Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R3_REG_mask();
}

const RegMask *iRegP_R4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R4_REG_mask();
}

const RegMask *iRegP_R5Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R5_REG_mask();
}

const RegMask *iRegP_R10Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R10_REG_mask();
}

const RegMask *iRegL_R0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R0_REG_mask();
}

const RegMask *iRegL_R2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R2_REG_mask();
}

const RegMask *iRegL_R3Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R3_REG_mask();
}

const RegMask *iRegL_R11Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R11_REG_mask();
}

const RegMask *iRegP_FPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &FP_REG_mask();
}

const RegMask *iRegI_R0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_R0_REG_mask();
}

const RegMask *iRegI_R2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_R2_REG_mask();
}

const RegMask *iRegI_R3Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_R3_REG_mask();
}

const RegMask *iRegI_R4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_R4_REG_mask();
}

const RegMask *iRegNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *iRegN_R0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R0_REG_mask();
}

const RegMask *iRegN_R2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R2_REG_mask();
}

const RegMask *iRegN_R3Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &R3_REG_mask();
}

const RegMask *iRegNNoSpOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &NO_SPECIAL_REG32_mask();
}

const RegMask *iRegIHeapbaseOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &HEAPBASE_REG_mask();
}

const RegMask *vRegFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &FLOAT_REG_mask();
}

const RegMask *vRegDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &DOUBLE_REG_mask();
}

const RegMask *vRegOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORA_REG_mask();
}

const RegMask *vecDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORD_REG_mask();
}

const RegMask *vecXOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORX_REG_mask();
}

const RegMask *vRegD_V0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V0_REG_mask();
}

const RegMask *vRegD_V1Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V1_REG_mask();
}

const RegMask *vRegD_V2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V2_REG_mask();
}

const RegMask *vRegD_V3Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V3_REG_mask();
}

const RegMask *vRegD_V4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V4_REG_mask();
}

const RegMask *vRegD_V5Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V5_REG_mask();
}

const RegMask *vRegD_V6Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V6_REG_mask();
}

const RegMask *vRegD_V7Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V7_REG_mask();
}

const RegMask *vRegD_V8Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V8_REG_mask();
}

const RegMask *vRegD_V9Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V9_REG_mask();
}

const RegMask *vRegD_V10Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V10_REG_mask();
}

const RegMask *vRegD_V11Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V11_REG_mask();
}

const RegMask *vRegD_V12Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V12_REG_mask();
}

const RegMask *vRegD_V13Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V13_REG_mask();
}

const RegMask *vRegD_V14Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V14_REG_mask();
}

const RegMask *vRegD_V15Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V15_REG_mask();
}

const RegMask *vRegD_V16Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V16_REG_mask();
}

const RegMask *vRegD_V17Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V17_REG_mask();
}

const RegMask *vRegD_V18Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V18_REG_mask();
}

const RegMask *vRegD_V19Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V19_REG_mask();
}

const RegMask *vRegD_V20Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V20_REG_mask();
}

const RegMask *vRegD_V21Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V21_REG_mask();
}

const RegMask *vRegD_V22Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V22_REG_mask();
}

const RegMask *vRegD_V23Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V23_REG_mask();
}

const RegMask *vRegD_V24Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V24_REG_mask();
}

const RegMask *vRegD_V25Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V25_REG_mask();
}

const RegMask *vRegD_V26Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V26_REG_mask();
}

const RegMask *vRegD_V27Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V27_REG_mask();
}

const RegMask *vRegD_V28Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V28_REG_mask();
}

const RegMask *vRegD_V29Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V29_REG_mask();
}

const RegMask *vRegD_V30Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V30_REG_mask();
}

const RegMask *vRegD_V31Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &V31_REG_mask();
}

const RegMask *pRegOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PR_REG_mask();
}

const RegMask *pRegGovOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &GOV_PR_mask();
}

const RegMask *pRegGov_P0Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &P0_REG_mask();
}

const RegMask *pRegGov_P1Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &P1_REG_mask();
}

const RegMask *rFlagsRegOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_FLAGS_mask();
}

const RegMask *rFlagsRegUOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_FLAGS_mask();
}

const RegMask *inline_cache_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &METHOD_REG_mask();
}

const RegMask *thread_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &THREAD_REG_mask();
}

const RegMask *lr_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LR_REG_mask();
}

const RegMask *indirectOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indIndexScaledI2LOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &PTR_REG_mask();
  case 1: return &ANY_REG32_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexScaledOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &PTR_REG_mask();
  case 1: return &ANY_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexI2LOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &PTR_REG_mask();
  case 1: return &ANY_REG32_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &PTR_REG_mask();
  case 1: return &ANY_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indOffIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffI1Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffI2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffI4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffI8Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffI16Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffL1Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffL2Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffL4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffL8Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffL16Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indirectNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *indIndexScaledI2LNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *indIndexScaledNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG32_mask();
  case 1: return &ANY_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexI2LNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *indIndexNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG32_mask();
  case 1: return &ANY_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indOffINOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *indOffLNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG32_mask();
}

const RegMask *thread_anchor_pcOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *stackSlotPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *iRegL2IOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG_mask();
}

const RegMask *vmemA_indOffI4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *vmemA_indOffL4Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

//------------------Define members for classes derived from MachNode----------
// Build short branch version of this instruction
MachNode *far_cmpL_branch_signNode::short_branch_version() {
  cmpL_branch_signNode *node = new cmpL_branch_signNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *far_cmpI_branch_signNode::short_branch_version() {
  cmpI_branch_signNode *node = new cmpI_branch_signNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *far_cmpL_branch_bitNode::short_branch_version() {
  cmpL_branch_bitNode *node = new cmpL_branch_bitNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *far_cmpI_branch_bitNode::short_branch_version() {
  cmpI_branch_bitNode *node = new cmpI_branch_bitNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}


// Copy _idx, inputs and operands to new node
void MachNode::fill_new_machnode(MachNode* node) const {
  // New node must use same node index
  node->set_idx( _idx );
  // Copy machine-independent inputs
  for( uint j = 0; j < req(); j++ ) {
    node->add_req(in(j));
  }
  // Copy my operands, except for cisc position
  int nopnds = num_opnds();
  assert( node->num_opnds() == (uint)nopnds, "Must have same number of operands");
  MachOper **to = node->_opnds;
  for( int i = 0; i < nopnds; i++ ) {
    if( i != cisc_operand() ) 
      to[i] = _opnds[i]->clone();
  }
}

void overflowMulI_reg_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void overflowMulI_reg_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void overflowMulL_reg_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void overflowMulL_reg_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void branchConNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void branchConNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void branchConUNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void branchConUNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpI_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpI_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpL_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpL_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpP_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpP_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpN_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpN_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpP_narrowOop_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpP_narrowOop_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpUI_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpUI_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpUL_imm0_branchNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpUL_imm0_branchNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpL_branch_signNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpL_branch_signNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpI_branch_signNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpI_branch_signNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpL_branch_bitNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpL_branch_bitNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void cmpI_branch_bitNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void cmpI_branch_bitNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void far_cmpL_branch_signNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void far_cmpL_branch_signNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void far_cmpI_branch_signNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void far_cmpI_branch_signNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(4));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void far_cmpL_branch_bitNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void far_cmpL_branch_bitNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void far_cmpI_branch_bitNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void far_cmpI_branch_bitNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(5));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void branchLoopEndNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void branchLoopEndNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void branchLoopEndUNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void branchLoopEndUNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void CallStaticJavaDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallDynamicJavaDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallRuntimeDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallLeafDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallLeafNoFPDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallNativeDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

int loadBNode::reloc() const {
  return 1;
}

int loadB2LNode::reloc() const {
  return 1;
}

int loadUBNode::reloc() const {
  return 1;
}

int loadUB2LNode::reloc() const {
  return 1;
}

int loadSNode::reloc() const {
  return 1;
}

int loadS2LNode::reloc() const {
  return 1;
}

int loadUSNode::reloc() const {
  return 1;
}

int loadUS2LNode::reloc() const {
  return 1;
}

int loadINode::reloc() const {
  return 1;
}

int loadI2LNode::reloc() const {
  return 1;
}

int loadUI2LNode::reloc() const {
  return 1;
}

int loadLNode::reloc() const {
  return 1;
}

int loadRangeNode::reloc() const {
  return 1;
}

int loadPNode::reloc() const {
  return 1;
}

int loadNNode::reloc() const {
  return 1;
}

int loadKlassNode::reloc() const {
  return 1;
}

int loadNKlassNode::reloc() const {
  return 1;
}

int loadFNode::reloc() const {
  return 1;
}

int loadDNode::reloc() const {
  return 1;
}

int loadConPNode::reloc() const {
  return 1;
}

int loadConP0Node::reloc() const {
  return 1;
}

int loadConP1Node::reloc() const {
  return 1;
}

int loadByteMapBaseNode::reloc() const {
  return 1;
}

int loadConF_packedNode::reloc() const {
  return 2;
}

int loadConFNode::reloc() const {
  return 2;
}

int loadConD_packedNode::reloc() const {
  return 2;
}

int loadConDNode::reloc() const {
  return 2;
}

int storeimmCM0Node::reloc() const {
  return 2;
}

int storeimmCM0_orderedNode::reloc() const {
  return 2;
}

int storeBNode::reloc() const {
  return 3;
}

int storeimmB0Node::reloc() const {
  return 2;
}

int storeCNode::reloc() const {
  return 3;
}

int storeimmC0Node::reloc() const {
  return 2;
}

int storeINode::reloc() const {
  return 3;
}

int storeimmI0Node::reloc() const {
  return 2;
}

int storeLNode::reloc() const {
  return 2;
}

int storeimmL0Node::reloc() const {
  return 2;
}

int storePNode::reloc() const {
  return 2;
}

int storeimmP0Node::reloc() const {
  return 3;
}

int storeNNode::reloc() const {
  return 2;
}

int storeImmN0Node::reloc() const {
  return 2;
}

int storeFNode::reloc() const {
  return 2;
}

int storeDNode::reloc() const {
  return 2;
}

int storeNKlassNode::reloc() const {
  return 2;
}

int prefetchallocNode::reloc() const {
  return 1;
}

int storeB_volatileNode::reloc() const {
  return 1;
}

int storeC_volatileNode::reloc() const {
  return 1;
}

int storeI_volatileNode::reloc() const {
  return 1;
}

int bytes_reverse_intNode::reloc() const {
  return 1;
}

int bytes_reverse_unsigned_shortNode::reloc() const {
  return 1;
}

int bytes_reverse_shortNode::reloc() const {
  return 1;
}

int countLeadingZerosINode::reloc() const {
  return 1;
}

int countTrailingZerosINode::reloc() const {
  return 1;
}

int popCountINode::reloc() const {
  return 1;
}

int popCountI_memNode::reloc() const {
  return 1;
}

int popCountL_memNode::reloc() const {
  return 1;
}

int storePConditionalNode::reloc() const {
  return 1;
}

int get_and_addINode::reloc() const {
  return 1;
}

int get_and_addI_no_resNode::reloc() const {
  return 1;
}

int get_and_addIAcqNode::reloc() const {
  return 1;
}

int get_and_addI_no_resAcqNode::reloc() const {
  return 1;
}

int cmovI_reg_regNode::reloc() const {
  return 2;
}

int cmovUI_reg_regNode::reloc() const {
  return 2;
}

int cmovI_zero_regNode::reloc() const {
  return 1;
}

int cmovUI_zero_regNode::reloc() const {
  return 1;
}

int cmovI_reg_zeroNode::reloc() const {
  return 1;
}

int cmovUI_reg_zeroNode::reloc() const {
  return 1;
}

int cmovP_reg_zeroNode::reloc() const {
  return 1;
}

int cmovUP_reg_zeroNode::reloc() const {
  return 1;
}

int cmovP_zero_regNode::reloc() const {
  return 1;
}

int cmovUP_zero_regNode::reloc() const {
  return 1;
}

int addI_reg_regNode::reloc() const {
  return 2;
}

int addI_reg_immNode::reloc() const {
  return 1;
}

int addP_reg_reg_extNode::reloc() const {
  return 1;
}

int addP_reg_reg_ext_shiftNode::reloc() const {
  return 1;
}

int lshift_extNode::reloc() const {
  return 1;
}

int subI_reg_regNode::reloc() const {
  return 2;
}

int subI_reg_immNode::reloc() const {
  return 1;
}

int negI_regNode::reloc() const {
  return 1;
}

int mulINode::reloc() const {
  return 2;
}

int smulINode::reloc() const {
  return 2;
}

int smulI_0Node::reloc() const {
  return 2;
}

int maddINode::reloc() const {
  return 3;
}

int maddI_0Node::reloc() const {
  return 3;
}

int msubINode::reloc() const {
  return 3;
}

int mnegINode::reloc() const {
  return 2;
}

int mnegI_0Node::reloc() const {
  return 2;
}

int smaddLNode::reloc() const {
  return 2;
}

int smaddL_1Node::reloc() const {
  return 2;
}

int smaddL_0Node::reloc() const {
  return 2;
}

int smaddL_2Node::reloc() const {
  return 2;
}

int smsubLNode::reloc() const {
  return 2;
}

int smsubL_0Node::reloc() const {
  return 2;
}

int smnegLNode::reloc() const {
  return 2;
}

int smnegL_0Node::reloc() const {
  return 2;
}

int muladdS2INode::reloc() const {
  return 4;
}

int divINode::reloc() const {
  return 2;
}

int modINode::reloc() const {
  return 2;
}

int lShiftI_reg_regNode::reloc() const {
  return 2;
}

int lShiftI_reg_immNode::reloc() const {
  return 1;
}

int urShiftI_reg_regNode::reloc() const {
  return 2;
}

int urShiftI_reg_immNode::reloc() const {
  return 1;
}

int rShiftI_reg_regNode::reloc() const {
  return 2;
}

int rShiftI_reg_immNode::reloc() const {
  return 1;
}

int lShiftL_reg_regNode::reloc() const {
  return 1;
}

int urShiftL_reg_regNode::reloc() const {
  return 1;
}

int rShiftL_reg_regNode::reloc() const {
  return 1;
}

int regI_not_regNode::reloc() const {
  return 1;
}

int AndI_reg_not_regNode::reloc() const {
  return 2;
}

int AndI_reg_not_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_not_regNode::reloc() const {
  return 2;
}

int OrI_reg_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_not_regNode::reloc() const {
  return 2;
}

int XorI_reg_not_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_URShift_not_regNode::reloc() const {
  return 2;
}

int AndI_reg_URShift_not_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_RShift_not_regNode::reloc() const {
  return 2;
}

int AndI_reg_RShift_not_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_RotateRight_not_regNode::reloc() const {
  return 2;
}

int AndI_reg_RotateRight_not_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_LShift_not_regNode::reloc() const {
  return 2;
}

int AndI_reg_LShift_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_URShift_not_regNode::reloc() const {
  return 2;
}

int XorI_reg_URShift_not_reg_1Node::reloc() const {
  return 2;
}

int XorI_reg_URShift_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_URShift_not_reg_2Node::reloc() const {
  return 2;
}

int XorI_reg_RShift_not_regNode::reloc() const {
  return 2;
}

int XorI_reg_RShift_not_reg_1Node::reloc() const {
  return 2;
}

int XorI_reg_RShift_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_RShift_not_reg_2Node::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_not_regNode::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_not_reg_1Node::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_not_reg_2Node::reloc() const {
  return 2;
}

int XorI_reg_LShift_not_regNode::reloc() const {
  return 2;
}

int XorI_reg_LShift_not_reg_1Node::reloc() const {
  return 2;
}

int XorI_reg_LShift_not_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_LShift_not_reg_2Node::reloc() const {
  return 2;
}

int OrI_reg_URShift_not_regNode::reloc() const {
  return 2;
}

int OrI_reg_URShift_not_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_RShift_not_regNode::reloc() const {
  return 2;
}

int OrI_reg_RShift_not_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_RotateRight_not_regNode::reloc() const {
  return 2;
}

int OrI_reg_RotateRight_not_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_LShift_not_regNode::reloc() const {
  return 2;
}

int OrI_reg_LShift_not_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_URShift_regNode::reloc() const {
  return 2;
}

int AndI_reg_URShift_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_RShift_regNode::reloc() const {
  return 2;
}

int AndI_reg_RShift_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_LShift_regNode::reloc() const {
  return 2;
}

int AndI_reg_LShift_reg_0Node::reloc() const {
  return 2;
}

int AndI_reg_RotateRight_regNode::reloc() const {
  return 2;
}

int AndI_reg_RotateRight_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_URShift_regNode::reloc() const {
  return 2;
}

int XorI_reg_URShift_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_RShift_regNode::reloc() const {
  return 2;
}

int XorI_reg_RShift_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_LShift_regNode::reloc() const {
  return 2;
}

int XorI_reg_LShift_reg_0Node::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_regNode::reloc() const {
  return 2;
}

int XorI_reg_RotateRight_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_URShift_regNode::reloc() const {
  return 2;
}

int OrI_reg_URShift_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_RShift_regNode::reloc() const {
  return 2;
}

int OrI_reg_RShift_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_LShift_regNode::reloc() const {
  return 2;
}

int OrI_reg_LShift_reg_0Node::reloc() const {
  return 2;
}

int OrI_reg_RotateRight_regNode::reloc() const {
  return 2;
}

int OrI_reg_RotateRight_reg_0Node::reloc() const {
  return 2;
}

int AddI_reg_URShift_regNode::reloc() const {
  return 2;
}

int AddI_reg_URShift_reg_0Node::reloc() const {
  return 2;
}

int AddI_reg_RShift_regNode::reloc() const {
  return 2;
}

int AddI_reg_RShift_reg_0Node::reloc() const {
  return 2;
}

int AddI_reg_LShift_regNode::reloc() const {
  return 2;
}

int AddI_reg_LShift_reg_0Node::reloc() const {
  return 2;
}

int SubI_reg_URShift_regNode::reloc() const {
  return 2;
}

int SubI_reg_RShift_regNode::reloc() const {
  return 2;
}

int SubI_reg_LShift_regNode::reloc() const {
  return 2;
}

int sbfmwINode::reloc() const {
  return 1;
}

int ubfmwINode::reloc() const {
  return 1;
}

int ubfxwINode::reloc() const {
  return 1;
}

int ubfxIConvI2LNode::reloc() const {
  return 1;
}

int ubfizwINode::reloc() const {
  return 1;
}

int ubfizwIConvI2LNode::reloc() const {
  return 1;
}

int ubfizIConvI2LNode::reloc() const {
  return 1;
}

int extrOrINode::reloc() const {
  return 2;
}

int extrOrI_0Node::reloc() const {
  return 2;
}

int extrAddINode::reloc() const {
  return 2;
}

int extrAddI_0Node::reloc() const {
  return 2;
}

int AddExtINode::reloc() const {
  return 1;
}

int AddExtI_0Node::reloc() const {
  return 1;
}

int SubExtINode::reloc() const {
  return 1;
}

int AddExtI_sxthNode::reloc() const {
  return 2;
}

int AddExtI_sxth_0Node::reloc() const {
  return 2;
}

int AddExtI_sxtbNode::reloc() const {
  return 2;
}

int AddExtI_sxtb_0Node::reloc() const {
  return 2;
}

int AddExtI_uxtbNode::reloc() const {
  return 2;
}

int AddExtI_uxtb_0Node::reloc() const {
  return 2;
}

int AddExtI_uxtb_andNode::reloc() const {
  return 2;
}

int AddExtI_uxtb_and_0Node::reloc() const {
  return 2;
}

int AddExtI_uxth_andNode::reloc() const {
  return 2;
}

int AddExtI_uxth_and_0Node::reloc() const {
  return 2;
}

int SubExtI_uxtb_andNode::reloc() const {
  return 2;
}

int SubExtI_uxth_andNode::reloc() const {
  return 2;
}

int AddExtI_sxtb_shiftNode::reloc() const {
  return 2;
}

int AddExtI_sxtb_shift_0Node::reloc() const {
  return 2;
}

int AddExtI_sxth_shiftNode::reloc() const {
  return 2;
}

int AddExtI_sxth_shift_0Node::reloc() const {
  return 2;
}

int SubExtI_sxtb_shiftNode::reloc() const {
  return 2;
}

int SubExtI_sxth_shiftNode::reloc() const {
  return 2;
}

int AddExtI_shiftNode::reloc() const {
  return 1;
}

int AddExtI_shift_0Node::reloc() const {
  return 1;
}

int SubExtI_shiftNode::reloc() const {
  return 1;
}

int AddExtI_uxtb_and_shiftNode::reloc() const {
  return 2;
}

int AddExtI_uxtb_and_shift_0Node::reloc() const {
  return 2;
}

int AddExtI_uxth_and_shiftNode::reloc() const {
  return 2;
}

int AddExtI_uxth_and_shift_0Node::reloc() const {
  return 2;
}

int SubExtI_uxtb_and_shiftNode::reloc() const {
  return 2;
}

int SubExtI_uxth_and_shiftNode::reloc() const {
  return 2;
}

int mnsubF_reg_regNode::reloc() const {
  return 1;
}

int mnsubD_reg_regNode::reloc() const {
  return 1;
}

int absI_regNode::reloc() const {
  return 1;
}

int andI_reg_regNode::reloc() const {
  return 2;
}

int andI_reg_immNode::reloc() const {
  return 1;
}

int orI_reg_regNode::reloc() const {
  return 2;
}

int orI_reg_immNode::reloc() const {
  return 1;
}

int xorI_reg_regNode::reloc() const {
  return 2;
}

int xorI_reg_immNode::reloc() const {
  return 1;
}

int convI2L_reg_regNode::reloc() const {
  return 1;
}

int convUI2L_reg_regNode::reloc() const {
  return 1;
}

int convI2BNode::reloc() const {
  return 1;
}

int convI2F_reg_regNode::reloc() const {
  return 1;
}

int convI2D_reg_regNode::reloc() const {
  return 1;
}

int overflowAddI_reg_regNode::reloc() const {
  return 2;
}

int overflowAddI_reg_immNode::reloc() const {
  return 1;
}

int overflowSubI_reg_regNode::reloc() const {
  return 2;
}

int overflowSubI_reg_immNode::reloc() const {
  return 1;
}

int overflowNegI_regNode::reloc() const {
  return 1;
}

int overflowMulI_regNode::reloc() const {
  return 2;
}

int overflowMulI_reg_branchNode::reloc() const {
  return 2;
}

int testP_regNode::reloc() const {
  return 1;
}

int compF_reg_zeroNode::reloc() const {
  return 1;
}

int compD_reg_zeroNode::reloc() const {
  return 1;
}

int compF3_reg_immF0Node::reloc() const {
  return 1;
}

int compD3_reg_immD0Node::reloc() const {
  return 1;
}

int cmpLTMask_reg_regNode::reloc() const {
  return 2;
}

int cmpLTMask_reg_zeroNode::reloc() const {
  return 1;
}

int cmpI_imm0_branchNode::reloc() const {
  return 1;
}

int cmpP_imm0_branchNode::reloc() const {
  return 1;
}

int cmpP_narrowOop_imm0_branchNode::reloc() const {
  return 1;
}

int cmpUI_imm0_branchNode::reloc() const {
  return 1;
}

int cmpI_branch_signNode::reloc() const {
  return 1;
}

int cmpI_branch_bitNode::reloc() const {
  return 1;
}

int far_cmpI_branch_signNode::reloc() const {
  return 1;
}

int far_cmpI_branch_bitNode::reloc() const {
  return 1;
}

int cmpI_andNode::reloc() const {
  return 1;
}

int cmpI_and_regNode::reloc() const {
  return 2;
}

int safePointNode::reloc() const {
  return 1;
}

int CallStaticJavaDirectNode::reloc() const {
  return 1;
}

int CallDynamicJavaDirectNode::reloc() const {
  return 1;
}

int CallRuntimeDirectNode::reloc() const {
  return 1;
}

int CallLeafDirectNode::reloc() const {
  return 1;
}

int CallLeafNoFPDirectNode::reloc() const {
  return 1;
}

int CallNativeDirectNode::reloc() const {
  return 1;
}

int TailCalljmpIndNode::reloc() const {
  return 1;
}

int TailjmpIndNode::reloc() const {
  return 1;
}

int RethrowExceptionNode::reloc() const {
  return 1;
}

int RetNode::reloc() const {
  return 1;
}

int partialSubtypeCheckVsZeroNode::reloc() const {
  return 1;
}

int loadV2Node::reloc() const {
  return 1;
}

int loadV4Node::reloc() const {
  return 1;
}

int loadV8Node::reloc() const {
  return 1;
}

int loadV16Node::reloc() const {
  return 1;
}

int storeV2Node::reloc() const {
  return 2;
}

int storeV4Node::reloc() const {
  return 2;
}

int storeV8Node::reloc() const {
  return 2;
}

int storeV16Node::reloc() const {
  return 2;
}

int reduce_add8BNode::reloc() const {
  return 1;
}

int reduce_add16BNode::reloc() const {
  return 1;
}

int reduce_add4SNode::reloc() const {
  return 1;
}

int reduce_add8SNode::reloc() const {
  return 1;
}

int reduce_mul8BNode::reloc() const {
  return 1;
}

int reduce_mul16BNode::reloc() const {
  return 1;
}

int reduce_mul4SNode::reloc() const {
  return 1;
}

int reduce_mul8SNode::reloc() const {
  return 1;
}

int reduce_max8BNode::reloc() const {
  return 1;
}

int reduce_max16BNode::reloc() const {
  return 1;
}

int reduce_max4SNode::reloc() const {
  return 1;
}

int reduce_max8SNode::reloc() const {
  return 1;
}

int reduce_max4INode::reloc() const {
  return 1;
}

int reduce_min8BNode::reloc() const {
  return 1;
}

int reduce_min16BNode::reloc() const {
  return 1;
}

int reduce_min4SNode::reloc() const {
  return 1;
}

int reduce_min8SNode::reloc() const {
  return 1;
}

int reduce_min4INode::reloc() const {
  return 1;
}

int reduce_max2INode::reloc() const {
  return 1;
}

int reduce_min2INode::reloc() const {
  return 1;
}

int reduce_and8BNode::reloc() const {
  return 1;
}

int reduce_orr8BNode::reloc() const {
  return 1;
}

int reduce_eor8BNode::reloc() const {
  return 1;
}

int reduce_and16BNode::reloc() const {
  return 1;
}

int reduce_orr16BNode::reloc() const {
  return 1;
}

int reduce_eor16BNode::reloc() const {
  return 1;
}

int reduce_and4SNode::reloc() const {
  return 1;
}

int reduce_orr4SNode::reloc() const {
  return 1;
}

int reduce_eor4SNode::reloc() const {
  return 1;
}

int reduce_and8SNode::reloc() const {
  return 1;
}

int reduce_orr8SNode::reloc() const {
  return 1;
}

int reduce_eor8SNode::reloc() const {
  return 1;
}

int reduce_and2INode::reloc() const {
  return 1;
}

int reduce_orr2INode::reloc() const {
  return 1;
}

int reduce_eor2INode::reloc() const {
  return 1;
}

int reduce_and4INode::reloc() const {
  return 1;
}

int reduce_orr4INode::reloc() const {
  return 1;
}

int reduce_eor4INode::reloc() const {
  return 1;
}

int insert8BNode::reloc() const {
  return 1;
}

int insert16BNode::reloc() const {
  return 1;
}

int insert4SNode::reloc() const {
  return 1;
}

int insert8SNode::reloc() const {
  return 1;
}

int insert2INode::reloc() const {
  return 1;
}

int insert4INode::reloc() const {
  return 1;
}

int replicate8BNode::reloc() const {
  return 1;
}

int replicate16BNode::reloc() const {
  return 1;
}

int replicate4SNode::reloc() const {
  return 1;
}

int replicate8SNode::reloc() const {
  return 1;
}

int replicate2INode::reloc() const {
  return 1;
}

int replicate4INode::reloc() const {
  return 1;
}

int reduce_add2INode::reloc() const {
  return 1;
}

int reduce_add4INode::reloc() const {
  return 1;
}

int reduce_mul2INode::reloc() const {
  return 1;
}

int reduce_mul4INode::reloc() const {
  return 1;
}

int vshiftcnt8BNode::reloc() const {
  return 1;
}

int vshiftcnt8B_0Node::reloc() const {
  return 1;
}

int vshiftcnt16BNode::reloc() const {
  return 1;
}

int vshiftcnt16B_0Node::reloc() const {
  return 1;
}

int loadVNode::reloc() const {
  return 1;
}

int storeVNode::reloc() const {
  return 2;
}

int loadV2_vregNode::reloc() const {
  return 1;
}

int storeV2_vregNode::reloc() const {
  return 2;
}

int loadV4_vregNode::reloc() const {
  return 1;
}

int storeV4_vregNode::reloc() const {
  return 2;
}

int loadV8_vregNode::reloc() const {
  return 1;
}

int storeV8_vregNode::reloc() const {
  return 2;
}

int loadV16_vregNode::reloc() const {
  return 1;
}

int storeV16_vregNode::reloc() const {
  return 2;
}

int loadV_partialNode::reloc() const {
  return 1;
}

int storeV_partialNode::reloc() const {
  return 2;
}

int loadV_maskedNode::reloc() const {
  return 1;
}

int loadV_masked_partialNode::reloc() const {
  return 1;
}

int storeV_maskedNode::reloc() const {
  return 2;
}

int storeV_masked_partialNode::reloc() const {
  return 2;
}

int vmaskAllINode::reloc() const {
  return 1;
}

int reduce_addINode::reloc() const {
  return 1;
}

int reduce_addI_partialNode::reloc() const {
  return 1;
}

int reduce_addI_maskedNode::reloc() const {
  return 1;
}

int reduce_addI_masked_partialNode::reloc() const {
  return 1;
}

int reduce_andINode::reloc() const {
  return 1;
}

int reduce_andI_partialNode::reloc() const {
  return 1;
}

int reduce_andI_maskedNode::reloc() const {
  return 1;
}

int reduce_andI_masked_partialNode::reloc() const {
  return 1;
}

int reduce_orINode::reloc() const {
  return 1;
}

int reduce_orI_partialNode::reloc() const {
  return 1;
}

int reduce_orI_maskedNode::reloc() const {
  return 1;
}

int reduce_orI_masked_partialNode::reloc() const {
  return 1;
}

int reduce_eorINode::reloc() const {
  return 1;
}

int reduce_eorI_partialNode::reloc() const {
  return 1;
}

int reduce_eorI_maskedNode::reloc() const {
  return 1;
}

int reduce_eorI_masked_partialNode::reloc() const {
  return 1;
}

int reduce_maxINode::reloc() const {
  return 1;
}

int reduce_maxI_partialNode::reloc() const {
  return 1;
}

int reduce_maxI_maskedNode::reloc() const {
  return 1;
}

int reduce_maxI_masked_partialNode::reloc() const {
  return 1;
}

int reduce_minINode::reloc() const {
  return 1;
}

int reduce_minI_partialNode::reloc() const {
  return 1;
}

int reduce_minI_maskedNode::reloc() const {
  return 1;
}

int reduce_minI_masked_partialNode::reloc() const {
  return 1;
}

int replicateBNode::reloc() const {
  return 1;
}

int replicateSNode::reloc() const {
  return 1;
}

int replicateINode::reloc() const {
  return 1;
}

int vshiftcntBNode::reloc() const {
  return 1;
}

int vshiftcntB_0Node::reloc() const {
  return 1;
}

int vshiftcntSNode::reloc() const {
  return 1;
}

int vshiftcntS_0Node::reloc() const {
  return 1;
}

int vshiftcntINode::reloc() const {
  return 1;
}

int vshiftcntI_0Node::reloc() const {
  return 1;
}

int vshiftcntLNode::reloc() const {
  return 1;
}

int vshiftcntL_0Node::reloc() const {
  return 1;
}

int insertI_smallNode::reloc() const {
  return 1;
}

int insertINode::reloc() const {
  return 1;
}

int zLoadPNode::reloc() const {
  return 1;
}


void loadBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2945 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsbw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 16793 "ad_aarch64.cpp"
  }
}

void loadB2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2953 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsb, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 16810 "ad_aarch64.cpp"
  }
}

void loadUBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 16827 "ad_aarch64.cpp"
  }
}

void loadUB2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 16844 "ad_aarch64.cpp"
  }
}

void loadSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2977 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrshw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 16861 "ad_aarch64.cpp"
  }
}

void loadS2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2985 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsh, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 16878 "ad_aarch64.cpp"
  }
}

void loadUSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3001 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 16895 "ad_aarch64.cpp"
  }
}

void loadUS2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3001 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 16912 "ad_aarch64.cpp"
  }
}

void loadINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3017 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 16929 "ad_aarch64.cpp"
  }
}

void loadI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3025 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 16946 "ad_aarch64.cpp"
  }
}

void loadUI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {

#line 3017 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 16964 "ad_aarch64.cpp"
  }
}

void loadLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3033 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 16981 "ad_aarch64.cpp"
  }
}

void loadRangeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3017 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 16998 "ad_aarch64.cpp"
  }
}

void loadPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3033 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17015 "ad_aarch64.cpp"
  }
}

void loadNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3017 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17032 "ad_aarch64.cpp"
  }
}

void loadKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3033 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17049 "ad_aarch64.cpp"
  }
}

void loadNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3017 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17066 "ad_aarch64.cpp"
  }
}

void loadFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3041 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17083 "ad_aarch64.cpp"
  }
}

void loadDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3049 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, dst_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17100 "ad_aarch64.cpp"
  }
}

void loadConINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 3490 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    uint32_t con = (uint32_t)opnd_array(1)->constant();
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    if (con == 0) {
      __ movw(dst_reg, zr);
    } else {
      __ movw(dst_reg, con);
    }
  
#line 17122 "ad_aarch64.cpp"
  }
}

void loadConLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 3501 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    uint64_t con = (uint64_t)opnd_array(1)->constantL();
    if (con == 0) {
      __ mov(dst_reg, zr);
    } else {
      __ mov(dst_reg, con);
    }
  
#line 17144 "ad_aarch64.cpp"
  }
}

void loadConPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3512 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    address con = (address)opnd_array(1)->constant();
    if (con == NULL || con == (address)1) {
      ShouldNotReachHere();
    } else {
      relocInfo::relocType rtype = opnd_array(1)->constant_reloc();
      if (rtype == relocInfo::oop_type) {
        __ movoop(dst_reg, (jobject)con, /*immediate*/true);
      } else if (rtype == relocInfo::metadata_type) {
        __ mov_metadata(dst_reg, (Metadata*)con);
      } else {
        assert(rtype == relocInfo::none, "unexpected reloc type");
        if (con < (address)(uintptr_t)os::vm_page_size()) {
          __ mov(dst_reg, con);
        } else {
          uint64_t offset;
          __ adrp(dst_reg, con, offset);
          __ add(dst_reg, dst_reg, offset);
        }
      }
    }
  
#line 17180 "ad_aarch64.cpp"
  }
}

void loadConP0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3537 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ mov(dst_reg, zr);
  
#line 17197 "ad_aarch64.cpp"
  }
}

void loadConP1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3543 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ mov(dst_reg, (uint64_t)1);
  
#line 17214 "ad_aarch64.cpp"
  }
}

void loadByteMapBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3549 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    __ load_byte_map_base(opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 17230 "ad_aarch64.cpp"
  }
}

void loadConNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3554 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    address con = (address)opnd_array(1)->constant();
    if (con == NULL) {
      ShouldNotReachHere();
    } else {
      relocInfo::relocType rtype = opnd_array(1)->constant_reloc();
      assert(rtype == relocInfo::oop_type, "unexpected reloc type");
      __ set_narrow_oop(dst_reg, (jobject)con);
    }
  
#line 17254 "ad_aarch64.cpp"
  }
}

void loadConN0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3567 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ mov(dst_reg, zr);
  
#line 17271 "ad_aarch64.cpp"
  }
}

void loadConNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 3573 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    address con = (address)opnd_array(1)->constant();
    if (con == NULL) {
      ShouldNotReachHere();
    } else {
      relocInfo::relocType rtype = opnd_array(1)->constant_reloc();
      assert(rtype == relocInfo::metadata_type, "unexpected reloc type");
      __ set_narrow_klass(dst_reg, (Klass *)con);
    }
  
#line 17295 "ad_aarch64.cpp"
  }
}

void loadConF_packedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 7777 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), (double)opnd_array(1)->constantF());
  
#line 17311 "ad_aarch64.cpp"
  }
}

void loadConFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 7795 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldrs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 17327 "ad_aarch64.cpp"
  }
}

void loadConFNode::eval_constant(Compile* C) {
  {

#line 7796 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
    _constant = C->output()->constant_table().add(this, opnd_array(1));
#line 17336 "ad_aarch64.cpp"
  }
}
void loadConD_packedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 7808 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->constantD());
  
#line 17351 "ad_aarch64.cpp"
  }
}

void loadConDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 7825 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldrd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 17367 "ad_aarch64.cpp"
  }
}

void loadConDNode::eval_constant(Compile* C) {
  {

#line 7826 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"
    _constant = C->output()->constant_table().add(this, opnd_array(1));
#line 17376 "ad_aarch64.cpp"
  }
}
void storeimmCM0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::strb, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 17393 "ad_aarch64.cpp"
  }
}

void storeimmCM0_orderedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3145 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

      C2_MacroAssembler _masm(&cbuf);
      __ membar(Assembler::StoreStore);
      loadStore(_masm, &MacroAssembler::strb, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 17412 "ad_aarch64.cpp"
  }
}

void storeBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3057 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strb, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 17430 "ad_aarch64.cpp"
  }
}

void storeimmB0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::strb, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 1);
  
#line 17448 "ad_aarch64.cpp"
  }
}

void storeCNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3073 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strh, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 17466 "ad_aarch64.cpp"
  }
}

void storeimmC0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::strh, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 2);
  
#line 17484 "ad_aarch64.cpp"
  }
}

void storeINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3089 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17502 "ad_aarch64.cpp"
  }
}

void storeimmI0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3097 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::strw, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17520 "ad_aarch64.cpp"
  }
}

void storeLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3105 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    // we sometimes get asked to store the stack pointer into the
    // current thread -- we cannot do that directly on AArch64
    if (src_reg == r31_sp) {
      C2_MacroAssembler _masm(&cbuf);
      assert(as_Register(opnd_array(1)->base(ra_,this,idx1)) == rthread, "unexpected store for sp");
      __ mov(rscratch2, sp);
      src_reg = rscratch2;
    }
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17546 "ad_aarch64.cpp"
  }
}

void storeimmL0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3121 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::str, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17564 "ad_aarch64.cpp"
  }
}

void storePNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3105 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    // we sometimes get asked to store the stack pointer into the
    // current thread -- we cannot do that directly on AArch64
    if (src_reg == r31_sp) {
      C2_MacroAssembler _masm(&cbuf);
      assert(as_Register(opnd_array(1)->base(ra_,this,idx1)) == rthread, "unexpected store for sp");
      __ mov(rscratch2, sp);
      src_reg = rscratch2;
    }
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17590 "ad_aarch64.cpp"
  }
}

void storeimmP0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3121 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::str, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17608 "ad_aarch64.cpp"
  }
}

void storeNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3089 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17626 "ad_aarch64.cpp"
  }
}

void storeImmN0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3097 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    loadStore(_masm, &MacroAssembler::strw, zr, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17644 "ad_aarch64.cpp"
  }
}

void storeFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3129 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strs, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17662 "ad_aarch64.cpp"
  }
}

void storeDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3137 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strd, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
  
#line 17680 "ad_aarch64.cpp"
  }
}

void storeNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3089 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, opnd_array(1)->opcode(),
               as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
  
#line 17698 "ad_aarch64.cpp"
  }
}

void prefetchallocNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {

#line 3469 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register base = as_Register(opnd_array(1)->base(ra_,this,idx1));
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    if (index == -1) {
      __ prfm(Address(base, disp), PSTL1KEEP);
    } else {
      Register index_reg = as_Register(index);
      if (disp == 0) {
        __ prfm(Address(base, index_reg, Address::lsl(scale)), PSTL1KEEP);
      } else {
        __ lea(rscratch1, Address(base, disp));
	__ prfm(Address(rscratch1, index_reg, Address::lsl(scale)), PSTL1KEEP);
      }
    }
  
#line 17728 "ad_aarch64.cpp"
  }
}

void loadB_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    MOV_VOLATILE(dst_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarb);
    __ sxtb(dst_reg, dst_reg);
  
#line 17746 "ad_aarch64.cpp"
  }
}

void loadB2L_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    MOV_VOLATILE(dst_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarb);
    __ sxtb(dst_reg, dst_reg);
  
#line 17764 "ad_aarch64.cpp"
  }
}

void loadUB_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3240 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarb);
  
#line 17780 "ad_aarch64.cpp"
  }
}

void loadUB2L_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3240 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarb);
  
#line 17796 "ad_aarch64.cpp"
  }
}

void loadS_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3245 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    MOV_VOLATILE(dst_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarh);
    __ sxthw(dst_reg, dst_reg);
  
#line 17814 "ad_aarch64.cpp"
  }
}

void loadUS_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3259 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarh);
  
#line 17830 "ad_aarch64.cpp"
  }
}

void loadUS2L_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3264 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarh);
  
#line 17846 "ad_aarch64.cpp"
  }
}

void loadS2L_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3252 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    MOV_VOLATILE(dst_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarh);
    __ sxth(dst_reg, dst_reg);
  
#line 17864 "ad_aarch64.cpp"
  }
}

void loadI_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3274 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarw);
  
#line 17880 "ad_aarch64.cpp"
  }
}

void loadUI2L_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {

#line 3274 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarw);
  
#line 17897 "ad_aarch64.cpp"
  }
}

void loadL_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3279 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldar);
  
#line 17913 "ad_aarch64.cpp"
  }
}

void loadP_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3279 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldar);
  
#line 17929 "ad_aarch64.cpp"
  }
}

void loadN_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3274 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarw);
  
#line 17945 "ad_aarch64.cpp"
  }
}

void loadF_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3284 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(rscratch1, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldarw);
    __ fmovs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), rscratch1);
  
#line 17962 "ad_aarch64.cpp"
  }
}

void loadD_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3290 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(rscratch1, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
             rscratch1, ldar);
    __ fmovd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), rscratch1);
  
#line 17979 "ad_aarch64.cpp"
  }
}

void storeB_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3205 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlrb);
  
#line 17996 "ad_aarch64.cpp"
  }
}

void storeC_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3210 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlrh);
  
#line 18013 "ad_aarch64.cpp"
  }
}

void storeI_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3215 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlrw);
  
#line 18030 "ad_aarch64.cpp"
  }
}

void storeL_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3296 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    // we sometimes get asked to store the stack pointer into the
    // current thread -- we cannot do that directly on AArch64
    if (src_reg == r31_sp) {
      C2_MacroAssembler _masm(&cbuf);
      assert(as_Register(opnd_array(1)->base(ra_,this,idx1)) == rthread, "unexpected store for sp");
      __ mov(rscratch2, sp);
      src_reg = rscratch2;
    }
    MOV_VOLATILE(src_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlr);
  
#line 18056 "ad_aarch64.cpp"
  }
}

void storeP_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3296 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    // we sometimes get asked to store the stack pointer into the
    // current thread -- we cannot do that directly on AArch64
    if (src_reg == r31_sp) {
      C2_MacroAssembler _masm(&cbuf);
      assert(as_Register(opnd_array(1)->base(ra_,this,idx1)) == rthread, "unexpected store for sp");
      __ mov(rscratch2, sp);
      src_reg = rscratch2;
    }
    MOV_VOLATILE(src_reg, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlr);
  
#line 18082 "ad_aarch64.cpp"
  }
}

void storeN_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3215 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    MOV_VOLATILE(as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */), opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlrw);
  
#line 18099 "ad_aarch64.cpp"
  }
}

void storeF_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3310 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    {
      C2_MacroAssembler _masm(&cbuf);
      FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
      __ fmovs(rscratch2, src_reg);
    }
    MOV_VOLATILE(rscratch2, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlrw);
  
#line 18121 "ad_aarch64.cpp"
  }
}

void storeD_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3320 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    {
      C2_MacroAssembler _masm(&cbuf);
      FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
      __ fmovd(rscratch2, src_reg);
    }
    MOV_VOLATILE(rscratch2, opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1),
                 rscratch1, stlr);
  
#line 18143 "ad_aarch64.cpp"
  }
}

void cacheWBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8406 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    assert(opnd_array(1)->index_position() < 0, "should be");
    assert(opnd_array(1)->disp(ra_,this,idx1)== 0, "should be");
    __ cache_wb(Address(as_Register(opnd_array(1)->base(ra_,this,idx1)), 0));
  
#line 18161 "ad_aarch64.cpp"
  }
}

void cacheWBPreSyncNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8421 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cache_wbsync(true);
  
#line 18177 "ad_aarch64.cpp"
  }
}

void cacheWBPostSyncNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8434 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cache_wbsync(false);
  
#line 18193 "ad_aarch64.cpp"
  }
}

void bytes_reverse_intNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8449 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ revw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 18209 "ad_aarch64.cpp"
  }
}

void bytes_reverse_longNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8462 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ rev(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 18225 "ad_aarch64.cpp"
  }
}

void bytes_reverse_unsigned_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8475 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ rev16w(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 18241 "ad_aarch64.cpp"
  }
}

void bytes_reverse_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8489 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ rev16w(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sbfmw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */), 0U, 15U);
  
#line 18258 "ad_aarch64.cpp"
  }
}

void countLeadingZerosINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8505 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ clzw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 18274 "ad_aarch64.cpp"
  }
}

void countLeadingZerosLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8517 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ clz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 18290 "ad_aarch64.cpp"
  }
}

void countTrailingZerosINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8530 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ rbitw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ clzw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 18307 "ad_aarch64.cpp"
  }
}

void countTrailingZerosLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8544 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ rbit(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ clz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 18324 "ad_aarch64.cpp"
  }
}

void popCountINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8566 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ movw(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */); // ensure top 32 bits 0
    __ mov(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ cnt(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ addv(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ mov(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0);
  
#line 18345 "ad_aarch64.cpp"
  }
}

void popCountI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8587 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister tmp_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, tmp_reg, opnd_array(1)->opcode(),
              as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 4);
    __ cnt(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ addv(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ mov(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0);
  
#line 18367 "ad_aarch64.cpp"
  }
}

void popCountLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8610 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mov(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ cnt(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ addv(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ mov(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0);
  
#line 18387 "ad_aarch64.cpp"
  }
}

void popCountL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8630 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister tmp_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, tmp_reg, opnd_array(1)->opcode(),
              as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), 8);
    __ cnt(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ addv(opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T8B, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */);
    __ mov(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_FloatRegister(ra_,this,idx2)/* tmp */, __ T1D, 0);
  
#line 18409 "ad_aarch64.cpp"
  }
}

void load_fenceNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8651 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ membar(Assembler::LoadLoad|Assembler::LoadStore);
  
#line 18425 "ad_aarch64.cpp"
  }
}

void unnecessary_membar_acquireNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8664 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_acquire (elided)");
  
#line 18441 "ad_aarch64.cpp"
  }
}

void membar_acquireNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8678 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_acquire");
    __ membar(Assembler::LoadLoad|Assembler::LoadStore);
  
#line 18458 "ad_aarch64.cpp"
  }
}

void membar_acquire_lockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8693 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_acquire_lock (elided)");
  
#line 18474 "ad_aarch64.cpp"
  }
}

void store_fenceNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8706 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ membar(Assembler::LoadStore|Assembler::StoreStore);
  
#line 18490 "ad_aarch64.cpp"
  }
}

void unnecessary_membar_releaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8719 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_release (elided)");
  
#line 18506 "ad_aarch64.cpp"
  }
}

void membar_releaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8732 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_release");
    __ membar(Assembler::LoadStore|Assembler::StoreStore);
  
#line 18523 "ad_aarch64.cpp"
  }
}

void membar_storestoreNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8746 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ membar(Assembler::StoreStore);
  
#line 18539 "ad_aarch64.cpp"
  }
}

void membar_storestore_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8746 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ membar(Assembler::StoreStore);
  
#line 18555 "ad_aarch64.cpp"
  }
}

void membar_release_lockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8758 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_release_lock (elided)");
  
#line 18571 "ad_aarch64.cpp"
  }
}

void unnecessary_membar_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8772 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_volatile (elided)");
  
#line 18587 "ad_aarch64.cpp"
  }
}

void membar_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8786 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ block_comment("membar_volatile");
    __ membar(Assembler::StoreLoad);
  
#line 18604 "ad_aarch64.cpp"
  }
}

void castX2PNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8803 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */!= opnd_array(1)->reg(ra_,this,idx1)/* src */) {
      __ mov(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
  
#line 18622 "ad_aarch64.cpp"
  }
}

void castP2XNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8818 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */!= opnd_array(1)->reg(ra_,this,idx1)/* src */) {
      __ mov(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
  
#line 18640 "ad_aarch64.cpp"
  }
}

void convP2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8833 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ movw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 18656 "ad_aarch64.cpp"
  }
}

void convN2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8849 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ movw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 18672 "ad_aarch64.cpp"
  }
}

void encodeHeapOopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ encode_heap_oop(d, s);
  
#line 18690 "ad_aarch64.cpp"
  }
}

void encodeHeapOop_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8877 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ encode_heap_oop_not_null(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 18706 "ad_aarch64.cpp"
  }
}

void decodeHeapOopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8889 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ decode_heap_oop(d, s);
  
#line 18724 "ad_aarch64.cpp"
  }
}

void decodeHeapOop_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8903 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ decode_heap_oop_not_null(d, s);
  
#line 18742 "ad_aarch64.cpp"
  }
}

void encodeKlass_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8921 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ encode_klass_not_null(dst_reg, src_reg);
  
#line 18760 "ad_aarch64.cpp"
  }
}

void decodeKlass_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 8936 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    if (dst_reg != src_reg) {
      __ decode_klass_not_null(dst_reg, src_reg);
    } else {
      __ decode_klass_not_null(dst_reg);
    }
  
#line 18782 "ad_aarch64.cpp"
  }
}

void checkCastPPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint checkCastPPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castPPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castPPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castIINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castIINode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castLLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castLLNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castFFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castFFNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castDDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castDDNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castVVDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castVVDNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castVVXNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castVVXNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castVVNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castVVNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castVVMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castVVMaskNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void loadPLockedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3332 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register base = as_Register(opnd_array(1)->base(ra_,this,idx1));
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    if (index == -1) {
       if (disp != 0) {
        __ lea(rscratch1, Address(base, disp));
        __ ldaxr(dst_reg, rscratch1);
      } else {
        // TODO
        // should we ever get anything other than this case?
        __ ldaxr(dst_reg, base);
      }
    } else {
      Register index_reg = as_Register(index);
      if (disp == 0) {
        __ lea(rscratch1, Address(base, index_reg, Address::lsl(scale)));
        __ ldaxr(dst_reg, rscratch1);
      } else {
        __ lea(rscratch1, Address(base, disp));
        __ lea(rscratch1, Address(rscratch1, index_reg, Address::lsl(scale)));
        __ ldaxr(dst_reg, rscratch1);
      }
    }
  
#line 18952 "ad_aarch64.cpp"
  }
}

void storePConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// heap_top_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3361 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register src_reg = as_Register(opnd_array(3)->reg(ra_,this,idx3)/* newval */);
    Register base = as_Register(opnd_array(1)->base(ra_,this,idx1));
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    if (index == -1) {
       if (disp != 0) {
        __ lea(rscratch2, Address(base, disp));
        __ stlxr(rscratch1, src_reg, rscratch2);
      } else {
        // TODO
        // should we ever get anything other than this case?
        __ stlxr(rscratch1, src_reg, base);
      }
    } else {
      Register index_reg = as_Register(index);
      if (disp == 0) {
        __ lea(rscratch2, Address(base, index_reg, Address::lsl(scale)));
        __ stlxr(rscratch1, src_reg, rscratch2);
      } else {
        __ lea(rscratch2, Address(base, disp));
        __ lea(rscratch2, Address(rscratch2, index_reg, Address::lsl(scale)));
        __ stlxr(rscratch1, src_reg, rscratch2);
      }
    }
    __ cmpw(rscratch1, zr);
  
#line 18995 "ad_aarch64.cpp"
  }
}

void storeLConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3428 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19016 "ad_aarch64.cpp"
  }
}

void storeIConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3436 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19037 "ad_aarch64.cpp"
  }
}

void compareAndSwapBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3415 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19058 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19068 "ad_aarch64.cpp"
  }
}

void compareAndSwapSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3407 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19089 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19099 "ad_aarch64.cpp"
  }
}

void compareAndSwapINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3399 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19120 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19130 "ad_aarch64.cpp"
  }
}

void compareAndSwapLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3391 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19151 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19161 "ad_aarch64.cpp"
  }
}

void compareAndSwapPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3391 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19182 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19192 "ad_aarch64.cpp"
  }
}

void compareAndSwapNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3399 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19213 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19223 "ad_aarch64.cpp"
  }
}

void compareAndSwapBAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3452 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19244 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19254 "ad_aarch64.cpp"
  }
}

void compareAndSwapSAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3444 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19275 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19285 "ad_aarch64.cpp"
  }
}

void compareAndSwapIAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3436 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19306 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19316 "ad_aarch64.cpp"
  }
}

void compareAndSwapLAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3428 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19337 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19347 "ad_aarch64.cpp"
  }
}

void compareAndSwapPAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3428 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19368 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19378 "ad_aarch64.cpp"
  }
}

void compareAndSwapNAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 3436 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    __ cmpxchg(as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, noreg);
  
#line 19399 "ad_aarch64.cpp"
  }
  {

#line 3461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register res_reg = as_Register(opnd_array(0)->reg(ra_,this)/* res */);
    __ cset(res_reg, Assembler::EQ);
  
#line 19409 "ad_aarch64.cpp"
  }
}

void compareAndExchangeBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9415 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    __ sxtbw(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19431 "ad_aarch64.cpp"
  }
}

void compareAndExchangeSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9434 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    __ sxthw(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19453 "ad_aarch64.cpp"
  }
}

void compareAndExchangeINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9453 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19474 "ad_aarch64.cpp"
  }
}

void compareAndExchangeLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9471 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19495 "ad_aarch64.cpp"
  }
}

void compareAndExchangeNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9489 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19516 "ad_aarch64.cpp"
  }
}

void compareAndExchangePNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9507 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19537 "ad_aarch64.cpp"
  }
}

void compareAndExchangeBAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9525 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    __ sxtbw(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19559 "ad_aarch64.cpp"
  }
}

void compareAndExchangeSAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9544 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    __ sxthw(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19581 "ad_aarch64.cpp"
  }
}

void compareAndExchangeIAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9563 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19602 "ad_aarch64.cpp"
  }
}

void compareAndExchangeLAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9581 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19623 "ad_aarch64.cpp"
  }
}

void compareAndExchangeNAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9599 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19644 "ad_aarch64.cpp"
  }
}

void compareAndExchangePAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9617 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ false, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 19665 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9636 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19686 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9656 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19707 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9676 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19728 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9696 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19749 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9716 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19770 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9736 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ false, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19791 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapBAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9756 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::byte, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19812 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapSAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9776 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::halfword, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19833 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapIAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9796 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19854 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapLAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9816 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19875 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapNAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9836 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::word, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19896 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapPAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9856 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
               Assembler::xword, /*acquire*/ true, /*release*/ true,
               /*weak*/ true, noreg);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* res */, Assembler::EQ);
  
#line 19917 "ad_aarch64.cpp"
  }
}

void get_and_setINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9872 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgw(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 19934 "ad_aarch64.cpp"
  }
}

void get_and_setLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9882 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchg(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 19951 "ad_aarch64.cpp"
  }
}

void get_and_setNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9892 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgw(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 19968 "ad_aarch64.cpp"
  }
}

void get_and_setPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9903 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchg(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 19985 "ad_aarch64.cpp"
  }
}

void get_and_setIAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9914 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgalw(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20002 "ad_aarch64.cpp"
  }
}

void get_and_setLAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9925 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgal(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20019 "ad_aarch64.cpp"
  }
}

void get_and_setNAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9936 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgalw(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20036 "ad_aarch64.cpp"
  }
}

void get_and_setPAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9947 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_xchgal(opnd_array(0)->as_Register(ra_,this)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20053 "ad_aarch64.cpp"
  }
}

void get_and_addLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9958 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_add(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20070 "ad_aarch64.cpp"
  }
}

void get_and_addL_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_add(noreg, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20087 "ad_aarch64.cpp"
  }
}

void get_and_addLiNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9979 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_add(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->constantL(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20104 "ad_aarch64.cpp"
  }
}

void get_and_addLi_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 9990 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_add(noreg, opnd_array(2)->constantL(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20121 "ad_aarch64.cpp"
  }
}

void get_and_addINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10000 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addw(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20138 "ad_aarch64.cpp"
  }
}

void get_and_addI_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addw(noreg, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20155 "ad_aarch64.cpp"
  }
}

void get_and_addIiNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10021 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addw(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->constant(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20172 "ad_aarch64.cpp"
  }
}

void get_and_addIi_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10032 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addw(noreg, opnd_array(2)->constant(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20189 "ad_aarch64.cpp"
  }
}

void get_and_addLAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10043 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addal(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20206 "ad_aarch64.cpp"
  }
}

void get_and_addL_no_resAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10054 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addal(noreg, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20223 "ad_aarch64.cpp"
  }
}

void get_and_addLiAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addal(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->constantL(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20240 "ad_aarch64.cpp"
  }
}

void get_and_addLi_no_resAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10076 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addal(noreg, opnd_array(2)->constantL(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20257 "ad_aarch64.cpp"
  }
}

void get_and_addIAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10087 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addalw(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20274 "ad_aarch64.cpp"
  }
}

void get_and_addI_no_resAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10098 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addalw(noreg, opnd_array(2)->as_Register(ra_,this,idx2)/* incr */, as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20291 "ad_aarch64.cpp"
  }
}

void get_and_addIiAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10109 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addalw(opnd_array(0)->as_Register(ra_,this)/* newval */, opnd_array(2)->constant(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20308 "ad_aarch64.cpp"
  }
}

void get_and_addIi_no_resAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// incr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10120 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ atomic_addalw(noreg, opnd_array(2)->constant(), as_Register(opnd_array(1)->base(ra_,this,idx1)));
  
#line 20325 "ad_aarch64.cpp"
  }
}

void cmpL3_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10140 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmp(opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* src2 */);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::NE);
    __ cnegw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::LT);
  
#line 20344 "ad_aarch64.cpp"
  }
}

void cmpL3_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10160 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int32_t con = (int32_t)opnd_array(2)->constantL();
     if (con < 0) {
      __ adds(zr, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, -con);
    } else {
      __ subs(zr, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, con);
    }
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::NE);
    __ cnegw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::LT);
  
#line 20368 "ad_aarch64.cpp"
  }
}

void cmovI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10193 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20390 "ad_aarch64.cpp"
  }
}

void cmovUI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10209 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20412 "ad_aarch64.cpp"
  }
}

void cmovI_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10234 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20434 "ad_aarch64.cpp"
  }
}

void cmovUI_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10250 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20456 "ad_aarch64.cpp"
  }
}

void cmovI_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10266 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20478 "ad_aarch64.cpp"
  }
}

void cmovUI_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20500 "ad_aarch64.cpp"
  }
}

void cmovI_reg_zero_oneNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// one
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10303 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // equivalently
    // cset(as_Register($dst$$reg),
    //      negate_condition((Assembler::Condition)$cmp$$cmpcode));
    __ csincw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20525 "ad_aarch64.cpp"
  }
}

void cmovUI_reg_zero_oneNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// one
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10322 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // equivalently
    // cset(as_Register($dst$$reg),
    //      negate_condition((Assembler::Condition)$cmp$$cmpcode));
    __ csincw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20550 "ad_aarch64.cpp"
  }
}

void cmovL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10341 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20572 "ad_aarch64.cpp"
  }
}

void cmovUL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10357 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20594 "ad_aarch64.cpp"
  }
}

void cmovL_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10375 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            zr,
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20616 "ad_aarch64.cpp"
  }
}

void cmovUL_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10391 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            zr,
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20638 "ad_aarch64.cpp"
  }
}

void cmovL_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10407 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
            zr,
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20660 "ad_aarch64.cpp"
  }
}

void cmovUL_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10423 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
            zr,
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20682 "ad_aarch64.cpp"
  }
}

void cmovP_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10439 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20704 "ad_aarch64.cpp"
  }
}

void cmovUP_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10455 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20726 "ad_aarch64.cpp"
  }
}

void cmovP_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10473 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            zr,
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20748 "ad_aarch64.cpp"
  }
}

void cmovUP_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10489 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            zr,
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20770 "ad_aarch64.cpp"
  }
}

void cmovP_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10505 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
            zr,
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20792 "ad_aarch64.cpp"
  }
}

void cmovUP_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10521 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ csel(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
            zr,
            (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20814 "ad_aarch64.cpp"
  }
}

void cmovN_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10537 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20836 "ad_aarch64.cpp"
  }
}

void cmovUN_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10553 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20858 "ad_aarch64.cpp"
  }
}

void cmovN_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10571 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20880 "ad_aarch64.cpp"
  }
}

void cmovUN_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10587 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             zr,
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src */),
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20902 "ad_aarch64.cpp"
  }
}

void cmovN_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10603 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20924 "ad_aarch64.cpp"
  }
}

void cmovUN_zero_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10619 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src */),
             zr,
             (Assembler::Condition)opnd_array(1)->ccode());
  
#line 20946 "ad_aarch64.cpp"
  }
}

void cmovF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10636 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ fcsels(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              cond);
  
#line 20969 "ad_aarch64.cpp"
  }
}

void cmovUF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10654 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ fcsels(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              cond);
  
#line 20992 "ad_aarch64.cpp"
  }
}

void cmovD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10672 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ fcseld(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              cond);
  
#line 21015 "ad_aarch64.cpp"
  }
}

void cmovUD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10690 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ fcseld(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* src2 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              cond);
  
#line 21038 "ad_aarch64.cpp"
  }
}

void addI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10719 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21057 "ad_aarch64.cpp"
  }
}

void addI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3588 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constant();
    // add has primary == 0, subtract has primary == 1
    if ((0x0 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ subw(dst_reg, src_reg, -con);
    } else {
      __ addw(dst_reg, src_reg, con);
    }
  
#line 21083 "ad_aarch64.cpp"
  }
}

void addI_reg_imm_i2lNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3588 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constant();
    // add has primary == 0, subtract has primary == 1
    if ((0x0 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ subw(dst_reg, src_reg, -con);
    } else {
      __ addw(dst_reg, src_reg, con);
    }
  
#line 21109 "ad_aarch64.cpp"
  }
}

void addP_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10763 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21128 "ad_aarch64.cpp"
  }
}

void addP_reg_reg_extNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10778 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw);
  
#line 21147 "ad_aarch64.cpp"
  }
}

void addP_reg_reg_lslNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// scale
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10793 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lea(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           Address(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                   Address::lsl(opnd_array(3)->constant())));
  
#line 21167 "ad_aarch64.cpp"
  }
}

void addP_reg_reg_ext_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// scale
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10808 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lea(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           Address(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                   Address::sxtw(opnd_array(3)->constant())));
  
#line 21187 "ad_aarch64.cpp"
  }
}

void lshift_extNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// scale
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10823 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sbfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
          as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
          opnd_array(2)->constant()& 63, MIN2(32, (int)((-opnd_array(2)->constant()) & 63)));
  
#line 21206 "ad_aarch64.cpp"
  }
}

void addP_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3602 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constantL();
    // add has primary == 0, subtract has primary == 1
    if ((0x0 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ sub(dst_reg, src_reg, -con);
    } else {
      __ add(dst_reg, src_reg, con);
    }
  
#line 21232 "ad_aarch64.cpp"
  }
}

void addL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10857 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21251 "ad_aarch64.cpp"
  }
}

void addL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3602 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constantL();
    // add has primary == 0, subtract has primary == 1
    if ((0x0 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ sub(dst_reg, src_reg, -con);
    } else {
      __ add(dst_reg, src_reg, con);
    }
  
#line 21277 "ad_aarch64.cpp"
  }
}

void subI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10888 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21296 "ad_aarch64.cpp"
  }
}

void subI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3588 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constant();
    // add has primary == 0, subtract has primary == 1
    if ((0x1 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ subw(dst_reg, src_reg, -con);
    } else {
      __ addw(dst_reg, src_reg, con);
    }
  
#line 21322 "ad_aarch64.cpp"
  }
}

void subL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10920 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21341 "ad_aarch64.cpp"
  }
}

void subL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3602 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    Register src_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    int32_t con = (int32_t)opnd_array(2)->constantL();
    // add has primary == 0, subtract has primary == 1
    if ((0x1 /*primary()*/)) { con = -con; }
    if (con < 0) {
      __ sub(dst_reg, src_reg, -con);
    } else {
      __ add(dst_reg, src_reg, con);
    }
  
#line 21367 "ad_aarch64.cpp"
  }
}

void negI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10952 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ negw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 21385 "ad_aarch64.cpp"
  }
}

void negL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10968 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ neg(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 21403 "ad_aarch64.cpp"
  }
}

void mulINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10984 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mulw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21422 "ad_aarch64.cpp"
  }
}

void smulINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10999 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smull(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21441 "ad_aarch64.cpp"
  }
}

void smulI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 10999 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smull(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 21460 "ad_aarch64.cpp"
  }
}

void mulLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11016 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mul(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21479 "ad_aarch64.cpp"
  }
}

void mulHiL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11032 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smulh(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21498 "ad_aarch64.cpp"
  }
}

void maddINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11049 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ maddw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21519 "ad_aarch64.cpp"
  }
}

void maddI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11049 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ maddw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 21540 "ad_aarch64.cpp"
  }
}

void msubINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ msubw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21561 "ad_aarch64.cpp"
  }
}

void mnegINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11083 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mnegw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 21581 "ad_aarch64.cpp"
  }
}

void mnegI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11083 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mnegw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 21601 "ad_aarch64.cpp"
  }
}

void maddLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11100 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ madd(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21622 "ad_aarch64.cpp"
  }
}

void maddL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11100 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ madd(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 21643 "ad_aarch64.cpp"
  }
}

void msubLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11116 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ msub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21664 "ad_aarch64.cpp"
  }
}

void mnegLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11134 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mneg(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 21684 "ad_aarch64.cpp"
  }
}

void mnegL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11134 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mneg(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 21704 "ad_aarch64.cpp"
  }
}

void smaddLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smaddl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21725 "ad_aarch64.cpp"
  }
}

void smaddL_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smaddl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 21746 "ad_aarch64.cpp"
  }
}

void smaddL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smaddl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21767 "ad_aarch64.cpp"
  }
}

void smaddL_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smaddl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 21788 "ad_aarch64.cpp"
  }
}

void smsubLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11167 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smsubl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21809 "ad_aarch64.cpp"
  }
}

void smsubL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11167 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smsubl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 21830 "ad_aarch64.cpp"
  }
}

void smnegLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11183 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smnegl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 21850 "ad_aarch64.cpp"
  }
}

void smnegL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11183 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smnegl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 21870 "ad_aarch64.cpp"
  }
}

void muladdS2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11201 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mulw(rscratch1, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ maddw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src3 */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src4 */), rscratch1); 
#line 21889 "ad_aarch64.cpp"
  }
}

void divINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3616 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
   Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
   Register src1_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
   Register src2_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    __ corrected_idivl(dst_reg, src1_reg, src2_reg, false, rscratch1);
  
#line 21909 "ad_aarch64.cpp"
  }
}

void divLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3624 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
   Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
   Register src1_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
   Register src2_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    __ corrected_idivq(dst_reg, src1_reg, src2_reg, false, rscratch1);
  
#line 21929 "ad_aarch64.cpp"
  }
}

void modINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3632 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
   Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
   Register src1_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
   Register src2_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    __ corrected_idivl(dst_reg, src1_reg, src2_reg, true, rscratch1);
  
#line 21949 "ad_aarch64.cpp"
  }
}

void modLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 3640 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
   Register dst_reg = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
   Register src1_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
   Register src2_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    __ corrected_idivq(dst_reg, src1_reg, src2_reg, true, rscratch1);
  
#line 21969 "ad_aarch64.cpp"
  }
}

void lShiftI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11267 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lslvw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 21988 "ad_aarch64.cpp"
  }
}

void lShiftI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11283 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lslw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            opnd_array(2)->constant()& 0x1f);
  
#line 22007 "ad_aarch64.cpp"
  }
}

void urShiftI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11299 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsrvw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 22026 "ad_aarch64.cpp"
  }
}

void urShiftI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11315 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            opnd_array(2)->constant()& 0x1f);
  
#line 22045 "ad_aarch64.cpp"
  }
}

void rShiftI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11331 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ asrvw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 22064 "ad_aarch64.cpp"
  }
}

void rShiftI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11347 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ asrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            opnd_array(2)->constant()& 0x1f);
  
#line 22083 "ad_aarch64.cpp"
  }
}

void lShiftL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11368 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lslv(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 22102 "ad_aarch64.cpp"
  }
}

void lShiftL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11384 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsl(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            opnd_array(2)->constant()& 0x3f);
  
#line 22121 "ad_aarch64.cpp"
  }
}

void urShiftL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11400 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsrv(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 22140 "ad_aarch64.cpp"
  }
}

void urShiftL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11416 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           opnd_array(2)->constant()& 0x3f);
  
#line 22159 "ad_aarch64.cpp"
  }
}

void urShiftP_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11432 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ lsr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           opnd_array(2)->constant()& 0x3f);
  
#line 22178 "ad_aarch64.cpp"
  }
}

void rShiftL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11448 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ asrv(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 22197 "ad_aarch64.cpp"
  }
}

void rShiftL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11464 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ asr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           opnd_array(2)->constant()& 0x3f);
  
#line 22216 "ad_aarch64.cpp"
  }
}

void regL_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11486 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              zr,
              Assembler::LSL, 0);
  
#line 22236 "ad_aarch64.cpp"
  }
}

void regI_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11505 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              zr,
              Assembler::LSL, 0);
  
#line 22256 "ad_aarch64.cpp"
  }
}

void AndI_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11523 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22277 "ad_aarch64.cpp"
  }
}

void AndI_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11523 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22298 "ad_aarch64.cpp"
  }
}

void AndL_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11541 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22319 "ad_aarch64.cpp"
  }
}

void AndL_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11541 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22340 "ad_aarch64.cpp"
  }
}

void OrI_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11559 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22361 "ad_aarch64.cpp"
  }
}

void OrI_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11559 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22382 "ad_aarch64.cpp"
  }
}

void OrL_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11577 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22403 "ad_aarch64.cpp"
  }
}

void OrL_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11577 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22424 "ad_aarch64.cpp"
  }
}

void XorI_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11595 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22445 "ad_aarch64.cpp"
  }
}

void XorI_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11595 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22466 "ad_aarch64.cpp"
  }
}

void XorL_reg_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11613 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL, 0);
  
#line 22487 "ad_aarch64.cpp"
  }
}

void XorL_reg_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11613 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL, 0);
  
#line 22508 "ad_aarch64.cpp"
  }
}

void AndI_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11633 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 22531 "ad_aarch64.cpp"
  }
}

void AndI_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11633 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 22554 "ad_aarch64.cpp"
  }
}

void AndL_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11654 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 22577 "ad_aarch64.cpp"
  }
}

void AndL_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11654 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 22600 "ad_aarch64.cpp"
  }
}

void AndI_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11675 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 22623 "ad_aarch64.cpp"
  }
}

void AndI_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11675 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 22646 "ad_aarch64.cpp"
  }
}

void AndL_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11696 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 22669 "ad_aarch64.cpp"
  }
}

void AndL_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11696 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 22692 "ad_aarch64.cpp"
  }
}

void AndI_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11717 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 22715 "ad_aarch64.cpp"
  }
}

void AndI_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11717 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 22738 "ad_aarch64.cpp"
  }
}

void AndL_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 22761 "ad_aarch64.cpp"
  }
}

void AndL_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 22784 "ad_aarch64.cpp"
  }
}

void AndI_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11759 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 22807 "ad_aarch64.cpp"
  }
}

void AndI_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11759 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bicw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 22830 "ad_aarch64.cpp"
  }
}

void AndL_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11780 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 22853 "ad_aarch64.cpp"
  }
}

void AndL_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11780 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ bic(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 22876 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11801 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 22899 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11801 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 22922 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11801 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::LSR,
              opnd_array(4)->constant()& 0x1f);
  
#line 22945 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11801 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 22968 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 22991 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23014 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::LSR,
              opnd_array(4)->constant()& 0x3f);
  
#line 23037 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23060 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23083 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 23106 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::ASR,
              opnd_array(4)->constant()& 0x1f);
  
#line 23129 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23152 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23175 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23198 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::ASR,
              opnd_array(4)->constant()& 0x3f);
  
#line 23221 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23244 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11885 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23267 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11885 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 23290 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11885 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::ROR,
              opnd_array(4)->constant()& 0x1f);
  
#line 23313 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11885 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23336 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11906 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23359 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11906 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23382 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11906 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::ROR,
              opnd_array(4)->constant()& 0x3f);
  
#line 23405 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11906 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23428 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11927 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 23451 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11927 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 23474 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11927 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::LSL,
              opnd_array(4)->constant()& 0x1f);
  
#line 23497 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11927 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eonw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 23520 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11948 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 23543 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_not_reg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11948 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 23566 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src4
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11948 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              Assembler::LSL,
              opnd_array(4)->constant()& 0x3f);
  
#line 23589 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_not_reg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11948 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eon(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 23612 "ad_aarch64.cpp"
  }
}

void OrI_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23635 "ad_aarch64.cpp"
  }
}

void OrI_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 23658 "ad_aarch64.cpp"
  }
}

void OrL_reg_URShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11990 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23681 "ad_aarch64.cpp"
  }
}

void OrL_reg_URShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 11990 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23704 "ad_aarch64.cpp"
  }
}

void OrI_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23727 "ad_aarch64.cpp"
  }
}

void OrI_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 23750 "ad_aarch64.cpp"
  }
}

void OrL_reg_RShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12032 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23773 "ad_aarch64.cpp"
  }
}

void OrL_reg_RShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12032 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23796 "ad_aarch64.cpp"
  }
}

void OrI_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12053 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 23819 "ad_aarch64.cpp"
  }
}

void OrI_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12053 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 23842 "ad_aarch64.cpp"
  }
}

void OrL_reg_RotateRight_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12074 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 23865 "ad_aarch64.cpp"
  }
}

void OrL_reg_RotateRight_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12074 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 23888 "ad_aarch64.cpp"
  }
}

void OrI_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12095 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 23911 "ad_aarch64.cpp"
  }
}

void OrI_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12095 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ornw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 23934 "ad_aarch64.cpp"
  }
}

void OrL_reg_LShift_not_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12116 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 23957 "ad_aarch64.cpp"
  }
}

void OrL_reg_LShift_not_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src4
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12116 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orn(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 23980 "ad_aarch64.cpp"
  }
}

void AndI_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12137 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24002 "ad_aarch64.cpp"
  }
}

void AndI_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12137 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24024 "ad_aarch64.cpp"
  }
}

void AndL_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12158 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24046 "ad_aarch64.cpp"
  }
}

void AndL_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12158 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24068 "ad_aarch64.cpp"
  }
}

void AndI_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24090 "ad_aarch64.cpp"
  }
}

void AndI_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24112 "ad_aarch64.cpp"
  }
}

void AndL_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24134 "ad_aarch64.cpp"
  }
}

void AndL_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24156 "ad_aarch64.cpp"
  }
}

void AndI_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12221 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 24178 "ad_aarch64.cpp"
  }
}

void AndI_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12221 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 24200 "ad_aarch64.cpp"
  }
}

void AndL_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12242 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 24222 "ad_aarch64.cpp"
  }
}

void AndL_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12242 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 24244 "ad_aarch64.cpp"
  }
}

void AndI_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12263 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24266 "ad_aarch64.cpp"
  }
}

void AndI_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12263 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24288 "ad_aarch64.cpp"
  }
}

void AndL_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12284 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24310 "ad_aarch64.cpp"
  }
}

void AndL_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12284 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24332 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12305 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24354 "ad_aarch64.cpp"
  }
}

void XorI_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12305 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24376 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12326 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24398 "ad_aarch64.cpp"
  }
}

void XorL_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12326 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24420 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12347 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24442 "ad_aarch64.cpp"
  }
}

void XorI_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12347 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24464 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12368 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24486 "ad_aarch64.cpp"
  }
}

void XorL_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12368 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24508 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12389 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 24530 "ad_aarch64.cpp"
  }
}

void XorI_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12389 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 24552 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12410 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 24574 "ad_aarch64.cpp"
  }
}

void XorL_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12410 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 24596 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12431 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24618 "ad_aarch64.cpp"
  }
}

void XorI_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12431 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24640 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12452 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24662 "ad_aarch64.cpp"
  }
}

void XorL_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12452 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24684 "ad_aarch64.cpp"
  }
}

void OrI_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12473 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24706 "ad_aarch64.cpp"
  }
}

void OrI_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12473 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24728 "ad_aarch64.cpp"
  }
}

void OrL_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12494 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24750 "ad_aarch64.cpp"
  }
}

void OrL_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12494 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24772 "ad_aarch64.cpp"
  }
}

void OrI_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12515 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24794 "ad_aarch64.cpp"
  }
}

void OrI_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12515 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24816 "ad_aarch64.cpp"
  }
}

void OrL_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12536 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 24838 "ad_aarch64.cpp"
  }
}

void OrL_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12536 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 24860 "ad_aarch64.cpp"
  }
}

void OrI_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12557 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 24882 "ad_aarch64.cpp"
  }
}

void OrI_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12557 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 24904 "ad_aarch64.cpp"
  }
}

void OrL_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12578 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 24926 "ad_aarch64.cpp"
  }
}

void OrL_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12578 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 24948 "ad_aarch64.cpp"
  }
}

void OrI_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12599 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x1f);
  
#line 24970 "ad_aarch64.cpp"
  }
}

void OrI_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12599 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x1f);
  
#line 24992 "ad_aarch64.cpp"
  }
}

void OrL_reg_RotateRight_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12620 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ROR,
              opnd_array(3)->constant()& 0x3f);
  
#line 25014 "ad_aarch64.cpp"
  }
}

void OrL_reg_RotateRight_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12620 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ROR,
              opnd_array(2)->constant()& 0x3f);
  
#line 25036 "ad_aarch64.cpp"
  }
}

void AddI_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12641 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 25058 "ad_aarch64.cpp"
  }
}

void AddI_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12641 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x1f);
  
#line 25080 "ad_aarch64.cpp"
  }
}

void AddL_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12662 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 25102 "ad_aarch64.cpp"
  }
}

void AddL_reg_URShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12662 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSR,
              opnd_array(2)->constant()& 0x3f);
  
#line 25124 "ad_aarch64.cpp"
  }
}

void AddI_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 25146 "ad_aarch64.cpp"
  }
}

void AddI_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x1f);
  
#line 25168 "ad_aarch64.cpp"
  }
}

void AddL_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12704 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 25190 "ad_aarch64.cpp"
  }
}

void AddL_reg_RShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12704 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::ASR,
              opnd_array(2)->constant()& 0x3f);
  
#line 25212 "ad_aarch64.cpp"
  }
}

void AddI_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12725 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 25234 "ad_aarch64.cpp"
  }
}

void AddI_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12725 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x1f);
  
#line 25256 "ad_aarch64.cpp"
  }
}

void AddL_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12746 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 25278 "ad_aarch64.cpp"
  }
}

void AddL_reg_LShift_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12746 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
              Assembler::LSL,
              opnd_array(2)->constant()& 0x3f);
  
#line 25300 "ad_aarch64.cpp"
  }
}

void SubI_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12767 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x1f);
  
#line 25322 "ad_aarch64.cpp"
  }
}

void SubL_reg_URShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12788 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSR,
              opnd_array(3)->constant()& 0x3f);
  
#line 25344 "ad_aarch64.cpp"
  }
}

void SubI_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12809 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x1f);
  
#line 25366 "ad_aarch64.cpp"
  }
}

void SubL_reg_RShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12830 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::ASR,
              opnd_array(3)->constant()& 0x3f);
  
#line 25388 "ad_aarch64.cpp"
  }
}

void SubI_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12851 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x1f);
  
#line 25410 "ad_aarch64.cpp"
  }
}

void SubL_reg_LShift_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12872 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
              as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
              Assembler::LSL,
              opnd_array(3)->constant()& 0x3f);
  
#line 25432 "ad_aarch64.cpp"
  }
}

void sbfmLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift_count
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift_count
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12893 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(2)->constant()& 63;
    int rshift = opnd_array(3)->constant()& 63;
    int s = 63 - lshift;
    int r = (rshift - lshift) & 63;
    __ sbfm(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            r, s);
  
#line 25456 "ad_aarch64.cpp"
  }
}

void sbfmwINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift_count
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift_count
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12916 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(2)->constant()& 31;
    int rshift = opnd_array(3)->constant()& 31;
    int s = 31 - lshift;
    int r = (rshift - lshift) & 31;
    __ sbfmw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            r, s);
  
#line 25480 "ad_aarch64.cpp"
  }
}

void ubfmLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift_count
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift_count
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12939 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(2)->constant()& 63;
    int rshift = opnd_array(3)->constant()& 63;
    int s = 63 - lshift;
    int r = (rshift - lshift) & 63;
    __ ubfm(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            r, s);
  
#line 25504 "ad_aarch64.cpp"
  }
}

void ubfmwINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift_count
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift_count
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12962 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(2)->constant()& 31;
    int rshift = opnd_array(3)->constant()& 31;
    int s = 31 - lshift;
    int r = (rshift - lshift) & 31;
    __ ubfmw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            r, s);
  
#line 25528 "ad_aarch64.cpp"
  }
}

void ubfxwINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 12987 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int rshift = opnd_array(2)->constant()& 31;
    intptr_t mask = opnd_array(3)->constant();
    int width = exact_log2(mask+1);
    __ ubfxw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), rshift, width);
  
#line 25550 "ad_aarch64.cpp"
  }
}

void ubfxLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13007 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int rshift = opnd_array(2)->constant()& 63;
    intptr_t mask = opnd_array(3)->constantL();
    int width = exact_log2_long(mask+1);
    __ ubfx(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), rshift, width);
  
#line 25572 "ad_aarch64.cpp"
  }
}

void ubfxIConvI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13031 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int rshift = opnd_array(2)->constant()& 31;
    intptr_t mask = opnd_array(3)->constant();
    int width = exact_log2(mask+1);
    __ ubfx(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), rshift, width);
  
#line 25594 "ad_aarch64.cpp"
  }
}

void ubfizwINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13054 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 31;
    intptr_t mask = opnd_array(2)->constant();
    int width = exact_log2(mask+1);
    __ ubfizw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
          as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25616 "ad_aarch64.cpp"
  }
}

void ubfizLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13076 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 63;
    intptr_t mask = opnd_array(2)->constantL();
    int width = exact_log2_long(mask+1);
    __ ubfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
          as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25638 "ad_aarch64.cpp"
  }
}

void ubfizwIConvI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13098 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 31;
    intptr_t mask = opnd_array(2)->constant();
    int width = exact_log2(mask+1);
    __ ubfizw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
          as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25660 "ad_aarch64.cpp"
  }
}

void ubfizLConvL2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13120 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 63;
    intptr_t mask = opnd_array(2)->constantL();
    int width = exact_log2_long(mask+1);
    __ ubfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
          as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25682 "ad_aarch64.cpp"
  }
}

void ubfizIConvI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13142 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 63;
    intptr_t mask = opnd_array(2)->constant();
    int width = exact_log2(mask+1);
    __ ubfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25704 "ad_aarch64.cpp"
  }
}

void ubfizLConvL2IxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13163 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int lshift = opnd_array(3)->constant()& 31;
    intptr_t mask = opnd_array(2)->constantL();
    int width = exact_log2(mask+1);
    __ ubfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), lshift, width);
  
#line 25726 "ad_aarch64.cpp"
  }
}

void ubfizIConvI2LAndINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// msk
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13182 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ubfiz(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0, exact_log2(opnd_array(2)->constant()+ 1));
  
#line 25743 "ad_aarch64.cpp"
  }
}

void extrOrLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            opnd_array(4)->constant()& 63);
  
#line 25763 "ad_aarch64.cpp"
  }
}

void extrOrL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
            opnd_array(2)->constant()& 63);
  
#line 25783 "ad_aarch64.cpp"
  }
}

void extrOrINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13218 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            opnd_array(4)->constant()& 31);
  
#line 25803 "ad_aarch64.cpp"
  }
}

void extrOrI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13218 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
            opnd_array(2)->constant()& 31);
  
#line 25823 "ad_aarch64.cpp"
  }
}

void extrAddLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13236 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            opnd_array(4)->constant()& 63);
  
#line 25843 "ad_aarch64.cpp"
  }
}

void extrAddL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13236 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
            opnd_array(2)->constant()& 63);
  
#line 25863 "ad_aarch64.cpp"
  }
}

void extrAddINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
            opnd_array(4)->constant()& 31);
  
#line 25883 "ad_aarch64.cpp"
  }
}

void extrAddI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ extrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */),
            opnd_array(2)->constant()& 31);
  
#line 25903 "ad_aarch64.cpp"
  }
}

void rorI_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13271 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ extrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
               opnd_array(2)->constant()& 0x1f);
  
#line 25921 "ad_aarch64.cpp"
  }
}

void rorL_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13287 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ extr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */),
               opnd_array(2)->constant()& 0x3f);
  
#line 25939 "ad_aarch64.cpp"
  }
}

void rorI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13303 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ rorvw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 25956 "ad_aarch64.cpp"
  }
}

void rorL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13318 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ rorv(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 25973 "ad_aarch64.cpp"
  }
}

void rolI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13333 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(rscratch1, zr, as_Register(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
     __ rorvw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), rscratch1);
  
#line 25991 "ad_aarch64.cpp"
  }
}

void rolL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13349 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(rscratch1, zr, as_Register(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
     __ rorv(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), rscratch1);
  
#line 26009 "ad_aarch64.cpp"
  }
}

void AddExtINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13367 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw);
   
#line 26027 "ad_aarch64.cpp"
  }
}

void AddExtI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13367 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtw);
   
#line 26045 "ad_aarch64.cpp"
  }
}

void SubExtINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13382 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw);
   
#line 26063 "ad_aarch64.cpp"
  }
}

void AddExtI_sxthNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13397 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth);
   
#line 26083 "ad_aarch64.cpp"
  }
}

void AddExtI_sxth_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13397 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxth);
   
#line 26103 "ad_aarch64.cpp"
  }
}

void AddExtI_sxtbNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13412 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb);
   
#line 26123 "ad_aarch64.cpp"
  }
}

void AddExtI_sxtb_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13412 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtb);
   
#line 26143 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtbNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13427 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26163 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtb_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13427 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb);
   
#line 26183 "ad_aarch64.cpp"
  }
}

void AddExtL_sxthNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13442 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth);
   
#line 26203 "ad_aarch64.cpp"
  }
}

void AddExtL_sxth_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13442 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxth);
   
#line 26223 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtwNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13457 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw);
   
#line 26243 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtw_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13457 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtw);
   
#line 26263 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtbNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13472 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb);
   
#line 26283 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtb_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13472 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtb);
   
#line 26303 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtbNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13487 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26323 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtb_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13487 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb);
   
#line 26343 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtb_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13502 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26362 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtb_and_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13502 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb);
   
#line 26381 "ad_aarch64.cpp"
  }
}

void AddExtI_uxth_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13517 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth);
   
#line 26400 "ad_aarch64.cpp"
  }
}

void AddExtI_uxth_and_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13517 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxth);
   
#line 26419 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtb_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13532 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26438 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtb_and_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13532 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb);
   
#line 26457 "ad_aarch64.cpp"
  }
}

void AddExtL_uxth_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13547 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth);
   
#line 26476 "ad_aarch64.cpp"
  }
}

void AddExtL_uxth_and_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13547 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxth);
   
#line 26495 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtw_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13562 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtw);
   
#line 26514 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtw_and_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13562 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtw);
   
#line 26533 "ad_aarch64.cpp"
  }
}

void SubExtI_uxtb_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13577 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26552 "ad_aarch64.cpp"
  }
}

void SubExtI_uxth_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13592 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth);
   
#line 26571 "ad_aarch64.cpp"
  }
}

void SubExtL_uxtb_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13607 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb);
   
#line 26590 "ad_aarch64.cpp"
  }
}

void SubExtL_uxth_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13622 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth);
   
#line 26609 "ad_aarch64.cpp"
  }
}

void SubExtL_uxtw_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13637 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtw);
   
#line 26628 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtb_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13653 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb, (opnd_array(5)->constant()));
   
#line 26649 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtb_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13653 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(5)->reg(ra_,this,idx5)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtb, (opnd_array(4)->constant()));
   
#line 26670 "ad_aarch64.cpp"
  }
}

void AddExtL_sxth_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13668 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth, (opnd_array(5)->constant()));
   
#line 26691 "ad_aarch64.cpp"
  }
}

void AddExtL_sxth_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13668 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(5)->reg(ra_,this,idx5)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxth, (opnd_array(4)->constant()));
   
#line 26712 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtw_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw, (opnd_array(5)->constant()));
   
#line 26733 "ad_aarch64.cpp"
  }
}

void AddExtL_sxtw_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(5)->reg(ra_,this,idx5)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtw, (opnd_array(4)->constant()));
   
#line 26754 "ad_aarch64.cpp"
  }
}

void SubExtL_sxtb_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13698 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb, (opnd_array(5)->constant()));
   
#line 26775 "ad_aarch64.cpp"
  }
}

void SubExtL_sxth_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13713 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth, (opnd_array(5)->constant()));
   
#line 26796 "ad_aarch64.cpp"
  }
}

void SubExtL_sxtw_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13728 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw, (opnd_array(5)->constant()));
   
#line 26817 "ad_aarch64.cpp"
  }
}

void AddExtI_sxtb_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13743 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb, (opnd_array(5)->constant()));
   
#line 26838 "ad_aarch64.cpp"
  }
}

void AddExtI_sxtb_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13743 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(5)->reg(ra_,this,idx5)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtb, (opnd_array(4)->constant()));
   
#line 26859 "ad_aarch64.cpp"
  }
}

void AddExtI_sxth_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13758 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth, (opnd_array(5)->constant()));
   
#line 26880 "ad_aarch64.cpp"
  }
}

void AddExtI_sxth_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// rshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13758 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(5)->reg(ra_,this,idx5)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxth, (opnd_array(4)->constant()));
   
#line 26901 "ad_aarch64.cpp"
  }
}

void SubExtI_sxtb_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13773 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtb, (opnd_array(5)->constant()));
   
#line 26922 "ad_aarch64.cpp"
  }
}

void SubExtI_sxth_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// rshift1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// lshift2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13788 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxth, (opnd_array(5)->constant()));
   
#line 26943 "ad_aarch64.cpp"
  }
}

void AddExtI_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13803 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw, (opnd_array(3)->constant()));
   
#line 26962 "ad_aarch64.cpp"
  }
}

void AddExtI_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lshift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13803 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::sxtw, (opnd_array(2)->constant()));
   
#line 26981 "ad_aarch64.cpp"
  }
}

void SubExtI_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13818 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::sxtw, (opnd_array(3)->constant()));
   
#line 27000 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtb_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13833 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb, (opnd_array(4)->constant()));
   
#line 27020 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtb_and_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13833 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb, (opnd_array(3)->constant()));
   
#line 27040 "ad_aarch64.cpp"
  }
}

void AddExtL_uxth_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13848 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth, (opnd_array(4)->constant()));
   
#line 27060 "ad_aarch64.cpp"
  }
}

void AddExtL_uxth_and_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13848 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxth, (opnd_array(3)->constant()));
   
#line 27080 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtw_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13863 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtw, (opnd_array(4)->constant()));
   
#line 27100 "ad_aarch64.cpp"
  }
}

void AddExtL_uxtw_and_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13863 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ add(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtw, (opnd_array(3)->constant()));
   
#line 27120 "ad_aarch64.cpp"
  }
}

void SubExtL_uxtb_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13878 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb, (opnd_array(4)->constant()));
   
#line 27140 "ad_aarch64.cpp"
  }
}

void SubExtL_uxth_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13893 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth, (opnd_array(4)->constant()));
   
#line 27160 "ad_aarch64.cpp"
  }
}

void SubExtL_uxtw_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13908 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ sub(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtw, (opnd_array(4)->constant()));
   
#line 27180 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtb_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13923 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb, (opnd_array(4)->constant()));
   
#line 27200 "ad_aarch64.cpp"
  }
}

void AddExtI_uxtb_and_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13923 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxtb, (opnd_array(3)->constant()));
   
#line 27220 "ad_aarch64.cpp"
  }
}

void AddExtI_uxth_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth, (opnd_array(4)->constant()));
   
#line 27240 "ad_aarch64.cpp"
  }
}

void AddExtI_uxth_and_shift_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// lshift
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ addw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* src1 */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), ext::uxth, (opnd_array(3)->constant()));
   
#line 27260 "ad_aarch64.cpp"
  }
}

void SubExtI_uxtb_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13953 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxtb, (opnd_array(4)->constant()));
   
#line 27280 "ad_aarch64.cpp"
  }
}

void SubExtI_uxth_and_shiftNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// mask
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// lshift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13968 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), ext::uxth, (opnd_array(4)->constant()));
   
#line 27300 "ad_aarch64.cpp"
  }
}

void addF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 13989 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fadds(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27319 "ad_aarch64.cpp"
  }
}

void addD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14004 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ faddd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27338 "ad_aarch64.cpp"
  }
}

void subF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14019 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fsubs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27357 "ad_aarch64.cpp"
  }
}

void subD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14034 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fsubd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27376 "ad_aarch64.cpp"
  }
}

void mulF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14049 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmuls(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27395 "ad_aarch64.cpp"
  }
}

void mulD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14064 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmuld(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27414 "ad_aarch64.cpp"
  }
}

void maddF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14080 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmadds(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27435 "ad_aarch64.cpp"
  }
}

void maddD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14097 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmaddd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27456 "ad_aarch64.cpp"
  }
}

void msubF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14115 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmsubs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27477 "ad_aarch64.cpp"
  }
}

void msubF_reg_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14115 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmsubs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27498 "ad_aarch64.cpp"
  }
}

void msubD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14133 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmsubd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27519 "ad_aarch64.cpp"
  }
}

void msubD_reg_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14133 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmsubd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27540 "ad_aarch64.cpp"
  }
}

void mnaddF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnmadds(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27561 "ad_aarch64.cpp"
  }
}

void mnaddF_reg_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnmadds(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27582 "ad_aarch64.cpp"
  }
}

void mnaddD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14169 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnmaddd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27603 "ad_aarch64.cpp"
  }
}

void mnaddD_reg_reg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14169 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnmaddd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27624 "ad_aarch64.cpp"
  }
}

void mnsubF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14186 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnmsubs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27645 "ad_aarch64.cpp"
  }
}

void mnsubD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src3
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14203 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

  // n.b. insn name should be fnmsubd
    __ fnmsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
              as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */),
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src3 */));
  
#line 27667 "ad_aarch64.cpp"
  }
}

void maxF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14220 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmaxs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27686 "ad_aarch64.cpp"
  }
}

void minF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14234 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmins(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27705 "ad_aarch64.cpp"
  }
}

void maxD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14248 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmaxd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27724 "ad_aarch64.cpp"
  }
}

void minD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14262 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmind(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27743 "ad_aarch64.cpp"
  }
}

void divF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14278 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fdivs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27762 "ad_aarch64.cpp"
  }
}

void divD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14293 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fdivd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27781 "ad_aarch64.cpp"
  }
}

void negF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14308 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnegs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27798 "ad_aarch64.cpp"
  }
}

void negD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14322 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fnegd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27815 "ad_aarch64.cpp"
  }
}

void absI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14340 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), zr);
    __ cnegw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), Assembler::LT);
  
#line 27832 "ad_aarch64.cpp"
  }
}

void absL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14357 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmp(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), zr);
    __ cneg(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), Assembler::LT);
  
#line 27849 "ad_aarch64.cpp"
  }
}

void absF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14369 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fabss(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27866 "ad_aarch64.cpp"
  }
}

void absD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14382 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fabsd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27883 "ad_aarch64.cpp"
  }
}

void absdF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14395 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fabds(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27902 "ad_aarch64.cpp"
  }
}

void absdD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14409 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fabdd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 27921 "ad_aarch64.cpp"
  }
}

void sqrtD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14423 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fsqrtd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27938 "ad_aarch64.cpp"
  }
}

void sqrtF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14436 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fsqrts(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 27955 "ad_aarch64.cpp"
  }
}

void roundD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rmode
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14448 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    switch (opnd_array(2)->constant()) {
      case RoundDoubleModeNode::rmode_rint:
        __ frintnd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_floor:
        __ frintmd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_ceil:
        __ frintpd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
    }
  
#line 27985 "ad_aarch64.cpp"
  }
}

void copySignD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14471 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst = as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */),
                  src1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                  src2 = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                  zero = as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* zero */);
    __ fnegd(dst, zero);
    __ bsl(dst, __ T8B, src2, src1);
  
#line 28009 "ad_aarch64.cpp"
  }
}

void copySignF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14486 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst = as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
                  src1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                  src2 = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    __ movi(dst, __ T2S, 0x80, 24);
    __ bsl(dst, __ T8B, src2, src1);
  
#line 28031 "ad_aarch64.cpp"
  }
}

void signumD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// one
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14500 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                  dst = as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */),
                  zero = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* zero */),
                  one = as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* one */);
    __ facgtd(dst, src, zero); // dst=0 for +-0.0 and NaN. 0xFFF..F otherwise
    __ ushrd(dst, dst, 1);     // dst=0 for +-0.0 and NaN. 0x7FF..F otherwise
    // Bit selection instruction gets bit from "one" for each enabled bit in
    // "dst", otherwise gets a bit from "src". For "src" that contains +-0.0 or
    // NaN the whole "src" will be copied because "dst" is zero. For all other
    // "src" values dst is 0x7FF..F, which means only the sign bit is copied
    // from "src", and all other bits are copied from 1.0.
    __ bsl(dst, __ T8B, one, src);
  
#line 28061 "ad_aarch64.cpp"
  }
}

void signumF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// one
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14521 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                  dst = as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */),
                  zero = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* zero */),
                  one = as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* one */);
    __ facgts(dst, src, zero);    // dst=0 for +-0.0 and NaN. 0xFFF..F otherwise
    __ ushr(dst, __ T2S, dst, 1); // dst=0 for +-0.0 and NaN. 0x7FF..F otherwise
    // Bit selection instruction gets bit from "one" for each enabled bit in
    // "dst", otherwise gets a bit from "src". For "src" that contains +-0.0 or
    // NaN the whole "src" will be copied because "dst" is zero. For all other
    // "src" values dst is 0x7FF..F, which means only the sign bit is copied
    // from "src", and all other bits are copied from 1.0.
    __ bsl(dst, __ T8B, one, src);
  
#line 28091 "ad_aarch64.cpp"
  }
}

void onspinwaitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14544 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ spin_wait();
  
#line 28107 "ad_aarch64.cpp"
  }
}

void andI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14564 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28126 "ad_aarch64.cpp"
  }
}

void andI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14579 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            (uint64_t)(opnd_array(2)->constant()));
  
#line 28145 "ad_aarch64.cpp"
  }
}

void orI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14596 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28164 "ad_aarch64.cpp"
  }
}

void orI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14611 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            (uint64_t)(opnd_array(2)->constant()));
  
#line 28183 "ad_aarch64.cpp"
  }
}

void xorI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14628 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28202 "ad_aarch64.cpp"
  }
}

void xorI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14643 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eorw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            (uint64_t)(opnd_array(2)->constant()));
  
#line 28221 "ad_aarch64.cpp"
  }
}

void andL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14661 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28240 "ad_aarch64.cpp"
  }
}

void andL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14676 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ andr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
            as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            (uint64_t)(opnd_array(2)->constantL()));
  
#line 28259 "ad_aarch64.cpp"
  }
}

void orL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14693 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28278 "ad_aarch64.cpp"
  }
}

void orL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14708 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           (uint64_t)(opnd_array(2)->constantL()));
  
#line 28297 "ad_aarch64.cpp"
  }
}

void xorL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14725 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 28316 "ad_aarch64.cpp"
  }
}

void xorL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14740 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ eor(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
           (uint64_t)(opnd_array(2)->constantL()));
  
#line 28335 "ad_aarch64.cpp"
  }
}

void convI2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14755 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ sbfm(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, 0, 31);
  
#line 28351 "ad_aarch64.cpp"
  }
}

void convUI2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14768 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ubfm(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, 0, 31);
  
#line 28368 "ad_aarch64.cpp"
  }
}

void convL2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14781 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ movw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28384 "ad_aarch64.cpp"
  }
}

void convI2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14798 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), zr);
    __ cset(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::NE);
  
#line 28401 "ad_aarch64.cpp"
  }
}

void convP2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14816 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmp(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), zr);
    __ cset(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::NE);
  
#line 28418 "ad_aarch64.cpp"
  }
}

void convD2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14830 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvtd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28434 "ad_aarch64.cpp"
  }
}

void convF2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvts(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28450 "ad_aarch64.cpp"
  }
}

void convF2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14856 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvtzsw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28466 "ad_aarch64.cpp"
  }
}

void convF2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14869 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvtzs(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28482 "ad_aarch64.cpp"
  }
}

void convI2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14882 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ scvtfws(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28498 "ad_aarch64.cpp"
  }
}

void convL2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14895 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ scvtfs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28514 "ad_aarch64.cpp"
  }
}

void convD2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14908 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvtzdw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28530 "ad_aarch64.cpp"
  }
}

void convD2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14921 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcvtzd(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28546 "ad_aarch64.cpp"
  }
}

void convI2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14934 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ scvtfwd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28562 "ad_aarch64.cpp"
  }
}

void convL2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14947 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ scvtfd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28578 "ad_aarch64.cpp"
  }
}

void MoveF2I_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14966 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldrw(opnd_array(0)->as_Register(ra_,this)/* dst */, Address(sp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 28594 "ad_aarch64.cpp"
  }
}

void MoveI2F_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 14984 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldrs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), Address(sp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 28610 "ad_aarch64.cpp"
  }
}

void MoveD2L_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15002 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldr(opnd_array(0)->as_Register(ra_,this)/* dst */, Address(sp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 28626 "ad_aarch64.cpp"
  }
}

void MoveL2D_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15020 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ ldrd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), Address(sp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 28642 "ad_aarch64.cpp"
  }
}

void MoveF2I_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15038 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ strs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), Address(sp, opnd_array(0)->disp(ra_,this,0)));
  
#line 28658 "ad_aarch64.cpp"
  }
}

void MoveI2F_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15056 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ strw(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, Address(sp, opnd_array(0)->disp(ra_,this,0)));
  
#line 28674 "ad_aarch64.cpp"
  }
}

void MoveD2L_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15074 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ strd(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), Address(sp, opnd_array(0)->disp(ra_,this,0)));
  
#line 28690 "ad_aarch64.cpp"
  }
}

void MoveL2D_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15092 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ str(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, Address(sp, opnd_array(0)->disp(ra_,this,0)));
  
#line 28706 "ad_aarch64.cpp"
  }
}

void MoveF2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15110 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovs(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28722 "ad_aarch64.cpp"
  }
}

void MoveI2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15128 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 28738 "ad_aarch64.cpp"
  }
}

void MoveD2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15146 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 28754 "ad_aarch64.cpp"
  }
}

void MoveL2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15164 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fmovd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 28770 "ad_aarch64.cpp"
  }
}

void clearArray_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cnt
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// base
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15183 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    address tpc = __ zero_words(opnd_array(2)->as_Register(ra_,this,idx2)/* base */, opnd_array(1)->as_Register(ra_,this,idx1)/* cnt */);
    if (tpc == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    }
  
#line 28791 "ad_aarch64.cpp"
  }
}

void clearArray_imm_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cnt
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// base
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// temp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15204 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ zero_words(opnd_array(2)->as_Register(ra_,this,idx2)/* base */, (uint64_t)opnd_array(1)->constantL());
  
#line 28809 "ad_aarch64.cpp"
  }
}

void overflowAddI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15220 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmnw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 28826 "ad_aarch64.cpp"
  }
}

void overflowAddI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15233 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmnw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 28843 "ad_aarch64.cpp"
  }
}

void overflowAddL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15246 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmn(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 28860 "ad_aarch64.cpp"
  }
}

void overflowAddL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15259 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmn(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 28877 "ad_aarch64.cpp"
  }
}

void overflowSubI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15272 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 28894 "ad_aarch64.cpp"
  }
}

void overflowSubI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15285 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 28911 "ad_aarch64.cpp"
  }
}

void overflowSubL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15298 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmp(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 28928 "ad_aarch64.cpp"
  }
}

void overflowSubL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15311 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ subs(zr, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 28945 "ad_aarch64.cpp"
  }
}

void overflowNegI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15324 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(zr, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */);
  
#line 28962 "ad_aarch64.cpp"
  }
}

void overflowNegL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15337 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmp(zr, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */);
  
#line 28979 "ad_aarch64.cpp"
  }
}

void overflowMulI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15354 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ smull(rscratch1, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
    __ subs(zr, rscratch1, rscratch1, ext::sxtw);      // NE => overflow
    __ movw(rscratch1, 0x80000000);                    // Develop 0 (EQ),
    __ cselw(rscratch1, rscratch1, zr, Assembler::NE); // or 0x80000000 (NE)
    __ cmpw(rscratch1, 1);                             // 0x80000000 - 1 => VS
  
#line 29000 "ad_aarch64.cpp"
  }
}

void overflowMulI_reg_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15376 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ smull(rscratch1, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* op2 */);
    __ subs(zr, rscratch1, rscratch1, ext::sxtw);      // NE => overflow
    __ br(cond == Assembler::VS ? Assembler::NE : Assembler::EQ, *L);
  
#line 29023 "ad_aarch64.cpp"
  }
}

void overflowMulL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15398 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ mul(rscratch1, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);   // Result bits 0..63
    __ smulh(rscratch2, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */); // Result bits 64..127
    __ cmp(rscratch2, rscratch1, Assembler::ASR, 63);    // Top is pure sign ext
    __ movw(rscratch1, 0x80000000);                    // Develop 0 (EQ),
    __ cselw(rscratch1, rscratch1, zr, Assembler::NE); // or 0x80000000 (NE)
    __ cmpw(rscratch1, 1);                             // 0x80000000 - 1 => VS
  
#line 29045 "ad_aarch64.cpp"
  }
}

void overflowMulL_reg_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15422 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    __ mul(rscratch1, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* op2 */);   // Result bits 0..63
    __ smulh(rscratch2, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* op2 */); // Result bits 64..127
    __ cmp(rscratch2, rscratch1, Assembler::ASR, 63);    // Top is pure sign ext
    __ br(cond == Assembler::VS ? Assembler::NE : Assembler::EQ, *L);
  
#line 29069 "ad_aarch64.cpp"
  }
}

void compI_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3650 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmpw(reg1, reg2);
  
#line 29088 "ad_aarch64.cpp"
  }
}

void compI_reg_immI0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int32_t val = opnd_array(2)->constant();
    if (val >= 0) {
      __ subsw(zr, reg, val);
    } else {
      __ addsw(zr, reg, -val);
    }
  
#line 29111 "ad_aarch64.cpp"
  }
}

void compI_reg_immIAddSubNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int32_t val = opnd_array(2)->constant();
    if (val >= 0) {
      __ subsw(zr, reg, val);
    } else {
      __ addsw(zr, reg, -val);
    }
  
#line 29134 "ad_aarch64.cpp"
  }
}

void compI_reg_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3668 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    uint32_t val = (uint32_t)opnd_array(2)->constant();
    __ movw(rscratch1, val);
    __ cmpw(reg1, rscratch1);
  
#line 29154 "ad_aarch64.cpp"
  }
}

void compU_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3650 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmpw(reg1, reg2);
  
#line 29173 "ad_aarch64.cpp"
  }
}

void compU_reg_immI0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int32_t val = opnd_array(2)->constant();
    if (val >= 0) {
      __ subsw(zr, reg, val);
    } else {
      __ addsw(zr, reg, -val);
    }
  
#line 29196 "ad_aarch64.cpp"
  }
}

void compU_reg_immIAddSubNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int32_t val = opnd_array(2)->constant();
    if (val >= 0) {
      __ subsw(zr, reg, val);
    } else {
      __ addsw(zr, reg, -val);
    }
  
#line 29219 "ad_aarch64.cpp"
  }
}

void compU_reg_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3668 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    uint32_t val = (uint32_t)opnd_array(2)->constant();
    __ movw(rscratch1, val);
    __ cmpw(reg1, rscratch1);
  
#line 29239 "ad_aarch64.cpp"
  }
}

void compL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3676 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmp(reg1, reg2);
  
#line 29258 "ad_aarch64.cpp"
  }
}

void compL_reg_immL0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int64_t val = opnd_array(2)->constantL();
    if (val >= 0) {
      __ subs(zr, reg, val);
    } else if (val != -val) {
      __ adds(zr, reg, -val);
    } else {
    // aargh, Long.MIN_VALUE is a special case
      __ orr(rscratch1, zr, (uint64_t)val);
      __ subs(zr, reg, rscratch1);
    }
  
#line 29285 "ad_aarch64.cpp"
  }
}

void compL_reg_immLAddSubNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int64_t val = opnd_array(2)->constantL();
    if (val >= 0) {
      __ subs(zr, reg, val);
    } else if (val != -val) {
      __ adds(zr, reg, -val);
    } else {
    // aargh, Long.MIN_VALUE is a special case
      __ orr(rscratch1, zr, (uint64_t)val);
      __ subs(zr, reg, rscratch1);
    }
  
#line 29312 "ad_aarch64.cpp"
  }
}

void compL_reg_immLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3698 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    uint64_t val = (uint64_t)opnd_array(2)->constantL();
    __ mov(rscratch1, val);
    __ cmp(reg1, rscratch1);
  
#line 29332 "ad_aarch64.cpp"
  }
}

void compUL_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3676 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmp(reg1, reg2);
  
#line 29351 "ad_aarch64.cpp"
  }
}

void compUL_reg_immL0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int64_t val = opnd_array(2)->constantL();
    if (val >= 0) {
      __ subs(zr, reg, val);
    } else if (val != -val) {
      __ adds(zr, reg, -val);
    } else {
    // aargh, Long.MIN_VALUE is a special case
      __ orr(rscratch1, zr, (uint64_t)val);
      __ subs(zr, reg, rscratch1);
    }
  
#line 29378 "ad_aarch64.cpp"
  }
}

void compUL_reg_immLAddSubNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3683 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    int64_t val = opnd_array(2)->constantL();
    if (val >= 0) {
      __ subs(zr, reg, val);
    } else if (val != -val) {
      __ adds(zr, reg, -val);
    } else {
    // aargh, Long.MIN_VALUE is a special case
      __ orr(rscratch1, zr, (uint64_t)val);
      __ subs(zr, reg, rscratch1);
    }
  
#line 29405 "ad_aarch64.cpp"
  }
}

void compUL_reg_immLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3698 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    uint64_t val = (uint64_t)opnd_array(2)->constantL();
    __ mov(rscratch1, val);
    __ cmp(reg1, rscratch1);
  
#line 29425 "ad_aarch64.cpp"
  }
}

void compP_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3706 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmp(reg1, reg2);
  
#line 29444 "ad_aarch64.cpp"
  }
}

void compN_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 3713 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg1 = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    Register reg2 = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* op2 */);
    __ cmpw(reg1, reg2);
  
#line 29463 "ad_aarch64.cpp"
  }
}

void testP_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3720 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    __ cmp(reg, zr);
  
#line 29481 "ad_aarch64.cpp"
  }
}

void testN_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 3726 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* op1 */);
    __ cmpw(reg, zr);
  
#line 29499 "ad_aarch64.cpp"
  }
}

void compF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15733 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcmps(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 29516 "ad_aarch64.cpp"
  }
}

void compF_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15747 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcmps(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), 0.0);
  
#line 29533 "ad_aarch64.cpp"
  }
}

void compD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15762 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcmpd(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 29550 "ad_aarch64.cpp"
  }
}

void compD_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15776 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ fcmpd(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), 0.0);
  
#line 29567 "ad_aarch64.cpp"
  }
}

void compF3_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15794 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label done;
    FloatRegister s1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    FloatRegister s2 = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    Register d = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ fcmps(s1, s2);
    // installs 0 if EQ else -1
    __ csinvw(d, zr, zr, Assembler::EQ);
    // keeps -1 if less or unordered else installs 1
    __ csnegw(d, d, d, Assembler::LT);
    __ bind(done);
  
#line 29593 "ad_aarch64.cpp"
  }
}

void compD3_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label done;
    FloatRegister s1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    FloatRegister s2 = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */);
    Register d = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ fcmpd(s1, s2);
    // installs 0 if EQ else -1
    __ csinvw(d, zr, zr, Assembler::EQ);
    // keeps -1 if less or unordered else installs 1
    __ csnegw(d, d, d, Assembler::LT);
    __ bind(done);
  
#line 29619 "ad_aarch64.cpp"
  }
}

void compF3_reg_immF0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15849 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label done;
    FloatRegister s1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    Register d = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ fcmps(s1, 0.0);
    // installs 0 if EQ else -1
    __ csinvw(d, zr, zr, Assembler::EQ);
    // keeps -1 if less or unordered else installs 1
    __ csnegw(d, d, d, Assembler::LT);
    __ bind(done);
  
#line 29644 "ad_aarch64.cpp"
  }
}

void compD3_reg_immD0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15876 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label done;
    FloatRegister s1 = as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */);
    Register d = as_Register(opnd_array(0)->reg(ra_,this)/* dst */);
    __ fcmpd(s1, 0.0);
    // installs 0 if EQ else -1
    __ csinvw(d, zr, zr, Assembler::EQ);
    // keeps -1 if less or unordered else installs 1
    __ csnegw(d, d, d, Assembler::LT);
    __ bind(done);
  
#line 29669 "ad_aarch64.cpp"
  }
}

void cmpLTMask_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15903 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cmpw(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* p */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* q */));
    __ csetw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::LT);
    __ subw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), zr, as_Register(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 29688 "ad_aarch64.cpp"
  }
}

void cmpLTMask_reg_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15921 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ asrw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */), 31);
  
#line 29705 "ad_aarch64.cpp"
  }
}

void cmovI_reg_reg_ltNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
             Assembler::LT);
  
#line 29726 "ad_aarch64.cpp"
  }
}

void cmovI_reg_reg_gtNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 15969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ cselw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
             as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
             as_Register(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
             Assembler::GT);
  
#line 29747 "ad_aarch64.cpp"
  }
}

void branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3732 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Label *L = opnd_array(1)->label();
    __ b(*L);
  
#line 29764 "ad_aarch64.cpp"
  }
}

void branchConNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lbl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 3738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Label *L = opnd_array(3)->label();
    __ br ((Assembler::Condition)opnd_array(1)->ccode(), *L);
  
#line 29783 "ad_aarch64.cpp"
  }
}

void branchConUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lbl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 3744 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Label *L = opnd_array(3)->label();
    __ br ((Assembler::Condition)opnd_array(1)->ccode(), *L);
  
#line 29802 "ad_aarch64.cpp"
  }
}

void cmpI_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16060 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ)
      __ cbzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29826 "ad_aarch64.cpp"
  }
}

void cmpL_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16077 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ)
      __ cbz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29850 "ad_aarch64.cpp"
  }
}

void cmpP_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16094 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ)
      __ cbz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29874 "ad_aarch64.cpp"
  }
}

void cmpN_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ)
      __ cbzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29898 "ad_aarch64.cpp"
  }
}

void cmpP_narrowOop_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// oop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16128 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ)
      __ cbzw(opnd_array(2)->as_Register(ra_,this,idx2)/* oop */, *L);
    else
      __ cbnzw(opnd_array(2)->as_Register(ra_,this,idx2)/* oop */, *L);
  
#line 29922 "ad_aarch64.cpp"
  }
}

void cmpUI_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16145 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ || cond == Assembler::LS)
      __ cbzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnzw(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29946 "ad_aarch64.cpp"
  }
}

void cmpUL_imm0_branchNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16162 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    if (cond == Assembler::EQ || cond == Assembler::LS)
      __ cbz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
    else
      __ cbnz(opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, *L);
  
#line 29970 "ad_aarch64.cpp"
  }
}

void cmpL_branch_signNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16182 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond =
      ((Assembler::Condition)opnd_array(1)->ccode()== Assembler::LT) ? Assembler::NE : Assembler::EQ;
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, 63, *L);
  
#line 29992 "ad_aarch64.cpp"
  }
}

void cmpI_branch_signNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16198 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond =
      ((Assembler::Condition)opnd_array(1)->ccode()== Assembler::LT) ? Assembler::NE : Assembler::EQ;
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, 31, *L);
  
#line 30014 "ad_aarch64.cpp"
  }
}

void cmpL_branch_bitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// labl
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16215 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(5)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    int bit = exact_log2_long(opnd_array(3)->constantL());
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, bit, *L);
  
#line 30037 "ad_aarch64.cpp"
  }
}

void cmpI_branch_bitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// labl
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16232 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(5)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    int bit = exact_log2((juint)opnd_array(3)->constant());
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, bit, *L);
  
#line 30060 "ad_aarch64.cpp"
  }
}

void far_cmpL_branch_signNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16249 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond =
      ((Assembler::Condition)opnd_array(1)->ccode()== Assembler::LT) ? Assembler::NE : Assembler::EQ;
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, 63, *L, /*far*/true);
  
#line 30082 "ad_aarch64.cpp"
  }
}

void far_cmpI_branch_signNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// labl
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16264 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(4)->label();
    Assembler::Condition cond =
      ((Assembler::Condition)opnd_array(1)->ccode()== Assembler::LT) ? Assembler::NE : Assembler::EQ;
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, 31, *L, /*far*/true);
  
#line 30104 "ad_aarch64.cpp"
  }
}

void far_cmpL_branch_bitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// labl
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16280 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(5)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    int bit = exact_log2_long(opnd_array(3)->constantL());
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, bit, *L, /*far*/true);
  
#line 30127 "ad_aarch64.cpp"
  }
}

void far_cmpI_branch_bitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// labl
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16296 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    Label* L = opnd_array(5)->label();
    Assembler::Condition cond = (Assembler::Condition)opnd_array(1)->ccode();
    int bit = exact_log2((juint)opnd_array(3)->constant());
    __ tbr(cond, opnd_array(2)->as_Register(ra_,this,idx2)/* op1 */, bit, *L, /*far*/true);
  
#line 30150 "ad_aarch64.cpp"
  }
}

void cmpL_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16314 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ tst(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 30168 "ad_aarch64.cpp"
  }
}

void cmpI_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16327 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ tstw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 30186 "ad_aarch64.cpp"
  }
}

void cmpL_and_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16338 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ tst(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 30204 "ad_aarch64.cpp"
  }
}

void cmpI_and_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// op3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16349 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ tstw(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 30222 "ad_aarch64.cpp"
  }
}

void branchLoopEndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lbl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 3738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Label *L = opnd_array(3)->label();
    __ br ((Assembler::Condition)opnd_array(1)->ccode(), *L);
  
#line 30241 "ad_aarch64.cpp"
  }
}

void branchLoopEndUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// lbl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 3744 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Label *L = opnd_array(3)->label();
    __ br ((Assembler::Condition)opnd_array(1)->ccode(), *L);
  
#line 30260 "ad_aarch64.cpp"
  }
}

void cmpFastLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// object
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// box
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {

#line 3884 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register oop = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* object */);
    Register box = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* box */);
    Register disp_hdr = as_Register(opnd_array(3)->reg(ra_,this,idx3)/* tmp */);
    Register tmp = as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */);
    Label cont;
    Label object_has_monitor;
    Label cas_failed;

    assert_different_registers(oop, box, tmp, disp_hdr);

    // Load markWord from object into displaced_header.
    __ ldr(disp_hdr, Address(oop, oopDesc::mark_offset_in_bytes()));

    if (DiagnoseSyncOnValueBasedClasses != 0) {
      __ load_klass(tmp, oop);
      __ ldrw(tmp, Address(tmp, Klass::access_flags_offset()));
      __ tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);
      __ br(Assembler::NE, cont);
    }

    // Check for existing monitor
    __ tbnz(disp_hdr, exact_log2(markWord::monitor_value), object_has_monitor);

    if (!UseHeavyMonitors) {
      // Set tmp to be (markWord of object | UNLOCK_VALUE).
      __ orr(tmp, disp_hdr, markWord::unlocked_value);

      // Initialize the box. (Must happen before we update the object mark!)
      __ str(tmp, Address(box, BasicLock::displaced_header_offset_in_bytes()));

      // Compare object markWord with an unlocked value (tmp) and if
      // equal exchange the stack address of our box with object markWord.
      // On failure disp_hdr contains the possibly locked markWord.
      __ cmpxchg(oop, tmp, box, Assembler::xword, /*acquire*/ true,
                 /*release*/ true, /*weak*/ false, disp_hdr);
      __ br(Assembler::EQ, cont);

      assert(oopDesc::mark_offset_in_bytes() == 0, "offset of _mark is not 0");

      // If the compare-and-exchange succeeded, then we found an unlocked
      // object, will have now locked it will continue at label cont

      __ bind(cas_failed);
      // We did not see an unlocked object so try the fast recursive case.

      // Check if the owner is self by comparing the value in the
      // markWord of object (disp_hdr) with the stack pointer.
      __ mov(rscratch1, sp);
      __ sub(disp_hdr, disp_hdr, rscratch1);
      __ mov(tmp, (address) (~(os::vm_page_size()-1) | markWord::lock_mask_in_place));
      // If condition is true we are cont and hence we can store 0 as the
      // displaced header in the box, which indicates that it is a recursive lock.
      __ ands(tmp/*==0?*/, disp_hdr, tmp);   // Sets flags for result
      __ str(tmp/*==0, perhaps*/, Address(box, BasicLock::displaced_header_offset_in_bytes()));
    } else {
      __ tst(oop, oop); // Set NE to indicate 'failure' -> take slow-path. We know that oop != 0.
    }
    __ b(cont);

    // Handle existing monitor.
    __ bind(object_has_monitor);

    // The object's monitor m is unlocked iff m->owner == NULL,
    // otherwise m->owner may contain a thread or a stack address.
    //
    // Try to CAS m->owner from NULL to current thread.
    __ add(tmp, disp_hdr, (ObjectMonitor::owner_offset_in_bytes()-markWord::monitor_value));
    __ cmpxchg(tmp, zr, rthread, Assembler::xword, /*acquire*/ true,
               /*release*/ true, /*weak*/ false, rscratch1); // Sets flags for result

    // Store a non-null value into the box to avoid looking like a re-entrant
    // lock. The fast-path monitor unlock code checks for
    // markWord::monitor_value so use markWord::unused_mark which has the
    // relevant bit set, and also matches ObjectSynchronizer::enter.
    __ mov(tmp, (address)markWord::unused_mark().value());
    __ str(tmp, Address(box, BasicLock::displaced_header_offset_in_bytes()));

    __ br(Assembler::EQ, cont); // CAS success means locking succeeded

    __ cmp(rscratch1, rthread);
    __ br(Assembler::NE, cont); // Check for recursive locking

    // Recursive lock case
    __ increment(Address(disp_hdr, ObjectMonitor::recursions_offset_in_bytes() - markWord::monitor_value), 1);
    // flag == EQ still from the cmp above, checking if this is a reentrant lock

    __ bind(cont);
    // flag == EQ indicates success
    // flag == NE indicates failure
  
#line 30367 "ad_aarch64.cpp"
  }
}

void cmpFastUnlockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// object
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// box
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {

#line 3977 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register oop = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* object */);
    Register box = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* box */);
    Register disp_hdr = as_Register(opnd_array(3)->reg(ra_,this,idx3)/* tmp */);
    Register tmp = as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */);
    Label cont;
    Label object_has_monitor;

    assert_different_registers(oop, box, tmp, disp_hdr);

    if (!UseHeavyMonitors) {
      // Find the lock address and load the displaced header from the stack.
      __ ldr(disp_hdr, Address(box, BasicLock::displaced_header_offset_in_bytes()));

      // If the displaced header is 0, we have a recursive unlock.
      __ cmp(disp_hdr, zr);
      __ br(Assembler::EQ, cont);
    }

    // Handle existing monitor.
    __ ldr(tmp, Address(oop, oopDesc::mark_offset_in_bytes()));
    __ tbnz(disp_hdr, exact_log2(markWord::monitor_value), object_has_monitor);

    if (!UseHeavyMonitors) {
      // Check if it is still a light weight lock, this is is true if we
      // see the stack address of the basicLock in the markWord of the
      // object.

      __ cmpxchg(oop, box, disp_hdr, Assembler::xword, /*acquire*/ false,
                 /*release*/ true, /*weak*/ false, tmp);
    } else {
      __ tst(oop, oop); // Set NE to indicate 'failure' -> take slow-path. We know that oop != 0.
    }
    __ b(cont);

    assert(oopDesc::mark_offset_in_bytes() == 0, "offset of _mark is not 0");

    // Handle existing monitor.
    __ bind(object_has_monitor);
    STATIC_ASSERT(markWord::monitor_value <= INT_MAX);
    __ add(tmp, tmp, -(int)markWord::monitor_value); // monitor
    __ ldr(disp_hdr, Address(tmp, ObjectMonitor::recursions_offset_in_bytes()));

    Label notRecursive;
    __ cbz(disp_hdr, notRecursive);

    // Recursive lock
    __ sub(disp_hdr, disp_hdr, 1u);
    __ str(disp_hdr, Address(tmp, ObjectMonitor::recursions_offset_in_bytes()));
    __ cmp(disp_hdr, disp_hdr); // Sets flags for result
    __ b(cont);

    __ bind(notRecursive);
    __ ldr(rscratch1, Address(tmp, ObjectMonitor::EntryList_offset_in_bytes()));
    __ ldr(disp_hdr, Address(tmp, ObjectMonitor::cxq_offset_in_bytes()));
    __ orr(rscratch1, rscratch1, disp_hdr); // Will be 0 if both are 0.
    __ cmp(rscratch1, zr); // Sets flags for result
    __ cbnz(rscratch1, cont);
    // need a release store here
    __ lea(tmp, Address(tmp, ObjectMonitor::owner_offset_in_bytes()));
    __ stlr(zr, tmp); // set unowned

    __ bind(cont);
    // flag == EQ indicates success
    // flag == NE indicates failure
  
#line 30449 "ad_aarch64.cpp"
  }
}

void safePointNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// cr
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16444 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ read_polling_page(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* poll */), relocInfo::poll_type);
  
#line 30465 "ad_aarch64.cpp"
  }
}

void CallStaticJavaDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3768 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);

    address addr = (address)opnd_array(1)->method();
    address call;
    if (!_method) {
      // A call to a runtime wrapper, e.g. new, new_typeArray_Java, uncommon_trap.
      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &cbuf);
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    } else {
      int method_index = resolved_method_index(cbuf);
      RelocationHolder rspec = _optimized_virtual ? opt_virtual_call_Relocation::spec(method_index)
                                                  : static_call_Relocation::spec(method_index);
      call = __ trampoline_call(Address(addr, rspec), &cbuf);
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
      // Emit stub for static call
      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);
      if (stub == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    }

    // Only non uncommon_trap calls need to reinitialize ptrue.
    if (Compile::current()->max_vector_size() > 0 && uncommon_trap_request() == 0) {
      __ reinitialize_ptrue();
    }
  
#line 30511 "ad_aarch64.cpp"
  }
  {

#line 3815 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    if (VerifyStackAtCalls) {
      // Check that stack depth is unchanged: find majik cookie on stack
      __ call_Unimplemented();
    }
  
#line 30523 "ad_aarch64.cpp"
  }
}

void CallDynamicJavaDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3803 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    int method_index = resolved_method_index(cbuf);
    address call = __ ic_call((address)opnd_array(1)->method(), method_index);
    if (call == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    } else if (Compile::current()->max_vector_size() > 0) {
      __ reinitialize_ptrue();
    }
  
#line 30546 "ad_aarch64.cpp"
  }
  {

#line 3815 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    if (VerifyStackAtCalls) {
      // Check that stack depth is unchanged: find majik cookie on stack
      __ call_Unimplemented();
    }
  
#line 30558 "ad_aarch64.cpp"
  }
}

void CallRuntimeDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3823 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);

    // some calls to generated routines (arraycopy code) are scheduled
    // by C2 as runtime calls. if so we can call them using a br (they
    // will be in a reachable segment) otherwise we have to use a blr
    // which loads the absolute address into a register.
    address entry = (address)opnd_array(1)->method();
    CodeBlob *cb = CodeCache::find_blob(entry);
    if (cb) {
      address call = __ trampoline_call(Address(entry, relocInfo::runtime_call_type));
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    } else {
      Label retaddr;
      __ adr(rscratch2, retaddr);
      __ lea(rscratch1, RuntimeAddress(entry));
      // Leave a breadcrumb for JavaFrameAnchor::capture_last_Java_pc()
      __ stp(zr, rscratch2, Address(__ pre(sp, -2 * wordSize)));
      __ blr(rscratch1);
      __ bind(retaddr);
      __ add(sp, sp, 2 * wordSize);
    }
    if (Compile::current()->max_vector_size() > 0) {
      __ reinitialize_ptrue();
    }
  
#line 30599 "ad_aarch64.cpp"
  }
}

void CallLeafDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3823 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);

    // some calls to generated routines (arraycopy code) are scheduled
    // by C2 as runtime calls. if so we can call them using a br (they
    // will be in a reachable segment) otherwise we have to use a blr
    // which loads the absolute address into a register.
    address entry = (address)opnd_array(1)->method();
    CodeBlob *cb = CodeCache::find_blob(entry);
    if (cb) {
      address call = __ trampoline_call(Address(entry, relocInfo::runtime_call_type));
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    } else {
      Label retaddr;
      __ adr(rscratch2, retaddr);
      __ lea(rscratch1, RuntimeAddress(entry));
      // Leave a breadcrumb for JavaFrameAnchor::capture_last_Java_pc()
      __ stp(zr, rscratch2, Address(__ pre(sp, -2 * wordSize)));
      __ blr(rscratch1);
      __ bind(retaddr);
      __ add(sp, sp, 2 * wordSize);
    }
    if (Compile::current()->max_vector_size() > 0) {
      __ reinitialize_ptrue();
    }
  
#line 30640 "ad_aarch64.cpp"
  }
}

void CallLeafNoFPDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3823 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);

    // some calls to generated routines (arraycopy code) are scheduled
    // by C2 as runtime calls. if so we can call them using a br (they
    // will be in a reachable segment) otherwise we have to use a blr
    // which loads the absolute address into a register.
    address entry = (address)opnd_array(1)->method();
    CodeBlob *cb = CodeCache::find_blob(entry);
    if (cb) {
      address call = __ trampoline_call(Address(entry, relocInfo::runtime_call_type));
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    } else {
      Label retaddr;
      __ adr(rscratch2, retaddr);
      __ lea(rscratch1, RuntimeAddress(entry));
      // Leave a breadcrumb for JavaFrameAnchor::capture_last_Java_pc()
      __ stp(zr, rscratch2, Address(__ pre(sp, -2 * wordSize)));
      __ blr(rscratch1);
      __ bind(retaddr);
      __ add(sp, sp, 2 * wordSize);
    }
    if (Compile::current()->max_vector_size() > 0) {
      __ reinitialize_ptrue();
    }
  
#line 30681 "ad_aarch64.cpp"
  }
}

void CallNativeDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 3823 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);

    // some calls to generated routines (arraycopy code) are scheduled
    // by C2 as runtime calls. if so we can call them using a br (they
    // will be in a reachable segment) otherwise we have to use a blr
    // which loads the absolute address into a register.
    address entry = (address)opnd_array(1)->method();
    CodeBlob *cb = CodeCache::find_blob(entry);
    if (cb) {
      address call = __ trampoline_call(Address(entry, relocInfo::runtime_call_type));
      if (call == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
    } else {
      Label retaddr;
      __ adr(rscratch2, retaddr);
      __ lea(rscratch1, RuntimeAddress(entry));
      // Leave a breadcrumb for JavaFrameAnchor::capture_last_Java_pc()
      __ stp(zr, rscratch2, Address(__ pre(sp, -2 * wordSize)));
      __ blr(rscratch1);
      __ bind(retaddr);
      __ add(sp, sp, 2 * wordSize);
    }
    if (Compile::current()->max_vector_size() > 0) {
      __ reinitialize_ptrue();
    }
  
#line 30722 "ad_aarch64.cpp"
  }
}

void TailCalljmpIndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// method_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// 
  {

#line 3868 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register target_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* jump_target */);
    __ br(target_reg);
  
#line 30740 "ad_aarch64.cpp"
  }
}

void TailjmpIndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// ex_oop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// 
  {

#line 3874 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    Register target_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* jump_target */);
    // exception oop should be in r0
    // ret addr has been popped into lr
    // callee expects it in r3
    __ mov(r3, lr);
    __ br(target_reg);
  
#line 30762 "ad_aarch64.cpp"
  }
}

void CreateExceptionNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint CreateExceptionNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void RethrowExceptionNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {

#line 3853 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
    __ far_jump(RuntimeAddress(OptoRuntime::rethrow_stub()));
  
#line 30791 "ad_aarch64.cpp"
  }
}

void RetNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {

#line 3858 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    C2_MacroAssembler _masm(&cbuf);
#ifdef ASSERT
    if (Compile::current()->max_vector_size() > 0) {
      __ verify_ptrue();
    }
#endif
    __ ret(lr);
  
#line 30812 "ad_aarch64.cpp"
  }
}

void ShouldNotReachHereNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16639 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    if (is_reachable()) {
      __ stop(_halt_reason);
    }
  
#line 30830 "ad_aarch64.cpp"
  }
}

void partialSubtypeCheckNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// sub
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// super
  {

#line 3751 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     Register sub_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* sub */);
     Register super_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* super */);
     Register temp_reg = as_Register(R2_enc);
     Register result_reg = as_Register(opnd_array(0)->reg(ra_,this)/* result */);

     Label miss;
     C2_MacroAssembler _masm(&cbuf);
     __ check_klass_subtype_slow_path(sub_reg, super_reg, temp_reg, result_reg,
                                     NULL, &miss,
                                     /*set_cond_codes:*/ true);
     if ((0x1 /*primary()*/)) {
       __ mov(result_reg, zr);
     }
     __ bind(miss);
  
#line 30859 "ad_aarch64.cpp"
  }
}

void partialSubtypeCheckVsZeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// sub
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// super
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 3751 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

     Register sub_reg = as_Register(opnd_array(1)->reg(ra_,this,idx1)/* sub */);
     Register super_reg = as_Register(opnd_array(2)->reg(ra_,this,idx2)/* super */);
     Register temp_reg = as_Register(R2_enc);
     Register result_reg = as_Register(R5_enc);

     Label miss;
     C2_MacroAssembler _masm(&cbuf);
     __ check_klass_subtype_slow_path(sub_reg, super_reg, temp_reg, result_reg,
                                     NULL, &miss,
                                     /*set_cond_codes:*/ true);
     if ((0x0 /*primary()*/)) {
       __ mov(result_reg, zr);
     }
     __ bind(miss);
  
#line 30889 "ad_aarch64.cpp"
  }
}

void string_compareUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16694 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      as_Register(R10_enc), as_Register(R11_enc),
                      fnoreg, fnoreg, fnoreg, pnoreg, pnoreg, StrIntrinsicNode::UU);
  
#line 30912 "ad_aarch64.cpp"
  }
}

void string_compareLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16712 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      as_Register(R10_enc), as_Register(R11_enc),
                      fnoreg, fnoreg, fnoreg, pnoreg, pnoreg, StrIntrinsicNode::LL);
  
#line 30934 "ad_aarch64.cpp"
  }
}

void string_compareULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16731 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      as_Register(R10_enc), as_Register(R11_enc),
                      as_FloatRegister(V0_enc), as_FloatRegister(V1_enc),
                      as_FloatRegister(V2_enc), pnoreg, pnoreg, StrIntrinsicNode::UL);
  
#line 30957 "ad_aarch64.cpp"
  }
}

void string_compareLUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16751 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      as_Register(R10_enc), as_Register(R11_enc),
                      as_FloatRegister(V0_enc), as_FloatRegister(V1_enc),
                      as_FloatRegister(V2_enc), pnoreg, pnoreg, StrIntrinsicNode::LU);
  
#line 30980 "ad_aarch64.cpp"
  }
}

void string_indexofUUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// tmp5
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// tmp6
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16771 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */,
                      opnd_array(9)->as_Register(ra_,this,idx9)/* tmp5 */, opnd_array(10)->as_Register(ra_,this,idx10)/* tmp6 */,
                      -1, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::UU);
  
#line 31010 "ad_aarch64.cpp"
  }
}

void string_indexofLLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// tmp5
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// tmp6
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16792 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */,
                      opnd_array(9)->as_Register(ra_,this,idx9)/* tmp5 */, opnd_array(10)->as_Register(ra_,this,idx10)/* tmp6 */,
                      -1, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::LL);
  
#line 31040 "ad_aarch64.cpp"
  }
}

void string_indexofULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// tmp5
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// tmp6
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16813 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */,
                      opnd_array(9)->as_Register(ra_,this,idx9)/* tmp5 */, opnd_array(10)->as_Register(ra_,this,idx10)/* tmp6 */,
                      -1, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::UL);
  
#line 31070 "ad_aarch64.cpp"
  }
}

void string_indexof_conUUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16834 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, zr,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */, zr, zr,
                      icnt2, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::UU);
  
#line 31098 "ad_aarch64.cpp"
  }
}

void string_indexof_conLLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16855 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, zr,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */, zr, zr,
                      icnt2, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::LL);
  
#line 31126 "ad_aarch64.cpp"
  }
}

void string_indexof_conULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp3
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// tmp4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16876 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, zr,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_Register(ra_,this,idx7)/* tmp3 */, opnd_array(8)->as_Register(ra_,this,idx8)/* tmp4 */, zr, zr,
                      icnt2, opnd_array(0)->as_Register(ra_,this)/* result */, StrIntrinsicNode::UL);
  
#line 31154 "ad_aarch64.cpp"
  }
}

void string_indexof_charNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ch
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16898 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ string_indexof_char(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* ch */,
                           opnd_array(0)->as_Register(ra_,this)/* result */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_Register(ra_,this,idx5)/* tmp2 */,
                           opnd_array(6)->as_Register(ra_,this,idx6)/* tmp3 */);
  
#line 31177 "ad_aarch64.cpp"
  }
}

void stringL_indexof_charNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ch
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16917 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ stringL_indexof_char(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* ch */,
                            opnd_array(0)->as_Register(ra_,this)/* result */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_Register(ra_,this,idx5)/* tmp2 */,
                            opnd_array(6)->as_Register(ra_,this,idx6)/* tmp3 */);
  
#line 31200 "ad_aarch64.cpp"
  }
}

void string_equalsLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// str2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16933 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_equals(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* str2 */,
                     opnd_array(0)->as_Register(ra_,this)/* result */, opnd_array(3)->as_Register(ra_,this,idx3)/* cnt */, 1);
  
#line 31220 "ad_aarch64.cpp"
  }
}

void string_equalsUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// str2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16949 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_equals(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* str2 */,
                     opnd_array(0)->as_Register(ra_,this)/* result */, opnd_array(3)->as_Register(ra_,this,idx3)/* cnt */, 2);
  
#line 31240 "ad_aarch64.cpp"
  }
}

void array_equalsBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ary2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16966 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    address tpc = __ arrays_equals(opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* ary2 */,
                                   opnd_array(3)->as_Register(ra_,this,idx3)/* tmp1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */, opnd_array(5)->as_Register(ra_,this,idx5)/* tmp3 */,
                                   opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(R10_enc), 1);
    if (tpc == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    }
  
#line 31266 "ad_aarch64.cpp"
  }
}

void array_equalsCNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ary2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 16987 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    address tpc = __ arrays_equals(opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* ary2 */,
                                   opnd_array(3)->as_Register(ra_,this,idx3)/* tmp1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */, opnd_array(5)->as_Register(ra_,this,idx5)/* tmp3 */,
                                   opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(R10_enc), 2);
    if (tpc == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    }
  
#line 31292 "ad_aarch64.cpp"
  }
}

void has_negativesNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// len
  {
    C2_MacroAssembler _masm(&cbuf);

#line 17004 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    address tpc = __ has_negatives(opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* len */, opnd_array(0)->as_Register(ra_,this)/* result */);
    if (tpc == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    }
  
#line 31313 "ad_aarch64.cpp"
  }
}

void string_compressNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 17024 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ char_array_compress(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
                           opnd_array(4)->as_FloatRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_FloatRegister(ra_,this,idx5)/* tmp2 */,
                           opnd_array(6)->as_FloatRegister(ra_,this,idx6)/* tmp3 */, opnd_array(7)->as_FloatRegister(ra_,this,idx7)/* tmp4 */,
                           opnd_array(0)->as_Register(ra_,this)/* result */);
  
#line 31338 "ad_aarch64.cpp"
  }
}

void string_inflateNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp4
  {
    C2_MacroAssembler _masm(&cbuf);

#line 17041 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    address tpc = __ byte_array_inflate(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
                                        opnd_array(4)->as_FloatRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_FloatRegister(ra_,this,idx5)/* tmp2 */,
                                        opnd_array(6)->as_FloatRegister(ra_,this,idx6)/* tmp3 */, opnd_array(7)->as_Register(ra_,this,idx7)/* tmp4 */);
    if (tpc == NULL) {
      ciEnv::current()->record_failure("CodeCache is full");
      return;
    }
  
#line 31366 "ad_aarch64.cpp"
  }
}

void encode_iso_arrayNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  {
    C2_MacroAssembler _masm(&cbuf);

#line 17065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    __ encode_iso_array(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
         opnd_array(0)->as_Register(ra_,this)/* result */, as_FloatRegister(V0_enc),  as_FloatRegister(V1_enc),
         as_FloatRegister(V2_enc),  as_FloatRegister(V3_enc));
  
#line 31386 "ad_aarch64.cpp"
  }
}

void tlsLoadPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint tlsLoadPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void loadV2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3155 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31416 "ad_aarch64.cpp"
  }
}

void loadV4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3161 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::S,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31433 "ad_aarch64.cpp"
  }
}

void loadV8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3167 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::D,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31450 "ad_aarch64.cpp"
  }
}

void loadV16Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3173 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31467 "ad_aarch64.cpp"
  }
}

void storeV2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31485 "ad_aarch64.cpp"
  }
}

void storeV4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3185 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::S,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31503 "ad_aarch64.cpp"
  }
}

void storeV8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3191 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::D,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31521 "ad_aarch64.cpp"
  }
}

void storeV16Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3197 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::Q,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 31539 "ad_aarch64.cpp"
  }
}

void reinterpretDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 128 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // empty
  
#line 31555 "ad_aarch64.cpp"
  }
}

void reinterpretXNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 141 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // empty
  
#line 31571 "ad_aarch64.cpp"
  }
}

void reinterpretD2XNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 154 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher 64-bits of the "dst" register must be cleared to zero.
    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31590 "ad_aarch64.cpp"
  }
}

void reinterpretX2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 170 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher 64-bits of the "dst" register must be cleared to zero.
    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31609 "ad_aarch64.cpp"
  }
}

void reinterpretS2XNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 186 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher bits of the "dst" register must be cleared to zero.
    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31626 "ad_aarch64.cpp"
  }
}

void reinterpretX2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher bits of the "dst" register must be cleared to zero.
    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31643 "ad_aarch64.cpp"
  }
}

void reinterpretS2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 214 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher bits of the "dst" register must be cleared to zero.
    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31660 "ad_aarch64.cpp"
  }
}

void reinterpretD2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // The higher bits of the "dst" register must be cleared to zero.
    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31677 "ad_aarch64.cpp"
  }
}

void vcvt8Bto8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 242 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
  
#line 31693 "ad_aarch64.cpp"
  }
}

void vcvt4Bto4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 253 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
  
#line 31709 "ad_aarch64.cpp"
  }
}

void vcvt8Sto8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 264 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8H);
  
#line 31725 "ad_aarch64.cpp"
  }
}

void vcvt4Sto4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 275 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8H);
  
#line 31741 "ad_aarch64.cpp"
  }
}

void vcvt4Sto4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 286 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4H);
  
#line 31757 "ad_aarch64.cpp"
  }
}

void vcvt4Ito4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 297 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4S);
  
#line 31773 "ad_aarch64.cpp"
  }
}

void vcvt2Ito2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 308 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2S);
  
#line 31789 "ad_aarch64.cpp"
  }
}

void vcvt2Lto2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 319 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2D);
  
#line 31805 "ad_aarch64.cpp"
  }
}

void vcvt4Ito4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 332 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4S);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H);
  
#line 31822 "ad_aarch64.cpp"
  }
}

void vcvt4Bto4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 346 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
  
#line 31839 "ad_aarch64.cpp"
  }
}

void vcvt2Lto2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 360 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ scvtfv(__ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ fcvtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D);
  
#line 31856 "ad_aarch64.cpp"
  }
}

void vcvt2Ito2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 372 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ scvtfv(__ T2S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31872 "ad_aarch64.cpp"
  }
}

void vcvt4Ito4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 383 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ scvtfv(__ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31888 "ad_aarch64.cpp"
  }
}

void vcvt2Lto2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 394 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ scvtfv(__ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31904 "ad_aarch64.cpp"
  }
}

void vcvt4Sto4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 407 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4H);
    __ scvtfv(__ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 31921 "ad_aarch64.cpp"
  }
}

void vcvt2Ito2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 421 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2S);
    __ scvtfv(__ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 31938 "ad_aarch64.cpp"
  }
}

void vcvt4Bto4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 436 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ sxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
    __ scvtfv(__ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 31956 "ad_aarch64.cpp"
  }
}

void vcvt2Fto2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 451 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2S);
    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 31973 "ad_aarch64.cpp"
  }
}

void vcvt2Fto2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 463 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 31989 "ad_aarch64.cpp"
  }
}

void vcvt4Fto4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 474 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 32005 "ad_aarch64.cpp"
  }
}

void vcvt2Dto2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 485 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 32021 "ad_aarch64.cpp"
  }
}

void vcvt4Fto4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 498 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S);
  
#line 32038 "ad_aarch64.cpp"
  }
}

void vcvt2Dto2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 516 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0, 1);
    // We can't use fcvtzs(vector, integer) instruction here because we need
    // saturation arithmetic. See JDK-8276151.
    __ fcvtzdw(rscratch1, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ fcvtzdw(rscratch2, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */));
    __ fmovs(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), rscratch1);
    __ mov(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ T2S, 1, rscratch2);
  
#line 32061 "ad_aarch64.cpp"
  }
}

void vcvt4Fto4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 536 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H);
  
#line 32079 "ad_aarch64.cpp"
  }
}

void vcvt2Fto2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 549 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2S);
  
#line 32095 "ad_aarch64.cpp"
  }
}

void vcvt2Dto2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 560 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fcvtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2D);
  
#line 32111 "ad_aarch64.cpp"
  }
}

void reduce_add8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 579 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ addw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32133 "ad_aarch64.cpp"
  }
}

void reduce_add16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 599 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T16B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ addw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32155 "ad_aarch64.cpp"
  }
}

void reduce_add4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 619 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ addw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32177 "ad_aarch64.cpp"
  }
}

void reduce_add8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 639 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ addw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32199 "ad_aarch64.cpp"
  }
}

void reduce_add2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addpd(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ D, 0);
    __ add(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32220 "ad_aarch64.cpp"
  }
}

void reduce_mul8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 682 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ T8B,
            as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ H,
           as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ T8B,
            as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */));
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ B, 0);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ B, 1);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32254 "ad_aarch64.cpp"
  }
}

void reduce_mul16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 720 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ T8B,
            as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ S,
           as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ T8B,
            as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */));
    __ ins(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ H,
           as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ T8B,
            as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */));
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ B, 0);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ B, 1);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32292 "ad_aarch64.cpp"
  }
}

void reduce_mul4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 758 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ T4H,
            as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ H, 0);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ umov(opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ H, 1);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32321 "ad_aarch64.cpp"
  }
}

void reduce_mul8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 790 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), __ T4H,
            as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ S,
           as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ T4H,
            as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp1 */));
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ H, 0);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ umov(opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp2 */), __ H, 1);
    __ mulw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(6)->as_Register(ra_,this,idx6)/* itmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32355 "ad_aarch64.cpp"
  }
}

void reduce_mul2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 819 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
  
#line 32377 "ad_aarch64.cpp"
  }
}

void reduce_max8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 839 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32399 "ad_aarch64.cpp"
  }
}

void reduce_max16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 859 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T16B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32421 "ad_aarch64.cpp"
  }
}

void reduce_max4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 879 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32443 "ad_aarch64.cpp"
  }
}

void reduce_max8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 899 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32465 "ad_aarch64.cpp"
  }
}

void reduce_max4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 919 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32487 "ad_aarch64.cpp"
  }
}

void reduce_min8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 939 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32509 "ad_aarch64.cpp"
  }
}

void reduce_min16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 959 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T16B, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ B, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32531 "ad_aarch64.cpp"
  }
}

void reduce_min4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 979 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32553 "ad_aarch64.cpp"
  }
}

void reduce_min8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 999 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T8H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ smov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ H, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32575 "ad_aarch64.cpp"
  }
}

void reduce_min4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1019 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32597 "ad_aarch64.cpp"
  }
}

void reduce_max2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1039 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smaxp(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T2S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::GT);
  
#line 32619 "ad_aarch64.cpp"
  }
}

void reduce_min2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1059 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sminp(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T2S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S, 0);
    __ cmpw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */));
    __ cselw(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), Assembler::LT);
  
#line 32641 "ad_aarch64.cpp"
  }
}

void reduce_max2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ cmp(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ csel(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), Assembler::GT);
    __ umov(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ cmp(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ csel(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), Assembler::GT);
  
#line 32665 "ad_aarch64.cpp"
  }
}

void reduce_min2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1105 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ cmp(as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ csel(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(1)->reg(ra_,this,idx1)/* isrc */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), Assembler::LT);
    __ umov(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ cmp(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ csel(as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), Assembler::LT);
  
#line 32689 "ad_aarch64.cpp"
  }
}

void reduce_max2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1123 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmaxp(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S);
    __ fmaxs(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */));
  
#line 32708 "ad_aarch64.cpp"
  }
}

void reduce_max4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1137 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmaxv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ fmaxs(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */));
  
#line 32727 "ad_aarch64.cpp"
  }
}

void reduce_max2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1151 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmaxp(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D);
    __ fmaxd(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dsrc */));
  
#line 32746 "ad_aarch64.cpp"
  }
}

void reduce_min2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1165 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fminp(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S);
    __ fmins(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */));
  
#line 32765 "ad_aarch64.cpp"
  }
}

void reduce_min4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ fmins(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */));
  
#line 32784 "ad_aarch64.cpp"
  }
}

void reduce_min2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1193 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fminp(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D);
    __ fmind(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dsrc */));
  
#line 32803 "ad_aarch64.cpp"
  }
}

void reduce_and8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1214 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32828 "ad_aarch64.cpp"
  }
}

void reduce_orr8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1240 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32853 "ad_aarch64.cpp"
  }
}

void reduce_eor8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1266 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32878 "ad_aarch64.cpp"
  }
}

void reduce_and16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1293 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32904 "ad_aarch64.cpp"
  }
}

void reduce_orr16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1321 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32930 "ad_aarch64.cpp"
  }
}

void reduce_eor16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1349 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 8);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxtb(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32956 "ad_aarch64.cpp"
  }
}

void reduce_and4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1375 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 32980 "ad_aarch64.cpp"
  }
}

void reduce_orr4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1399 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33004 "ad_aarch64.cpp"
  }
}

void reduce_eor4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1423 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33028 "ad_aarch64.cpp"
  }
}

void reduce_and8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1448 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33053 "ad_aarch64.cpp"
  }
}

void reduce_orr8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1474 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33078 "ad_aarch64.cpp"
  }
}

void reduce_eor8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1500 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 16);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
    __ sxth(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33103 "ad_aarch64.cpp"
  }
}

void reduce_and2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1523 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33125 "ad_aarch64.cpp"
  }
}

void reduce_orr2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1543 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33147 "ad_aarch64.cpp"
  }
}

void reduce_eor2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1563 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33169 "ad_aarch64.cpp"
  }
}

void reduce_and4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1584 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ andw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33192 "ad_aarch64.cpp"
  }
}

void reduce_orr4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1606 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ orrw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33215 "ad_aarch64.cpp"
  }
}

void reduce_eor4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1628 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, Assembler::LSR, 32);
    __ eorw(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 33238 "ad_aarch64.cpp"
  }
}

void reduce_and2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1649 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ andr(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
  
#line 33260 "ad_aarch64.cpp"
  }
}

void reduce_orr2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1669 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ orr (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
  
#line 33282 "ad_aarch64.cpp"
  }
}

void reduce_eor2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1689 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 0);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ D, 1);
    __ eor (opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */);
  
#line 33304 "ad_aarch64.cpp"
  }
}

void insert8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1707 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33326 "ad_aarch64.cpp"
  }
}

void insert16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1724 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33348 "ad_aarch64.cpp"
  }
}

void insert4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1741 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33370 "ad_aarch64.cpp"
  }
}

void insert8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1758 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33392 "ad_aarch64.cpp"
  }
}

void insert2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1775 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33414 "ad_aarch64.cpp"
  }
}

void insert4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1792 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33436 "ad_aarch64.cpp"
  }
}

void insert2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1809 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
      __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    }
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, opnd_array(3)->constant(), opnd_array(2)->as_Register(ra_,this,idx2)/* val */);
  
#line 33458 "ad_aarch64.cpp"
  }
}

void insert2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1827 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */), opnd_array(3)->constant(), 0);
  
#line 33480 "ad_aarch64.cpp"
  }
}

void insert4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1844 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */), opnd_array(3)->constant(), 0);
  
#line 33502 "ad_aarch64.cpp"
  }
}

void insert2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1861 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */), opnd_array(3)->constant(), 0);
  
#line 33524 "ad_aarch64.cpp"
  }
}

void extract8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1878 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ B, opnd_array(2)->constant());
  
#line 33541 "ad_aarch64.cpp"
  }
}

void extract16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1890 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ B, opnd_array(2)->constant());
  
#line 33558 "ad_aarch64.cpp"
  }
}

void extract4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1902 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ H, opnd_array(2)->constant());
  
#line 33575 "ad_aarch64.cpp"
  }
}

void extract8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1914 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ H, opnd_array(2)->constant());
  
#line 33592 "ad_aarch64.cpp"
  }
}

void extract2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1926 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S, opnd_array(2)->constant());
  
#line 33609 "ad_aarch64.cpp"
  }
}

void extract4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S, opnd_array(2)->constant());
  
#line 33626 "ad_aarch64.cpp"
  }
}

void extract2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1950 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D, opnd_array(2)->constant());
  
#line 33643 "ad_aarch64.cpp"
  }
}

void extract2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1962 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0, opnd_array(2)->constant());
  
#line 33661 "ad_aarch64.cpp"
  }
}

void extract4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1975 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0, opnd_array(2)->constant());
  
#line 33679 "ad_aarch64.cpp"
  }
}

void extract2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1988 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0, opnd_array(2)->constant());
  
#line 33697 "ad_aarch64.cpp"
  }
}

void vcmpDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cond
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2003 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    assert(type2aelembytes(bt) != 8, "not supported");
    __ neon_compare(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), bt, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                    as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), (int)opnd_array(3)->constant(), /*isQ*/ false);
  
#line 33718 "ad_aarch64.cpp"
  }
}

void vcmpXNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cond
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2018 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    __ neon_compare(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), bt, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                    as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), (int)opnd_array(3)->constant(), /*isQ*/ true);
  
#line 33738 "ad_aarch64.cpp"
  }
}

void vmul2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2043 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* tmp1 */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), __ D, 0);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), __ D, 0);
    __ mul(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* tmp1 */));
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, 0, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */);
    __ umov(opnd_array(3)->as_Register(ra_,this,idx3)/* tmp1 */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), __ D, 1);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), __ D, 1);
    __ mul(as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */), as_Register(opnd_array(4)->reg(ra_,this,idx4)/* tmp2 */), as_Register(opnd_array(3)->reg(ra_,this,idx3)/* tmp1 */));
    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, 1, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp2 */);
  
#line 33764 "ad_aarch64.cpp"
  }
}

void vnot2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33782 "ad_aarch64.cpp"
  }
}

void vnot2I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33800 "ad_aarch64.cpp"
  }
}

void vnot2I_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33818 "ad_aarch64.cpp"
  }
}

void vnot2I_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33836 "ad_aarch64.cpp"
  }
}

void vnot2I_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33854 "ad_aarch64.cpp"
  }
}

void vnot2I_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2066 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33872 "ad_aarch64.cpp"
  }
}

void vnot4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33890 "ad_aarch64.cpp"
  }
}

void vnot4I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33908 "ad_aarch64.cpp"
  }
}

void vnot4I_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33926 "ad_aarch64.cpp"
  }
}

void vnot4I_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33944 "ad_aarch64.cpp"
  }
}

void vnot4I_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33962 "ad_aarch64.cpp"
  }
}

void vnot4I_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2081 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 33980 "ad_aarch64.cpp"
  }
}

void vnot2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2094 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 33998 "ad_aarch64.cpp"
  }
}

void vnot2L_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2094 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ notr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 34016 "ad_aarch64.cpp"
  }
}

void vand_not2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34035 "ad_aarch64.cpp"
  }
}

void vand_not2I_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34054 "ad_aarch64.cpp"
  }
}

void vand_not2I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34073 "ad_aarch64.cpp"
  }
}

void vand_not2I_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34092 "ad_aarch64.cpp"
  }
}

void vand_not2I_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34111 "ad_aarch64.cpp"
  }
}

void vand_not2I_5Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34130 "ad_aarch64.cpp"
  }
}

void vand_not2I_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34149 "ad_aarch64.cpp"
  }
}

void vand_not2I_6Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34168 "ad_aarch64.cpp"
  }
}

void vand_not2I_7Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34187 "ad_aarch64.cpp"
  }
}

void vand_not2I_9Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34206 "ad_aarch64.cpp"
  }
}

void vand_not2I_8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34225 "ad_aarch64.cpp"
  }
}

void vand_not2I_10Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34244 "ad_aarch64.cpp"
  }
}

void vand_not4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34263 "ad_aarch64.cpp"
  }
}

void vand_not4I_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34282 "ad_aarch64.cpp"
  }
}

void vand_not4I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34301 "ad_aarch64.cpp"
  }
}

void vand_not4I_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34320 "ad_aarch64.cpp"
  }
}

void vand_not4I_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34339 "ad_aarch64.cpp"
  }
}

void vand_not4I_5Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34358 "ad_aarch64.cpp"
  }
}

void vand_not4I_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34377 "ad_aarch64.cpp"
  }
}

void vand_not4I_6Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34396 "ad_aarch64.cpp"
  }
}

void vand_not4I_7Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34415 "ad_aarch64.cpp"
  }
}

void vand_not4I_9Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34434 "ad_aarch64.cpp"
  }
}

void vand_not4I_8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34453 "ad_aarch64.cpp"
  }
}

void vand_not4I_10Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34472 "ad_aarch64.cpp"
  }
}

void vand_not2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2139 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34491 "ad_aarch64.cpp"
  }
}

void vand_not2L_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2139 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 34510 "ad_aarch64.cpp"
  }
}

void vand_not2L_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2139 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 34529 "ad_aarch64.cpp"
  }
}

void vand_not2L_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2139 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34548 "ad_aarch64.cpp"
  }
}

void vmax8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2155 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34567 "ad_aarch64.cpp"
  }
}

void vmax16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2169 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34586 "ad_aarch64.cpp"
  }
}

void vmax4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2183 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34605 "ad_aarch64.cpp"
  }
}

void vmax8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2197 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34624 "ad_aarch64.cpp"
  }
}

void vmax2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2211 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34643 "ad_aarch64.cpp"
  }
}

void vmax4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2225 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ maxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34662 "ad_aarch64.cpp"
  }
}

void vmin8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2240 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34681 "ad_aarch64.cpp"
  }
}

void vmin16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34700 "ad_aarch64.cpp"
  }
}

void vmin4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2268 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34719 "ad_aarch64.cpp"
  }
}

void vmin8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34738 "ad_aarch64.cpp"
  }
}

void vmin2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2296 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34757 "ad_aarch64.cpp"
  }
}

void vmin4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2310 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ minv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34776 "ad_aarch64.cpp"
  }
}

void vmax2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2327 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ cmgt(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ bsl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 34797 "ad_aarch64.cpp"
  }
}

void vmin2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2344 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ cmgt(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ bsl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 34818 "ad_aarch64.cpp"
  }
}

void vbsl8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2361 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bsl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 34837 "ad_aarch64.cpp"
  }
}

void vbsl16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2374 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ bsl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 34856 "ad_aarch64.cpp"
  }
}

void loadmask8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2389 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 34872 "ad_aarch64.cpp"
  }
}

void loadmask16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2401 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 34888 "ad_aarch64.cpp"
  }
}

void storemask8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2413 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 34905 "ad_aarch64.cpp"
  }
}

void storemask16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2425 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 34922 "ad_aarch64.cpp"
  }
}

void loadmask4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2438 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 34939 "ad_aarch64.cpp"
  }
}

void loadmask8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2452 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 34956 "ad_aarch64.cpp"
  }
}

void storemask4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2466 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 34974 "ad_aarch64.cpp"
  }
}

void storemask8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2480 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 34992 "ad_aarch64.cpp"
  }
}

void loadmask2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2497 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35010 "ad_aarch64.cpp"
  }
}

void loadmask4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2515 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35028 "ad_aarch64.cpp"
  }
}

void storemask2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2531 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4S);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35047 "ad_aarch64.cpp"
  }
}

void storemask4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2547 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T4S);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35066 "ad_aarch64.cpp"
  }
}

void loadmask2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2566 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35085 "ad_aarch64.cpp"
  }
}

void storemask2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2584 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T2D);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S);
    __ xtn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H);
    __ negr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35105 "ad_aarch64.cpp"
  }
}

void vmaskcastDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2603 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // empty
  
#line 35121 "ad_aarch64.cpp"
  }
}

void vmaskcastXNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2617 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // empty
  
#line 35137 "ad_aarch64.cpp"
  }
}

void loadcon8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2634 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ lea(rscratch1, ExternalAddress(StubRoutines::aarch64::vector_iota_indices()));
    __ ldrd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), rscratch1);
  
#line 35154 "ad_aarch64.cpp"
  }
}

void loadcon16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2647 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ lea(rscratch1, ExternalAddress(StubRoutines::aarch64::vector_iota_indices()));
    __ ldrq(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), rscratch1);
  
#line 35171 "ad_aarch64.cpp"
  }
}

void loadshuffle8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2663 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35188 "ad_aarch64.cpp"
  }
}

void loadshuffle16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2677 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35205 "ad_aarch64.cpp"
  }
}

void loadshuffle4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2691 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
  
#line 35221 "ad_aarch64.cpp"
  }
}

void loadshuffle8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2704 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
  
#line 35237 "ad_aarch64.cpp"
  }
}

void loadshuffle4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2719 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ T8B);
    __ uxtl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H);
  
#line 35254 "ad_aarch64.cpp"
  }
}

void rearrange8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2755 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ tbl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */));
  
#line 35273 "ad_aarch64.cpp"
  }
}

void rearrange16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2770 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ tbl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */));
  
#line 35292 "ad_aarch64.cpp"
  }
}

void rearrange4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp0
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2789 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */), __ T8B, 0x02);
    __ mov(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), __ T4H, 0x0100);
    __ mulv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */));
    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */));
    __ tbl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */));
  
#line 35319 "ad_aarch64.cpp"
  }
}

void rearrange8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp0
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2814 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */), __ T16B, 0x02);
    __ mov(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), __ T8H, 0x0100);
    __ mulv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */));
    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */));
    __ tbl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */));
  
#line 35346 "ad_aarch64.cpp"
  }
}

void rearrange4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp0
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2840 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */), __ T16B, 0x04);
    __ mov(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), __ T4S, 0x03020100);
    __ mulv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp0 */));
    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */));
    __ tbl(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */));
  
#line 35373 "ad_aarch64.cpp"
  }
}

void anytrue_in_mask8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2865 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // No need to use src2.
    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ B, 0);
    __ cmpw(opnd_array(0)->as_Register(ra_,this)/* dst */, zr);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::NE);
  
#line 35395 "ad_aarch64.cpp"
  }
}

void anytrue_in_mask16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2885 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // No need to use src2.
    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ B, 0);
    __ cmpw(opnd_array(0)->as_Register(ra_,this)/* dst */, zr);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::NE);
  
#line 35417 "ad_aarch64.cpp"
  }
}

void alltrue_in_mask8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2905 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // No need to use src2.
    __ uminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ B, 0);
    __ cmpw(opnd_array(0)->as_Register(ra_,this)/* dst */, 0xff);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::EQ);
  
#line 35439 "ad_aarch64.cpp"
  }
}

void alltrue_in_mask16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2925 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // No need to use src2.
    __ uminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ B, 0);
    __ cmpw(opnd_array(0)->as_Register(ra_,this)/* dst */, 0xff);
    __ csetw(opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::EQ);
  
#line 35461 "ad_aarch64.cpp"
  }
}

void vabs8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2943 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35477 "ad_aarch64.cpp"
  }
}

void vabs16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2955 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35493 "ad_aarch64.cpp"
  }
}

void vabs4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2967 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35509 "ad_aarch64.cpp"
  }
}

void vabs8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2979 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35525 "ad_aarch64.cpp"
  }
}

void vabs2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2991 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35541 "ad_aarch64.cpp"
  }
}

void vabs4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3003 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35557 "ad_aarch64.cpp"
  }
}

void vabs2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3015 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ absr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35573 "ad_aarch64.cpp"
  }
}

void vabs2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3027 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35589 "ad_aarch64.cpp"
  }
}

void vabs4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3039 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35605 "ad_aarch64.cpp"
  }
}

void vabs2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3051 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35621 "ad_aarch64.cpp"
  }
}

void vabd2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3065 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 35639 "ad_aarch64.cpp"
  }
}

void vabd4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3078 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 35657 "ad_aarch64.cpp"
  }
}

void vabd2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3091 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fabd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 35675 "ad_aarch64.cpp"
  }
}

void replicate8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3105 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35691 "ad_aarch64.cpp"
  }
}

void replicate16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3117 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35707 "ad_aarch64.cpp"
  }
}

void replicate8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3130 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, opnd_array(1)->constant()& 0xff);
  
#line 35723 "ad_aarch64.cpp"
  }
}

void replicate16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3142 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, opnd_array(1)->constant()& 0xff);
  
#line 35739 "ad_aarch64.cpp"
  }
}

void replicate4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3155 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35755 "ad_aarch64.cpp"
  }
}

void replicate8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3167 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35771 "ad_aarch64.cpp"
  }
}

void replicate4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3180 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H, opnd_array(1)->constant()& 0xffff);
  
#line 35787 "ad_aarch64.cpp"
  }
}

void replicate8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3192 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H, opnd_array(1)->constant()& 0xffff);
  
#line 35803 "ad_aarch64.cpp"
  }
}

void replicate2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3204 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35819 "ad_aarch64.cpp"
  }
}

void replicate4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3216 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35835 "ad_aarch64.cpp"
  }
}

void replicate2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, opnd_array(1)->constant());
  
#line 35851 "ad_aarch64.cpp"
  }
}

void replicate4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3240 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mov(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, opnd_array(1)->constant());
  
#line 35867 "ad_aarch64.cpp"
  }
}

void replicate2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3252 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35883 "ad_aarch64.cpp"
  }
}

void replicate2L_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3264 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
           as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 35901 "ad_aarch64.cpp"
  }
}

void replicate2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3278 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35918 "ad_aarch64.cpp"
  }
}

void replicate4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3291 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35935 "ad_aarch64.cpp"
  }
}

void replicate2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3304 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 35952 "ad_aarch64.cpp"
  }
}

void reduce_add2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// vtmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3323 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addpv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* vtmp */), __ T2S,
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* itmp */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* vtmp */), __ S, 0);
    __ addw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
  
#line 35974 "ad_aarch64.cpp"
  }
}

void reduce_add4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// vtmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3342 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* vtmp */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* itmp */, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* vtmp */), __ S, 0);
    __ addw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
  
#line 35996 "ad_aarch64.cpp"
  }
}

void reduce_mul2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3362 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 0);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ umov(opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), __ S, 1);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 36018 "ad_aarch64.cpp"
  }
}

void reduce_mul4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// isrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// itmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3384 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ mulv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ T2S,
            as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ umov(opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ S, 0);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* isrc */);
    __ umov(opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), __ S, 1);
    __ mul(opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, opnd_array(5)->as_Register(ra_,this,idx5)/* itmp */, opnd_array(3)->as_Register(ra_,this,idx3)/* dst */);
  
#line 36045 "ad_aarch64.cpp"
  }
}

void reduce_add2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3406 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36069 "ad_aarch64.cpp"
  }
}

void reduce_add4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3430 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 2);
    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 3);
    __ fadds(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36101 "ad_aarch64.cpp"
  }
}

void reduce_mul2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3458 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36125 "ad_aarch64.cpp"
  }
}

void reduce_mul4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// fsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3482 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* fsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 2);
    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ S,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 3);
    __ fmuls(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36157 "ad_aarch64.cpp"
  }
}

void reduce_add2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3510 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ faddd(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ faddd(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36181 "ad_aarch64.cpp"
  }
}

void reduce_mul2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dsrc
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vsrc
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3530 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmuld(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dsrc */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */));
    __ ins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ D,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vsrc */), 0, 1);
    __ fmuld(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 36205 "ad_aarch64.cpp"
  }
}

void vadd8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3552 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36224 "ad_aarch64.cpp"
  }
}

void vadd16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3566 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36243 "ad_aarch64.cpp"
  }
}

void vadd4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3581 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36262 "ad_aarch64.cpp"
  }
}

void vadd8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3595 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36281 "ad_aarch64.cpp"
  }
}

void vadd2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3609 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36300 "ad_aarch64.cpp"
  }
}

void vadd4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3623 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36319 "ad_aarch64.cpp"
  }
}

void vadd2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3637 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ addv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36338 "ad_aarch64.cpp"
  }
}

void vadd2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3651 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fadd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36357 "ad_aarch64.cpp"
  }
}

void vadd4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3665 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fadd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36376 "ad_aarch64.cpp"
  }
}

void vadd2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3678 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fadd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36395 "ad_aarch64.cpp"
  }
}

void vsub8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3695 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36414 "ad_aarch64.cpp"
  }
}

void vsub16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3709 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36433 "ad_aarch64.cpp"
  }
}

void vsub4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3724 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36452 "ad_aarch64.cpp"
  }
}

void vsub8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36471 "ad_aarch64.cpp"
  }
}

void vsub2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3752 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36490 "ad_aarch64.cpp"
  }
}

void vsub4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3766 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36509 "ad_aarch64.cpp"
  }
}

void vsub2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3780 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ subv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36528 "ad_aarch64.cpp"
  }
}

void vsub2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3794 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36547 "ad_aarch64.cpp"
  }
}

void vsub4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3808 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36566 "ad_aarch64.cpp"
  }
}

void vsub2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36585 "ad_aarch64.cpp"
  }
}

void vmul8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3839 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36604 "ad_aarch64.cpp"
  }
}

void vmul16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3853 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36623 "ad_aarch64.cpp"
  }
}

void vmul4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3868 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36642 "ad_aarch64.cpp"
  }
}

void vmul8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3882 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36661 "ad_aarch64.cpp"
  }
}

void vmul2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3896 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36680 "ad_aarch64.cpp"
  }
}

void vmul4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3910 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mulv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36699 "ad_aarch64.cpp"
  }
}

void vmul2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3924 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmul(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36718 "ad_aarch64.cpp"
  }
}

void vmul4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmul(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36737 "ad_aarch64.cpp"
  }
}

void vmul2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3952 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmul(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36756 "ad_aarch64.cpp"
  }
}

void vmla4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36776 "ad_aarch64.cpp"
  }
}

void vmla4S_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3969 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36796 "ad_aarch64.cpp"
  }
}

void vmla8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3983 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36816 "ad_aarch64.cpp"
  }
}

void vmla8S_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3983 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36836 "ad_aarch64.cpp"
  }
}

void vmla2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3997 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36856 "ad_aarch64.cpp"
  }
}

void vmla2I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3997 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36876 "ad_aarch64.cpp"
  }
}

void vmla4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36896 "ad_aarch64.cpp"
  }
}

void vmla4I_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlav(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 36916 "ad_aarch64.cpp"
  }
}

void vmla2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4026 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36936 "ad_aarch64.cpp"
  }
}

void vmla4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4041 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36956 "ad_aarch64.cpp"
  }
}

void vmla2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4056 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36976 "ad_aarch64.cpp"
  }
}

void vmls4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4072 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlsv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 36996 "ad_aarch64.cpp"
  }
}

void vmls8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4085 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlsv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37016 "ad_aarch64.cpp"
  }
}

void vmls2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4098 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlsv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37036 "ad_aarch64.cpp"
  }
}

void vmls4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ mlsv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37056 "ad_aarch64.cpp"
  }
}

void vmls2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37076 "ad_aarch64.cpp"
  }
}

void vmls2F_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4126 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37096 "ad_aarch64.cpp"
  }
}

void vmls4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4141 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37116 "ad_aarch64.cpp"
  }
}

void vmls4F_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4141 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37136 "ad_aarch64.cpp"
  }
}

void vmls2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4156 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37156 "ad_aarch64.cpp"
  }
}

void vmls2D_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4156 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src1 */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 37176 "ad_aarch64.cpp"
  }
}

void vmuladdS2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4174 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ smullv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), __ T4H,
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ smullv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8H,
              as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
              as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ addpv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S,
             as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */),
             as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */));
  
#line 37203 "ad_aarch64.cpp"
  }
}

void vdiv2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4196 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fdiv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37222 "ad_aarch64.cpp"
  }
}

void vdiv4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4210 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fdiv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37241 "ad_aarch64.cpp"
  }
}

void vdiv2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4224 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fdiv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37260 "ad_aarch64.cpp"
  }
}

void vsqrt2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4239 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsqrt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37276 "ad_aarch64.cpp"
  }
}

void vsqrt4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4250 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsqrt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37292 "ad_aarch64.cpp"
  }
}

void vsqrt2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4261 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fsqrt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37308 "ad_aarch64.cpp"
  }
}

void vneg2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4275 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fneg(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37325 "ad_aarch64.cpp"
  }
}

void vneg4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4288 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fneg(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37342 "ad_aarch64.cpp"
  }
}

void vneg2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4301 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fneg(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 37359 "ad_aarch64.cpp"
  }
}

void vand8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4317 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ andr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37378 "ad_aarch64.cpp"
  }
}

void vand16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4331 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ andr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37397 "ad_aarch64.cpp"
  }
}

void vor8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4348 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37416 "ad_aarch64.cpp"
  }
}

void vor16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4362 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37435 "ad_aarch64.cpp"
  }
}

void vxor8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4379 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37454 "ad_aarch64.cpp"
  }
}

void vxor16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4393 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 37473 "ad_aarch64.cpp"
  }
}

void vshiftcnt8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4409 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 37489 "ad_aarch64.cpp"
  }
}

void vshiftcnt8B_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4409 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 37505 "ad_aarch64.cpp"
  }
}

void vshiftcnt16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4420 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 37521 "ad_aarch64.cpp"
  }
}

void vshiftcnt16B_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4420 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 37537 "ad_aarch64.cpp"
  }
}

void vsll8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4432 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 37556 "ad_aarch64.cpp"
  }
}

void vsll16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4445 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 37575 "ad_aarch64.cpp"
  }
}

void vsra8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4482 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37597 "ad_aarch64.cpp"
  }
}

void vsra16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4499 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37619 "ad_aarch64.cpp"
  }
}

void vsrl8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4517 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37641 "ad_aarch64.cpp"
  }
}

void vsrl16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4534 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37663 "ad_aarch64.cpp"
  }
}

void vsll8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4550 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37688 "ad_aarch64.cpp"
  }
}

void vsll16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4569 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37713 "ad_aarch64.cpp"
  }
}

void vsra8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4589 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) sh = 7;
    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 37733 "ad_aarch64.cpp"
  }
}

void vsra16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4603 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) sh = 7;
    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 37753 "ad_aarch64.cpp"
  }
}

void vsrl8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4618 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37778 "ad_aarch64.cpp"
  }
}

void vsrl16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4637 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37803 "ad_aarch64.cpp"
  }
}

void vsll4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4657 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 37822 "ad_aarch64.cpp"
  }
}

void vsll8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4670 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 37841 "ad_aarch64.cpp"
  }
}

void vsra4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4686 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37863 "ad_aarch64.cpp"
  }
}

void vsra8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4703 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37885 "ad_aarch64.cpp"
  }
}

void vsrl4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4721 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37907 "ad_aarch64.cpp"
  }
}

void vsrl8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 37929 "ad_aarch64.cpp"
  }
}

void vsll4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4754 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37954 "ad_aarch64.cpp"
  }
}

void vsll8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4773 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 37979 "ad_aarch64.cpp"
  }
}

void vsra4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4793 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) sh = 15;
    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 37999 "ad_aarch64.cpp"
  }
}

void vsra8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4807 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) sh = 15;
    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 38019 "ad_aarch64.cpp"
  }
}

void vsrl4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4822 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38044 "ad_aarch64.cpp"
  }
}

void vsrl8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4841 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) {
      __ eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    } else {
      __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38069 "ad_aarch64.cpp"
  }
}

void vsll2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4860 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 38088 "ad_aarch64.cpp"
  }
}

void vsll4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4873 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 38107 "ad_aarch64.cpp"
  }
}

void vsra2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4888 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38129 "ad_aarch64.cpp"
  }
}

void vsra4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4905 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38151 "ad_aarch64.cpp"
  }
}

void vsrl2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4922 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T8B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38173 "ad_aarch64.cpp"
  }
}

void vsrl4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4939 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38195 "ad_aarch64.cpp"
  }
}

void vsll2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4954 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           (int)opnd_array(2)->constant());
  
#line 38214 "ad_aarch64.cpp"
  }
}

void vsll4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4967 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           (int)opnd_array(2)->constant());
  
#line 38233 "ad_aarch64.cpp"
  }
}

void vsra2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4980 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38252 "ad_aarch64.cpp"
  }
}

void vsra4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4993 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38271 "ad_aarch64.cpp"
  }
}

void vsrl2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5006 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38290 "ad_aarch64.cpp"
  }
}

void vsrl4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5019 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38309 "ad_aarch64.cpp"
  }
}

void vsll2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5032 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 38328 "ad_aarch64.cpp"
  }
}

void vsra2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5047 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ sshl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38350 "ad_aarch64.cpp"
  }
}

void vsrl2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5064 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ negr(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */), __ T16B,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
    __ ushl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 38372 "ad_aarch64.cpp"
  }
}

void vsll2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5079 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ shl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           (int)opnd_array(2)->constant());
  
#line 38391 "ad_aarch64.cpp"
  }
}

void vsra2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5092 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ sshr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38410 "ad_aarch64.cpp"
  }
}

void vsrl2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5105 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ushr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38429 "ad_aarch64.cpp"
  }
}

void vsraa8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5118 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh >= 8) sh = 7;
    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
  
#line 38450 "ad_aarch64.cpp"
  }
}

void vsraa8B_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5118 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) sh = 7;
    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 38471 "ad_aarch64.cpp"
  }
}

void vsraa16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5132 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh >= 8) sh = 7;
    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
  
#line 38492 "ad_aarch64.cpp"
  }
}

void vsraa16B_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5132 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 8) sh = 7;
    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 38513 "ad_aarch64.cpp"
  }
}

void vsraa4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5146 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh >= 16) sh = 15;
    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4H,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
  
#line 38534 "ad_aarch64.cpp"
  }
}

void vsraa4S_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5146 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) sh = 15;
    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4H,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 38555 "ad_aarch64.cpp"
  }
}

void vsraa8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5160 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh >= 16) sh = 15;
    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8H,
           as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
  
#line 38576 "ad_aarch64.cpp"
  }
}

void vsraa8S_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5160 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh >= 16) sh = 15;
    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8H,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
  
#line 38597 "ad_aarch64.cpp"
  }
}

void vsraa2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5174 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38617 "ad_aarch64.cpp"
  }
}

void vsraa2I_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5174 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38637 "ad_aarch64.cpp"
  }
}

void vsraa4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5187 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38657 "ad_aarch64.cpp"
  }
}

void vsraa4I_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5187 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38677 "ad_aarch64.cpp"
  }
}

void vsraa2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38697 "ad_aarch64.cpp"
  }
}

void vsraa2L_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ ssra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38717 "ad_aarch64.cpp"
  }
}

void vsrla8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5213 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh < 8) {
      __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
    }
  
#line 38739 "ad_aarch64.cpp"
  }
}

void vsrla8B_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5213 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh < 8) {
      __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38761 "ad_aarch64.cpp"
  }
}

void vsrla16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh < 8) {
      __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
    }
  
#line 38783 "ad_aarch64.cpp"
  }
}

void vsrla16B_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh < 8) {
      __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T16B,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38805 "ad_aarch64.cpp"
  }
}

void vsrla4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5243 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh < 16) {
      __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4H,
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
    }
  
#line 38827 "ad_aarch64.cpp"
  }
}

void vsrla4S_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5243 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh < 16) {
      __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38849 "ad_aarch64.cpp"
  }
}

void vsrla8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5258 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(3)->constant();
    if (sh < 16) {
      __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T8H,
             as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), sh);
    }
  
#line 38871 "ad_aarch64.cpp"
  }
}

void vsrla8S_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5258 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    int sh = (int)opnd_array(2)->constant();
    if (sh < 16) {
      __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T8H,
             as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), sh);
    }
  
#line 38893 "ad_aarch64.cpp"
  }
}

void vsrla2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5273 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38913 "ad_aarch64.cpp"
  }
}

void vsrla2I_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5273 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38933 "ad_aarch64.cpp"
  }
}

void vsrla4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5286 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38953 "ad_aarch64.cpp"
  }
}

void vsrla4I_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5286 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 38973 "ad_aarch64.cpp"
  }
}

void vsrla2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5299 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
            (int)opnd_array(3)->constant());
  
#line 38993 "ad_aarch64.cpp"
  }
}

void vsrla2L_imm_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5299 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ usra(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
            (int)opnd_array(2)->constant());
  
#line 39013 "ad_aarch64.cpp"
  }
}

void vmax2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5313 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmax(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39032 "ad_aarch64.cpp"
  }
}

void vmax4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5327 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmax(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39051 "ad_aarch64.cpp"
  }
}

void vmax2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5341 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmax(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39070 "ad_aarch64.cpp"
  }
}

void vmin2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5355 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmin(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39089 "ad_aarch64.cpp"
  }
}

void vmin4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5369 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmin(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4S,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39108 "ad_aarch64.cpp"
  }
}

void vmin2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5383 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ fmin(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 39127 "ad_aarch64.cpp"
  }
}

void vround2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rmode
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5395 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    switch (opnd_array(2)->constant()) {
      case RoundDoubleModeNode::rmode_rint:
        __ frintn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
                  as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_floor:
        __ frintm(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
                  as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_ceil:
        __ frintp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T2D,
                  as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
    }
  
#line 39157 "ad_aarch64.cpp"
  }
}

void vpopcount4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5422 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ cnt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ uaddlp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T16B,
              as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
    __ uaddlp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8H,
              as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 39178 "ad_aarch64.cpp"
  }
}

void vpopcount2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5441 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    __ cnt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ uaddlp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T8B,
              as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
    __ uaddlp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ T4H,
              as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 39199 "ad_aarch64.cpp"
  }
}

void vmask_truecount8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5461 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Input "src" is a vector of boolean represented as bytes with
    // 0x00/0x01 as element values.
    __ addv(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), __ T8B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), __ B, 0);
  
#line 39219 "ad_aarch64.cpp"
  }
}

void vmask_truecount16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5477 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Input "src" is a vector of boolean represented as bytes with
    // 0x00/0x01 as element values.
    __ addv(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), __ T16B, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ umov(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), __ B, 0);
  
#line 39239 "ad_aarch64.cpp"
  }
}

void vmask_firsttrue_LT8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5493 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Returns the index of the first active lane of the
    // vector mask, or VLENGTH if no lane is active.
    //
    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.
    //
    // Computed by reversing the bits and counting the leading
    // zero bytes.
    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ rbit(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ clz(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ lsrw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */, 3);
    __ movw(rscratch1, Matcher::vector_length(this, opnd_array(1)));
    __ cmpw(opnd_array(0)->as_Register(ra_,this)/* dst */, rscratch1);
    __ cselw(opnd_array(0)->as_Register(ra_,this)/* dst */, rscratch1, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::GE);
  
#line 39269 "ad_aarch64.cpp"
  }
}

void vmask_firsttrue8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5519 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Returns the index of the first active lane of the
    // vector mask, or VLENGTH if no lane is active.
    //
    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.
    //
    // Computed by reversing the bits and counting the leading
    // zero bytes.
    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ rbit(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ clz(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ lsrw(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */, 3);
  
#line 39296 "ad_aarch64.cpp"
  }
}

void vmask_firsttrue16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5541 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Returns the index of the first active lane of the
    // vector mask, or 16 (VLENGTH) if no lane is active.
    //
    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.

    Label FIRST_TRUE_INDEX;

    // Try to compute the result from lower 64 bits.
    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ movw(rscratch1, zr);
    __ cbnz(opnd_array(0)->as_Register(ra_,this)/* dst */, FIRST_TRUE_INDEX);

    // Compute the result from the higher 64 bits.
    __ fmovhid(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ movw(rscratch1, 8);

    // Reverse the bits and count the leading zero bytes.
    __ bind(FIRST_TRUE_INDEX);
    __ rbit(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ clz(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ addw(opnd_array(0)->as_Register(ra_,this)/* dst */, rscratch1, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::LSR, 3);
  
#line 39333 "ad_aarch64.cpp"
  }
}

void vmask_lasttrue8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5573 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Returns the index of the last active lane of the
    // vector mask, or -1 if no lane is active.
    //
    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.
    //
    // Computed by counting the leading zero bytes and
    // substracting it by 7 (VLENGTH - 1).
    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ clz(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ movw(rscratch1, 7);
    __ subw(opnd_array(0)->as_Register(ra_,this)/* dst */, rscratch1, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::LSR, 3);
  
#line 39360 "ad_aarch64.cpp"
  }
}

void vmask_lasttrue16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5595 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Returns the index of the last active lane of the
    // vector mask, or -1 if no lane is active.
    //
    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.

    Label LAST_TRUE_INDEX;

    // Try to compute the result from higher 64 bits.
    __ fmovhid(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ movw(rscratch1, 16 - 1);
    __ cbnz(opnd_array(0)->as_Register(ra_,this)/* dst */, LAST_TRUE_INDEX);

    // Compute the result from the lower 64 bits.
    __ fmovd(opnd_array(0)->as_Register(ra_,this)/* dst */, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ movw(rscratch1, 8 - 1);

    // Count the leading zero bytes and substract it by 15 (VLENGTH - 1).
    __ bind(LAST_TRUE_INDEX);
    __ clz(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ subw(opnd_array(0)->as_Register(ra_,this)/* dst */, rscratch1, opnd_array(0)->as_Register(ra_,this)/* dst */, Assembler::LSR, 3);
  
#line 39396 "ad_aarch64.cpp"
  }
}

void vmask_tolong8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5625 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.

    __ fmovd(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ bytemask_compress(as_Register(opnd_array(0)->reg(ra_,this)/* dst */));
  
#line 39416 "ad_aarch64.cpp"
  }
}

void vmask_tolong16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5639 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_neon.ad"

    // Input "src" is a vector of boolean represented as
    // bytes with 0x00/0x01 as element values.

    __ umov(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D, 0);
    __ umov(rscratch1, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D, 1);
    __ bytemask_compress(as_Register(opnd_array(0)->reg(ra_,this)/* dst */));
    __ bytemask_compress(rscratch1);
    __ orr(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */),
           rscratch1, Assembler::LSL, 8);
  
#line 39440 "ad_aarch64.cpp"
  }
}

void loadVNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    C2_MacroAssembler _masm(&cbuf);

#line 184 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    BasicType bt = Matcher::vector_element_basic_type(this);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,
                          bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39460 "ad_aarch64.cpp"
  }
}

void storeVNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 200 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, src_reg, ptrue,
                          bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39481 "ad_aarch64.cpp"
  }
}

void loadV2_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3155 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39498 "ad_aarch64.cpp"
  }
}

void storeV2_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39516 "ad_aarch64.cpp"
  }
}

void loadV4_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3161 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::S,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39533 "ad_aarch64.cpp"
  }
}

void storeV4_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3185 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::S,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39551 "ad_aarch64.cpp"
  }
}

void loadV8_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3167 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::D,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39568 "ad_aarch64.cpp"
  }
}

void storeV8_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3191 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::D,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39586 "ad_aarch64.cpp"
  }
}

void loadV16_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 3173 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39603 "ad_aarch64.cpp"
  }
}

void storeV16_vregNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 3197 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::Q,
       opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39621 "ad_aarch64.cpp"
  }
}

void loadV_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 310 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pgtmp */), __ elemType_to_regVariant(bt),
                          Matcher::vector_length(this));
    FloatRegister dst_reg = as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg,
                          as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pgtmp */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39644 "ad_aarch64.cpp"
  }
}

void storeV_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 330 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), __ elemType_to_regVariant(bt),
                          Matcher::vector_length(this, opnd_array(2)));
    FloatRegister src_reg = as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, src_reg,
                          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39668 "ad_aarch64.cpp"
  }
}

void loadV_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 350 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
                          as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39688 "ad_aarch64.cpp"
  }
}

void loadV_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 366 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), __ elemType_to_regVariant(bt),
                          Matcher::vector_length(this));
    __ sve_and(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
               as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
                          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39713 "ad_aarch64.cpp"
  }
}

void storeV_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 385 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
                          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39734 "ad_aarch64.cpp"
  }
}

void storeV_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 401 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pgtmp */), __ elemType_to_regVariant(bt),
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pgtmp */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pgtmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */),
                          as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pgtmp */), bt, bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 39760 "ad_aarch64.cpp"
  }
}

void vmaskAll_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 421 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(1)->constant();
    if (con == 0) {
      __ sve_pfalse(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */));
    } else {
      assert(con == -1, "invalid constant value for mask");
      BasicType bt = Matcher::vector_element_basic_type(this);
      __ sve_ptrue(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ elemType_to_regVariant(bt));
    }
  
#line 39783 "ad_aarch64.cpp"
  }
}

void vmaskAllINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 441 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_dup(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), size, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), size, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), 0);
  
#line 39803 "ad_aarch64.cpp"
  }
}

void vmaskAll_immLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 455 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    long con = (long)opnd_array(1)->constantL();
    if (con == 0) {
      __ sve_pfalse(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */));
    } else {
      assert(con == -1, "invalid constant value for mask");
      BasicType bt = Matcher::vector_element_basic_type(this);
      __ sve_ptrue(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ elemType_to_regVariant(bt));
    }
  
#line 39826 "ad_aarch64.cpp"
  }
}

void vmaskAllLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 475 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_dup(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), size, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), size, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), 0);
  
#line 39846 "ad_aarch64.cpp"
  }
}

void vmask_andNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// pn
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pm
  {
    C2_MacroAssembler _masm(&cbuf);

#line 491 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_PRegister(opnd_array(0)->reg(ra_,this)/* pd */), ptrue,
               as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* pn */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pm */));
  
#line 39864 "ad_aarch64.cpp"
  }
}

void vmask_orNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// pn
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pm
  {
    C2_MacroAssembler _masm(&cbuf);

#line 503 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_PRegister(opnd_array(0)->reg(ra_,this)/* pd */), ptrue,
               as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* pn */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pm */));
  
#line 39882 "ad_aarch64.cpp"
  }
}

void vmask_xorNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// pn
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pm
  {
    C2_MacroAssembler _masm(&cbuf);

#line 515 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_PRegister(opnd_array(0)->reg(ra_,this)/* pd */), ptrue,
               as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* pn */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pm */));
  
#line 39900 "ad_aarch64.cpp"
  }
}

void vmask_and_notINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// pn
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pm
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 529 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_PRegister(opnd_array(0)->reg(ra_,this)/* pd */), ptrue,
               as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* pn */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pm */));
  
#line 39919 "ad_aarch64.cpp"
  }
}

void vmask_and_notLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// pn
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pm
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 541 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_PRegister(opnd_array(0)->reg(ra_,this)/* pd */), ptrue,
               as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* pn */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pm */));
  
#line 39938 "ad_aarch64.cpp"
  }
}

void reinterpretNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 556 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // empty
  
#line 39954 "ad_aarch64.cpp"
  }
}

void reinterpretResizeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 569 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    uint length_in_bytes_src = Matcher::vector_length_in_bytes(this, opnd_array(1));
    uint length_in_bytes_dst = Matcher::vector_length_in_bytes(this);
    uint length_in_bytes_resize = length_in_bytes_src < length_in_bytes_dst ?
                                  length_in_bytes_src : length_in_bytes_dst;
    assert(length_in_bytes_src <= MaxVectorSize && length_in_bytes_dst <= MaxVectorSize,
           "invalid vector length");
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */), __ B, length_in_bytes_resize);
    __ sve_dup(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ B, 0);
    __ sve_sel(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ B, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */));
  
#line 39981 "ad_aarch64.cpp"
  }
}

void vmask_reinterpret_same_esizeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 593 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // empty
  
#line 39997 "ad_aarch64.cpp"
  }
}

void vmask_reinterpret_diff_esizeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 607 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType from_bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant from_size = __ elemType_to_regVariant(from_bt);
    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_cpy(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), from_size, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), -1, false);
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), -1);
  
#line 40019 "ad_aarch64.cpp"
  }
}

void vabsBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 626 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40036 "ad_aarch64.cpp"
  }
}

void vabsSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 639 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40053 "ad_aarch64.cpp"
  }
}

void vabsINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 652 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40070 "ad_aarch64.cpp"
  }
}

void vabsLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 665 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40087 "ad_aarch64.cpp"
  }
}

void vabsFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 678 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fabs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40104 "ad_aarch64.cpp"
  }
}

void vabsDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 691 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fabs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 40121 "ad_aarch64.cpp"
  }
}

void vabsB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 705 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40140 "ad_aarch64.cpp"
  }
}

void vabsS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 718 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40159 "ad_aarch64.cpp"
  }
}

void vabsI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 731 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40178 "ad_aarch64.cpp"
  }
}

void vabsL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 744 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_abs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40197 "ad_aarch64.cpp"
  }
}

void vabsF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 757 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fabs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40216 "ad_aarch64.cpp"
  }
}

void vabsD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 770 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fabs(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 40235 "ad_aarch64.cpp"
  }
}

void vaddBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 785 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40254 "ad_aarch64.cpp"
  }
}

void vaddSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 798 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40273 "ad_aarch64.cpp"
  }
}

void vaddINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 811 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40292 "ad_aarch64.cpp"
  }
}

void vaddLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 824 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40311 "ad_aarch64.cpp"
  }
}

void vaddFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 837 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40330 "ad_aarch64.cpp"
  }
}

void vaddDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 850 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40349 "ad_aarch64.cpp"
  }
}

void vaddB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 865 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40369 "ad_aarch64.cpp"
  }
}

void vaddS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 878 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40389 "ad_aarch64.cpp"
  }
}

void vaddI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 891 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40409 "ad_aarch64.cpp"
  }
}

void vaddL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 904 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40429 "ad_aarch64.cpp"
  }
}

void vaddF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 917 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadd(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40449 "ad_aarch64.cpp"
  }
}

void vaddD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 930 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadd(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 40469 "ad_aarch64.cpp"
  }
}

void vaddImmBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 945 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(2)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B, -val);
    }
  
#line 40491 "ad_aarch64.cpp"
  }
}

void vaddImmB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 945 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(1)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ B, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ B, -val);
    }
  
#line 40513 "ad_aarch64.cpp"
  }
}

void vaddImmSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 961 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(2)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H, -val);
    }
  
#line 40535 "ad_aarch64.cpp"
  }
}

void vaddImmS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 961 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(1)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ H, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ H, -val);
    }
  
#line 40557 "ad_aarch64.cpp"
  }
}

void vaddImmINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 977 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(2)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S, -val);
    }
  
#line 40579 "ad_aarch64.cpp"
  }
}

void vaddImmI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 977 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(1)->constant();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ S, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ S, -val);
    }
  
#line 40601 "ad_aarch64.cpp"
  }
}

void vaddImmLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 993 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(2)->constantL();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D, -val);
    }
  
#line 40623 "ad_aarch64.cpp"
  }
}

void vaddImmL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 993 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int32_t val = opnd_array(1)->constantL();
    if (val > 0){
      __ sve_add(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ D, val);
    } else if (val < 0){
      __ sve_sub(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ D, -val);
    }
  
#line 40645 "ad_aarch64.cpp"
  }
}

void vandBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40663 "ad_aarch64.cpp"
  }
}

void vandB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1011 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ B,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40681 "ad_aarch64.cpp"
  }
}

void vandHNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1023 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40699 "ad_aarch64.cpp"
  }
}

void vandH_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1023 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ H,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40717 "ad_aarch64.cpp"
  }
}

void vandSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1035 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40735 "ad_aarch64.cpp"
  }
}

void vandS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1035 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ S,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40753 "ad_aarch64.cpp"
  }
}

void vandDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1047 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
         (uint64_t)(opnd_array(2)->constantL()));
  
#line 40771 "ad_aarch64.cpp"
  }
}

void vandD_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1047 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ D,
         (uint64_t)(opnd_array(1)->constantL()));
  
#line 40789 "ad_aarch64.cpp"
  }
}

void vorBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1059 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40807 "ad_aarch64.cpp"
  }
}

void vorB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1059 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ B,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40825 "ad_aarch64.cpp"
  }
}

void vorHNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1071 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40843 "ad_aarch64.cpp"
  }
}

void vorH_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1071 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ H,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40861 "ad_aarch64.cpp"
  }
}

void vorSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1083 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40879 "ad_aarch64.cpp"
  }
}

void vorS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1083 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ S,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40897 "ad_aarch64.cpp"
  }
}

void vorDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1095 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
         (uint64_t)(opnd_array(2)->constantL()));
  
#line 40915 "ad_aarch64.cpp"
  }
}

void vorD_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1095 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ D,
         (uint64_t)(opnd_array(1)->constantL()));
  
#line 40933 "ad_aarch64.cpp"
  }
}

void vxorBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1107 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40951 "ad_aarch64.cpp"
  }
}

void vxorB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1107 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ B,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 40969 "ad_aarch64.cpp"
  }
}

void vxorHNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1119 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 40987 "ad_aarch64.cpp"
  }
}

void vxorH_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1119 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ H,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 41005 "ad_aarch64.cpp"
  }
}

void vxorSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1131 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
         (uint64_t)(opnd_array(2)->constant()));
  
#line 41023 "ad_aarch64.cpp"
  }
}

void vxorS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1131 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ S,
         (uint64_t)(opnd_array(1)->constant()));
  
#line 41041 "ad_aarch64.cpp"
  }
}

void vxorDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1143 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
         (uint64_t)(opnd_array(2)->constantL()));
  
#line 41059 "ad_aarch64.cpp"
  }
}

void vxorD_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1143 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst_src */), __ D,
         (uint64_t)(opnd_array(1)->constantL()));
  
#line 41077 "ad_aarch64.cpp"
  }
}

void vandNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1156 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_and(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41096 "ad_aarch64.cpp"
  }
}

void vorNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1171 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41115 "ad_aarch64.cpp"
  }
}

void vxorNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1186 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41134 "ad_aarch64.cpp"
  }
}

void vand_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1201 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_and(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
          as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41156 "ad_aarch64.cpp"
  }
}

void vor_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1218 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_orr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
          as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41178 "ad_aarch64.cpp"
  }
}

void vxor_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1235 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_eor(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
          as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41200 "ad_aarch64.cpp"
  }
}

void vnotINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 41218 "ad_aarch64.cpp"
  }
}

void vnotI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 41236 "ad_aarch64.cpp"
  }
}

void vnotI_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 41254 "ad_aarch64.cpp"
  }
}

void vnotI_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 41272 "ad_aarch64.cpp"
  }
}

void vnotI_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 41290 "ad_aarch64.cpp"
  }
}

void vnotI_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 41308 "ad_aarch64.cpp"
  }
}

void vnotLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1266 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 41326 "ad_aarch64.cpp"
  }
}

void vnotL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1266 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_not(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
               ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */));
  
#line 41344 "ad_aarch64.cpp"
  }
}

void vand_notINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41364 "ad_aarch64.cpp"
  }
}

void vand_notI_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 41384 "ad_aarch64.cpp"
  }
}

void vand_notI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 41404 "ad_aarch64.cpp"
  }
}

void vand_notI_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41424 "ad_aarch64.cpp"
  }
}

void vand_notI_3Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41444 "ad_aarch64.cpp"
  }
}

void vand_notI_5Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 41464 "ad_aarch64.cpp"
  }
}

void vand_notI_4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 41484 "ad_aarch64.cpp"
  }
}

void vand_notI_6Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41504 "ad_aarch64.cpp"
  }
}

void vand_notI_7Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41524 "ad_aarch64.cpp"
  }
}

void vand_notI_9Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 41544 "ad_aarch64.cpp"
  }
}

void vand_notI_8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 41564 "ad_aarch64.cpp"
  }
}

void vand_notI_10Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1282 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41584 "ad_aarch64.cpp"
  }
}

void vand_notLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// m1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1295 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41604 "ad_aarch64.cpp"
  }
}

void vand_notL_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1295 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */));
  
#line 41624 "ad_aarch64.cpp"
  }
}

void vand_notL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// m1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1295 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src2 */));
  
#line 41644 "ad_aarch64.cpp"
  }
}

void vand_notL_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// m1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1295 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_bic(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),
               as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src1 */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41664 "ad_aarch64.cpp"
  }
}

void vdivFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1310 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fdiv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41682 "ad_aarch64.cpp"
  }
}

void vdivDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1322 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fdiv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41700 "ad_aarch64.cpp"
  }
}

void vfdivF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1336 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fdiv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41720 "ad_aarch64.cpp"
  }
}

void vfdivD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1349 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fdiv(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 41740 "ad_aarch64.cpp"
  }
}

void vminNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1364 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    if (is_floating_point_type(bt)) {
      __ sve_fmin(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    } else {
      assert(is_integral_type(bt), "unsupported type");
      __ sve_smin(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    }
  
#line 41766 "ad_aarch64.cpp"
  }
}

void vmaxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1384 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    if (is_floating_point_type(bt)) {
      __ sve_fmax(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    } else {
      assert(is_integral_type(bt), "unsupported type");
      __ sve_smax(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    }
  
#line 41792 "ad_aarch64.cpp"
  }
}

void vmin_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1406 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    if (is_floating_point_type(bt)) {
      __ sve_fmin(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    } else {
      assert(is_integral_type(bt), "unsupported type");
      __ sve_smin(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    }
  
#line 41819 "ad_aarch64.cpp"
  }
}

void vmax_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1426 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    if (is_floating_point_type(bt)) {
      __ sve_fmax(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    } else {
      assert(is_integral_type(bt), "unsupported type");
      __ sve_smax(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), size,
                  as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    }
  
#line 41846 "ad_aarch64.cpp"
  }
}

void vfmlaFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1449 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41865 "ad_aarch64.cpp"
  }
}

void vfmlaDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1462 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41884 "ad_aarch64.cpp"
  }
}

void vfmlaF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1477 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmad(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41904 "ad_aarch64.cpp"
  }
}

void vfmlaD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1490 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmad(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41924 "ad_aarch64.cpp"
  }
}

void vfmlsFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1507 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41943 "ad_aarch64.cpp"
  }
}

void vfmlsF_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1507 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41962 "ad_aarch64.cpp"
  }
}

void vfmlsDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1522 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 41981 "ad_aarch64.cpp"
  }
}

void vfmlsD_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1522 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42000 "ad_aarch64.cpp"
  }
}

void vfnmlaFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1539 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42019 "ad_aarch64.cpp"
  }
}

void vfnmlaF_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1539 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42038 "ad_aarch64.cpp"
  }
}

void vfnmlaDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1554 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42057 "ad_aarch64.cpp"
  }
}

void vfnmlaD_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1554 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42076 "ad_aarch64.cpp"
  }
}

void vfnmlsFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1569 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42095 "ad_aarch64.cpp"
  }
}

void vfnmlsDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1582 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fnmls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42114 "ad_aarch64.cpp"
  }
}

void vmlaBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1598 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42133 "ad_aarch64.cpp"
  }
}

void vmlaB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst_src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1598 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst_src1 */), __ B,
      ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src3 */));
  
#line 42152 "ad_aarch64.cpp"
  }
}

void vmlaSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1612 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42171 "ad_aarch64.cpp"
  }
}

void vmlaS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst_src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1612 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst_src1 */), __ H,
      ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src3 */));
  
#line 42190 "ad_aarch64.cpp"
  }
}

void vmlaINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1626 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42209 "ad_aarch64.cpp"
  }
}

void vmlaI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst_src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1626 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst_src1 */), __ S,
      ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src3 */));
  
#line 42228 "ad_aarch64.cpp"
  }
}

void vmlaLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1640 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42247 "ad_aarch64.cpp"
  }
}

void vmlaL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src3
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst_src1
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1640 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mla(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst_src1 */), __ D,
      ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src2 */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src3 */));
  
#line 42266 "ad_aarch64.cpp"
  }
}

void vmlsBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1656 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42285 "ad_aarch64.cpp"
  }
}

void vmlsSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1670 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42304 "ad_aarch64.cpp"
  }
}

void vmlsINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1684 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42323 "ad_aarch64.cpp"
  }
}

void vmlsLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src3
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1698 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mls(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
      ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* src3 */));
  
#line 42342 "ad_aarch64.cpp"
  }
}

void vmulBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1712 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42360 "ad_aarch64.cpp"
  }
}

void vmulSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1724 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42378 "ad_aarch64.cpp"
  }
}

void vmulINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1736 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42396 "ad_aarch64.cpp"
  }
}

void vmulLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1748 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42414 "ad_aarch64.cpp"
  }
}

void vmulFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1760 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmul(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42433 "ad_aarch64.cpp"
  }
}

void vmulDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1773 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmul(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42452 "ad_aarch64.cpp"
  }
}

void vmulB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1788 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42472 "ad_aarch64.cpp"
  }
}

void vmulS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1801 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42492 "ad_aarch64.cpp"
  }
}

void vmulI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1814 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42512 "ad_aarch64.cpp"
  }
}

void vmulL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1827 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_mul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42532 "ad_aarch64.cpp"
  }
}

void vmulF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1840 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42552 "ad_aarch64.cpp"
  }
}

void vmulD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1853 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmul(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42572 "ad_aarch64.cpp"
  }
}

void vnegFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1869 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fneg(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 42589 "ad_aarch64.cpp"
  }
}

void vnegDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1882 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fneg(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 42606 "ad_aarch64.cpp"
  }
}

void vnegF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1896 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fneg(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 42625 "ad_aarch64.cpp"
  }
}

void vnegD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1909 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fneg(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 42644 "ad_aarch64.cpp"
  }
}

void vpopcountINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1923 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

     __ sve_cnt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 42660 "ad_aarch64.cpp"
  }
}

void vmaskcmpNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cond
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1937 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    __ sve_compare(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), bt, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                   as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), (int)opnd_array(3)->constant());
  
#line 42680 "ad_aarch64.cpp"
  }
}

void vmaskcmp_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cond
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1951 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    __ sve_compare(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), bt, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
                   as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), (int)opnd_array(3)->constant());
  
#line 42701 "ad_aarch64.cpp"
  }
}

void vblendNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1966 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    Assembler::SIMD_RegVariant size =
               __ elemType_to_regVariant(Matcher::vector_element_basic_type(this));
    __ sve_sel(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), size, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
               as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 42722 "ad_aarch64.cpp"
  }
}

void vloadmaskBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1984 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
               ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 0);
  
#line 42739 "ad_aarch64.cpp"
  }
}

void vloadmask_extendNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 1997 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_vector_extend(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), size, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ B);
    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), size, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), 0);
  
#line 42759 "ad_aarch64.cpp"
  }
}

void vstoremaskBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2013 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_cpy(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, false);
  
#line 42776 "ad_aarch64.cpp"
  }
}

void vstoremask_narrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// size
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2025 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    Assembler::SIMD_RegVariant size = __ elemBytes_to_regVariant((int)opnd_array(2)->constant());
    __ sve_cpy(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), size, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), 1, false);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ B,
                         as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), size, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 42798 "ad_aarch64.cpp"
  }
}

void vloadmask_loadVNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2045 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Load mask values which are boolean type, and extend them to the
    // expected vector element type. Convert the vector to predicate.
    BasicType to_vect_bt = Matcher::vector_element_basic_type(this);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */),
                          ptrue, T_BOOLEAN, to_vect_bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ elemType_to_regVariant(to_vect_bt),
               ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */), 0);
  
#line 42822 "ad_aarch64.cpp"
  }
}

void vloadmask_loadV_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vtmp
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2067 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Load valid mask values which are boolean type, and extend them to the
    // expected vector element type. Convert the vector to predicate.
    BasicType to_vect_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(to_vect_bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), size, Matcher::vector_length(this));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vtmp */),
                          as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), T_BOOLEAN, to_vect_bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
    __ sve_cmp(Assembler::NE, as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), size, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vtmp */), 0);
  
#line 42848 "ad_aarch64.cpp"
  }
}

void storeV_vstoremaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// esize
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2091 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType from_vect_bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    assert(type2aelembytes(from_vect_bt) == (int)opnd_array(3)->constant(), "unsupported type.");
    Assembler::SIMD_RegVariant size = __ elemBytes_to_regVariant(opnd_array(3)->constant());
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */), size, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), 1, false);
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */),
                          ptrue, T_BOOLEAN, from_vect_bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 42873 "ad_aarch64.cpp"
  }
}

void storeV_vstoremask_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// esize
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2113 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Convert the valid src predicate to vector, and store the vector
    // elements as boolean values.
    BasicType from_vect_bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(from_vect_bt);
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */), size, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), 1, false);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), size, Matcher::vector_length(this, opnd_array(2)));
    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */),
                          as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), T_BOOLEAN, from_vect_bt, opnd_array(1)->opcode(),
                          as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
  
#line 42901 "ad_aarch64.cpp"
  }
}

void reduce_addINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2136 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 42923 "ad_aarch64.cpp"
  }
}

void reduce_addLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2152 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 42944 "ad_aarch64.cpp"
  }
}

void reduce_addFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2166 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42962 "ad_aarch64.cpp"
  }
}

void reduce_addDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 42980 "ad_aarch64.cpp"
  }
}

void reduce_addI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2194 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43006 "ad_aarch64.cpp"
  }
}

void reduce_addL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2214 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43030 "ad_aarch64.cpp"
  }
}

void reduce_addF_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2231 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ S,
                 as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43051 "ad_aarch64.cpp"
  }
}

void reduce_addD_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2247 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ D,
                 as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43072 "ad_aarch64.cpp"
  }
}

void reduce_addI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2265 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43095 "ad_aarch64.cpp"
  }
}

void reduce_addL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2281 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43117 "ad_aarch64.cpp"
  }
}

void reduce_addF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2295 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ S,
                 as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43136 "ad_aarch64.cpp"
  }
}

void reduce_addD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2308 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ D,
                 as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43155 "ad_aarch64.cpp"
  }
}

void reduce_addI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2323 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43184 "ad_aarch64.cpp"
  }
}

void reduce_addL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2345 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43211 "ad_aarch64.cpp"
  }
}

void reduce_addF_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2364 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ S,
                 as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43235 "ad_aarch64.cpp"
  }
}

void reduce_addD_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1_dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2382 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fadda(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1_dst */), __ D,
                 as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 43259 "ad_aarch64.cpp"
  }
}

void reduce_andINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2403 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43281 "ad_aarch64.cpp"
  }
}

void reduce_andLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2420 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43302 "ad_aarch64.cpp"
  }
}

void reduce_andI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2437 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43328 "ad_aarch64.cpp"
  }
}

void reduce_andL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2458 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43352 "ad_aarch64.cpp"
  }
}

void reduce_andI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2478 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43375 "ad_aarch64.cpp"
  }
}

void reduce_andL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2495 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43397 "ad_aarch64.cpp"
  }
}

void reduce_andI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2512 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43426 "ad_aarch64.cpp"
  }
}

void reduce_andL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2535 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43453 "ad_aarch64.cpp"
  }
}

void reduce_orINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2557 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43475 "ad_aarch64.cpp"
  }
}

void reduce_orLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2574 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43496 "ad_aarch64.cpp"
  }
}

void reduce_orI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2591 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43522 "ad_aarch64.cpp"
  }
}

void reduce_orL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2612 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43546 "ad_aarch64.cpp"
  }
}

void reduce_orI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2632 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43569 "ad_aarch64.cpp"
  }
}

void reduce_orL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2649 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43591 "ad_aarch64.cpp"
  }
}

void reduce_orI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2666 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43620 "ad_aarch64.cpp"
  }
}

void reduce_orL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2689 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43647 "ad_aarch64.cpp"
  }
}

void reduce_eorINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2711 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43669 "ad_aarch64.cpp"
  }
}

void reduce_eorLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2728 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43690 "ad_aarch64.cpp"
  }
}

void reduce_eorI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2745 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43716 "ad_aarch64.cpp"
  }
}

void reduce_eorL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2766 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43740 "ad_aarch64.cpp"
  }
}

void reduce_eorI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2786 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43763 "ad_aarch64.cpp"
  }
}

void reduce_eorL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2803 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 43785 "ad_aarch64.cpp"
  }
}

void reduce_eorI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2820 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43814 "ad_aarch64.cpp"
  }
}

void reduce_eorL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2843 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 43841 "ad_aarch64.cpp"
  }
}

void reduce_maxINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2866 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43863 "ad_aarch64.cpp"
  }
}

void reduce_maxLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2883 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 43884 "ad_aarch64.cpp"
  }
}

void reduce_maxI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2901 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43910 "ad_aarch64.cpp"
  }
}

void reduce_maxL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2922 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 43934 "ad_aarch64.cpp"
  }
}

void reduce_maxFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2940 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmaxv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxs(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 43953 "ad_aarch64.cpp"
  }
}

void reduce_maxF_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2956 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fmaxv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ S, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxs(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 43975 "ad_aarch64.cpp"
  }
}

void reduce_maxDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2973 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmaxv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxd(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 43994 "ad_aarch64.cpp"
  }
}

void reduce_maxD_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 2989 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fmaxv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ D, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxd(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44016 "ad_aarch64.cpp"
  }
}

void reduce_maxI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3010 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 44039 "ad_aarch64.cpp"
  }
}

void reduce_maxL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3028 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 44061 "ad_aarch64.cpp"
  }
}

void reduce_maxI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3046 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 44090 "ad_aarch64.cpp"
  }
}

void reduce_maxL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3069 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 44117 "ad_aarch64.cpp"
  }
}

void reduce_maxF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3088 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmaxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44136 "ad_aarch64.cpp"
  }
}

void reduce_maxD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3102 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fmaxv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxd(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44155 "ad_aarch64.cpp"
  }
}

void reduce_maxF_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3118 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fmaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S,
               as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxs(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44181 "ad_aarch64.cpp"
  }
}

void reduce_maxD_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3139 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fmaxv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D,
               as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmaxd(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44207 "ad_aarch64.cpp"
  }
}

void reduce_minINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3162 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 44229 "ad_aarch64.cpp"
  }
}

void reduce_minLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3179 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           ptrue, as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* tmp */));
  
#line 44250 "ad_aarch64.cpp"
  }
}

void reduce_minI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3197 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 44276 "ad_aarch64.cpp"
  }
}

void reduce_minL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vtmp
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3218 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(3)->as_Register(ra_,this,idx3)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* vtmp */));
  
#line 44300 "ad_aarch64.cpp"
  }
}

void reduce_minFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3236 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmins(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44319 "ad_aarch64.cpp"
  }
}

void reduce_minF_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3252 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ S, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmins(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44341 "ad_aarch64.cpp"
  }
}

void reduce_minDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3269 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmind(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44360 "ad_aarch64.cpp"
  }
}

void reduce_minD_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3285 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_fminv(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), __ D, as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmind(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44382 "ad_aarch64.cpp"
  }
}

void reduce_minI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3306 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 44405 "ad_aarch64.cpp"
  }
}

void reduce_minL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3324 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp */));
  
#line 44427 "ad_aarch64.cpp"
  }
}

void reduce_minI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3342 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(2));
    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), variant,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, bt,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 44456 "ad_aarch64.cpp"
  }
}

void reduce_minL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vtmp
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3365 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_reduce_integral(this->ideal_Opcode(), opnd_array(4)->as_Register(ra_,this,idx4)/* dst */, T_LONG,
                           opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */),
                           as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* ptmp */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* vtmp */));
  
#line 44483 "ad_aarch64.cpp"
  }
}

void reduce_minF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3384 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fminv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmins(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44502 "ad_aarch64.cpp"
  }
}

void reduce_minD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3398 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fminv(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmind(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44521 "ad_aarch64.cpp"
  }
}

void reduce_minF_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3414 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S,
               as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmins(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44547 "ad_aarch64.cpp"
  }
}

void reduce_minD_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3435 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_fminv(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D,
               as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ fmind(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
  
#line 44573 "ad_aarch64.cpp"
  }
}

void vroundDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rmode
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3454 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    switch (opnd_array(2)->constant()) {
      case RoundDoubleModeNode::rmode_rint:
        __ sve_frintn(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
             ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_floor:
        __ sve_frintm(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
             ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
      case RoundDoubleModeNode::rmode_ceil:
        __ sve_frintp(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
             ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
        break;
    }
  
#line 44603 "ad_aarch64.cpp"
  }
}

void replicateBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3480 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44619 "ad_aarch64.cpp"
  }
}

void replicateSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3491 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44635 "ad_aarch64.cpp"
  }
}

void replicateINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3502 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44651 "ad_aarch64.cpp"
  }
}

void replicateLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3513 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44667 "ad_aarch64.cpp"
  }
}

void replicateB_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3524 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, opnd_array(1)->constant());
  
#line 44683 "ad_aarch64.cpp"
  }
}

void replicateS_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3535 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H, opnd_array(1)->constant());
  
#line 44699 "ad_aarch64.cpp"
  }
}

void replicateI_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3546 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, opnd_array(1)->constant());
  
#line 44715 "ad_aarch64.cpp"
  }
}

void replicateL_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3557 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, opnd_array(1)->constantL());
  
#line 44731 "ad_aarch64.cpp"
  }
}

void replicateFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3568 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_cpy(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44748 "ad_aarch64.cpp"
  }
}

void replicateDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3580 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_cpy(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 44765 "ad_aarch64.cpp"
  }
}

void vasrBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3594 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ B,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44783 "ad_aarch64.cpp"
  }
}

void vasrSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3606 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ H,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44801 "ad_aarch64.cpp"
  }
}

void vasrINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3618 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44819 "ad_aarch64.cpp"
  }
}

void vasrLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3630 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44837 "ad_aarch64.cpp"
  }
}

void vlslBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3642 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ B,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44855 "ad_aarch64.cpp"
  }
}

void vlslSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3654 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ H,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44873 "ad_aarch64.cpp"
  }
}

void vlslINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3666 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44891 "ad_aarch64.cpp"
  }
}

void vlslLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3678 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44909 "ad_aarch64.cpp"
  }
}

void vlsrBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3690 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ B,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44927 "ad_aarch64.cpp"
  }
}

void vlsrSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3702 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ H,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44945 "ad_aarch64.cpp"
  }
}

void vlsrINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3714 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44963 "ad_aarch64.cpp"
  }
}

void vlsrLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3726 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shift */));
  
#line 44981 "ad_aarch64.cpp"
  }
}

void vasrB_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3738 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    if (con >= 8) con = 7;
    __ sve_asr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45006 "ad_aarch64.cpp"
  }
}

void vasrS_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3757 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    if (con >= 16) con = 15;
    __ sve_asr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45031 "ad_aarch64.cpp"
  }
}

void vasrI_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3776 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_asr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45055 "ad_aarch64.cpp"
  }
}

void vasrL_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3794 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_asr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45079 "ad_aarch64.cpp"
  }
}

void vlsrB_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3812 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    if (con >= 8) {
      __ sve_eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45108 "ad_aarch64.cpp"
  }
}

void vlsrS_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3835 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    if (con >= 16) {
      __ sve_eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45137 "ad_aarch64.cpp"
  }
}

void vlsrI_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3858 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45161 "ad_aarch64.cpp"
  }
}

void vlsrL_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3876 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con == 0) {
      __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45185 "ad_aarch64.cpp"
  }
}

void vlslB_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3894 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con >= 8) {
      __ sve_eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45209 "ad_aarch64.cpp"
  }
}

void vlslS_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3912 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    if (con >= 16) {
      __ sve_eor(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      return;
    }
    __ sve_lsl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45233 "ad_aarch64.cpp"
  }
}

void vlslI_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3930 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    __ sve_lsl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45252 "ad_aarch64.cpp"
  }
}

void vlslL_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3943 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    __ sve_lsl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), con);
  
#line 45271 "ad_aarch64.cpp"
  }
}

void vshiftcntBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3957 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45287 "ad_aarch64.cpp"
  }
}

void vshiftcntB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3957 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45303 "ad_aarch64.cpp"
  }
}

void vshiftcntSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3970 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45319 "ad_aarch64.cpp"
  }
}

void vshiftcntS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3970 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45335 "ad_aarch64.cpp"
  }
}

void vshiftcntINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3982 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45351 "ad_aarch64.cpp"
  }
}

void vshiftcntI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3982 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45367 "ad_aarch64.cpp"
  }
}

void vshiftcntLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3994 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45383 "ad_aarch64.cpp"
  }
}

void vshiftcntL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    C2_MacroAssembler _masm(&cbuf);

#line 3994 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_dup(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* cnt */));
  
#line 45399 "ad_aarch64.cpp"
  }
}

void vasrB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4007 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45419 "ad_aarch64.cpp"
  }
}

void vasrS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4020 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45439 "ad_aarch64.cpp"
  }
}

void vasrI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4033 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45459 "ad_aarch64.cpp"
  }
}

void vasrL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4046 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45479 "ad_aarch64.cpp"
  }
}

void vlslB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4059 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45499 "ad_aarch64.cpp"
  }
}

void vlslS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4072 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45519 "ad_aarch64.cpp"
  }
}

void vlslI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4085 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45539 "ad_aarch64.cpp"
  }
}

void vlslL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4098 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45559 "ad_aarch64.cpp"
  }
}

void vlsrB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45579 "ad_aarch64.cpp"
  }
}

void vlsrS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4124 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45599 "ad_aarch64.cpp"
  }
}

void vlsrI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4137 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45619 "ad_aarch64.cpp"
  }
}

void vlsrL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4150 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45639 "ad_aarch64.cpp"
  }
}

void vasrB_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4163 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 8, "invalid shift immediate");
    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45659 "ad_aarch64.cpp"
  }
}

void vasrS_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4176 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 16, "invalid shift immediate");
    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45679 "ad_aarch64.cpp"
  }
}

void vasrI_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4189 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 32, "invalid shift immediate");
    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45699 "ad_aarch64.cpp"
  }
}

void vasrL_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4202 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 64, "invalid shift immediate");
    __ sve_asr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45719 "ad_aarch64.cpp"
  }
}

void vlsrB_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4215 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 8, "invalid shift immediate");
    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45739 "ad_aarch64.cpp"
  }
}

void vlsrS_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4228 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 16, "invalid shift immediate");
    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45759 "ad_aarch64.cpp"
  }
}

void vlsrI_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4241 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 32, "invalid shift immediate");
    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45779 "ad_aarch64.cpp"
  }
}

void vlsrL_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4254 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con > 0 && con < 64, "invalid shift immediate");
    __ sve_lsr(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45799 "ad_aarch64.cpp"
  }
}

void vlslB_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4267 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con >= 0 && con < 8, "invalid shift immediate");
    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ B, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45819 "ad_aarch64.cpp"
  }
}

void vlslS_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4280 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con >= 0 && con < 16, "invalid shift immediate");
    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ H, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45839 "ad_aarch64.cpp"
  }
}

void vlslI_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4293 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con >= 0 && con < 32, "invalid shift immediate");
    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45859 "ad_aarch64.cpp"
  }
}

void vlslL_imm_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4306 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    int con = (int)opnd_array(2)->constant();
    assert(con >= 0 && con < 64, "invalid shift immediate");
    __ sve_lsl(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), con);
  
#line 45879 "ad_aarch64.cpp"
  }
}

void vsqrtFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4322 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsqrt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 45896 "ad_aarch64.cpp"
  }
}

void vsqrtDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4335 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsqrt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 45913 "ad_aarch64.cpp"
  }
}

void vsqrtF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4349 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsqrt(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ S,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 45932 "ad_aarch64.cpp"
  }
}

void vsqrtD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4362 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsqrt(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */), __ D,
            as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* pg */),
            as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src */));
  
#line 45951 "ad_aarch64.cpp"
  }
}

void vsubBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4377 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45970 "ad_aarch64.cpp"
  }
}

void vsubSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4390 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 45989 "ad_aarch64.cpp"
  }
}

void vsubINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4403 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46008 "ad_aarch64.cpp"
  }
}

void vsubLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4416 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46027 "ad_aarch64.cpp"
  }
}

void vsubFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4429 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46046 "ad_aarch64.cpp"
  }
}

void vsubDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4442 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsub(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D,
         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */),
         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46065 "ad_aarch64.cpp"
  }
}

void vsubB_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4457 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ B,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46085 "ad_aarch64.cpp"
  }
}

void vsubS_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4470 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ H,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46105 "ad_aarch64.cpp"
  }
}

void vsubI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4483 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46125 "ad_aarch64.cpp"
  }
}

void vsubL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4496 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46145 "ad_aarch64.cpp"
  }
}

void vsubF_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4509 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ S,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46165 "ad_aarch64.cpp"
  }
}

void vsubD_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4522 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fsub(as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* dst_src1 */), __ D,
            as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
            as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
  
#line 46185 "ad_aarch64.cpp"
  }
}

void vmaskcastNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst_src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4539 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // empty
  
#line 46201 "ad_aarch64.cpp"
  }
}

void vmaskcast_extendNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4554 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vmaskcast_extend(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                            Matcher::vector_length_in_bytes(this), Matcher::vector_length_in_bytes(this, opnd_array(1)));
  
#line 46218 "ad_aarch64.cpp"
  }
}

void vmaskcast_narrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4570 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vmaskcast_narrow(as_PRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                            Matcher::vector_length_in_bytes(this), Matcher::vector_length_in_bytes(this, opnd_array(1)));
  
#line 46235 "ad_aarch64.cpp"
  }
}

void vcvtBtoX_extendNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4585 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_vector_extend(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ B);
    if (to_bt == T_FLOAT || to_bt == T_DOUBLE) {
      __ sve_scvtf(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size, ptrue, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size);
    }
  
#line 46256 "ad_aarch64.cpp"
  }
}

void vcvtStoBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4604 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vector_narrow(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B,
                         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ H, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */));
  
#line 46274 "ad_aarch64.cpp"
  }
}

void vcvtStoX_extendNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4618 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_vector_extend(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ H);
    if (to_bt == T_FLOAT || to_bt == T_DOUBLE) {
      __ sve_scvtf(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size, ptrue, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), to_size);
    }
  
#line 46295 "ad_aarch64.cpp"
  }
}

void vcvtItoBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4637 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ B,
                         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 46314 "ad_aarch64.cpp"
  }
}

void vcvtItoSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4652 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vector_narrow(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ H,
                         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* tmp */));
  
#line 46332 "ad_aarch64.cpp"
  }
}

void vcvtItoLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4666 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vector_extend(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S);
  
#line 46348 "ad_aarch64.cpp"
  }
}

void vcvtItoFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4679 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_scvtf(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S);
  
#line 46364 "ad_aarch64.cpp"
  }
}

void vcvtItoDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4692 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sunpklo(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_scvtf(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D);
  
#line 46381 "ad_aarch64.cpp"
  }
}

void vcvtLtoX_narrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4706 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), to_size,
                         as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 46402 "ad_aarch64.cpp"
  }
}

void vcvtLtoFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4723 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_scvtf(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S,
                         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));

  
#line 46423 "ad_aarch64.cpp"
  }
}

void vcvtLtoDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4739 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_scvtf(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D);
  
#line 46439 "ad_aarch64.cpp"
  }
}

void vcvtFtoX_narrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4754 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_fcvtzs(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), to_size,
                         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 46461 "ad_aarch64.cpp"
  }
}

void vcvtFtoINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4771 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S);
  
#line 46477 "ad_aarch64.cpp"
  }
}

void vcvtFtoLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4784 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_sunpklo(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S);
  
#line 46494 "ad_aarch64.cpp"
  }
}

void vcvtFtoDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4798 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vector_extend(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ S);
    __ sve_fcvt(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S);
  
#line 46511 "ad_aarch64.cpp"
  }
}

void vcvtDtoX_narrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4815 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType to_bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant to_size = __ elemType_to_regVariant(to_bt);
    __ sve_fcvtzs(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), to_size,
                         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 46533 "ad_aarch64.cpp"
  }
}

void vcvtDtoLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4832 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fcvtzs(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D);
  
#line 46549 "ad_aarch64.cpp"
  }
}

void vcvtDtoFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4846 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_fcvt(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S, ptrue, as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ D);
    __ sve_vector_narrow(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ S,
                         as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* dst */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* tmp */));
  
#line 46569 "ad_aarch64.cpp"
  }
}

void extractBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4864 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), __ B, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
    __ sbfmw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */), 0U, 7U);
  
#line 46589 "ad_aarch64.cpp"
  }
}

void extractSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4880 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), __ H, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
    __ sbfmw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_Register(opnd_array(0)->reg(ra_,this)/* dst */), 0U, 15U);
  
#line 46609 "ad_aarch64.cpp"
  }
}

void extractINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4896 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
  
#line 46628 "ad_aarch64.cpp"
  }
}

void extractLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4910 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
  
#line 46647 "ad_aarch64.cpp"
  }
}

void extractFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4924 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ S, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
  
#line 46666 "ad_aarch64.cpp"
  }
}

void extractDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4938 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_extract(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ D, as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pgtmp */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), (int)(opnd_array(2)->constant()));
  
#line 46685 "ad_aarch64.cpp"
  }
}

void vtest_alltrueNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4957 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_eors(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), ptrue,
                as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ csetw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::EQ);
  
#line 46705 "ad_aarch64.cpp"
  }
}

void vtest_anytrueNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4975 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // "src2" is not used for sve.
    __ sve_ptest(ptrue, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */));
    __ csetw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::NE);
  
#line 46724 "ad_aarch64.cpp"
  }
}

void vtest_alltrue_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 4992 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), size,
                          Matcher::vector_length(this, opnd_array(1)));
    __ sve_eors(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */),
          as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ csetw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::EQ);
  
#line 46748 "ad_aarch64.cpp"
  }
}

void vtest_anytrue_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5013 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), size,
                          Matcher::vector_length(this, opnd_array(1)));
    __ sve_ands(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */),
          as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src1 */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* src2 */));
    __ csetw(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), Assembler::NE);
  
#line 46772 "ad_aarch64.cpp"
  }
}

void insertI_smallNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5040 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_index(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), size, -16, 1);
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), size, ptrue,
               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), (int)(opnd_array(3)->constant()) - 16);
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), size, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46798 "ad_aarch64.cpp"
  }
}

void insertF_smallNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5063 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_index(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S, -16, 1);
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), __ S, ptrue,
               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), (int)(opnd_array(3)->constant()) - 16);
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46822 "ad_aarch64.cpp"
  }
}

void insertINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5087 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_index(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), size, 0, 1);
    __ sve_dup(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), size, (int)(opnd_array(3)->constant()));
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), size, ptrue,
               as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */));
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), size, as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46850 "ad_aarch64.cpp"
  }
}

void insertLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5111 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_index(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D, -16, 1);
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), __ D, ptrue,
               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), (int)(opnd_array(3)->constant()) - 16);
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), as_Register(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46874 "ad_aarch64.cpp"
  }
}

void insertDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5132 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_index(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D, -16, 1);
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), __ D, ptrue,
               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), (int)(opnd_array(3)->constant()) - 16);
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ D, as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* pgtmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46898 "ad_aarch64.cpp"
  }
}

void insertFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// val
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// dst
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5154 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_index(as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), __ S, 0, 1);
    __ sve_dup(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S, (int)(opnd_array(3)->constant()));
    __ sve_cmp(Assembler::EQ, as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), __ S, ptrue,
               as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* tmp1 */), as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */));
    __ sve_orr(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_cpy(as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* dst */), __ S,
               as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* val */));
  
#line 46927 "ad_aarch64.cpp"
  }
}

void loadshuffleNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5175 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    if (bt == T_BYTE) {
      if (as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */) != as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */)) {
        __ sve_orr(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                   as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
      }
    } else {
      __ sve_vector_extend(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */),  __ elemType_to_regVariant(bt),
                           as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), __ B);
    }
  
#line 46952 "ad_aarch64.cpp"
  }
}

void rearrangeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shuffle
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5198 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_tbl(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), size,
               as_FloatRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* shuffle */));
  
#line 46972 "ad_aarch64.cpp"
  }
}

void gatherINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5217 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_ld1w_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), ptrue,
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 46990 "ad_aarch64.cpp"
  }
}

void gatherLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5232 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_uunpklo(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */), __ D, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
    __ sve_ld1d_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), ptrue, as_Register(opnd_array(1)->base(ra_,this,idx1)),
                       as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47009 "ad_aarch64.cpp"
  }
}

void gatherI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5251 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), __ S, Matcher::vector_length(this));
    __ sve_ld1w_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47029 "ad_aarch64.cpp"
  }
}

void gatherL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5268 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */), __ D,
                          Matcher::vector_length(this));
    __ sve_uunpklo(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */), __ D, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
    __ sve_ld1d_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47051 "ad_aarch64.cpp"
  }
}

void gatherI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5288 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_ld1w_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47070 "ad_aarch64.cpp"
  }
}

void gatherL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5303 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_uunpklo(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */), __ D, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
    __ sve_ld1d_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47090 "ad_aarch64.cpp"
  }
}

void gatherI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5322 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ S,
                          Matcher::vector_length(this));
    __ sve_and(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_ld1w_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47114 "ad_aarch64.cpp"
  }
}

void gatherL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// idx
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// pg
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5342 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ D, Matcher::vector_length(this));
    __ sve_and(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
               as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* pg */));
    __ sve_uunpklo(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */), __ D, as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
    __ sve_ld1d_gather(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
                       as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* idx */));
  
#line 47138 "ad_aarch64.cpp"
  }
}

void scatterINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5363 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_st1w_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), ptrue,
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47157 "ad_aarch64.cpp"
  }
}

void scatterLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5378 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_uunpklo(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
    __ sve_st1d_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), ptrue,
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47177 "ad_aarch64.cpp"
  }
}

void scatterI_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5397 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_st1w_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47199 "ad_aarch64.cpp"
  }
}

void scatterL_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5415 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_uunpklo(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
    __ sve_st1d_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* ptmp */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47222 "ad_aarch64.cpp"
  }
}

void scatterI_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5435 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_st1w_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47242 "ad_aarch64.cpp"
  }
}

void scatterL_maskedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5450 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_uunpklo(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
    __ sve_st1d_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47263 "ad_aarch64.cpp"
  }
}

void scatterI_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5469 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ S,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */));
    __ sve_st1w_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47288 "ad_aarch64.cpp"
  }
}

void scatterL_masked_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// idx
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pg
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5489 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), __ D,
                          Matcher::vector_length(this, opnd_array(2)));
    __ sve_and(as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
               as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */), as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pg */));
    __ sve_uunpklo(as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */), __ D, as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
    __ sve_st1d_scatter(as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* src */), as_PRegister(opnd_array(5)->reg(ra_,this,idx5)/* ptmp */),
                        as_Register(opnd_array(1)->base(ra_,this,idx1)), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* idx */));
  
#line 47314 "ad_aarch64.cpp"
  }
}

void loadconBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5509 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_index(as_FloatRegister(opnd_array(0)->reg(ra_,this)/* dst */), __ B, 0, 1);
  
#line 47330 "ad_aarch64.cpp"
  }
}

void stringL_indexof_char_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ch
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ztmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ztmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// pgtmp
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5528 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ string_indexof_char_sve(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* ch */, opnd_array(0)->as_Register(ra_,this)/* result */,
                               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* ztmp1 */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* ztmp2 */),
                               as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), as_PRegister(opnd_array(7)->reg(ra_,this,idx7)/* ptmp */), true /* isL */);
  
#line 47354 "ad_aarch64.cpp"
  }
}

void stringU_indexof_char_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ch
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// ztmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// ztmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// pgtmp
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5546 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ string_indexof_char_sve(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* ch */, opnd_array(0)->as_Register(ra_,this)/* result */,
                               as_FloatRegister(opnd_array(4)->reg(ra_,this,idx4)/* ztmp1 */), as_FloatRegister(opnd_array(5)->reg(ra_,this,idx5)/* ztmp2 */),
                               as_PRegister(opnd_array(6)->reg(ra_,this,idx6)/* pgtmp */), as_PRegister(opnd_array(7)->reg(ra_,this,idx7)/* ptmp */), false /* isL */);
  
#line 47378 "ad_aarch64.cpp"
  }
}

void string_compareLL_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// vtmp1
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// vtmp2
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// pgtmp1
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// pgtmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5572 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_FloatRegister(ra_,this,idx7)/* vtmp1 */, opnd_array(8)->as_FloatRegister(ra_,this,idx8)/* vtmp2 */, fnoreg,
                      as_PRegister(opnd_array(9)->reg(ra_,this,idx9)/* pgtmp1 */), as_PRegister(opnd_array(10)->reg(ra_,this,idx10)/* pgtmp2 */),
                      StrIntrinsicNode::LL);
  
#line 47409 "ad_aarch64.cpp"
  }
}

void string_compareLU_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// vtmp1
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// vtmp2
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// pgtmp1
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// pgtmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5595 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_FloatRegister(ra_,this,idx7)/* vtmp1 */, opnd_array(8)->as_FloatRegister(ra_,this,idx8)/* vtmp2 */, fnoreg,
                      as_PRegister(opnd_array(9)->reg(ra_,this,idx9)/* pgtmp1 */), as_PRegister(opnd_array(10)->reg(ra_,this,idx10)/* pgtmp2 */),
                      StrIntrinsicNode::LU);
  
#line 47440 "ad_aarch64.cpp"
  }
}

void string_compareUL_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// vtmp1
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// vtmp2
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// pgtmp1
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// pgtmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5618 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_FloatRegister(ra_,this,idx7)/* vtmp1 */, opnd_array(8)->as_FloatRegister(ra_,this,idx8)/* vtmp2 */, fnoreg,
                      as_PRegister(opnd_array(9)->reg(ra_,this,idx9)/* pgtmp1 */), as_PRegister(opnd_array(10)->reg(ra_,this,idx10)/* pgtmp2 */),
                      StrIntrinsicNode::UL);
  
#line 47471 "ad_aarch64.cpp"
  }
}

void string_compareUU_sveNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp2
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// vtmp1
  unsigned idx8 = idx7 + opnd_array(7)->num_edges(); 	// vtmp2
  unsigned idx9 = idx8 + opnd_array(8)->num_edges(); 	// pgtmp1
  unsigned idx10 = idx9 + opnd_array(9)->num_edges(); 	// pgtmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5641 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    // Count is in 8-bit bytes; non-Compact chars are 16 bits.
    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_Register(ra_,this,idx5)/* tmp1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* tmp2 */,
                      opnd_array(7)->as_FloatRegister(ra_,this,idx7)/* vtmp1 */, opnd_array(8)->as_FloatRegister(ra_,this,idx8)/* vtmp2 */, fnoreg,
                      as_PRegister(opnd_array(9)->reg(ra_,this,idx9)/* pgtmp1 */), as_PRegister(opnd_array(10)->reg(ra_,this,idx10)/* pgtmp2 */),
                      StrIntrinsicNode::UU);
  
#line 47502 "ad_aarch64.cpp"
  }
}

void vmask_truecountNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5660 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_cntp(opnd_array(0)->as_Register(ra_,this)/* dst */, size, ptrue, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 47520 "ad_aarch64.cpp"
  }
}

void vmask_firsttrueNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5675 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_brkb(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), ptrue, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), false);
    __ sve_cntp(opnd_array(0)->as_Register(ra_,this)/* dst */, size, ptrue, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */));
  
#line 47540 "ad_aarch64.cpp"
  }
}

void vmask_lasttrueNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5691 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    __ sve_vmask_lasttrue(opnd_array(0)->as_Register(ra_,this)/* dst */, bt, as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */));
  
#line 47558 "ad_aarch64.cpp"
  }
}

void vmask_truecount_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5705 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), size, Matcher::vector_length(this, opnd_array(1)));
    __ sve_cntp(opnd_array(0)->as_Register(ra_,this)/* dst */, size, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
  
#line 47578 "ad_aarch64.cpp"
  }
}

void vmask_firsttrue_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ptmp1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ptmp2
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5721 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp1 */), size,
                          Matcher::vector_length(this, opnd_array(1)));
    __ sve_brkb(as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp2 */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp1 */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */), false);
    __ sve_cntp(opnd_array(0)->as_Register(ra_,this)/* dst */, size, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp1 */), as_PRegister(opnd_array(3)->reg(ra_,this,idx3)/* ptmp2 */));
  
#line 47601 "ad_aarch64.cpp"
  }
}

void vmask_lasttrue_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ptmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5739 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this, opnd_array(1));
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo_zr_imm(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), size, Matcher::vector_length(this, opnd_array(1)));
    __ sve_and(as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), ptrue, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */));
    __ sve_vmask_lasttrue(opnd_array(0)->as_Register(ra_,this)/* dst */, bt, as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */), as_PRegister(opnd_array(2)->reg(ra_,this,idx2)/* ptmp */));
  
#line 47622 "ad_aarch64.cpp"
  }
}

void vmask_tolongNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// vtmp1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// vtmp2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// pgtmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5756 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    __ sve_vmask_tolong(as_Register(opnd_array(0)->reg(ra_,this)/* dst */), as_PRegister(opnd_array(1)->reg(ra_,this,idx1)/* src */),
                        Matcher::vector_element_basic_type(this, opnd_array(1)),
                        Matcher::vector_length(this, opnd_array(1)),
                        as_FloatRegister(opnd_array(2)->reg(ra_,this,idx2)/* vtmp1 */), as_FloatRegister(opnd_array(3)->reg(ra_,this,idx3)/* vtmp2 */),
                        as_PRegister(opnd_array(4)->reg(ra_,this,idx4)/* pgtmp */));
  
#line 47645 "ad_aarch64.cpp"
  }
}

void vmask_genNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// len
  {
    C2_MacroAssembler _masm(&cbuf);

#line 5772 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64_sve.ad"

    BasicType bt = Matcher::vector_element_basic_type(this);
    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);
    __ sve_whilelo(as_PRegister(opnd_array(0)->reg(ra_,this)/* pg */), size, zr, as_Register(opnd_array(1)->reg(ra_,this,idx1)/* len */));
  
#line 47663 "ad_aarch64.cpp"
  }
}

void compareAndSwapP_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {

#line 31 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ false, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47686 "ad_aarch64.cpp"
  }
}

void compareAndSwapN_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 77 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, /*acquire*/ false, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47707 "ad_aarch64.cpp"
  }
}

void compareAndSwapPAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {

#line 40 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    MacroAssembler _masm(&cbuf);
    guarantee(opnd_array(1)->index(ra_,this,idx1) == -1 && opnd_array(1)->disp(ra_,this,idx1) == 0, "impossible encoding");
    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ true, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47730 "ad_aarch64.cpp"
  }
}

void compareAndSwapNAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 115 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, /*acquire*/ true, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47751 "ad_aarch64.cpp"
  }
}

void compareAndExchangeN_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 131 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(5)->as_Register(ra_,this,idx5)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ false, /*release*/ true, /*is_cae*/ true, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 47774 "ad_aarch64.cpp"
  }
}

void compareAndExchangeP_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 147 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(5)->as_Register(ra_,this,idx5)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ false, /*release*/ true, /*is_cae*/ true, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 47797 "ad_aarch64.cpp"
  }
}

void compareAndExchangeNAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 164 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(5)->as_Register(ra_,this,idx5)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ true, /*release*/ true, /*is_cae*/ true, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 47820 "ad_aarch64.cpp"
  }
}

void compareAndExchangePAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 181 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(5)->as_Register(ra_,this,idx5)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ true, /*release*/ true, /*is_cae*/ true, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
  
#line 47843 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapN_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 198 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    // Weak is not currently supported by ShenandoahBarrierSet::cmpxchg_oop
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ false, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47866 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapP_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 215 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    // Weak is not currently supported by ShenandoahBarrierSet::cmpxchg_oop
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ false, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47889 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapNAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 234 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    // Weak is not currently supported by ShenandoahBarrierSet::cmpxchg_oop
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ true, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47912 "ad_aarch64.cpp"
  }
}

void weakCompareAndSwapPAcq_shenandoahNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp
  {
    C2_MacroAssembler _masm(&cbuf);

#line 253 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/shenandoah/shenandoah_aarch64.ad"

    Register tmp = opnd_array(4)->as_Register(ra_,this,idx4)/* tmp */;
    __ mov(tmp, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */); // Must not clobber oldval.
    // Weak is not currently supported by ShenandoahBarrierSet::cmpxchg_oop
    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, tmp, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */,
                                                   /*acquire*/ true, /*release*/ true, /*is_cae*/ false, opnd_array(0)->as_Register(ra_,this)/* res */);
  
#line 47935 "ad_aarch64.cpp"
  }
}

void zLoadPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 64 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    const Address ref_addr = mem2address(opnd_array(1)->opcode(), as_Register(opnd_array(1)->base(ra_,this,idx1)), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1));
    __ ldr(opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, ref_addr);
    z_load_barrier(_masm, this, ref_addr, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, rscratch2 /* tmp */, barrier_data());
  
#line 47954 "ad_aarch64.cpp"
  }
}

void zLoadPVolatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    C2_MacroAssembler _masm(&cbuf);

#line 84 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    __ ldar(opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */);
    z_load_barrier(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, rscratch2 /* tmp */, barrier_data());
  
#line 47972 "ad_aarch64.cpp"
  }
}

void zCompareAndSwapPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 103 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               false /* acquire */, true /* release */, false /* weak */, rscratch2);
    __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, rscratch2);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), rscratch2 /* ref */, rscratch1 /* tmp */);
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 false /* acquire */, true /* release */, false /* weak */, rscratch2);
      __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
      __ bind(good);
    }
  
#line 48005 "ad_aarch64.cpp"
  }
}

void zCompareAndSwapP_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 103 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               false /* acquire */, true /* release */, false /* weak */, rscratch2);
    __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, rscratch2);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), rscratch2 /* ref */, rscratch1 /* tmp */);
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 false /* acquire */, true /* release */, false /* weak */, rscratch2);
      __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
      __ bind(good);
    }
  
#line 48038 "ad_aarch64.cpp"
  }
}

void zCompareAndSwapPAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 135 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               true /* acquire */, true /* release */, false /* weak */, rscratch2);
    __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, rscratch2);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), rscratch2 /* ref */, rscratch1 /* tmp */ );
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 true /* acquire */, true /* release */, false /* weak */, rscratch2);
      __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
      __ bind(good);
    }
  
#line 48071 "ad_aarch64.cpp"
  }
}

void zCompareAndSwapPAcq_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 135 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               true /* acquire */, true /* release */, false /* weak */, rscratch2);
    __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, rscratch2);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), rscratch2 /* ref */, rscratch1 /* tmp */ );
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 true /* acquire */, true /* release */, false /* weak */, rscratch2);
      __ cset(opnd_array(4)->as_Register(ra_,this,idx4)/* res */, Assembler::EQ);
      __ bind(good);
    }
  
#line 48104 "ad_aarch64.cpp"
  }
}

void zCompareAndExchangePNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 165 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               false /* acquire */, true /* release */, false /* weak */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), opnd_array(4)->as_Register(ra_,this,idx4)/* res */, rscratch1 /* tmp */);
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 false /* acquire */, true /* release */, false /* weak */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
      __ bind(good);
    }
  
#line 48135 "ad_aarch64.cpp"
  }
}

void zCompareAndExchangePAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// res
  {
    C2_MacroAssembler _masm(&cbuf);

#line 193 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    guarantee(opnd_array(1)->index(ra_,this,idx1)== -1 && opnd_array(1)->disp(ra_,this,idx1)== 0, "impossible encoding");
    __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
               true /* acquire */, true /* release */, false /* weak */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
    if (barrier_data() != ZLoadBarrierElided) {
      Label good;
      __ ldr(rscratch1, Address(rthread, ZThreadLocalData::address_bad_mask_offset()));
      __ andr(rscratch1, rscratch1, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
      __ cbz(rscratch1, good);
      z_load_barrier_slow_path(_masm, this, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */), opnd_array(4)->as_Register(ra_,this,idx4)/* res */, rscratch1 /* tmp */);
      __ cmpxchg(opnd_array(1)->as_Register(ra_,this,idx1)/* mem */, opnd_array(2)->as_Register(ra_,this,idx2)/* oldval */, opnd_array(3)->as_Register(ra_,this,idx3)/* newval */, Assembler::xword,
                 true /* acquire */, true /* release */, false /* weak */, opnd_array(4)->as_Register(ra_,this,idx4)/* res */);
      __ bind(good);
    }
  
#line 48166 "ad_aarch64.cpp"
  }
}

void zGetAndSetPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// prev
  {
    C2_MacroAssembler _masm(&cbuf);

#line 221 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    __ atomic_xchg(opnd_array(3)->as_Register(ra_,this,idx3)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */);
    z_load_barrier(_masm, this, Address(noreg, 0), opnd_array(3)->as_Register(ra_,this,idx3)/* prev */, rscratch2 /* tmp */, barrier_data());
  
#line 48185 "ad_aarch64.cpp"
  }
}

void zGetAndSetPAcqNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newv
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// prev
  {
    C2_MacroAssembler _masm(&cbuf);

#line 238 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad"

    __ atomic_xchgal(opnd_array(3)->as_Register(ra_,this,idx3)/* prev */, opnd_array(2)->as_Register(ra_,this,idx2)/* newv */, opnd_array(1)->as_Register(ra_,this,idx1)/* mem */);
    z_load_barrier(_masm, this, Address(noreg, 0), opnd_array(3)->as_Register(ra_,this,idx3)/* prev */, rscratch2 /* tmp */, barrier_data());
  
#line 48204 "ad_aarch64.cpp"
  }
}

const MachOper* loadBNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadB2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUBNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUB2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadSNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadS2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUSNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadINode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUI2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadLNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadRangeNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadPNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadNNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadNKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadFNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadDNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmCM0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmCM0_orderedNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeBNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmB0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeCNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmC0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeINode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmI0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeLNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmL0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storePNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeimmP0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeNNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmN0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeFNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeDNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeNKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* prefetchallocNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadB_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadB2L_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUB_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUB2L_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadS_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2L_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadS2L_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUI2L_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadL_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadP_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadN_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadF_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadD_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeB_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeC_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeI_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeL_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeP_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeN_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeF_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeD_volatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* cacheWBNode::memory_operand() const { return _opnds[1]; }
const MachOper* popCountI_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* popCountL_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadPLockedNode::memory_operand() const { return _opnds[1]; }
const MachOper* storePConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeLConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeIConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapBNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapSNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapINode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapLNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapPNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapNNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapBAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapSAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapIAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapLAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapPAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapNAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeBNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeSNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeINode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeLNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeNNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangePNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeBAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeSAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeIAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeLAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeNAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangePAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapBNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapSNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapINode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapLNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapNNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapPNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapBAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapSAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapIAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapLAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapNAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapPAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setINode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setLNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setNNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setPNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setIAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setLAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setNAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_setPAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addL_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLiNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLi_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addINode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addI_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addIiNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addIi_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addL_no_resAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLiAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addLi_no_resAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addIAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addI_no_resAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addIiAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* get_and_addIi_no_resAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV2Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV4Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV8Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV16Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV2Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV4Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV8Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV16Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadVNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeVNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV2_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV2_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV4_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV4_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV8_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV8_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV16_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV16_vregNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* vloadmask_loadVNode::memory_operand() const { return _opnds[1]; }
const MachOper* vloadmask_loadV_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV_vstoremaskNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV_vstoremask_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherINode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherLNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherI_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherL_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherI_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherL_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherI_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* gatherL_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterINode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterLNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterI_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterL_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterI_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterL_maskedNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterI_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* scatterL_masked_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapP_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapN_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapPAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapNAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeN_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeP_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeNAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangePAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapN_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapP_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapNAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* weakCompareAndSwapPAcq_shenandoahNode::memory_operand() const { return _opnds[1]; }
const MachOper* zLoadPNode::memory_operand() const { return _opnds[1]; }
const MachOper* zLoadPVolatileNode::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndSwapPNode::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndSwapP_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndSwapPAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndSwapPAcq_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndExchangePNode::memory_operand() const { return _opnds[1]; }
const MachOper* zCompareAndExchangePAcqNode::memory_operand() const { return _opnds[1]; }
const MachOper* zGetAndSetPNode::memory_operand() const { return _opnds[1]; }
const MachOper* zGetAndSetPAcqNode::memory_operand() const { return _opnds[1]; }


const bool Matcher::has_match_rule(int opcode) {
  assert(_last_machine_leaf < opcode && opcode < _last_opcode, "opcode in range");
  return _hasMatchRule[opcode];
}

const bool Matcher::_hasMatchRule[_last_opcode] = {
    false,  // Node
    false,  // Set
    false,  // RegN
    false,  // RegI
    false,  // RegP
    false,  // RegF
    false,  // RegD
    false,  // RegL
    false,  // VecA
    false,  // VecS
    false,  // VecD
    false,  // VecX
    false,  // VecY
    false,  // VecZ
    false,  // RegVectMask
    false,  // RegFlags
    false,  // _last_machine_leaf
    true ,  // AbsD
    true ,  // AbsF
    true ,  // AbsI
    true ,  // AbsL
    true ,  // AddD
    true ,  // AddF
    true ,  // AddI
    true ,  // AddL
    true ,  // AddP
    false,  // Allocate
    false,  // AllocateArray
    true ,  // AndI
    true ,  // AndL
    false,  // ArrayCopy
    true ,  // AryEq
    false,  // AtanD
    true ,  // Binary
    false,  // Blackhole
    true ,  // Bool
    false,  // BoxLock
    true ,  // ReverseBytesI
    true ,  // ReverseBytesL
    true ,  // ReverseBytesUS
    true ,  // ReverseBytesS
    false,  // CProj
    true ,  // CacheWB
    true ,  // CacheWBPreSync
    true ,  // CacheWBPostSync
    true ,  // CallDynamicJava
    false,  // CallJava
    true ,  // CallLeaf
    true ,  // CallLeafNoFP
    false,  // CallLeafVector
    true ,  // CallRuntime
    true ,  // CallNative
    true ,  // CallStaticJava
    true ,  // CastDD
    true ,  // CastFF
    true ,  // CastII
    true ,  // CastLL
    true ,  // CastVV
    true ,  // CastX2P
    true ,  // CastP2X
    true ,  // CastPP
    false,  // Catch
    false,  // CatchProj
    true ,  // CheckCastPP
    true ,  // ClearArray
    false,  // ConstraintCast
    true ,  // CMoveD
    false,  // CMoveVD
    true ,  // CMoveF
    false,  // CMoveVF
    true ,  // CMoveI
    true ,  // CMoveL
    true ,  // CMoveP
    true ,  // CMoveN
    true ,  // CmpN
    true ,  // CmpD
    true ,  // CmpD3
    true ,  // CmpF
    true ,  // CmpF3
    true ,  // CmpI
    true ,  // CmpL
    true ,  // CmpL3
    true ,  // CmpLTMask
    true ,  // CmpP
    true ,  // CmpU
    true ,  // CmpUL
    true ,  // CompareAndSwapB
    true ,  // CompareAndSwapS
    true ,  // CompareAndSwapI
    true ,  // CompareAndSwapL
    true ,  // CompareAndSwapP
    true ,  // CompareAndSwapN
    true ,  // WeakCompareAndSwapB
    true ,  // WeakCompareAndSwapS
    true ,  // WeakCompareAndSwapI
    true ,  // WeakCompareAndSwapL
    true ,  // WeakCompareAndSwapP
    true ,  // WeakCompareAndSwapN
    true ,  // CompareAndExchangeB
    true ,  // CompareAndExchangeS
    true ,  // CompareAndExchangeI
    true ,  // CompareAndExchangeL
    true ,  // CompareAndExchangeP
    true ,  // CompareAndExchangeN
    false,  // GetAndAddB
    false,  // GetAndAddS
    true ,  // GetAndAddI
    true ,  // GetAndAddL
    false,  // GetAndSetB
    false,  // GetAndSetS
    true ,  // GetAndSetI
    true ,  // GetAndSetL
    true ,  // GetAndSetP
    true ,  // GetAndSetN
    false,  // Con
    true ,  // ConN
    true ,  // ConNKlass
    true ,  // ConD
    true ,  // ConF
    true ,  // ConI
    true ,  // ConL
    true ,  // ConP
    true ,  // Conv2B
    true ,  // ConvD2F
    true ,  // ConvD2I
    true ,  // ConvD2L
    true ,  // ConvF2D
    true ,  // ConvF2I
    true ,  // ConvF2L
    true ,  // ConvI2D
    true ,  // ConvI2F
    true ,  // ConvI2L
    true ,  // ConvL2D
    true ,  // ConvL2F
    true ,  // ConvL2I
    false,  // CountedLoop
    true ,  // CountedLoopEnd
    false,  // OuterStripMinedLoop
    false,  // OuterStripMinedLoopEnd
    false,  // LongCountedLoop
    false,  // LongCountedLoopEnd
    true ,  // CountLeadingZerosI
    true ,  // CountLeadingZerosL
    true ,  // CountTrailingZerosI
    true ,  // CountTrailingZerosL
    true ,  // CreateEx
    true ,  // DecodeN
    true ,  // DecodeNKlass
    true ,  // DivD
    true ,  // DivF
    true ,  // DivI
    true ,  // DivL
    false,  // DivMod
    false,  // DivModI
    false,  // DivModL
    true ,  // EncodeISOArray
    true ,  // EncodeP
    true ,  // EncodePKlass
    true ,  // FastLock
    true ,  // FastUnlock
    true ,  // FmaD
    true ,  // FmaF
    true ,  // Goto
    true ,  // Halt
    true ,  // HasNegatives
    true ,  // If
    false,  // RangeCheck
    false,  // IfFalse
    false,  // IfTrue
    false,  // Initialize
    false,  // JProj
    false,  // Jump
    false,  // JumpProj
    true ,  // LShiftI
    true ,  // LShiftL
    true ,  // LoadB
    true ,  // LoadUB
    true ,  // LoadUS
    true ,  // LoadD
    false,  // LoadD_unaligned
    true ,  // LoadF
    true ,  // LoadI
    true ,  // LoadKlass
    true ,  // LoadNKlass
    true ,  // LoadL
    false,  // LoadL_unaligned
    true ,  // LoadPLocked
    true ,  // LoadP
    true ,  // LoadN
    true ,  // LoadRange
    true ,  // LoadS
    false,  // Lock
    false,  // Loop
    false,  // LoopLimit
    false,  // Mach
    false,  // MachNullCheck
    false,  // MachProj
    true ,  // MulAddS2I
    true ,  // MaxI
    false,  // MaxL
    true ,  // MaxD
    true ,  // MaxF
    true ,  // MemBarAcquire
    true ,  // LoadFence
    false,  // SetVectMaskI
    true ,  // MemBarAcquireLock
    false,  // MemBarCPUOrder
    true ,  // MemBarRelease
    true ,  // StoreFence
    true ,  // StoreStoreFence
    true ,  // MemBarReleaseLock
    true ,  // MemBarVolatile
    true ,  // MemBarStoreStore
    false,  // MergeMem
    true ,  // MinI
    false,  // MinL
    true ,  // MinF
    true ,  // MinD
    false,  // ModD
    false,  // ModF
    true ,  // ModI
    true ,  // ModL
    true ,  // MoveI2F
    true ,  // MoveF2I
    true ,  // MoveL2D
    true ,  // MoveD2L
    true ,  // MulD
    true ,  // MulF
    true ,  // MulHiL
    false,  // UMulHiL
    true ,  // MulI
    true ,  // MulL
    false,  // Multi
    false,  // NegI
    false,  // NegL
    true ,  // NegD
    true ,  // NegF
    false,  // NeverBranch
    true ,  // OnSpinWait
    false,  // Opaque1
    false,  // OpaqueLoopInit
    false,  // OpaqueLoopStride
    false,  // Opaque2
    false,  // Opaque3
    false,  // Opaque4
    false,  // ProfileBoolean
    true ,  // OrI
    true ,  // OrL
    true ,  // OverflowAddI
    true ,  // OverflowSubI
    true ,  // OverflowMulI
    true ,  // OverflowAddL
    true ,  // OverflowSubL
    true ,  // OverflowMulL
    false,  // PCTable
    false,  // Parm
    true ,  // PartialSubtypeCheck
    false,  // SubTypeCheck
    false,  // Phi
    true ,  // PopCountI
    true ,  // PopCountL
    true ,  // PopCountVI
    true ,  // PrefetchAllocation
    false,  // Proj
    true ,  // RShiftI
    true ,  // RShiftL
    false,  // Region
    true ,  // Rethrow
    true ,  // Return
    false,  // Root
    false,  // RoundDouble
    true ,  // RoundDoubleMode
    true ,  // RoundDoubleModeV
    false,  // RoundFloat
    true ,  // RotateLeft
    false,  // RotateLeftV
    true ,  // RotateRight
    false,  // RotateRightV
    true ,  // SafePoint
    false,  // SafePointScalarObject
    true ,  // ShenandoahCompareAndExchangeP
    true ,  // ShenandoahCompareAndExchangeN
    true ,  // ShenandoahCompareAndSwapN
    true ,  // ShenandoahCompareAndSwapP
    true ,  // ShenandoahWeakCompareAndSwapN
    true ,  // ShenandoahWeakCompareAndSwapP
    false,  // ShenandoahIUBarrier
    false,  // ShenandoahLoadReferenceBarrier
    false,  // SCMemProj
    true ,  // CopySignD
    true ,  // CopySignF
    true ,  // SignumD
    true ,  // SignumF
    true ,  // SqrtD
    true ,  // SqrtF
    false,  // Start
    false,  // StartOSR
    true ,  // StoreB
    true ,  // StoreC
    true ,  // StoreCM
    true ,  // StorePConditional
    true ,  // StoreIConditional
    true ,  // StoreLConditional
    true ,  // StoreD
    true ,  // StoreF
    true ,  // StoreI
    true ,  // StoreL
    true ,  // StoreP
    true ,  // StoreN
    true ,  // StoreNKlass
    true ,  // StrComp
    true ,  // StrCompressedCopy
    true ,  // StrEquals
    true ,  // StrIndexOf
    true ,  // StrIndexOfChar
    true ,  // StrInflatedCopy
    true ,  // SubD
    true ,  // SubF
    true ,  // SubI
    true ,  // SubL
    true ,  // TailCall
    true ,  // TailJump
    false,  // MacroLogicV
    true ,  // ThreadLocal
    false,  // Unlock
    false,  // URShiftB
    false,  // URShiftS
    true ,  // URShiftI
    true ,  // URShiftL
    true ,  // XorI
    true ,  // XorL
    false,  // Vector
    true ,  // AddVB
    true ,  // AddVS
    true ,  // AddVI
    true ,  // AddReductionVI
    true ,  // AddVL
    true ,  // AddReductionVL
    true ,  // AddVF
    true ,  // AddReductionVF
    true ,  // AddVD
    true ,  // AddReductionVD
    true ,  // SubVB
    true ,  // SubVS
    true ,  // SubVI
    true ,  // SubVL
    true ,  // SubVF
    true ,  // SubVD
    true ,  // MulVB
    true ,  // MulVS
    true ,  // MulVI
    true ,  // MulReductionVI
    true ,  // MulVL
    true ,  // MulReductionVL
    true ,  // MulVF
    true ,  // MulReductionVF
    true ,  // MulVD
    true ,  // MulReductionVD
    true ,  // MulAddVS2VI
    true ,  // FmaVD
    true ,  // FmaVF
    true ,  // DivVF
    true ,  // DivVD
    true ,  // AbsVB
    true ,  // AbsVS
    true ,  // AbsVI
    true ,  // AbsVL
    true ,  // AbsVF
    true ,  // AbsVD
    false,  // NegVI
    true ,  // NegVF
    true ,  // NegVD
    true ,  // SqrtVD
    true ,  // SqrtVF
    true ,  // LShiftCntV
    true ,  // RShiftCntV
    true ,  // LShiftVB
    true ,  // LShiftVS
    true ,  // LShiftVI
    true ,  // LShiftVL
    true ,  // RShiftVB
    true ,  // RShiftVS
    true ,  // RShiftVI
    true ,  // RShiftVL
    true ,  // URShiftVB
    true ,  // URShiftVS
    true ,  // URShiftVI
    true ,  // URShiftVL
    true ,  // AndV
    true ,  // AndReductionV
    true ,  // OrV
    true ,  // OrReductionV
    true ,  // XorV
    true ,  // XorReductionV
    true ,  // MinV
    true ,  // MaxV
    true ,  // MinReductionV
    true ,  // MaxReductionV
    true ,  // LoadVector
    true ,  // LoadVectorGather
    true ,  // LoadVectorGatherMasked
    true ,  // StoreVector
    true ,  // StoreVectorScatter
    true ,  // StoreVectorScatterMasked
    true ,  // LoadVectorMasked
    true ,  // StoreVectorMasked
    false,  // VectorCmpMasked
    true ,  // VectorMaskGen
    false,  // VectorMaskOp
    true ,  // VectorMaskTrueCount
    true ,  // VectorMaskFirstTrue
    true ,  // VectorMaskLastTrue
    true ,  // VectorMaskToLong
    false,  // VectorLongToMask
    false,  // Pack
    false,  // PackB
    false,  // PackS
    false,  // PackI
    false,  // PackL
    false,  // PackF
    false,  // PackD
    false,  // Pack2L
    false,  // Pack2D
    true ,  // ReplicateB
    true ,  // ReplicateS
    true ,  // ReplicateI
    true ,  // ReplicateL
    true ,  // ReplicateF
    true ,  // ReplicateD
    false,  // Extract
    true ,  // ExtractB
    false,  // ExtractUB
    false,  // ExtractC
    true ,  // ExtractS
    true ,  // ExtractI
    true ,  // ExtractL
    true ,  // ExtractF
    true ,  // ExtractD
    false,  // Digit
    false,  // LowerCase
    false,  // UpperCase
    false,  // Whitespace
    false,  // VectorBox
    false,  // VectorBoxAllocate
    false,  // VectorUnbox
    false,  // VectorMaskWrapper
    true ,  // VectorMaskCmp
    true ,  // VectorMaskCast
    true ,  // VectorTest
    true ,  // VectorBlend
    true ,  // VectorRearrange
    true ,  // VectorLoadMask
    true ,  // VectorLoadShuffle
    true ,  // VectorLoadConst
    true ,  // VectorStoreMask
    true ,  // VectorReinterpret
    false,  // VectorCast
    true ,  // VectorCastB2X
    true ,  // VectorCastS2X
    true ,  // VectorCastI2X
    true ,  // VectorCastL2X
    true ,  // VectorCastF2X
    true ,  // VectorCastD2X
    true ,  // VectorInsert
    true ,  // MaskAll
    true ,  // AndVMask
    true ,  // OrVMask
    true    // XorVMask
};


int Compile::sync_stack_slots() const { return 2; }

uint Matcher::stack_alignment_in_bytes() { return StackAlignmentInBytes; }

OptoReg::Name Matcher::return_addr() const { return OptoReg::stack2reg(- 2 +
              align_up((Compile::current()->in_preserve_stack_slots() +
                        Compile::current()->fixed_slots()),
                       stack_alignment_in_slots())); }

uint Compile::varargs_C_out_slots_killed() const { return frame::arg_reg_save_area_bytes/BytesPerInt; }

OptoRegPair Matcher::return_value(uint ideal_reg) {

#line 4146 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // TODO do we allow ideal_reg == Op_RegN???
    assert(ideal_reg >= Op_RegI && ideal_reg <= Op_RegL,
           "only return normal values");

    static const int lo[Op_RegL + 1] = { // enum name
      0,                                 // Op_Node
      0,                                 // Op_Set
      R0_num,                            // Op_RegN
      R0_num,                            // Op_RegI
      R0_num,                            // Op_RegP
      V0_num,                            // Op_RegF
      V0_num,                            // Op_RegD
      R0_num                             // Op_RegL
    };

    static const int hi[Op_RegL + 1] = { // enum name
      0,                                 // Op_Node
      0,                                 // Op_Set
      OptoReg::Bad,                      // Op_RegN
      OptoReg::Bad,                      // Op_RegI
      R0_H_num,                          // Op_RegP
      OptoReg::Bad,                      // Op_RegF
      V0_H_num,                          // Op_RegD
      R0_H_num                           // Op_RegL
    };

    return OptoRegPair(hi[ideal_reg], lo[ideal_reg]);
  
#line 48923 "ad_aarch64.cpp"

}

OptoRegPair Matcher::c_return_value(uint ideal_reg) {

#line 4146 "/priv/d038402/git/reinrich/jdk/src/hotspot/cpu/aarch64/aarch64.ad"

    // TODO do we allow ideal_reg == Op_RegN???
    assert(ideal_reg >= Op_RegI && ideal_reg <= Op_RegL,
           "only return normal values");

    static const int lo[Op_RegL + 1] = { // enum name
      0,                                 // Op_Node
      0,                                 // Op_Set
      R0_num,                            // Op_RegN
      R0_num,                            // Op_RegI
      R0_num,                            // Op_RegP
      V0_num,                            // Op_RegF
      V0_num,                            // Op_RegD
      R0_num                             // Op_RegL
    };

    static const int hi[Op_RegL + 1] = { // enum name
      0,                                 // Op_Node
      0,                                 // Op_Set
      OptoReg::Bad,                      // Op_RegN
      OptoReg::Bad,                      // Op_RegI
      R0_H_num,                          // Op_RegP
      OptoReg::Bad,                      // Op_RegF
      V0_H_num,                          // Op_RegD
      R0_H_num                           // Op_RegL
    };

    return OptoRegPair(hi[ideal_reg], lo[ideal_reg]);
  
#line 48959 "ad_aarch64.cpp"

}

OptoReg::Name Matcher::inline_cache_reg() { return OptoReg::Name(R12_num); }

int Matcher::inline_cache_reg_encode() { return _regEncode[inline_cache_reg()]; }

OptoReg::Name Matcher::interpreter_frame_pointer_reg() { return OptoReg::Name(R29_num); }

OptoReg::Name Matcher::c_frame_pointer() const { return OptoReg::Name(R31_num); }

// Number of callee-save + always-save registers
int  Matcher::number_of_saved_registers() {
  return 0;
};

bool Compile::needs_deep_clone_jvms() { return false; }

// Check consistency of C++ compilation with ADLC options:
// Check adlc -DLINUX=1
#ifndef LINUX
#  error "LINUX must be defined"
#endif // LINUX
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DAARCH64=1
#ifndef AARCH64
#  error "AARCH64 must be defined"
#endif // AARCH64
// Check adlc -D_LP64=1
#ifndef _LP64
#  error "_LP64 must be defined"
#endif // _LP64
